(function (f) {
    if (typeof exports === "object" && typeof module !== "undefined") {
        module.exports = f()
    } else if (typeof define === "function" && define.amd) {
        define([], f)
    } else {
        var g;
        if (typeof window !== "undefined") {
            g = window
        } else if (typeof global !== "undefined") {
            g = global
        } else if (typeof self !== "undefined") {
            g = self
        } else {
            g = this
        }
        g.WavesAPI = f()
    }
})(function () {
    var define, module, exports;
    return (function e(t, n, r) {
        function s(o, u) {
            if (!n[o]) {
                if (!t[o]) {
                    var a = typeof require == "function" && require;
                    if (!u && a) return a(o, !0);
                    if (i) return i(o, !0);
                    var f = new Error("Cannot find module '" + o + "'");
                    throw f.code = "MODULE_NOT_FOUND", f
                }
                var l = n[o] = {exports: {}};
                t[o][0].call(l.exports, function (e) {
                    var n = t[o][1][e];
                    return s(n ? n : e)
                }, l, l.exports, e, t, n, r)
            }
            return n[o].exports
        }

        var i = typeof require == "function" && require;
        for (var o = 0; o < r.length; o++) s(r[o]);
        return s
    })({
        1: [function (require, module, exports) {
            (function (process, global) {
                (function (f) {
                    if (typeof exports === "object" && typeof module !== "undefined") {
                        module.exports = f()
                    } else if (typeof define === "function" && define.amd) {
                        define([], f)
                    } else {
                        var g;
                        if (typeof window !== "undefined") {
                            g = window
                        } else if (typeof global !== "undefined") {
                            g = global
                        } else if (typeof self !== "undefined") {
                            g = self
                        } else {
                            g = this
                        }
                        g.wavesSignatureGenerator = f()
                    }
                })(function () {
                    var define, module, exports;
                    return (function () {
                        function r(e, n, t) {
                            function o(i, f) {
                                if (!n[i]) {
                                    if (!e[i]) {
                                        var c = "function" == typeof require && require;
                                        if (!f && c) return c(i, !0);
                                        if (u) return u(i, !0);
                                        var a = new Error("Cannot find module '" + i + "'");
                                        throw a.code = "MODULE_NOT_FOUND", a
                                    }
                                    var p = n[i] = {exports: {}};
                                    e[i][0].call(p.exports, function (r) {
                                        var n = e[i][1][r];
                                        return o(n || r)
                                    }, p, p.exports, r, e, n, t)
                                }
                                return n[i].exports
                            }

                            for (var u = "function" == typeof require && require, i = 0; i < t.length; i++) o(t[i]);
                            return o
                        }

                        return r
                    })()({
                        1: [function (require, module, exports) {
                            "use strict";
                            Object.defineProperty(exports, "__esModule", {value: true});
                            const Config_1 = require("./config/Config");
                            const index_1 = require("./index");
                            const dictionary_1 = require("./dictionary");

                            class Seed {
                                constructor(phrase) {
                                    if (phrase.length < Config_1.config.get('minimalSeedLength')) {
                                        throw new Error('Your seed length is less than allowed in config');
                                    }
                                    const keys = index_1.utils.crypto.buildKeyPair(phrase);
                                    this.phrase = phrase;
                                    this.address = index_1.utils.crypto.buildRawAddress(keys.publicKey);
                                    this.keyPair = {
                                        privateKey: index_1.libs.base58.encode(keys.privateKey),
                                        publicKey: index_1.libs.base58.encode(keys.publicKey)
                                    };
                                    Object.freeze(this);
                                    Object.freeze(this.keyPair);
                                }

                                encrypt(password, encryptionRounds) {
                                    return Seed.encryptSeedPhrase(this.phrase, password, encryptionRounds);
                                }

                                static encryptSeedPhrase(seedPhrase, password, encryptionRounds = 5000) {
                                    if (password && password.length < 8) {
                                        // logger.warn('Your password may be too weak');
                                    }
                                    if (encryptionRounds < 1000) {
                                        // logger.warn('Encryption rounds may be too few');
                                    }
                                    if (seedPhrase.length < Config_1.config.get('minimalSeedLength')) {
                                        throw new Error('The seed phrase you are trying to encrypt is too short');
                                    }
                                    return index_1.utils.crypto.encryptSeed(seedPhrase, password, encryptionRounds);
                                }

                                static decryptSeedPhrase(encryptedSeedPhrase, password, encryptionRounds = 5000) {
                                    const wrongPasswordMessage = 'The password is wrong';
                                    let phrase;
                                    try {
                                        phrase = index_1.utils.crypto.decryptSeed(encryptedSeedPhrase, password, encryptionRounds);
                                    }
                                    catch (e) {
                                        throw new Error(wrongPasswordMessage);
                                    }
                                    if (phrase === '' || phrase.length < Config_1.config.get('minimalSeedLength')) {
                                        throw new Error(wrongPasswordMessage);
                                    }
                                    return phrase;
                                }

                                static create(words = 15) {
                                    const phrase = Seed._generateNewSeed(words);
                                    const minimumSeedLength = Config_1.config.get('minimalSeedLength');
                                    if (phrase.length < minimumSeedLength) {
                                        // If you see that error you should increase the number of words in the generated seed
                                        throw new Error(`The resulted seed length is less than the minimum length (${minimumSeedLength})`);
                                    }
                                    return new Seed(phrase);
                                }

                                static fromExistingPhrase(phrase) {
                                    const minimumSeedLength = Config_1.config.get('minimalSeedLength');
                                    if (phrase.length < minimumSeedLength) {
                                        // If you see that error you should increase the number of words or set it lower in the config
                                        throw new Error(`The resulted seed length is less than the minimum length (${minimumSeedLength})`);
                                    }
                                    return new Seed(phrase);
                                }

                                static _generateNewSeed(length) {
                                    const random = index_1.utils.crypto.generateRandomUint32Array(length);
                                    const wordCount = dictionary_1.default.length;
                                    const phrase = [];
                                    for (let i = 0; i < length; i++) {
                                        const wordIndex = random[i] % wordCount;
                                        phrase.push(dictionary_1.default[wordIndex]);
                                    }
                                    random.set(new Uint8Array(random.length));
                                    return phrase.join(' ');
                                }
                            }

                            exports.Seed = Seed;

                        }, {"./config/Config": 3, "./dictionary": 5, "./index": 6}],
                        2: [function (require, module, exports) {
                            "use strict";
                            Object.defineProperty(exports, "__esModule", {value: true});
                            const bignumber_js_1 = require("bignumber.js");
                            const base64 = require("base64-js");
                            const base58_1 = require("../libs/base58");
                            const convert_1 = require("../utils/convert");
                            const concat_1 = require("../utils/concat");
                            const constants_1 = require("../constants");
                            const __1 = require("..");
                            const constants_2 = require("../constants");

// NOTE : Waves asset ID in blockchain transactions equals to an empty string
                            function blockchainifyAssetId(assetId) {
                                if (!assetId)
                                    throw new Error('Asset ID should not be empty');
                                return assetId === constants_2.WAVES_ID ? constants_2.WAVES_BLOCKCHAIN_ID : assetId;
                            }

                            function getAliasBytes(alias) {
                                const aliasBytes = convert_1.default.stringToByteArrayWithSize(alias);
                                return [constants_2.ALIAS_VERSION, __1.config.getNetworkByte(), ...aliasBytes];
                            }

// ABSTRACT PARENT
                            class ByteProcessor {
                                constructor(name) {
                                    this.name = name;
                                }
                            }

                            exports.ByteProcessor = ByteProcessor;

// SIMPLE
                            class Base58 extends ByteProcessor {
                                process(value) {
                                    const bytes = base58_1.default.decode(value);
                                    return Promise.resolve(bytes);
                                }
                            }

                            exports.Base58 = Base58;

                            class Base64 extends ByteProcessor {
                                process(value) {
                                    if (typeof value !== 'string')
                                        throw new Error('You should pass a string to BinaryDataEntry constructor');
                                    if (value.slice(0, 7) !== 'base64:')
                                        throw new Error('Blob should be encoded in base64 and prefixed with "base64:"');
                                    const b64 = value.slice(7); // Getting the string payload
                                    const bytes = Uint8Array.from(base64.toByteArray(b64));
                                    const lengthBytes = Uint8Array.from(convert_1.default.shortToByteArray(bytes.length));
                                    return Promise.resolve(concat_1.concatUint8Arrays(lengthBytes, bytes));
                                }
                            }

                            exports.Base64 = Base64;

                            class Bool extends ByteProcessor {
                                process(value) {
                                    const bytes = convert_1.default.booleanToBytes(value);
                                    return Promise.resolve(Uint8Array.from(bytes));
                                }
                            }

                            exports.Bool = Bool;

                            class Byte extends ByteProcessor {
                                process(value) {
                                    if (typeof value !== 'number')
                                        throw new Error('You should pass a number to Byte constructor');
                                    if (value < 0 || value > 255)
                                        throw new Error('Byte value must fit between 0 and 255');
                                    return Promise.resolve(Uint8Array.from([value]));
                                }
                            }

                            exports.Byte = Byte;

                            class Long extends ByteProcessor {
                                process(value) {
                                    let bytes;
                                    if (typeof value === 'number') {
                                        bytes = convert_1.default.longToByteArray(value);
                                    }
                                    else {
                                        if (typeof value === 'string') {
                                            value = new bignumber_js_1.default(value);
                                        }
                                        bytes = convert_1.default.bigNumberToByteArray(value);
                                    }
                                    return Promise.resolve(Uint8Array.from(bytes));
                                }
                            }

                            exports.Long = Long;

                            class Short extends ByteProcessor {
                                process(value) {
                                    if (typeof value !== 'number')
                                        throw new Error('You should pass a number to Short constructor');
                                    if (value < 0 || value > 65535)
                                        throw new Error('Short value must fit between 0 and 65535');
                                    return Promise.resolve(Uint8Array.from(convert_1.default.shortToByteArray(value)));
                                }
                            }

                            exports.Short = Short;

                            class StringWithLength extends ByteProcessor {
                                process(value) {
                                    const bytesWithLength = convert_1.default.stringToByteArrayWithSize(value);
                                    return Promise.resolve(Uint8Array.from(bytesWithLength));
                                }
                            }

                            exports.StringWithLength = StringWithLength;

// COMPLEX
                            class Alias extends ByteProcessor {
                                process(value) {
                                    const aliasBytes = getAliasBytes(value);
                                    const aliasBytesWithLength = convert_1.default.bytesToByteArrayWithSize(aliasBytes);
                                    return Promise.resolve(Uint8Array.from(aliasBytesWithLength));
                                }
                            }

                            exports.Alias = Alias;

                            class AssetId extends ByteProcessor {
                                process(value) {
                                    value = blockchainifyAssetId(value);
                                    // We must pass bytes of `[0]` for Waves asset ID and bytes of `[1] + assetId` for other asset IDs
                                    const bytes = value ? concat_1.concatUint8Arrays(Uint8Array.from([1]), base58_1.default.decode(value)) : Uint8Array.from([0]);
                                    return Promise.resolve(bytes);
                                }
                            }

                            exports.AssetId = AssetId;

                            class Attachment extends ByteProcessor {
                                process(value) {
                                    if (typeof value === 'string') {
                                        value = Uint8Array.from(convert_1.default.stringToByteArray(value));
                                    }
                                    if (value.length > constants_2.TRANSFER_ATTACHMENT_BYTE_LIMIT) {
                                        throw new Error('Maximum attachment length is exceeded');
                                    }
                                    const valueWithLength = convert_1.default.bytesToByteArrayWithSize(value);
                                    return Promise.resolve(Uint8Array.from(valueWithLength));
                                }
                            }

                            exports.Attachment = Attachment;

                            class MandatoryAssetId extends ByteProcessor {
                                process(value) {
                                    value = blockchainifyAssetId(value);
                                    return Promise.resolve(base58_1.default.decode(value));
                                }
                            }

                            exports.MandatoryAssetId = MandatoryAssetId;

                            class OrderType extends ByteProcessor {
                                process(value) {
                                    if (value === 'buy') {
                                        return Bool.prototype.process.call(this, false);
                                    }
                                    else if (value === 'sell') {
                                        return Bool.prototype.process.call(this, true);
                                    }
                                    else {
                                        throw new Error('There are no other order types besides "buy" and "sell"');
                                    }
                                }
                            }

                            exports.OrderType = OrderType;

                            class Recipient extends ByteProcessor {
                                process(value) {
                                    if (value.length <= 30) {
                                        const aliasBytes = getAliasBytes(value);
                                        return Promise.resolve(Uint8Array.from(aliasBytes));
                                    }
                                    else {
                                        const addressBytes = base58_1.default.decode(value);
                                        return Promise.resolve(Uint8Array.from(addressBytes));
                                    }
                                }
                            }

                            exports.Recipient = Recipient;

                            class Transfers extends ByteProcessor {
                                process(values) {
                                    const recipientProcessor = new Recipient(constants_1.STUB_NAME);
                                    const amountProcessor = new Long(constants_1.STUB_NAME);
                                    const promises = [];
                                    for (let i = 0; i < values.length; i++) {
                                        promises.push(recipientProcessor.process(values[i].recipient));
                                        promises.push(amountProcessor.process(values[i].amount));
                                    }
                                    return Promise.all(promises).then((elements) => {
                                        const length = convert_1.default.shortToByteArray(values.length);
                                        const lengthBytes = Uint8Array.from(length);
                                        return concat_1.concatUint8Arrays(lengthBytes, ...elements);
                                    });
                                }
                            }

                            exports.Transfers = Transfers;
// DATA TRANSACTIONS ONLY
                            const INTEGER_DATA_TYPE = 0;
                            const BOOLEAN_DATA_TYPE = 1;
                            const BINARY_DATA_TYPE = 2;
                            const STRING_DATA_TYPE = 3;

                            class IntegerDataEntry extends ByteProcessor {
                                process(value) {
                                    return Long.prototype.process.call(this, value).then((longBytes) => {
                                        const typeByte = Uint8Array.from([INTEGER_DATA_TYPE]);
                                        return concat_1.concatUint8Arrays(typeByte, longBytes);
                                    });
                                }
                            }

                            exports.IntegerDataEntry = IntegerDataEntry;

                            class BooleanDataEntry extends ByteProcessor {
                                process(value) {
                                    return Bool.prototype.process.call(this, value).then((boolByte) => {
                                        const typeByte = Uint8Array.from([BOOLEAN_DATA_TYPE]);
                                        return concat_1.concatUint8Arrays(typeByte, boolByte);
                                    });
                                }
                            }

                            exports.BooleanDataEntry = BooleanDataEntry;

                            class BinaryDataEntry extends ByteProcessor {
                                process(value) {
                                    return Base64.prototype.process.call(this, value).then((binaryBytes) => {
                                        const typeByte = Uint8Array.from([BINARY_DATA_TYPE]);
                                        return Promise.resolve(concat_1.concatUint8Arrays(typeByte, binaryBytes));
                                    });
                                }
                            }

                            exports.BinaryDataEntry = BinaryDataEntry;

                            class StringDataEntry extends ByteProcessor {
                                process(value) {
                                    return StringWithLength.prototype.process.call(this, value).then((stringBytes) => {
                                        const typeByte = Uint8Array.from([STRING_DATA_TYPE]);
                                        return concat_1.concatUint8Arrays(typeByte, stringBytes);
                                    });
                                }
                            }

                            exports.StringDataEntry = StringDataEntry;

                            class DataEntries extends ByteProcessor {
                                process(entries) {
                                    const lengthBytes = Uint8Array.from(convert_1.default.shortToByteArray(entries.length));
                                    if (entries.length) {
                                        return Promise.all(entries.map((entry) => {
                                            const prependKeyBytes = (valueBytes) => {
                                                return StringWithLength.prototype.process.call(this, entry.key).then((keyBytes) => {
                                                    return concat_1.concatUint8Arrays(keyBytes, valueBytes);
                                                });
                                            };
                                            switch (entry.type) {
                                                case 'integer':
                                                    return IntegerDataEntry.prototype.process.call(this, entry.value).then(prependKeyBytes);
                                                case 'boolean':
                                                    return BooleanDataEntry.prototype.process.call(this, entry.value).then(prependKeyBytes);
                                                case 'binary':
                                                    return BinaryDataEntry.prototype.process.call(this, entry.value).then(prependKeyBytes);
                                                case 'string':
                                                    return StringDataEntry.prototype.process.call(this, entry.value).then(prependKeyBytes);
                                                default:
                                                    throw new Error(`There is no data type "${entry.type}"`);
                                            }
                                        })).then((entriesBytes) => {
                                            const bytes = concat_1.concatUint8Arrays(lengthBytes, ...entriesBytes);
                                            if (bytes.length > constants_1.DATA_ENTRIES_BYTE_LIMIT)
                                                throw new Error('Data transaction is too large (140KB max)');
                                            return bytes;
                                        });
                                    }
                                    else {
                                        return Promise.resolve(Uint8Array.from([0, 0]));
                                    }
                                }
                            }

                            exports.DataEntries = DataEntries;

                        }, {
                            "..": 6,
                            "../constants": 4,
                            "../libs/base58": 8,
                            "../utils/concat": 14,
                            "../utils/convert": 15,
                            "base64-js": 31,
                            "bignumber.js": 32
                        }],
                        3: [function (require, module, exports) {
                            "use strict";
                            Object.defineProperty(exports, "__esModule", {value: true});
                            const _1 = require("../");
                            const DEFAULT_CONFIG = {
                                networkByte: _1.MAINNET_BYTE,
                                logLevel: 'warning',
                                minimalSeedLength: 15
                            };

                            class Config {
                                constructor() {
                                    this.props = Object.assign(Object.create(null), DEFAULT_CONFIG);
                                }

                                getNetworkByte() {
                                    return this.props.networkByte;
                                }

                                getLogLevel() {
                                    return this.props.logLevel;
                                }

                                set(config) {
                                    Object.assign(this.props, config);
                                }

                                get(key) {
                                    return this.props[key];
                                }

                                clear() {
                                    this.props = Object.assign(Object.create(null), DEFAULT_CONFIG);
                                }
                            }

                            exports.config = new Config();

                        }, {"../": 6}],
                        4: [function (require, module, exports) {
                            "use strict";
                            Object.defineProperty(exports, "__esModule", {value: true});
                            exports.WAVES_ID = 'WAVES';
                            exports.WAVES_BLOCKCHAIN_ID = '';
                            exports.MAINNET_BYTE = 'W'.charCodeAt(0);
                            exports.TESTNET_BYTE = 'T'.charCodeAt(0);
                            exports.ADDRESS_VERSION = 1;
                            exports.ALIAS_VERSION = 2;
                            exports.SET_SCRIPT_LANG_VERSION = 1;
                            exports.TRANSFER_ATTACHMENT_BYTE_LIMIT = 140;
                            exports.DATA_TX_SIZE_WITHOUT_ENTRIES = 52;
                            exports.DATA_ENTRIES_BYTE_LIMIT = 140 * 1024 - exports.DATA_TX_SIZE_WITHOUT_ENTRIES; // 140 kb for the whole tx
                            exports.INITIAL_NONCE = 0;
                            exports.PRIVATE_KEY_LENGTH = 32;
                            exports.PUBLIC_KEY_LENGTH = 32;
// That is to mark ByteProcessor instances which cannot be affected by user
                            exports.STUB_NAME = 'reservedName';

                        }, {}],
                        5: [function (require, module, exports) {
                            "use strict";
                            Object.defineProperty(exports, "__esModule", {value: true});
                            exports.default = [
                                'abandon', 'ability', 'able', 'about', 'above', 'absent', 'absorb', 'abstract', 'absurd', 'abuse', 'access',
                                'accident', 'account', 'accuse', 'achieve', 'acid', 'acoustic', 'acquire', 'across', 'act', 'action',
                                'actor', 'actress', 'actual', 'adapt', 'add', 'addict', 'address', 'adjust', 'admit', 'adult', 'advance',
                                'advice', 'aerobic', 'affair', 'afford', 'afraid', 'again', 'age', 'agent', 'agree', 'ahead', 'aim', 'air',
                                'airport', 'aisle', 'alarm', 'album', 'alcohol', 'alert', 'alien', 'all', 'alley', 'allow', 'almost',
                                'alone', 'alpha', 'already', 'also', 'alter', 'always', 'amateur', 'amazing', 'among', 'amount', 'amused',
                                'analyst', 'anchor', 'ancient', 'anger', 'angle', 'angry', 'animal', 'ankle', 'announce', 'annual',
                                'another', 'answer', 'antenna', 'antique', 'anxiety', 'any', 'apart', 'apology', 'appear', 'apple',
                                'approve', 'april', 'arch', 'arctic', 'area', 'arena', 'argue', 'arm', 'armed', 'armor', 'army', 'around',
                                'arrange', 'arrest', 'arrive', 'arrow', 'art', 'artefact', 'artist', 'artwork', 'ask', 'aspect', 'assault',
                                'asset', 'assist', 'assume', 'asthma', 'athlete', 'atom', 'attack', 'attend', 'attitude', 'attract',
                                'auction', 'audit', 'august', 'aunt', 'author', 'auto', 'autumn', 'average', 'avocado', 'avoid', 'awake',
                                'aware', 'away', 'awesome', 'awful', 'awkward', 'axis', 'baby', 'bachelor', 'bacon', 'badge', 'bag',
                                'balance', 'balcony', 'ball', 'bamboo', 'banana', 'banner', 'bar', 'barely', 'bargain', 'barrel', 'base',
                                'basic', 'basket', 'battle', 'beach', 'bean', 'beauty', 'because', 'become', 'beef', 'before', 'begin',
                                'behave', 'behind', 'believe', 'below', 'belt', 'bench', 'benefit', 'best', 'betray', 'better', 'between',
                                'beyond', 'bicycle', 'bid', 'bike', 'bind', 'biology', 'bird', 'birth', 'bitter', 'black', 'blade', 'blame',
                                'blanket', 'blast', 'bleak', 'bless', 'blind', 'blood', 'blossom', 'blouse', 'blue', 'blur', 'blush',
                                'board', 'boat', 'body', 'boil', 'bomb', 'bone', 'bonus', 'book', 'boost', 'border', 'boring', 'borrow',
                                'boss', 'bottom', 'bounce', 'box', 'boy', 'bracket', 'brain', 'brand', 'brass', 'brave', 'bread', 'breeze',
                                'brick', 'bridge', 'brief', 'bright', 'bring', 'brisk', 'broccoli', 'broken', 'bronze', 'broom', 'brother',
                                'brown', 'brush', 'bubble', 'buddy', 'budget', 'buffalo', 'build', 'bulb', 'bulk', 'bullet', 'bundle',
                                'bunker', 'burden', 'burger', 'burst', 'bus', 'business', 'busy', 'butter', 'buyer', 'buzz', 'cabbage',
                                'cabin', 'cable', 'cactus', 'cage', 'cake', 'call', 'calm', 'camera', 'camp', 'can', 'canal', 'cancel',
                                'candy', 'cannon', 'canoe', 'canvas', 'canyon', 'capable', 'capital', 'captain', 'car', 'carbon', 'card',
                                'cargo', 'carpet', 'carry', 'cart', 'case', 'cash', 'casino', 'castle', 'casual', 'cat', 'catalog', 'catch',
                                'category', 'cattle', 'caught', 'cause', 'caution', 'cave', 'ceiling', 'celery', 'cement', 'census',
                                'century', 'cereal', 'certain', 'chair', 'chalk', 'champion', 'change', 'chaos', 'chapter', 'charge',
                                'chase', 'chat', 'cheap', 'check', 'cheese', 'chef', 'cherry', 'chest', 'chicken', 'chief', 'child',
                                'chimney', 'choice', 'choose', 'chronic', 'chuckle', 'chunk', 'churn', 'cigar', 'cinnamon', 'circle',
                                'citizen', 'city', 'civil', 'claim', 'clap', 'clarify', 'claw', 'clay', 'clean', 'clerk', 'clever', 'click',
                                'client', 'cliff', 'climb', 'clinic', 'clip', 'clock', 'clog', 'close', 'cloth', 'cloud', 'clown', 'club',
                                'clump', 'cluster', 'clutch', 'coach', 'coast', 'coconut', 'code', 'coffee', 'coil', 'coin', 'collect',
                                'color', 'column', 'combine', 'come', 'comfort', 'comic', 'common', 'company', 'concert', 'conduct',
                                'confirm', 'congress', 'connect', 'consider', 'control', 'convince', 'cook', 'cool', 'copper', 'copy',
                                'coral', 'core', 'corn', 'correct', 'cost', 'cotton', 'couch', 'country', 'couple', 'course', 'cousin',
                                'cover', 'coyote', 'crack', 'cradle', 'craft', 'cram', 'crane', 'crash', 'crater', 'crawl', 'crazy',
                                'cream', 'credit', 'creek', 'crew', 'cricket', 'crime', 'crisp', 'critic', 'crop', 'cross', 'crouch',
                                'crowd', 'crucial', 'cruel', 'cruise', 'crumble', 'crunch', 'crush', 'cry', 'crystal', 'cube', 'culture',
                                'cup', 'cupboard', 'curious', 'current', 'curtain', 'curve', 'cushion', 'custom', 'cute', 'cycle', 'dad',
                                'damage', 'damp', 'dance', 'danger', 'daring', 'dash', 'daughter', 'dawn', 'day', 'deal', 'debate',
                                'debris', 'decade', 'december', 'decide', 'decline', 'decorate', 'decrease', 'deer', 'defense', 'define',
                                'defy', 'degree', 'delay', 'deliver', 'demand', 'demise', 'denial', 'dentist', 'deny', 'depart', 'depend',
                                'deposit', 'depth', 'deputy', 'derive', 'describe', 'desert', 'design', 'desk', 'despair', 'destroy',
                                'detail', 'detect', 'develop', 'device', 'devote', 'diagram', 'dial', 'diamond', 'diary', 'dice', 'diesel',
                                'diet', 'differ', 'digital', 'dignity', 'dilemma', 'dinner', 'dinosaur', 'direct', 'dirt', 'disagree',
                                'discover', 'disease', 'dish', 'dismiss', 'disorder', 'display', 'distance', 'divert', 'divide', 'divorce',
                                'dizzy', 'doctor', 'document', 'dog', 'doll', 'dolphin', 'domain', 'donate', 'donkey', 'donor', 'door',
                                'dose', 'double', 'dove', 'draft', 'dragon', 'drama', 'drastic', 'draw', 'dream', 'dress', 'drift', 'drill',
                                'drink', 'drip', 'drive', 'drop', 'drum', 'dry', 'duck', 'dumb', 'dune', 'during', 'dust', 'dutch', 'duty',
                                'dwarf', 'dynamic', 'eager', 'eagle', 'early', 'earn', 'earth', 'easily', 'east', 'easy', 'echo', 'ecology',
                                'economy', 'edge', 'edit', 'educate', 'effort', 'egg', 'eight', 'either', 'elbow', 'elder', 'electric',
                                'elegant', 'element', 'elephant', 'elevator', 'elite', 'else', 'embark', 'embody', 'embrace', 'emerge',
                                'emotion', 'employ', 'empower', 'empty', 'enable', 'enact', 'end', 'endless', 'endorse', 'enemy', 'energy',
                                'enforce', 'engage', 'engine', 'enhance', 'enjoy', 'enlist', 'enough', 'enrich', 'enroll', 'ensure',
                                'enter', 'entire', 'entry', 'envelope', 'episode', 'equal', 'equip', 'era', 'erase', 'erode', 'erosion',
                                'error', 'erupt', 'escape', 'essay', 'essence', 'estate', 'eternal', 'ethics', 'evidence', 'evil', 'evoke',
                                'evolve', 'exact', 'example', 'excess', 'exchange', 'excite', 'exclude', 'excuse', 'execute', 'exercise',
                                'exhaust', 'exhibit', 'exile', 'exist', 'exit', 'exotic', 'expand', 'expect', 'expire', 'explain', 'expose',
                                'express', 'extend', 'extra', 'eye', 'eyebrow', 'fabric', 'face', 'faculty', 'fade', 'faint', 'faith',
                                'fall', 'false', 'fame', 'family', 'famous', 'fan', 'fancy', 'fantasy', 'farm', 'fashion', 'fat', 'fatal',
                                'father', 'fatigue', 'fault', 'favorite', 'feature', 'february', 'federal', 'fee', 'feed', 'feel', 'female',
                                'fence', 'festival', 'fetch', 'fever', 'few', 'fiber', 'fiction', 'field', 'figure', 'file', 'film',
                                'filter', 'final', 'find', 'fine', 'finger', 'finish', 'fire', 'firm', 'first', 'fiscal', 'fish', 'fit',
                                'fitness', 'fix', 'flag', 'flame', 'flash', 'flat', 'flavor', 'flee', 'flight', 'flip', 'float', 'flock',
                                'floor', 'flower', 'fluid', 'flush', 'fly', 'foam', 'focus', 'fog', 'foil', 'fold', 'follow', 'food',
                                'foot', 'force', 'forest', 'forget', 'fork', 'fortune', 'forum', 'forward', 'fossil', 'foster', 'found',
                                'fox', 'fragile', 'frame', 'frequent', 'fresh', 'friend', 'fringe', 'frog', 'front', 'frost', 'frown',
                                'frozen', 'fruit', 'fuel', 'fun', 'funny', 'furnace', 'fury', 'future', 'gadget', 'gain', 'galaxy',
                                'gallery', 'game', 'gap', 'garage', 'garbage', 'garden', 'garlic', 'garment', 'gas', 'gasp', 'gate',
                                'gather', 'gauge', 'gaze', 'general', 'genius', 'genre', 'gentle', 'genuine', 'gesture', 'ghost', 'giant',
                                'gift', 'giggle', 'ginger', 'giraffe', 'girl', 'give', 'glad', 'glance', 'glare', 'glass', 'glide',
                                'glimpse', 'globe', 'gloom', 'glory', 'glove', 'glow', 'glue', 'goat', 'goddess', 'gold', 'good', 'goose',
                                'gorilla', 'gospel', 'gossip', 'govern', 'gown', 'grab', 'grace', 'grain', 'grant', 'grape', 'grass',
                                'gravity', 'great', 'green', 'grid', 'grief', 'grit', 'grocery', 'group', 'grow', 'grunt', 'guard', 'guess',
                                'guide', 'guilt', 'guitar', 'gun', 'gym', 'habit', 'hair', 'half', 'hammer', 'hamster', 'hand', 'happy',
                                'harbor', 'hard', 'harsh', 'harvest', 'hat', 'have', 'hawk', 'hazard', 'head', 'health', 'heart', 'heavy',
                                'hedgehog', 'height', 'hello', 'helmet', 'help', 'hen', 'hero', 'hidden', 'high', 'hill', 'hint', 'hip',
                                'hire', 'history', 'hobby', 'hockey', 'hold', 'hole', 'holiday', 'hollow', 'home', 'honey', 'hood', 'hope',
                                'horn', 'horror', 'horse', 'hospital', 'host', 'hotel', 'hour', 'hover', 'hub', 'huge', 'human', 'humble',
                                'humor', 'hundred', 'hungry', 'hunt', 'hurdle', 'hurry', 'hurt', 'husband', 'hybrid', 'ice', 'icon', 'idea',
                                'identify', 'idle', 'ignore', 'ill', 'illegal', 'illness', 'image', 'imitate', 'immense', 'immune',
                                'impact', 'impose', 'improve', 'impulse', 'inch', 'include', 'income', 'increase', 'index', 'indicate',
                                'indoor', 'industry', 'infant', 'inflict', 'inform', 'inhale', 'inherit', 'initial', 'inject', 'injury',
                                'inmate', 'inner', 'innocent', 'input', 'inquiry', 'insane', 'insect', 'inside', 'inspire', 'install',
                                'intact', 'interest', 'into', 'invest', 'invite', 'involve', 'iron', 'island', 'isolate', 'issue', 'item',
                                'ivory', 'jacket', 'jaguar', 'jar', 'jazz', 'jealous', 'jeans', 'jelly', 'jewel', 'job', 'join', 'joke',
                                'journey', 'joy', 'judge', 'juice', 'jump', 'jungle', 'junior', 'junk', 'just', 'kangaroo', 'keen', 'keep',
                                'ketchup', 'key', 'kick', 'kid', 'kidney', 'kind', 'kingdom', 'kiss', 'kit', 'kitchen', 'kite', 'kitten',
                                'kiwi', 'knee', 'knife', 'knock', 'know', 'lab', 'label', 'labor', 'ladder', 'lady', 'lake', 'lamp',
                                'language', 'laptop', 'large', 'later', 'latin', 'laugh', 'laundry', 'lava', 'law', 'lawn', 'lawsuit',
                                'layer', 'lazy', 'leader', 'leaf', 'learn', 'leave', 'lecture', 'left', 'leg', 'legal', 'legend', 'leisure',
                                'lemon', 'lend', 'length', 'lens', 'leopard', 'lesson', 'letter', 'level', 'liar', 'liberty', 'library',
                                'license', 'life', 'lift', 'light', 'like', 'limb', 'limit', 'link', 'lion', 'liquid', 'list', 'little',
                                'live', 'lizard', 'load', 'loan', 'lobster', 'local', 'lock', 'logic', 'lonely', 'long', 'loop', 'lottery',
                                'loud', 'lounge', 'love', 'loyal', 'lucky', 'luggage', 'lumber', 'lunar', 'lunch', 'luxury', 'lyrics',
                                'machine', 'mad', 'magic', 'magnet', 'maid', 'mail', 'main', 'major', 'make', 'mammal', 'man', 'manage',
                                'mandate', 'mango', 'mansion', 'manual', 'maple', 'marble', 'march', 'margin', 'marine', 'market',
                                'marriage', 'mask', 'mass', 'master', 'match', 'material', 'math', 'matrix', 'matter', 'maximum', 'maze',
                                'meadow', 'mean', 'measure', 'meat', 'mechanic', 'medal', 'media', 'melody', 'melt', 'member', 'memory',
                                'mention', 'menu', 'mercy', 'merge', 'merit', 'merry', 'mesh', 'message', 'metal', 'method', 'middle',
                                'midnight', 'milk', 'million', 'mimic', 'mind', 'minimum', 'minor', 'minute', 'miracle', 'mirror', 'misery',
                                'miss', 'mistake', 'mix', 'mixed', 'mixture', 'mobile', 'model', 'modify', 'mom', 'moment', 'monitor',
                                'monkey', 'monster', 'month', 'moon', 'moral', 'more', 'morning', 'mosquito', 'mother', 'motion', 'motor',
                                'mountain', 'mouse', 'move', 'movie', 'much', 'muffin', 'mule', 'multiply', 'muscle', 'museum', 'mushroom',
                                'music', 'must', 'mutual', 'myself', 'mystery', 'myth', 'naive', 'name', 'napkin', 'narrow', 'nasty',
                                'nation', 'nature', 'near', 'neck', 'need', 'negative', 'neglect', 'neither', 'nephew', 'nerve', 'nest',
                                'net', 'network', 'neutral', 'never', 'news', 'next', 'nice', 'night', 'noble', 'noise', 'nominee',
                                'noodle', 'normal', 'north', 'nose', 'notable', 'note', 'nothing', 'notice', 'novel', 'now', 'nuclear',
                                'number', 'nurse', 'nut', 'oak', 'obey', 'object', 'oblige', 'obscure', 'observe', 'obtain', 'obvious',
                                'occur', 'ocean', 'october', 'odor', 'off', 'offer', 'office', 'often', 'oil', 'okay', 'old', 'olive',
                                'olympic', 'omit', 'once', 'one', 'onion', 'online', 'only', 'open', 'opera', 'opinion', 'oppose',
                                'option', 'orange', 'orbit', 'orchard', 'order', 'ordinary', 'organ', 'orient', 'original', 'orphan',
                                'ostrich', 'other', 'outdoor', 'outer', 'output', 'outside', 'oval', 'oven', 'over', 'own', 'owner',
                                'oxygen', 'oyster', 'ozone', 'pact', 'paddle', 'page', 'pair', 'palace', 'palm', 'panda', 'panel', 'panic',
                                'panther', 'paper', 'parade', 'parent', 'park', 'parrot', 'party', 'pass', 'patch', 'path', 'patient',
                                'patrol', 'pattern', 'pause', 'pave', 'payment', 'peace', 'peanut', 'pear', 'peasant', 'pelican', 'pen',
                                'penalty', 'pencil', 'people', 'pepper', 'perfect', 'permit', 'person', 'pet', 'phone', 'photo', 'phrase',
                                'physical', 'piano', 'picnic', 'picture', 'piece', 'pig', 'pigeon', 'pill', 'pilot', 'pink', 'pioneer',
                                'pipe', 'pistol', 'pitch', 'pizza', 'place', 'planet', 'plastic', 'plate', 'play', 'please', 'pledge',
                                'pluck', 'plug', 'plunge', 'poem', 'poet', 'point', 'polar', 'pole', 'police', 'pond', 'pony', 'pool',
                                'popular', 'portion', 'position', 'possible', 'post', 'potato', 'pottery', 'poverty', 'powder', 'power',
                                'practice', 'praise', 'predict', 'prefer', 'prepare', 'present', 'pretty', 'prevent', 'price', 'pride',
                                'primary', 'print', 'priority', 'prison', 'private', 'prize', 'problem', 'process', 'produce', 'profit',
                                'program', 'project', 'promote', 'proof', 'property', 'prosper', 'protect', 'proud', 'provide', 'public',
                                'pudding', 'pull', 'pulp', 'pulse', 'pumpkin', 'punch', 'pupil', 'puppy', 'purchase', 'purity', 'purpose',
                                'purse', 'push', 'put', 'puzzle', 'pyramid', 'quality', 'quantum', 'quarter', 'question', 'quick', 'quit',
                                'quiz', 'quote', 'rabbit', 'raccoon', 'race', 'rack', 'radar', 'radio', 'rail', 'rain', 'raise', 'rally',
                                'ramp', 'ranch', 'random', 'range', 'rapid', 'rare', 'rate', 'rather', 'raven', 'raw', 'razor', 'ready',
                                'real', 'reason', 'rebel', 'rebuild', 'recall', 'receive', 'recipe', 'record', 'recycle', 'reduce',
                                'reflect', 'reform', 'refuse', 'region', 'regret', 'regular', 'reject', 'relax', 'release', 'relief',
                                'rely', 'remain', 'remember', 'remind', 'remove', 'render', 'renew', 'rent', 'reopen', 'repair', 'repeat',
                                'replace', 'report', 'require', 'rescue', 'resemble', 'resist', 'resource', 'response', 'result', 'retire',
                                'retreat', 'return', 'reunion', 'reveal', 'review', 'reward', 'rhythm', 'rib', 'ribbon', 'rice', 'rich',
                                'ride', 'ridge', 'rifle', 'right', 'rigid', 'ring', 'riot', 'ripple', 'risk', 'ritual', 'rival', 'river',
                                'road', 'roast', 'robot', 'robust', 'rocket', 'romance', 'roof', 'rookie', 'room', 'rose', 'rotate',
                                'rough', 'round', 'route', 'royal', 'rubber', 'rude', 'rug', 'rule', 'run', 'runway', 'rural', 'sad',
                                'saddle', 'sadness', 'safe', 'sail', 'salad', 'salmon', 'salon', 'salt', 'salute', 'same', 'sample', 'sand',
                                'satisfy', 'satoshi', 'sauce', 'sausage', 'save', 'say', 'scale', 'scan', 'scare', 'scatter', 'scene',
                                'scheme', 'school', 'science', 'scissors', 'scorpion', 'scout', 'scrap', 'screen', 'script', 'scrub', 'sea',
                                'search', 'season', 'seat', 'second', 'secret', 'section', 'security', 'seed', 'seek', 'segment', 'select',
                                'sell', 'seminar', 'senior', 'sense', 'sentence', 'series', 'service', 'session', 'settle', 'setup',
                                'seven', 'shadow', 'shaft', 'shallow', 'share', 'shed', 'shell', 'sheriff', 'shield', 'shift', 'shine',
                                'ship', 'shiver', 'shock', 'shoe', 'shoot', 'shop', 'short', 'shoulder', 'shove', 'shrimp', 'shrug',
                                'shuffle', 'shy', 'sibling', 'sick', 'side', 'siege', 'sight', 'sign', 'silent', 'silk', 'silly', 'silver',
                                'similar', 'simple', 'since', 'sing', 'siren', 'sister', 'situate', 'six', 'size', 'skate', 'sketch', 'ski',
                                'skill', 'skin', 'skirt', 'skull', 'slab', 'slam', 'sleep', 'slender', 'slice', 'slide', 'slight', 'slim',
                                'slogan', 'slot', 'slow', 'slush', 'small', 'smart', 'smile', 'smoke', 'smooth', 'snack', 'snake', 'snap',
                                'sniff', 'snow', 'soap', 'soccer', 'social', 'sock', 'soda', 'soft', 'solar', 'soldier', 'solid',
                                'solution', 'solve', 'someone', 'song', 'soon', 'sorry', 'sort', 'soul', 'sound', 'soup', 'source', 'south',
                                'space', 'spare', 'spatial', 'spawn', 'speak', 'special', 'speed', 'spell', 'spend', 'sphere', 'spice',
                                'spider', 'spike', 'spin', 'spirit', 'split', 'spoil', 'sponsor', 'spoon', 'sport', 'spot', 'spray',
                                'spread', 'spring', 'spy', 'square', 'squeeze', 'squirrel', 'stable', 'stadium', 'staff', 'stage', 'stairs',
                                'stamp', 'stand', 'start', 'state', 'stay', 'steak', 'steel', 'stem', 'step', 'stereo', 'stick', 'still',
                                'sting', 'stock', 'stomach', 'stone', 'stool', 'story', 'stove', 'strategy', 'street', 'strike', 'strong',
                                'struggle', 'student', 'stuff', 'stumble', 'style', 'subject', 'submit', 'subway', 'success', 'such',
                                'sudden', 'suffer', 'sugar', 'suggest', 'suit', 'summer', 'sun', 'sunny', 'sunset', 'super', 'supply',
                                'supreme', 'sure', 'surface', 'surge', 'surprise', 'surround', 'survey', 'suspect', 'sustain', 'swallow',
                                'swamp', 'swap', 'swarm', 'swear', 'sweet', 'swift', 'swim', 'swing', 'switch', 'sword', 'symbol',
                                'symptom', 'syrup', 'system', 'table', 'tackle', 'tag', 'tail', 'talent', 'talk', 'tank', 'tape', 'target',
                                'task', 'taste', 'tattoo', 'taxi', 'teach', 'team', 'tell', 'ten', 'tenant', 'tennis', 'tent', 'term',
                                'test', 'text', 'thank', 'that', 'theme', 'then', 'theory', 'there', 'they', 'thing', 'this', 'thought',
                                'three', 'thrive', 'throw', 'thumb', 'thunder', 'ticket', 'tide', 'tiger', 'tilt', 'timber', 'time', 'tiny',
                                'tip', 'tired', 'tissue', 'title', 'toast', 'tobacco', 'today', 'toddler', 'toe', 'together', 'toilet',
                                'token', 'tomato', 'tomorrow', 'tone', 'tongue', 'tonight', 'tool', 'tooth', 'top', 'topic', 'topple',
                                'torch', 'tornado', 'tortoise', 'toss', 'total', 'tourist', 'toward', 'tower', 'town', 'toy', 'track',
                                'trade', 'traffic', 'tragic', 'train', 'transfer', 'trap', 'trash', 'travel', 'tray', 'treat', 'tree',
                                'trend', 'trial', 'tribe', 'trick', 'trigger', 'trim', 'trip', 'trophy', 'trouble', 'truck', 'true',
                                'truly', 'trumpet', 'trust', 'truth', 'try', 'tube', 'tuition', 'tumble', 'tuna', 'tunnel', 'turkey',
                                'turn', 'turtle', 'twelve', 'twenty', 'twice', 'twin', 'twist', 'two', 'type', 'typical', 'ugly',
                                'umbrella', 'unable', 'unaware', 'uncle', 'uncover', 'under', 'undo', 'unfair', 'unfold', 'unhappy',
                                'uniform', 'unique', 'unit', 'universe', 'unknown', 'unlock', 'until', 'unusual', 'unveil', 'update',
                                'upgrade', 'uphold', 'upon', 'upper', 'upset', 'urban', 'urge', 'usage', 'use', 'used', 'useful', 'useless',
                                'usual', 'utility', 'vacant', 'vacuum', 'vague', 'valid', 'valley', 'valve', 'van', 'vanish', 'vapor',
                                'various', 'vast', 'vault', 'vehicle', 'velvet', 'vendor', 'venture', 'venue', 'verb', 'verify', 'version',
                                'very', 'vessel', 'veteran', 'viable', 'vibrant', 'vicious', 'victory', 'video', 'view', 'village',
                                'vintage', 'violin', 'virtual', 'virus', 'visa', 'visit', 'visual', 'vital', 'vivid', 'vocal', 'voice',
                                'void', 'volcano', 'volume', 'vote', 'voyage', 'wage', 'wagon', 'wait', 'walk', 'wall', 'walnut', 'want',
                                'warfare', 'warm', 'warrior', 'wash', 'wasp', 'waste', 'water', 'wave', 'way', 'wealth', 'weapon', 'wear',
                                'weasel', 'weather', 'web', 'wedding', 'weekend', 'weird', 'welcome', 'west', 'wet', 'whale', 'what',
                                'wheat', 'wheel', 'when', 'where', 'whip', 'whisper', 'wide', 'width', 'wife', 'wild', 'will', 'win',
                                'window', 'wine', 'wing', 'wink', 'winner', 'winter', 'wire', 'wisdom', 'wise', 'wish', 'witness', 'wolf',
                                'woman', 'wonder', 'wood', 'wool', 'word', 'work', 'world', 'worry', 'worth', 'wrap', 'wreck', 'wrestle',
                                'wrist', 'write', 'wrong', 'yard', 'year', 'yellow', 'you', 'young', 'youth', 'zebra', 'zero', 'zone', 'zoo'
                            ];

                        }, {}],
                        6: [function (require, module, exports) {
                            "use strict";

                            function __export(m) {
                                for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
                            }

                            Object.defineProperty(exports, "__esModule", {value: true});
                            __export(require("./constants"));
                            __export(require("./byteProcessor/ByteProcessor"));
                            __export(require("./config/Config"));
                            __export(require("./signatureFactory/SignatureFactory"));
                            __export(require("./Seed"));
                            __export(require("./dictionary"));
                            const base58_1 = require("./libs/base58");
                            const converters_1 = require("./libs/converters");
                            const axlsign_1 = require("./libs/axlsign");
                            const blake2b = require("./libs/blake2b");
                            const sha3_1 = require("./libs/sha3");
                            const secure_random_1 = require("./libs/secure-random");
                            const concat_1 = require("./utils/concat");
                            const convert_1 = require("./utils/convert");
                            const crypto_1 = require("./utils/crypto");
                            exports.libs = {
                                base58: base58_1.default,
                                converters: converters_1.default,
                                axlsign: axlsign_1.default,
                                blake2b,
                                secureRandom: secure_random_1.default,
                                keccak256: sha3_1.keccak256
                            };
                            exports.utils = {
                                concatUint8Arrays: concat_1.concatUint8Arrays,
                                convert: convert_1.default,
                                crypto: crypto_1.default
                            };

                        }, {
                            "./Seed": 1,
                            "./byteProcessor/ByteProcessor": 2,
                            "./config/Config": 3,
                            "./constants": 4,
                            "./dictionary": 5,
                            "./libs/axlsign": 7,
                            "./libs/base58": 8,
                            "./libs/blake2b": 9,
                            "./libs/converters": 10,
                            "./libs/secure-random": 11,
                            "./libs/sha3": 12,
                            "./signatureFactory/SignatureFactory": 13,
                            "./utils/concat": 14,
                            "./utils/convert": 15,
                            "./utils/crypto": 16
                        }],
                        7: [function (require, module, exports) {
                            "use strict";
// Curve25519 signatures (and also key agreement)
// like in the early Axolotl.
//
// Written by Dmitry Chestnykh.
// You can use it under MIT or CC0 license.
                            Object.defineProperty(exports, "__esModule", {value: true});
// Curve25519 signatures idea and math by Trevor Perrin
// https://moderncrypto.org/mail-archive/curves/2014/000205.html
// Derived from TweetNaCl.js (https://tweetnacl.js.org/)
// Ported in 2014 by Dmitry Chestnykh and Devi Mandiri.
// Public domain.
//
// Implementation derived from TweetNaCl version 20140427.
// See for details: http://tweetnacl.cr.yp.to/
                            const axlsign = Object.create(null);
                            const gf = function (init) {
                                let i, r = new Float64Array(16);
                                if (init)
                                    for (i = 0; i < init.length; i++)
                                        r[i] = init[i];
                                return r;
                            };
                            const _0 = new Uint8Array(16);
                            const _9 = new Uint8Array(32);
                            _9[0] = 9;
                            const gf0 = gf(), gf1 = gf([1]), _121665 = gf([0xdb41, 1]),
                                D = gf([0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070, 0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203]),
                                D2 = gf([0xf159, 0x26b2, 0x9b94, 0xebd6, 0xb156, 0x8283, 0x149a, 0x00e0, 0xd130, 0xeef3, 0x80f2, 0x198e, 0xfce7, 0x56df, 0xd9dc, 0x2406]),
                                X = gf([0xd51a, 0x8f25, 0x2d60, 0xc956, 0xa7b2, 0x9525, 0xc760, 0x692c, 0xdc5c, 0xfdd6, 0xe231, 0xc0a4, 0x53fe, 0xcd6e, 0x36d3, 0x2169]),
                                Y = gf([0x6658, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666]),
                                I = gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);

                            function ts64(x, i, h, l) {
                                x[i] = (h >> 24) & 0xff;
                                x[i + 1] = (h >> 16) & 0xff;
                                x[i + 2] = (h >> 8) & 0xff;
                                x[i + 3] = h & 0xff;
                                x[i + 4] = (l >> 24) & 0xff;
                                x[i + 5] = (l >> 16) & 0xff;
                                x[i + 6] = (l >> 8) & 0xff;
                                x[i + 7] = l & 0xff;
                            }

                            function vn(x, xi, y, yi, n) {
                                let i, d = 0;
                                for (i = 0; i < n; i++)
                                    d |= x[xi + i] ^ y[yi + i];
                                return (1 & ((d - 1) >>> 8)) - 1;
                            }

                            function crypto_verify_32(x, xi, y, yi) {
                                return vn(x, xi, y, yi, 32);
                            }

                            function set25519(r, a) {
                                for (let i = 0; i < 16; i++)
                                    r[i] = a[i] | 0;
                            }

                            function car25519(o) {
                                let i, v, c = 1;
                                for (i = 0; i < 16; i++) {
                                    v = o[i] + c + 65535;
                                    c = Math.floor(v / 65536);
                                    o[i] = v - c * 65536;
                                }
                                o[0] += c - 1 + 37 * (c - 1);
                            }

                            function sel25519(p, q, b) {
                                let t, c = ~(b - 1);
                                for (let i = 0; i < 16; i++) {
                                    t = c & (p[i] ^ q[i]);
                                    p[i] ^= t;
                                    q[i] ^= t;
                                }
                            }

                            function pack25519(o, n) {
                                let i, j, b;
                                const m = gf(), t = gf();
                                for (i = 0; i < 16; i++)
                                    t[i] = n[i];
                                car25519(t);
                                car25519(t);
                                car25519(t);
                                for (j = 0; j < 2; j++) {
                                    m[0] = t[0] - 0xffed;
                                    for (i = 1; i < 15; i++) {
                                        m[i] = t[i] - 0xffff - ((m[i - 1] >> 16) & 1);
                                        m[i - 1] &= 0xffff;
                                    }
                                    m[15] = t[15] - 0x7fff - ((m[14] >> 16) & 1);
                                    b = (m[15] >> 16) & 1;
                                    m[14] &= 0xffff;
                                    sel25519(t, m, 1 - b);
                                }
                                for (i = 0; i < 16; i++) {
                                    o[2 * i] = t[i] & 0xff;
                                    o[2 * i + 1] = t[i] >> 8;
                                }
                            }

                            function neq25519(a, b) {
                                const c = new Uint8Array(32), d = new Uint8Array(32);
                                pack25519(c, a);
                                pack25519(d, b);
                                return crypto_verify_32(c, 0, d, 0);
                            }

                            function par25519(a) {
                                const d = new Uint8Array(32);
                                pack25519(d, a);
                                return d[0] & 1;
                            }

                            function unpack25519(o, n) {
                                for (let i = 0; i < 16; i++)
                                    o[i] = n[2 * i] + (n[2 * i + 1] << 8);
                                o[15] &= 0x7fff;
                            }

                            function A(o, a, b) {
                                for (let i = 0; i < 16; i++)
                                    o[i] = a[i] + b[i];
                            }

                            function Z(o, a, b) {
                                for (let i = 0; i < 16; i++)
                                    o[i] = a[i] - b[i];
                            }

                            function M(o, a, b) {
                                let v, c, t0 = 0, t1 = 0, t2 = 0, t3 = 0, t4 = 0, t5 = 0, t6 = 0, t7 = 0, t8 = 0,
                                    t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0, t16 = 0, t17 = 0,
                                    t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0, t24 = 0, t25 = 0, t26 = 0,
                                    t27 = 0, t28 = 0, t29 = 0, t30 = 0, b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3],
                                    b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8], b9 = b[9], b10 = b[10],
                                    b11 = b[11], b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];
                                v = a[0];
                                t0 += v * b0;
                                t1 += v * b1;
                                t2 += v * b2;
                                t3 += v * b3;
                                t4 += v * b4;
                                t5 += v * b5;
                                t6 += v * b6;
                                t7 += v * b7;
                                t8 += v * b8;
                                t9 += v * b9;
                                t10 += v * b10;
                                t11 += v * b11;
                                t12 += v * b12;
                                t13 += v * b13;
                                t14 += v * b14;
                                t15 += v * b15;
                                v = a[1];
                                t1 += v * b0;
                                t2 += v * b1;
                                t3 += v * b2;
                                t4 += v * b3;
                                t5 += v * b4;
                                t6 += v * b5;
                                t7 += v * b6;
                                t8 += v * b7;
                                t9 += v * b8;
                                t10 += v * b9;
                                t11 += v * b10;
                                t12 += v * b11;
                                t13 += v * b12;
                                t14 += v * b13;
                                t15 += v * b14;
                                t16 += v * b15;
                                v = a[2];
                                t2 += v * b0;
                                t3 += v * b1;
                                t4 += v * b2;
                                t5 += v * b3;
                                t6 += v * b4;
                                t7 += v * b5;
                                t8 += v * b6;
                                t9 += v * b7;
                                t10 += v * b8;
                                t11 += v * b9;
                                t12 += v * b10;
                                t13 += v * b11;
                                t14 += v * b12;
                                t15 += v * b13;
                                t16 += v * b14;
                                t17 += v * b15;
                                v = a[3];
                                t3 += v * b0;
                                t4 += v * b1;
                                t5 += v * b2;
                                t6 += v * b3;
                                t7 += v * b4;
                                t8 += v * b5;
                                t9 += v * b6;
                                t10 += v * b7;
                                t11 += v * b8;
                                t12 += v * b9;
                                t13 += v * b10;
                                t14 += v * b11;
                                t15 += v * b12;
                                t16 += v * b13;
                                t17 += v * b14;
                                t18 += v * b15;
                                v = a[4];
                                t4 += v * b0;
                                t5 += v * b1;
                                t6 += v * b2;
                                t7 += v * b3;
                                t8 += v * b4;
                                t9 += v * b5;
                                t10 += v * b6;
                                t11 += v * b7;
                                t12 += v * b8;
                                t13 += v * b9;
                                t14 += v * b10;
                                t15 += v * b11;
                                t16 += v * b12;
                                t17 += v * b13;
                                t18 += v * b14;
                                t19 += v * b15;
                                v = a[5];
                                t5 += v * b0;
                                t6 += v * b1;
                                t7 += v * b2;
                                t8 += v * b3;
                                t9 += v * b4;
                                t10 += v * b5;
                                t11 += v * b6;
                                t12 += v * b7;
                                t13 += v * b8;
                                t14 += v * b9;
                                t15 += v * b10;
                                t16 += v * b11;
                                t17 += v * b12;
                                t18 += v * b13;
                                t19 += v * b14;
                                t20 += v * b15;
                                v = a[6];
                                t6 += v * b0;
                                t7 += v * b1;
                                t8 += v * b2;
                                t9 += v * b3;
                                t10 += v * b4;
                                t11 += v * b5;
                                t12 += v * b6;
                                t13 += v * b7;
                                t14 += v * b8;
                                t15 += v * b9;
                                t16 += v * b10;
                                t17 += v * b11;
                                t18 += v * b12;
                                t19 += v * b13;
                                t20 += v * b14;
                                t21 += v * b15;
                                v = a[7];
                                t7 += v * b0;
                                t8 += v * b1;
                                t9 += v * b2;
                                t10 += v * b3;
                                t11 += v * b4;
                                t12 += v * b5;
                                t13 += v * b6;
                                t14 += v * b7;
                                t15 += v * b8;
                                t16 += v * b9;
                                t17 += v * b10;
                                t18 += v * b11;
                                t19 += v * b12;
                                t20 += v * b13;
                                t21 += v * b14;
                                t22 += v * b15;
                                v = a[8];
                                t8 += v * b0;
                                t9 += v * b1;
                                t10 += v * b2;
                                t11 += v * b3;
                                t12 += v * b4;
                                t13 += v * b5;
                                t14 += v * b6;
                                t15 += v * b7;
                                t16 += v * b8;
                                t17 += v * b9;
                                t18 += v * b10;
                                t19 += v * b11;
                                t20 += v * b12;
                                t21 += v * b13;
                                t22 += v * b14;
                                t23 += v * b15;
                                v = a[9];
                                t9 += v * b0;
                                t10 += v * b1;
                                t11 += v * b2;
                                t12 += v * b3;
                                t13 += v * b4;
                                t14 += v * b5;
                                t15 += v * b6;
                                t16 += v * b7;
                                t17 += v * b8;
                                t18 += v * b9;
                                t19 += v * b10;
                                t20 += v * b11;
                                t21 += v * b12;
                                t22 += v * b13;
                                t23 += v * b14;
                                t24 += v * b15;
                                v = a[10];
                                t10 += v * b0;
                                t11 += v * b1;
                                t12 += v * b2;
                                t13 += v * b3;
                                t14 += v * b4;
                                t15 += v * b5;
                                t16 += v * b6;
                                t17 += v * b7;
                                t18 += v * b8;
                                t19 += v * b9;
                                t20 += v * b10;
                                t21 += v * b11;
                                t22 += v * b12;
                                t23 += v * b13;
                                t24 += v * b14;
                                t25 += v * b15;
                                v = a[11];
                                t11 += v * b0;
                                t12 += v * b1;
                                t13 += v * b2;
                                t14 += v * b3;
                                t15 += v * b4;
                                t16 += v * b5;
                                t17 += v * b6;
                                t18 += v * b7;
                                t19 += v * b8;
                                t20 += v * b9;
                                t21 += v * b10;
                                t22 += v * b11;
                                t23 += v * b12;
                                t24 += v * b13;
                                t25 += v * b14;
                                t26 += v * b15;
                                v = a[12];
                                t12 += v * b0;
                                t13 += v * b1;
                                t14 += v * b2;
                                t15 += v * b3;
                                t16 += v * b4;
                                t17 += v * b5;
                                t18 += v * b6;
                                t19 += v * b7;
                                t20 += v * b8;
                                t21 += v * b9;
                                t22 += v * b10;
                                t23 += v * b11;
                                t24 += v * b12;
                                t25 += v * b13;
                                t26 += v * b14;
                                t27 += v * b15;
                                v = a[13];
                                t13 += v * b0;
                                t14 += v * b1;
                                t15 += v * b2;
                                t16 += v * b3;
                                t17 += v * b4;
                                t18 += v * b5;
                                t19 += v * b6;
                                t20 += v * b7;
                                t21 += v * b8;
                                t22 += v * b9;
                                t23 += v * b10;
                                t24 += v * b11;
                                t25 += v * b12;
                                t26 += v * b13;
                                t27 += v * b14;
                                t28 += v * b15;
                                v = a[14];
                                t14 += v * b0;
                                t15 += v * b1;
                                t16 += v * b2;
                                t17 += v * b3;
                                t18 += v * b4;
                                t19 += v * b5;
                                t20 += v * b6;
                                t21 += v * b7;
                                t22 += v * b8;
                                t23 += v * b9;
                                t24 += v * b10;
                                t25 += v * b11;
                                t26 += v * b12;
                                t27 += v * b13;
                                t28 += v * b14;
                                t29 += v * b15;
                                v = a[15];
                                t15 += v * b0;
                                t16 += v * b1;
                                t17 += v * b2;
                                t18 += v * b3;
                                t19 += v * b4;
                                t20 += v * b5;
                                t21 += v * b6;
                                t22 += v * b7;
                                t23 += v * b8;
                                t24 += v * b9;
                                t25 += v * b10;
                                t26 += v * b11;
                                t27 += v * b12;
                                t28 += v * b13;
                                t29 += v * b14;
                                t30 += v * b15;
                                t0 += 38 * t16;
                                t1 += 38 * t17;
                                t2 += 38 * t18;
                                t3 += 38 * t19;
                                t4 += 38 * t20;
                                t5 += 38 * t21;
                                t6 += 38 * t22;
                                t7 += 38 * t23;
                                t8 += 38 * t24;
                                t9 += 38 * t25;
                                t10 += 38 * t26;
                                t11 += 38 * t27;
                                t12 += 38 * t28;
                                t13 += 38 * t29;
                                t14 += 38 * t30;
                                // t15 left as is
                                // first car
                                c = 1;
                                v = t0 + c + 65535;
                                c = Math.floor(v / 65536);
                                t0 = v - c * 65536;
                                v = t1 + c + 65535;
                                c = Math.floor(v / 65536);
                                t1 = v - c * 65536;
                                v = t2 + c + 65535;
                                c = Math.floor(v / 65536);
                                t2 = v - c * 65536;
                                v = t3 + c + 65535;
                                c = Math.floor(v / 65536);
                                t3 = v - c * 65536;
                                v = t4 + c + 65535;
                                c = Math.floor(v / 65536);
                                t4 = v - c * 65536;
                                v = t5 + c + 65535;
                                c = Math.floor(v / 65536);
                                t5 = v - c * 65536;
                                v = t6 + c + 65535;
                                c = Math.floor(v / 65536);
                                t6 = v - c * 65536;
                                v = t7 + c + 65535;
                                c = Math.floor(v / 65536);
                                t7 = v - c * 65536;
                                v = t8 + c + 65535;
                                c = Math.floor(v / 65536);
                                t8 = v - c * 65536;
                                v = t9 + c + 65535;
                                c = Math.floor(v / 65536);
                                t9 = v - c * 65536;
                                v = t10 + c + 65535;
                                c = Math.floor(v / 65536);
                                t10 = v - c * 65536;
                                v = t11 + c + 65535;
                                c = Math.floor(v / 65536);
                                t11 = v - c * 65536;
                                v = t12 + c + 65535;
                                c = Math.floor(v / 65536);
                                t12 = v - c * 65536;
                                v = t13 + c + 65535;
                                c = Math.floor(v / 65536);
                                t13 = v - c * 65536;
                                v = t14 + c + 65535;
                                c = Math.floor(v / 65536);
                                t14 = v - c * 65536;
                                v = t15 + c + 65535;
                                c = Math.floor(v / 65536);
                                t15 = v - c * 65536;
                                t0 += c - 1 + 37 * (c - 1);
                                // second car
                                c = 1;
                                v = t0 + c + 65535;
                                c = Math.floor(v / 65536);
                                t0 = v - c * 65536;
                                v = t1 + c + 65535;
                                c = Math.floor(v / 65536);
                                t1 = v - c * 65536;
                                v = t2 + c + 65535;
                                c = Math.floor(v / 65536);
                                t2 = v - c * 65536;
                                v = t3 + c + 65535;
                                c = Math.floor(v / 65536);
                                t3 = v - c * 65536;
                                v = t4 + c + 65535;
                                c = Math.floor(v / 65536);
                                t4 = v - c * 65536;
                                v = t5 + c + 65535;
                                c = Math.floor(v / 65536);
                                t5 = v - c * 65536;
                                v = t6 + c + 65535;
                                c = Math.floor(v / 65536);
                                t6 = v - c * 65536;
                                v = t7 + c + 65535;
                                c = Math.floor(v / 65536);
                                t7 = v - c * 65536;
                                v = t8 + c + 65535;
                                c = Math.floor(v / 65536);
                                t8 = v - c * 65536;
                                v = t9 + c + 65535;
                                c = Math.floor(v / 65536);
                                t9 = v - c * 65536;
                                v = t10 + c + 65535;
                                c = Math.floor(v / 65536);
                                t10 = v - c * 65536;
                                v = t11 + c + 65535;
                                c = Math.floor(v / 65536);
                                t11 = v - c * 65536;
                                v = t12 + c + 65535;
                                c = Math.floor(v / 65536);
                                t12 = v - c * 65536;
                                v = t13 + c + 65535;
                                c = Math.floor(v / 65536);
                                t13 = v - c * 65536;
                                v = t14 + c + 65535;
                                c = Math.floor(v / 65536);
                                t14 = v - c * 65536;
                                v = t15 + c + 65535;
                                c = Math.floor(v / 65536);
                                t15 = v - c * 65536;
                                t0 += c - 1 + 37 * (c - 1);
                                o[0] = t0;
                                o[1] = t1;
                                o[2] = t2;
                                o[3] = t3;
                                o[4] = t4;
                                o[5] = t5;
                                o[6] = t6;
                                o[7] = t7;
                                o[8] = t8;
                                o[9] = t9;
                                o[10] = t10;
                                o[11] = t11;
                                o[12] = t12;
                                o[13] = t13;
                                o[14] = t14;
                                o[15] = t15;
                            }

                            function S(o, a) {
                                M(o, a, a);
                            }

                            function inv25519(o, i) {
                                const c = gf();
                                let a;
                                for (a = 0; a < 16; a++)
                                    c[a] = i[a];
                                for (a = 253; a >= 0; a--) {
                                    S(c, c);
                                    if (a !== 2 && a !== 4)
                                        M(c, c, i);
                                }
                                for (a = 0; a < 16; a++)
                                    o[a] = c[a];
                            }

                            function pow2523(o, i) {
                                const c = gf();
                                let a;
                                for (a = 0; a < 16; a++)
                                    c[a] = i[a];
                                for (a = 250; a >= 0; a--) {
                                    S(c, c);
                                    if (a !== 1)
                                        M(c, c, i);
                                }
                                for (a = 0; a < 16; a++)
                                    o[a] = c[a];
                            }

                            function crypto_scalarmult(q, n, p) {
                                const z = new Uint8Array(32);
                                const x = new Float64Array(80);
                                let r, i;
                                const a = gf(), b = gf(), c = gf(), d = gf(), e = gf(), f = gf();
                                for (i = 0; i < 31; i++)
                                    z[i] = n[i];
                                z[31] = (n[31] & 127) | 64;
                                z[0] &= 248;
                                unpack25519(x, p);
                                for (i = 0; i < 16; i++) {
                                    b[i] = x[i];
                                    d[i] = a[i] = c[i] = 0;
                                }
                                a[0] = d[0] = 1;
                                for (i = 254; i >= 0; --i) {
                                    r = (z[i >>> 3] >>> (i & 7)) & 1;
                                    sel25519(a, b, r);
                                    sel25519(c, d, r);
                                    A(e, a, c);
                                    Z(a, a, c);
                                    A(c, b, d);
                                    Z(b, b, d);
                                    S(d, e);
                                    S(f, a);
                                    M(a, c, a);
                                    M(c, b, e);
                                    A(e, a, c);
                                    Z(a, a, c);
                                    S(b, a);
                                    Z(c, d, f);
                                    M(a, c, _121665);
                                    A(a, a, d);
                                    M(c, c, a);
                                    M(a, d, f);
                                    M(d, b, x);
                                    S(b, e);
                                    sel25519(a, b, r);
                                    sel25519(c, d, r);
                                }
                                for (i = 0; i < 16; i++) {
                                    x[i + 16] = a[i];
                                    x[i + 32] = c[i];
                                    x[i + 48] = b[i];
                                    x[i + 64] = d[i];
                                }
                                const x32 = x.subarray(32);
                                const x16 = x.subarray(16);
                                inv25519(x32, x32);
                                M(x16, x16, x32);
                                pack25519(q, x16);
                                return 0;
                            }

                            function crypto_scalarmult_base(q, n) {
                                return crypto_scalarmult(q, n, _9);
                            }

                            const K = [
                                0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
                                0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
                                0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
                                0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
                                0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
                                0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
                                0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
                                0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
                                0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
                                0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
                                0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
                                0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
                                0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
                                0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
                                0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
                                0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
                                0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
                                0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
                                0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
                                0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
                                0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
                                0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
                                0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
                                0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
                                0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
                                0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
                                0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
                                0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
                                0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
                                0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
                                0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
                                0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
                                0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
                                0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
                                0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
                                0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
                                0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
                                0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
                                0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
                                0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
                            ];

                            function crypto_hashblocks_hl(hh, hl, m, n) {
                                const wh = new Int32Array(16), wl = new Int32Array(16);
                                let bh0, bh1, bh2, bh3, bh4, bh5, bh6, bh7, bl0, bl1, bl2, bl3, bl4, bl5, bl6, bl7, th,
                                    tl, i, j, h, l, a, b, c, d;
                                let ah0 = hh[0], ah1 = hh[1], ah2 = hh[2], ah3 = hh[3], ah4 = hh[4], ah5 = hh[5],
                                    ah6 = hh[6], ah7 = hh[7], al0 = hl[0], al1 = hl[1], al2 = hl[2], al3 = hl[3],
                                    al4 = hl[4], al5 = hl[5], al6 = hl[6], al7 = hl[7];
                                let pos = 0;
                                while (n >= 128) {
                                    for (i = 0; i < 16; i++) {
                                        j = 8 * i + pos;
                                        wh[i] = (m[j + 0] << 24) | (m[j + 1] << 16) | (m[j + 2] << 8) | m[j + 3];
                                        wl[i] = (m[j + 4] << 24) | (m[j + 5] << 16) | (m[j + 6] << 8) | m[j + 7];
                                    }
                                    for (i = 0; i < 80; i++) {
                                        bh0 = ah0;
                                        bh1 = ah1;
                                        bh2 = ah2;
                                        bh3 = ah3;
                                        bh4 = ah4;
                                        bh5 = ah5;
                                        bh6 = ah6;
                                        bh7 = ah7;
                                        bl0 = al0;
                                        bl1 = al1;
                                        bl2 = al2;
                                        bl3 = al3;
                                        bl4 = al4;
                                        bl5 = al5;
                                        bl6 = al6;
                                        bl7 = al7;
                                        // add
                                        h = ah7;
                                        l = al7;
                                        a = l & 0xffff;
                                        b = l >>> 16;
                                        c = h & 0xffff;
                                        d = h >>> 16;
                                        // Sigma1
                                        h = ((ah4 >>> 14) | (al4 << (32 - 14))) ^ ((ah4 >>> 18) | (al4 << (32 - 18))) ^ ((al4 >>> (41 - 32)) | (ah4 << (32 - (41 - 32))));
                                        l = ((al4 >>> 14) | (ah4 << (32 - 14))) ^ ((al4 >>> 18) | (ah4 << (32 - 18))) ^ ((ah4 >>> (41 - 32)) | (al4 << (32 - (41 - 32))));
                                        a += l & 0xffff;
                                        b += l >>> 16;
                                        c += h & 0xffff;
                                        d += h >>> 16;
                                        // Ch
                                        h = (ah4 & ah5) ^ (~ah4 & ah6);
                                        l = (al4 & al5) ^ (~al4 & al6);
                                        a += l & 0xffff;
                                        b += l >>> 16;
                                        c += h & 0xffff;
                                        d += h >>> 16;
                                        // K
                                        h = K[i * 2];
                                        l = K[i * 2 + 1];
                                        a += l & 0xffff;
                                        b += l >>> 16;
                                        c += h & 0xffff;
                                        d += h >>> 16;
                                        // w
                                        h = wh[i % 16];
                                        l = wl[i % 16];
                                        a += l & 0xffff;
                                        b += l >>> 16;
                                        c += h & 0xffff;
                                        d += h >>> 16;
                                        b += a >>> 16;
                                        c += b >>> 16;
                                        d += c >>> 16;
                                        th = c & 0xffff | d << 16;
                                        tl = a & 0xffff | b << 16;
                                        // add
                                        h = th;
                                        l = tl;
                                        a = l & 0xffff;
                                        b = l >>> 16;
                                        c = h & 0xffff;
                                        d = h >>> 16;
                                        // Sigma0
                                        h = ((ah0 >>> 28) | (al0 << (32 - 28))) ^ ((al0 >>> (34 - 32)) | (ah0 << (32 - (34 - 32)))) ^ ((al0 >>> (39 - 32)) | (ah0 << (32 - (39 - 32))));
                                        l = ((al0 >>> 28) | (ah0 << (32 - 28))) ^ ((ah0 >>> (34 - 32)) | (al0 << (32 - (34 - 32)))) ^ ((ah0 >>> (39 - 32)) | (al0 << (32 - (39 - 32))));
                                        a += l & 0xffff;
                                        b += l >>> 16;
                                        c += h & 0xffff;
                                        d += h >>> 16;
                                        // Maj
                                        h = (ah0 & ah1) ^ (ah0 & ah2) ^ (ah1 & ah2);
                                        l = (al0 & al1) ^ (al0 & al2) ^ (al1 & al2);
                                        a += l & 0xffff;
                                        b += l >>> 16;
                                        c += h & 0xffff;
                                        d += h >>> 16;
                                        b += a >>> 16;
                                        c += b >>> 16;
                                        d += c >>> 16;
                                        bh7 = (c & 0xffff) | (d << 16);
                                        bl7 = (a & 0xffff) | (b << 16);
                                        // add
                                        h = bh3;
                                        l = bl3;
                                        a = l & 0xffff;
                                        b = l >>> 16;
                                        c = h & 0xffff;
                                        d = h >>> 16;
                                        h = th;
                                        l = tl;
                                        a += l & 0xffff;
                                        b += l >>> 16;
                                        c += h & 0xffff;
                                        d += h >>> 16;
                                        b += a >>> 16;
                                        c += b >>> 16;
                                        d += c >>> 16;
                                        bh3 = (c & 0xffff) | (d << 16);
                                        bl3 = (a & 0xffff) | (b << 16);
                                        ah1 = bh0;
                                        ah2 = bh1;
                                        ah3 = bh2;
                                        ah4 = bh3;
                                        ah5 = bh4;
                                        ah6 = bh5;
                                        ah7 = bh6;
                                        ah0 = bh7;
                                        al1 = bl0;
                                        al2 = bl1;
                                        al3 = bl2;
                                        al4 = bl3;
                                        al5 = bl4;
                                        al6 = bl5;
                                        al7 = bl6;
                                        al0 = bl7;
                                        if (i % 16 === 15) {
                                            for (j = 0; j < 16; j++) {
                                                // add
                                                h = wh[j];
                                                l = wl[j];
                                                a = l & 0xffff;
                                                b = l >>> 16;
                                                c = h & 0xffff;
                                                d = h >>> 16;
                                                h = wh[(j + 9) % 16];
                                                l = wl[(j + 9) % 16];
                                                a += l & 0xffff;
                                                b += l >>> 16;
                                                c += h & 0xffff;
                                                d += h >>> 16;
                                                // sigma0
                                                th = wh[(j + 1) % 16];
                                                tl = wl[(j + 1) % 16];
                                                h = ((th >>> 1) | (tl << (32 - 1))) ^ ((th >>> 8) | (tl << (32 - 8))) ^ (th >>> 7);
                                                l = ((tl >>> 1) | (th << (32 - 1))) ^ ((tl >>> 8) | (th << (32 - 8))) ^ ((tl >>> 7) | (th << (32 - 7)));
                                                a += l & 0xffff;
                                                b += l >>> 16;
                                                c += h & 0xffff;
                                                d += h >>> 16;
                                                // sigma1
                                                th = wh[(j + 14) % 16];
                                                tl = wl[(j + 14) % 16];
                                                h = ((th >>> 19) | (tl << (32 - 19))) ^ ((tl >>> (61 - 32)) | (th << (32 - (61 - 32)))) ^ (th >>> 6);
                                                l = ((tl >>> 19) | (th << (32 - 19))) ^ ((th >>> (61 - 32)) | (tl << (32 - (61 - 32)))) ^ ((tl >>> 6) | (th << (32 - 6)));
                                                a += l & 0xffff;
                                                b += l >>> 16;
                                                c += h & 0xffff;
                                                d += h >>> 16;
                                                b += a >>> 16;
                                                c += b >>> 16;
                                                d += c >>> 16;
                                                wh[j] = (c & 0xffff) | (d << 16);
                                                wl[j] = (a & 0xffff) | (b << 16);
                                            }
                                        }
                                    }
                                    // add
                                    h = ah0;
                                    l = al0;
                                    a = l & 0xffff;
                                    b = l >>> 16;
                                    c = h & 0xffff;
                                    d = h >>> 16;
                                    h = hh[0];
                                    l = hl[0];
                                    a += l & 0xffff;
                                    b += l >>> 16;
                                    c += h & 0xffff;
                                    d += h >>> 16;
                                    b += a >>> 16;
                                    c += b >>> 16;
                                    d += c >>> 16;
                                    hh[0] = ah0 = (c & 0xffff) | (d << 16);
                                    hl[0] = al0 = (a & 0xffff) | (b << 16);
                                    h = ah1;
                                    l = al1;
                                    a = l & 0xffff;
                                    b = l >>> 16;
                                    c = h & 0xffff;
                                    d = h >>> 16;
                                    h = hh[1];
                                    l = hl[1];
                                    a += l & 0xffff;
                                    b += l >>> 16;
                                    c += h & 0xffff;
                                    d += h >>> 16;
                                    b += a >>> 16;
                                    c += b >>> 16;
                                    d += c >>> 16;
                                    hh[1] = ah1 = (c & 0xffff) | (d << 16);
                                    hl[1] = al1 = (a & 0xffff) | (b << 16);
                                    h = ah2;
                                    l = al2;
                                    a = l & 0xffff;
                                    b = l >>> 16;
                                    c = h & 0xffff;
                                    d = h >>> 16;
                                    h = hh[2];
                                    l = hl[2];
                                    a += l & 0xffff;
                                    b += l >>> 16;
                                    c += h & 0xffff;
                                    d += h >>> 16;
                                    b += a >>> 16;
                                    c += b >>> 16;
                                    d += c >>> 16;
                                    hh[2] = ah2 = (c & 0xffff) | (d << 16);
                                    hl[2] = al2 = (a & 0xffff) | (b << 16);
                                    h = ah3;
                                    l = al3;
                                    a = l & 0xffff;
                                    b = l >>> 16;
                                    c = h & 0xffff;
                                    d = h >>> 16;
                                    h = hh[3];
                                    l = hl[3];
                                    a += l & 0xffff;
                                    b += l >>> 16;
                                    c += h & 0xffff;
                                    d += h >>> 16;
                                    b += a >>> 16;
                                    c += b >>> 16;
                                    d += c >>> 16;
                                    hh[3] = ah3 = (c & 0xffff) | (d << 16);
                                    hl[3] = al3 = (a & 0xffff) | (b << 16);
                                    h = ah4;
                                    l = al4;
                                    a = l & 0xffff;
                                    b = l >>> 16;
                                    c = h & 0xffff;
                                    d = h >>> 16;
                                    h = hh[4];
                                    l = hl[4];
                                    a += l & 0xffff;
                                    b += l >>> 16;
                                    c += h & 0xffff;
                                    d += h >>> 16;
                                    b += a >>> 16;
                                    c += b >>> 16;
                                    d += c >>> 16;
                                    hh[4] = ah4 = (c & 0xffff) | (d << 16);
                                    hl[4] = al4 = (a & 0xffff) | (b << 16);
                                    h = ah5;
                                    l = al5;
                                    a = l & 0xffff;
                                    b = l >>> 16;
                                    c = h & 0xffff;
                                    d = h >>> 16;
                                    h = hh[5];
                                    l = hl[5];
                                    a += l & 0xffff;
                                    b += l >>> 16;
                                    c += h & 0xffff;
                                    d += h >>> 16;
                                    b += a >>> 16;
                                    c += b >>> 16;
                                    d += c >>> 16;
                                    hh[5] = ah5 = (c & 0xffff) | (d << 16);
                                    hl[5] = al5 = (a & 0xffff) | (b << 16);
                                    h = ah6;
                                    l = al6;
                                    a = l & 0xffff;
                                    b = l >>> 16;
                                    c = h & 0xffff;
                                    d = h >>> 16;
                                    h = hh[6];
                                    l = hl[6];
                                    a += l & 0xffff;
                                    b += l >>> 16;
                                    c += h & 0xffff;
                                    d += h >>> 16;
                                    b += a >>> 16;
                                    c += b >>> 16;
                                    d += c >>> 16;
                                    hh[6] = ah6 = (c & 0xffff) | (d << 16);
                                    hl[6] = al6 = (a & 0xffff) | (b << 16);
                                    h = ah7;
                                    l = al7;
                                    a = l & 0xffff;
                                    b = l >>> 16;
                                    c = h & 0xffff;
                                    d = h >>> 16;
                                    h = hh[7];
                                    l = hl[7];
                                    a += l & 0xffff;
                                    b += l >>> 16;
                                    c += h & 0xffff;
                                    d += h >>> 16;
                                    b += a >>> 16;
                                    c += b >>> 16;
                                    d += c >>> 16;
                                    hh[7] = ah7 = (c & 0xffff) | (d << 16);
                                    hl[7] = al7 = (a & 0xffff) | (b << 16);
                                    pos += 128;
                                    n -= 128;
                                }
                                return n;
                            }

                            function crypto_hash(out, m, n) {
                                const hh = new Int32Array(8);
                                const hl = new Int32Array(8);
                                const x = new Uint8Array(256);
                                let i, b = n;
                                hh[0] = 0x6a09e667;
                                hh[1] = 0xbb67ae85;
                                hh[2] = 0x3c6ef372;
                                hh[3] = 0xa54ff53a;
                                hh[4] = 0x510e527f;
                                hh[5] = 0x9b05688c;
                                hh[6] = 0x1f83d9ab;
                                hh[7] = 0x5be0cd19;
                                hl[0] = 0xf3bcc908;
                                hl[1] = 0x84caa73b;
                                hl[2] = 0xfe94f82b;
                                hl[3] = 0x5f1d36f1;
                                hl[4] = 0xade682d1;
                                hl[5] = 0x2b3e6c1f;
                                hl[6] = 0xfb41bd6b;
                                hl[7] = 0x137e2179;
                                crypto_hashblocks_hl(hh, hl, m, n);
                                n %= 128;
                                for (i = 0; i < n; i++)
                                    x[i] = m[b - n + i];
                                x[n] = 128;
                                n = 256 - 128 * (n < 112 ? 1 : 0);
                                x[n - 9] = 0;
                                ts64(x, n - 8, (b / 0x20000000) | 0, b << 3);
                                crypto_hashblocks_hl(hh, hl, x, n);
                                for (i = 0; i < 8; i++)
                                    ts64(out, 8 * i, hh[i], hl[i]);
                                return 0;
                            }

                            function add(p, q) {
                                const a = gf(), b = gf(), c = gf(), d = gf(), e = gf(), f = gf(), g = gf(), h = gf(),
                                    t = gf();
                                Z(a, p[1], p[0]);
                                Z(t, q[1], q[0]);
                                M(a, a, t);
                                A(b, p[0], p[1]);
                                A(t, q[0], q[1]);
                                M(b, b, t);
                                M(c, p[3], q[3]);
                                M(c, c, D2);
                                M(d, p[2], q[2]);
                                A(d, d, d);
                                Z(e, b, a);
                                Z(f, d, c);
                                A(g, d, c);
                                A(h, b, a);
                                M(p[0], e, f);
                                M(p[1], h, g);
                                M(p[2], g, f);
                                M(p[3], e, h);
                            }

                            function cswap(p, q, b) {
                                for (let i = 0; i < 4; i++) {
                                    sel25519(p[i], q[i], b);
                                }
                            }

                            function pack(r, p) {
                                const tx = gf(), ty = gf(), zi = gf();
                                inv25519(zi, p[2]);
                                M(tx, p[0], zi);
                                M(ty, p[1], zi);
                                pack25519(r, ty);
                                r[31] ^= par25519(tx) << 7;
                            }

                            function scalarmult(p, q, s) {
                                let b, i;
                                set25519(p[0], gf0);
                                set25519(p[1], gf1);
                                set25519(p[2], gf1);
                                set25519(p[3], gf0);
                                for (i = 255; i >= 0; --i) {
                                    b = (s[(i / 8) | 0] >> (i & 7)) & 1;
                                    cswap(p, q, b);
                                    add(q, p);
                                    add(p, p);
                                    cswap(p, q, b);
                                }
                            }

                            function scalarbase(p, s) {
                                const q = [gf(), gf(), gf(), gf()];
                                set25519(q[0], X);
                                set25519(q[1], Y);
                                set25519(q[2], gf1);
                                M(q[3], X, Y);
                                scalarmult(p, q, s);
                            }

                            const L = new Float64Array([0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10]);

                            function modL(r, x) {
                                let carry, i, j, k;
                                for (i = 63; i >= 32; --i) {
                                    carry = 0;
                                    for (j = i - 32, k = i - 12; j < k; ++j) {
                                        x[j] += carry - 16 * x[i] * L[j - (i - 32)];
                                        carry = (x[j] + 128) >> 8;
                                        x[j] -= carry * 256;
                                    }
                                    x[j] += carry;
                                    x[i] = 0;
                                }
                                carry = 0;
                                for (j = 0; j < 32; j++) {
                                    x[j] += carry - (x[31] >> 4) * L[j];
                                    carry = x[j] >> 8;
                                    x[j] &= 255;
                                }
                                for (j = 0; j < 32; j++)
                                    x[j] -= carry * L[j];
                                for (i = 0; i < 32; i++) {
                                    x[i + 1] += x[i] >> 8;
                                    r[i] = x[i] & 255;
                                }
                            }

                            function reduce(r) {
                                const x = new Float64Array(64);
                                let i;
                                for (i = 0; i < 64; i++)
                                    x[i] = r[i];
                                for (i = 0; i < 64; i++)
                                    r[i] = 0;
                                modL(r, x);
                            }

// Like crypto_sign, but uses secret key directly in hash.
                            function crypto_sign_direct(sm, m, n, sk) {
                                const d = new Uint8Array(64), h = new Uint8Array(64), r = new Uint8Array(64);
                                const x = new Float64Array(64);
                                const p = [gf(), gf(), gf(), gf()];
                                let i, j;
                                for (i = 0; i < n; i++)
                                    sm[64 + i] = m[i];
                                for (i = 0; i < 32; i++)
                                    sm[32 + i] = sk[i];
                                crypto_hash(r, sm.subarray(32), n + 32);
                                reduce(r);
                                scalarbase(p, r);
                                pack(sm, p);
                                for (i = 0; i < 32; i++)
                                    sm[i + 32] = sk[32 + i];
                                crypto_hash(h, sm, n + 64);
                                reduce(h);
                                for (i = 0; i < 64; i++)
                                    x[i] = 0;
                                for (i = 0; i < 32; i++)
                                    x[i] = r[i];
                                for (i = 0; i < 32; i++) {
                                    for (j = 0; j < 32; j++) {
                                        x[i + j] += h[i] * sk[j];
                                    }
                                }
                                modL(sm.subarray(32), x);
                                return n + 64;
                            }

// Note: sm must be n+128.
                            function crypto_sign_direct_rnd(sm, m, n, sk, rnd) {
                                const d = new Uint8Array(64), h = new Uint8Array(64), r = new Uint8Array(64);
                                const x = new Float64Array(64);
                                const p = [gf(), gf(), gf(), gf()];
                                let i, j;
                                // Hash separation.
                                sm[0] = 0xfe;
                                for (i = 1; i < 32; i++)
                                    sm[i] = 0xff;
                                // Secret key.
                                for (i = 0; i < 32; i++)
                                    sm[32 + i] = sk[i];
                                // Message.
                                for (i = 0; i < n; i++)
                                    sm[64 + i] = m[i];
                                // Random suffix.
                                for (i = 0; i < 64; i++)
                                    sm[n + 64 + i] = rnd[i];
                                crypto_hash(r, sm, n + 128);
                                reduce(r);
                                scalarbase(p, r);
                                pack(sm, p);
                                for (i = 0; i < 32; i++)
                                    sm[i + 32] = sk[32 + i];
                                crypto_hash(h, sm, n + 64);
                                reduce(h);
                                // Wipe out random suffix.
                                for (i = 0; i < 64; i++)
                                    sm[n + 64 + i] = 0;
                                for (i = 0; i < 64; i++)
                                    x[i] = 0;
                                for (i = 0; i < 32; i++)
                                    x[i] = r[i];
                                for (i = 0; i < 32; i++) {
                                    for (j = 0; j < 32; j++) {
                                        x[i + j] += h[i] * sk[j];
                                    }
                                }
                                modL(sm.subarray(32, n + 64), x);
                                return n + 64;
                            }

                            function curve25519_sign(sm, m, n, sk, opt_rnd) {
                                // If opt_rnd is provided, sm must have n + 128,
                                // otherwise it must have n + 64 bytes.
                                // Convert Curve25519 secret key into Ed25519 secret key (includes pub key).
                                const edsk = new Uint8Array(64);
                                const p = [gf(), gf(), gf(), gf()];
                                for (let i = 0; i < 32; i++)
                                    edsk[i] = sk[i];
                                // Ensure private key is in the correct format.
                                edsk[0] &= 248;
                                edsk[31] &= 127;
                                edsk[31] |= 64;
                                scalarbase(p, edsk);
                                pack(edsk.subarray(32), p);
                                // Remember sign bit.
                                const signBit = edsk[63] & 128;
                                let smlen;
                                if (opt_rnd) {
                                    smlen = crypto_sign_direct_rnd(sm, m, n, edsk, opt_rnd);
                                }
                                else {
                                    smlen = crypto_sign_direct(sm, m, n, edsk);
                                }
                                // Copy sign bit from public key into signature.
                                sm[63] |= signBit;
                                return smlen;
                            }

                            function unpackneg(r, p) {
                                const t = gf(), chk = gf(), num = gf(), den = gf(), den2 = gf(), den4 = gf(),
                                    den6 = gf();
                                set25519(r[2], gf1);
                                unpack25519(r[1], p);
                                S(num, r[1]);
                                M(den, num, D);
                                Z(num, num, r[2]);
                                A(den, r[2], den);
                                S(den2, den);
                                S(den4, den2);
                                M(den6, den4, den2);
                                M(t, den6, num);
                                M(t, t, den);
                                pow2523(t, t);
                                M(t, t, num);
                                M(t, t, den);
                                M(t, t, den);
                                M(r[0], t, den);
                                S(chk, r[0]);
                                M(chk, chk, den);
                                if (neq25519(chk, num))
                                    M(r[0], r[0], I);
                                S(chk, r[0]);
                                M(chk, chk, den);
                                if (neq25519(chk, num))
                                    return -1;
                                if (par25519(r[0]) === (p[31] >> 7))
                                    Z(r[0], gf0, r[0]);
                                M(r[3], r[0], r[1]);
                                return 0;
                            }

                            function crypto_sign_open(m, sm, n, pk) {
                                let i, mlen;
                                const t = new Uint8Array(32), h = new Uint8Array(64);
                                const p = [gf(), gf(), gf(), gf()], q = [gf(), gf(), gf(), gf()];
                                mlen = -1;
                                if (n < 64)
                                    return -1;
                                if (unpackneg(q, pk))
                                    return -1;
                                for (i = 0; i < n; i++)
                                    m[i] = sm[i];
                                for (i = 0; i < 32; i++)
                                    m[i + 32] = pk[i];
                                crypto_hash(h, m, n);
                                reduce(h);
                                scalarmult(p, q, h);
                                scalarbase(q, sm.subarray(32));
                                add(p, q);
                                pack(t, p);
                                n -= 64;
                                if (crypto_verify_32(sm, 0, t, 0)) {
                                    for (i = 0; i < n; i++)
                                        m[i] = 0;
                                    return -1;
                                }
                                for (i = 0; i < n; i++)
                                    m[i] = sm[i + 64];
                                mlen = n;
                                return mlen;
                            }

// Converts Curve25519 public key back to Ed25519 public key.
// edwardsY = (montgomeryX - 1) / (montgomeryX + 1)
                            function convertPublicKey(pk) {
                                const z = new Uint8Array(32), x = gf(), a = gf(), b = gf();
                                unpack25519(x, pk);
                                A(a, x, gf1);
                                Z(b, x, gf1);
                                inv25519(a, a);
                                M(a, a, b);
                                pack25519(z, a);
                                return z;
                            }

                            function curve25519_sign_open(m, sm, n, pk) {
                                // Convert Curve25519 public key into Ed25519 public key.
                                const edpk = convertPublicKey(pk);
                                // Restore sign bit from signature.
                                edpk[31] |= sm[63] & 128;
                                // Remove sign bit from signature.
                                sm[63] &= 127;
                                // Verify signed message.
                                return crypto_sign_open(m, sm, n, edpk);
                            }

                            /* High-level API */
                            function checkArrayTypes(...args) {
                                let t, i;
                                for (i = 0; i < arguments.length; i++) {
                                    if ((t = Object.prototype.toString.call(arguments[i])) !== '[object Uint8Array]')
                                        throw new TypeError('unexpected type ' + t + ', use Uint8Array');
                                }
                            }

                            axlsign.sharedKey = function (secretKey, publicKey) {
                                checkArrayTypes(publicKey, secretKey);
                                if (publicKey.length !== 32)
                                    throw new Error('wrong public key length');
                                if (secretKey.length !== 32)
                                    throw new Error('wrong secret key length');
                                const sharedKey = new Uint8Array(32);
                                crypto_scalarmult(sharedKey, secretKey, publicKey);
                                return sharedKey;
                            };
                            axlsign.signMessage = function (secretKey, msg, opt_random) {
                                checkArrayTypes(msg, secretKey);
                                if (secretKey.length !== 32)
                                    throw new Error('wrong secret key length');
                                if (opt_random) {
                                    checkArrayTypes(opt_random);
                                    if (opt_random.length !== 64)
                                        throw new Error('wrong random data length');
                                    const buf = new Uint8Array(128 + msg.length);
                                    curve25519_sign(buf, msg, msg.length, secretKey, opt_random);
                                    return new Uint8Array(buf.subarray(0, 64 + msg.length));
                                }
                                else {
                                    const signedMsg = new Uint8Array(64 + msg.length);
                                    curve25519_sign(signedMsg, msg, msg.length, secretKey);
                                    return signedMsg;
                                }
                            };
                            axlsign.openMessage = function (publicKey, signedMsg) {
                                checkArrayTypes(signedMsg, publicKey);
                                if (publicKey.length !== 32)
                                    throw new Error('wrong public key length');
                                const tmp = new Uint8Array(signedMsg.length);
                                const mlen = curve25519_sign_open(tmp, signedMsg, signedMsg.length, publicKey);
                                if (mlen < 0)
                                    return null;
                                const m = new Uint8Array(mlen);
                                for (let i = 0; i < m.length; i++)
                                    m[i] = tmp[i];
                                return m;
                            };
                            axlsign.sign = function (secretKey, msg, opt_random) {
                                checkArrayTypes(secretKey, msg);
                                if (secretKey.length !== 32)
                                    throw new Error('wrong secret key length');
                                if (opt_random) {
                                    checkArrayTypes(opt_random);
                                    if (opt_random.length !== 64)
                                        throw new Error('wrong random data length');
                                }
                                const buf = new Uint8Array((opt_random ? 128 : 64) + msg.length);
                                curve25519_sign(buf, msg, msg.length, secretKey, opt_random);
                                const signature = new Uint8Array(64);
                                for (let i = 0; i < signature.length; i++)
                                    signature[i] = buf[i];
                                return signature;
                            };
                            axlsign.verify = function (publicKey, msg, signature) {
                                checkArrayTypes(msg, signature, publicKey);
                                if (signature.length !== 64)
                                    throw new Error('wrong signature length');
                                if (publicKey.length !== 32)
                                    throw new Error('wrong public key length');
                                const sm = new Uint8Array(64 + msg.length);
                                const m = new Uint8Array(64 + msg.length);
                                let i;
                                for (i = 0; i < 64; i++)
                                    sm[i] = signature[i];
                                for (i = 0; i < msg.length; i++)
                                    sm[i + 64] = msg[i];
                                return (curve25519_sign_open(m, sm, sm.length, publicKey) >= 0);
                            };
                            axlsign.generateKeyPair = function (seed) {
                                checkArrayTypes(seed);
                                if (seed.length !== 32)
                                    throw new Error('wrong seed length');
                                const sk = new Uint8Array(32);
                                const pk = new Uint8Array(32);
                                for (let i = 0; i < 32; i++)
                                    sk[i] = seed[i];
                                crypto_scalarmult_base(pk, sk);
                                // Turn secret key into the correct format.
                                sk[0] &= 248;
                                sk[31] &= 127;
                                sk[31] |= 64;
                                // Remove sign bit from public key.
                                pk[31] &= 127;
                                return {
                                    public: pk,
                                    private: sk
                                };
                            };
                            exports.default = axlsign;

                        }, {}],
                        8: [function (require, module, exports) {
                            "use strict";
                            Object.defineProperty(exports, "__esModule", {value: true});
                            const ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';
                            const ALPHABET_MAP = ALPHABET.split('').reduce((map, c, i) => {
                                map[c] = i;
                                return map;
                            }, {});
                            exports.default = {
                                encode(buffer) {
                                    if (!buffer.length)
                                        return '';
                                    const digits = [0];
                                    for (let i = 0; i < buffer.length; i++) {
                                        for (let j = 0; j < digits.length; j++) {
                                            digits[j] <<= 8;
                                        }
                                        digits[0] += buffer[i];
                                        let carry = 0;
                                        for (let k = 0; k < digits.length; k++) {
                                            digits[k] += carry;
                                            carry = (digits[k] / 58) | 0;
                                            digits[k] %= 58;
                                        }
                                        while (carry) {
                                            digits.push(carry % 58);
                                            carry = (carry / 58) | 0;
                                        }
                                    }
                                    for (let i = 0; buffer[i] === 0 && i < buffer.length - 1; i++) {
                                        digits.push(0);
                                    }
                                    return digits.reverse().map(function (digit) {
                                        return ALPHABET[digit];
                                    }).join('');
                                },
                                decode(string) {
                                    if (!string.length)
                                        return new Uint8Array(0);
                                    const bytes = [0];
                                    for (let i = 0; i < string.length; i++) {
                                        const c = string[i];
                                        if (!(c in ALPHABET_MAP)) {
                                            throw `There is no character "${c}" in the Base58 sequence!`;
                                        }
                                        for (let j = 0; j < bytes.length; j++) {
                                            bytes[j] *= 58;
                                        }
                                        bytes[0] += ALPHABET_MAP[c];
                                        let carry = 0;
                                        for (let j = 0; j < bytes.length; j++) {
                                            bytes[j] += carry;
                                            carry = bytes[j] >> 8;
                                            bytes[j] &= 0xff;
                                        }
                                        while (carry) {
                                            bytes.push(carry & 0xff);
                                            carry >>= 8;
                                        }
                                    }
                                    for (let i = 0; string[i] === '1' && i < string.length - 1; i++) {
                                        bytes.push(0);
                                    }
                                    return new Uint8Array(bytes.reverse());
                                }
                            };

                        }, {}],
                        9: [function (require, module, exports) {
                            (function (Buffer) {
                                "use strict";
                                Object.defineProperty(exports, "__esModule", {value: true});
                                var ERROR_MSG_INPUT = 'Input must be an string, Buffer or Uint8Array';

// For convenience, let people hash a string, not just a Uint8Array
                                function normalizeInput(input) {
                                    var ret;
                                    if (input instanceof Uint8Array) {
                                        ret = input;
                                    }
                                    else if (input instanceof Buffer) {
                                        ret = new Uint8Array(input);
                                    }
                                    else if (typeof (input) === 'string') {
                                        ret = new Uint8Array(Buffer.from(input, 'utf8'));
                                    }
                                    else {
                                        throw new Error(ERROR_MSG_INPUT);
                                    }
                                    return ret;
                                }

// Converts a Uint8Array to a hexadecimal string
// For example, toHex([255, 0, 255]) returns "ff00ff"
                                function toHex(bytes) {
                                    return Array.prototype.map.call(bytes, function (n) {
                                        return (n < 16 ? '0' : '') + n.toString(16);
                                    }).join('');
                                }

// Converts any value in [0...2^32-1] to an 8-character hex string
                                function uint32ToHex(val) {
                                    return (0x100000000 + val).toString(16).substring(1);
                                }

// For debugging: prints out hash state in the same format as the RFC
// sample computation exactly, so that you can diff
                                function debugPrint(label, arr, size) {
                                    var msg = '\n' + label + ' = ';
                                    for (var i = 0; i < arr.length; i += 2) {
                                        if (size === 32) {
                                            msg += uint32ToHex(arr[i]).toUpperCase();
                                            msg += ' ';
                                            msg += uint32ToHex(arr[i + 1]).toUpperCase();
                                        }
                                        else if (size === 64) {
                                            msg += uint32ToHex(arr[i + 1]).toUpperCase();
                                            msg += uint32ToHex(arr[i]).toUpperCase();
                                        }
                                        else
                                            throw new Error('Invalid size ' + size);
                                        if (i % 6 === 4) {
                                            msg += '\n' + new Array(label.length + 4).join(' ');
                                        }
                                        else if (i < arr.length - 2) {
                                            msg += ' ';
                                        }
                                    }
                                }

// For performance testing: generates N bytes of input, hashes M times
// Measures and prints MB/second hash performance each time
                                function testSpeed(hashFn, N, M) {
                                    var startMs = new Date().getTime();
                                    var input = new Uint8Array(N);
                                    for (var i = 0; i < N; i++) {
                                        input[i] = i % 256;
                                    }
                                    var genMs = new Date().getTime();
                                    startMs = genMs;
                                    for (i = 0; i < M; i++) {
                                        var hashHex = hashFn(input);
                                        var hashMs = new Date().getTime();
                                        var ms = hashMs - startMs;
                                        startMs = hashMs;
                                    }
                                }

// Blake2B in pure Javascript
// Adapted from the reference implementation in RFC7693
// Ported to Javascript by DC - https://github.com/dcposch
// 64-bit unsigned addition
// Sets v[a,a+1] += v[b,b+1]
// v should be a Uint32Array
                                function ADD64AA(v, a, b) {
                                    var o0 = v[a] + v[b];
                                    var o1 = v[a + 1] + v[b + 1];
                                    if (o0 >= 0x100000000) {
                                        o1++;
                                    }
                                    v[a] = o0;
                                    v[a + 1] = o1;
                                }

// 64-bit unsigned addition
// Sets v[a,a+1] += b
// b0 is the low 32 bits of b, b1 represents the high 32 bits
                                function ADD64AC(v, a, b0, b1) {
                                    var o0 = v[a] + b0;
                                    if (b0 < 0) {
                                        o0 += 0x100000000;
                                    }
                                    var o1 = v[a + 1] + b1;
                                    if (o0 >= 0x100000000) {
                                        o1++;
                                    }
                                    v[a] = o0;
                                    v[a + 1] = o1;
                                }

// Little-endian byte access
                                function B2B_GET32(arr, i) {
                                    return (arr[i] ^
                                        (arr[i + 1] << 8) ^
                                        (arr[i + 2] << 16) ^
                                        (arr[i + 3] << 24));
                                }

// G Mixing function
// The ROTRs are inlined for speed
                                function B2B_G(a, b, c, d, ix, iy) {
                                    var x0 = m[ix];
                                    var x1 = m[ix + 1];
                                    var y0 = m[iy];
                                    var y1 = m[iy + 1];
                                    ADD64AA(v, a, b); // v[a,a+1] += v[b,b+1] ... in JS we must store a uint64 as two uint32s
                                    ADD64AC(v, a, x0, x1); // v[a, a+1] += x ... x0 is the low 32 bits of x, x1 is the high 32 bits
                                    // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated to the right by 32 bits
                                    var xor0 = v[d] ^ v[a];
                                    var xor1 = v[d + 1] ^ v[a + 1];
                                    v[d] = xor1;
                                    v[d + 1] = xor0;
                                    ADD64AA(v, c, d);
                                    // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 24 bits
                                    xor0 = v[b] ^ v[c];
                                    xor1 = v[b + 1] ^ v[c + 1];
                                    v[b] = (xor0 >>> 24) ^ (xor1 << 8);
                                    v[b + 1] = (xor1 >>> 24) ^ (xor0 << 8);
                                    ADD64AA(v, a, b);
                                    ADD64AC(v, a, y0, y1);
                                    // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated right by 16 bits
                                    xor0 = v[d] ^ v[a];
                                    xor1 = v[d + 1] ^ v[a + 1];
                                    v[d] = (xor0 >>> 16) ^ (xor1 << 16);
                                    v[d + 1] = (xor1 >>> 16) ^ (xor0 << 16);
                                    ADD64AA(v, c, d);
                                    // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 63 bits
                                    xor0 = v[b] ^ v[c];
                                    xor1 = v[b + 1] ^ v[c + 1];
                                    v[b] = (xor1 >>> 31) ^ (xor0 << 1);
                                    v[b + 1] = (xor0 >>> 31) ^ (xor1 << 1);
                                }

// Initialization Vector
                                var BLAKE2B_IV32 = new Uint32Array([
                                    0xF3BCC908, 0x6A09E667, 0x84CAA73B, 0xBB67AE85,
                                    0xFE94F82B, 0x3C6EF372, 0x5F1D36F1, 0xA54FF53A,
                                    0xADE682D1, 0x510E527F, 0x2B3E6C1F, 0x9B05688C,
                                    0xFB41BD6B, 0x1F83D9AB, 0x137E2179, 0x5BE0CD19
                                ]);
                                var SIGMA8 = [
                                    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                                    14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3,
                                    11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4,
                                    7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8,
                                    9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13,
                                    2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9,
                                    12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11,
                                    13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10,
                                    6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5,
                                    10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0,
                                    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                                    14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3
                                ];
// These are offsets into a uint64 buffer.
// Multiply them all by 2 to make them offsets into a uint32 buffer,
// because this is Javascript and we don't have uint64s
                                var SIGMA82 = new Uint8Array(SIGMA8.map(function (x) {
                                    return x * 2;
                                }));
// Compression function. 'last' flag indicates last block.
// Note we're representing 16 uint64s as 32 uint32s
                                var v = new Uint32Array(32);
                                var m = new Uint32Array(32);

                                function blake2bCompress(ctx, last) {
                                    var i = 0;
                                    // init work variables
                                    for (i = 0; i < 16; i++) {
                                        v[i] = ctx.h[i];
                                        v[i + 16] = BLAKE2B_IV32[i];
                                    }
                                    // low 64 bits of offset
                                    v[24] = v[24] ^ ctx.t;
                                    v[25] = v[25] ^ (ctx.t / 0x100000000);
                                    // high 64 bits not supported, offset may not be higher than 2**53-1
                                    // last block flag set ?
                                    if (last) {
                                        v[28] = ~v[28];
                                        v[29] = ~v[29];
                                    }
                                    // get little-endian words
                                    for (i = 0; i < 32; i++) {
                                        m[i] = B2B_GET32(ctx.b, 4 * i);
                                    }
                                    // twelve rounds of mixing
                                    // uncomment the DebugPrint calls to log the computation
                                    // and match the RFC sample documentation
                                    // util.debugPrint('          m[16]', m, 64)
                                    for (i = 0; i < 12; i++) {
                                        // util.debugPrint('   (i=' + (i < 10 ? ' ' : '') + i + ') v[16]', v, 64)
                                        B2B_G(0, 8, 16, 24, SIGMA82[i * 16 + 0], SIGMA82[i * 16 + 1]);
                                        B2B_G(2, 10, 18, 26, SIGMA82[i * 16 + 2], SIGMA82[i * 16 + 3]);
                                        B2B_G(4, 12, 20, 28, SIGMA82[i * 16 + 4], SIGMA82[i * 16 + 5]);
                                        B2B_G(6, 14, 22, 30, SIGMA82[i * 16 + 6], SIGMA82[i * 16 + 7]);
                                        B2B_G(0, 10, 20, 30, SIGMA82[i * 16 + 8], SIGMA82[i * 16 + 9]);
                                        B2B_G(2, 12, 22, 24, SIGMA82[i * 16 + 10], SIGMA82[i * 16 + 11]);
                                        B2B_G(4, 14, 16, 26, SIGMA82[i * 16 + 12], SIGMA82[i * 16 + 13]);
                                        B2B_G(6, 8, 18, 28, SIGMA82[i * 16 + 14], SIGMA82[i * 16 + 15]);
                                    }
                                    // util.debugPrint('   (i=12) v[16]', v, 64)
                                    for (i = 0; i < 16; i++) {
                                        ctx.h[i] = ctx.h[i] ^ v[i] ^ v[i + 16];
                                    }
                                    // util.debugPrint('h[8]', ctx.h, 64)
                                }

// Creates a BLAKE2b hashing context
// Requires an output length between 1 and 64 bytes
// Takes an optional Uint8Array key
                                function blake2bInit(outlen, key) {
                                    if (outlen === 0 || outlen > 64) {
                                        throw new Error('Illegal output length, expected 0 < length <= 64');
                                    }
                                    if (key && key.length > 64) {
                                        throw new Error('Illegal key, expected Uint8Array with 0 < length <= 64');
                                    }
                                    // state, 'param block'
                                    var ctx = {
                                        b: new Uint8Array(128),
                                        h: new Uint32Array(16),
                                        t: 0,
                                        c: 0,
                                        outlen: outlen // output length in bytes
                                    };
                                    // initialize hash state
                                    for (var i = 0; i < 16; i++) {
                                        ctx.h[i] = BLAKE2B_IV32[i];
                                    }
                                    var keylen = key ? key.length : 0;
                                    ctx.h[0] ^= 0x01010000 ^ (keylen << 8) ^ outlen;
                                    // key the hash, if applicable
                                    if (key) {
                                        blake2bUpdate(ctx, key);
                                        // at the end
                                        ctx.c = 128;
                                    }
                                    return ctx;
                                }

                                exports.blake2bInit = blake2bInit;
// Updates a BLAKE2b streaming hash
// Requires hash context and Uint8Array (byte array)
                                function blake2bUpdate(ctx, input) {
                                    for (var i = 0; i < input.length; i++) {
                                        if (ctx.c === 128) { // buffer full ?
                                            ctx.t += ctx.c; // add counters
                                            blake2bCompress(ctx, false); // compress (not last)
                                            ctx.c = 0; // counter to zero
                                        }
                                        ctx.b[ctx.c++] = input[i];
                                    }
                                }

                                exports.blake2bUpdate = blake2bUpdate;
// Completes a BLAKE2b streaming hash
// Returns a Uint8Array containing the message digest
                                function blake2bFinal(ctx) {
                                    ctx.t += ctx.c; // mark last block offset
                                    while (ctx.c < 128) { // fill up with zeros
                                        ctx.b[ctx.c++] = 0;
                                    }
                                    blake2bCompress(ctx, true); // final block flag = 1
                                    // little endian convert and store
                                    var out = new Uint8Array(ctx.outlen);
                                    for (var i = 0; i < ctx.outlen; i++) {
                                        out[i] = ctx.h[i >> 2] >> (8 * (i & 3));
                                    }
                                    return out;
                                }

                                exports.blake2bFinal = blake2bFinal;
// Computes the BLAKE2B hash of a string or byte array, and returns a Uint8Array
//
// Returns a n-byte Uint8Array
//
// Parameters:
// - input - the input bytes, as a string, Buffer or Uint8Array
// - key - optional key Uint8Array, up to 64 bytes
// - outlen - optional output length in bytes, default 64
                                function blake2b(input, key, outlen) {
                                    // preprocess inputs
                                    outlen = outlen || 64;
                                    input = normalizeInput(input);
                                    // do the math
                                    var ctx = blake2bInit(outlen, key);
                                    blake2bUpdate(ctx, input);
                                    return blake2bFinal(ctx);
                                }

                                exports.blake2b = blake2b;
// Computes the BLAKE2B hash of a string or byte array
//
// Returns an n-byte hash in hex, all lowercase
//
// Parameters:
// - input - the input bytes, as a string, Buffer, or Uint8Array
// - key - optional key Uint8Array, up to 64 bytes
// - outlen - optional output length in bytes, default 64
                                function blake2bHex(input, key, outlen) {
                                    var output = blake2b(input, key, outlen);
                                    return toHex(output);
                                }

                                exports.blake2bHex = blake2bHex;

                            }).call(this, require("buffer").Buffer)
                        }, {"buffer": 64}],
                        10: [function (require, module, exports) {
                            "use strict";
                            Object.defineProperty(exports, "__esModule", {value: true});
                            const CryptoJS = require("crypto-js");
                            /** START OF THE LICENSED CODE */
                            /******************************************************************************
                             * Copyright © 2013-2016 The Nxt Core Developers.                             *
                             *                                                                            *
                             * See the AUTHORS.txt, DEVELOPER-AGREEMENT.txt and LICENSE.txt files at      *
                             * the top-level directory of this distribution for the individual copyright  *
                             * holder information and the developer policies on copyright and licensing.  *
                             *                                                                            *
                             * Unless otherwise agreed in a custom licensing agreement, no part of the    *
                             * Nxt software, including this file, may be copied, modified, propagated,    *
                             * or distributed except according to the terms contained in the LICENSE.txt  *
                             * file.                                                                      *
                             *                                                                            *
                             * Removal or modification of this copyright notice is prohibited.            *
                             *                                                                            *
                             ******************************************************************************/
                            let converters = function () {
                                let charToNibble = {};
                                let nibbleToChar = [];
                                let i;
                                for (i = 0; i <= 9; ++i) {
                                    let character = i.toString();
                                    charToNibble[character] = i;
                                    nibbleToChar.push(character);
                                }
                                for (i = 10; i <= 15; ++i) {
                                    let lowerChar = String.fromCharCode('a'.charCodeAt(0) + i - 10);
                                    let upperChar = String.fromCharCode('A'.charCodeAt(0) + i - 10);
                                    charToNibble[lowerChar] = i;
                                    charToNibble[upperChar] = i;
                                    nibbleToChar.push(lowerChar);
                                }
                                return {
                                    byteArrayToHexString: function (bytes) {
                                        let str = '';
                                        for (let i = 0; i < bytes.length; ++i) {
                                            if (bytes[i] < 0) {
                                                bytes[i] += 256;
                                            }
                                            str += nibbleToChar[bytes[i] >> 4] + nibbleToChar[bytes[i] & 0x0F];
                                        }
                                        return str;
                                    },
                                    stringToByteArray: function (str) {
                                        str = unescape(encodeURIComponent(str));
                                        let bytes = new Array(str.length);
                                        for (let i = 0; i < str.length; ++i)
                                            bytes[i] = str.charCodeAt(i);
                                        return bytes;
                                    },
                                    hexStringToByteArray: function (str) {
                                        let bytes = [];
                                        let i = 0;
                                        if (0 !== str.length % 2) {
                                            bytes.push(charToNibble[str.charAt(0)]);
                                            ++i;
                                        }
                                        for (; i < str.length - 1; i += 2)
                                            bytes.push((charToNibble[str.charAt(i)] << 4) + charToNibble[str.charAt(i + 1)]);
                                        return bytes;
                                    },
                                    stringToHexString: function (str) {
                                        return this.byteArrayToHexString(this.stringToByteArray(str));
                                    },
                                    hexStringToString: function (hex) {
                                        return this.byteArrayToString(this.hexStringToByteArray(hex));
                                    },
                                    checkBytesToIntInput: function (bytes, numBytes, opt_startIndex) {
                                        let startIndex = opt_startIndex || 0;
                                        if (startIndex < 0) {
                                            throw new Error('Start index should not be negative');
                                        }
                                        if (bytes.length < startIndex + numBytes) {
                                            throw new Error('Need at least ' + (numBytes) + ' bytes to convert to an integer');
                                        }
                                        return startIndex;
                                    },
                                    byteArrayToSignedShort: function (bytes, opt_startIndex) {
                                        let index = this.checkBytesToIntInput(bytes, 2, opt_startIndex);
                                        let value = bytes[index];
                                        value += bytes[index + 1] << 8;
                                        return value;
                                    },
                                    byteArrayToSignedInt32: function (bytes, opt_startIndex) {
                                        let index = this.checkBytesToIntInput(bytes, 4, opt_startIndex);
                                        let value = bytes[index];
                                        value += bytes[index + 1] << 8;
                                        value += bytes[index + 2] << 16;
                                        value += bytes[index + 3] << 24;
                                        return value;
                                    },
                                    byteArrayToBigInteger: function (bytes, opt_startIndex) {
                                        let index = this.checkBytesToIntInput(bytes, 8, opt_startIndex);
                                        let value = new BigInteger('0', 10);
                                        let temp1, temp2;
                                        for (let i = 7; i >= 0; i--) {
                                            temp1 = value.multiply(new BigInteger('256', 10));
                                            temp2 = temp1.add(new BigInteger(bytes[opt_startIndex + i].toString(10), 10));
                                            value = temp2;
                                        }
                                        return value;
                                    },
                                    // create a wordArray that is Big-Endian
                                    byteArrayToWordArray: function (byteArray) {
                                        let i = 0, offset = 0, word = 0, len = byteArray.length;
                                        let words = new Uint32Array(((len / 4) | 0) + (len % 4 == 0 ? 0 : 1));
                                        while (i < (len - (len % 4))) {
                                            words[offset++] = (byteArray[i++] << 24) | (byteArray[i++] << 16) | (byteArray[i++] << 8) | (byteArray[i++]);
                                        }
                                        if (len % 4 != 0) {
                                            word = byteArray[i++] << 24;
                                            if (len % 4 > 1) {
                                                word = word | byteArray[i++] << 16;
                                            }
                                            if (len % 4 > 2) {
                                                word = word | byteArray[i++] << 8;
                                            }
                                            words[offset] = word;
                                        }
                                        let wordArray = new Object();
                                        wordArray.sigBytes = len;
                                        wordArray.words = words;
                                        return wordArray;
                                    },
                                    // assumes wordArray is Big-Endian
                                    wordArrayToByteArray: function (wordArray) {
                                        return converters.wordArrayToByteArrayImpl(wordArray, true);
                                    },
                                    wordArrayToByteArrayImpl: function (wordArray, isFirstByteHasSign) {
                                        let len = wordArray.words.length;
                                        if (len == 0) {
                                            return new Array(0);
                                        }
                                        let byteArray = new Array(wordArray.sigBytes);
                                        let offset = 0, word, i;
                                        for (i = 0; i < len - 1; i++) {
                                            word = wordArray.words[i];
                                            byteArray[offset++] = isFirstByteHasSign ? word >> 24 : (word >> 24) & 0xff;
                                            byteArray[offset++] = (word >> 16) & 0xff;
                                            byteArray[offset++] = (word >> 8) & 0xff;
                                            byteArray[offset++] = word & 0xff;
                                        }
                                        word = wordArray.words[len - 1];
                                        byteArray[offset++] = isFirstByteHasSign ? word >> 24 : (word >> 24) & 0xff;
                                        if (wordArray.sigBytes % 4 == 0) {
                                            byteArray[offset++] = (word >> 16) & 0xff;
                                            byteArray[offset++] = (word >> 8) & 0xff;
                                            byteArray[offset++] = word & 0xff;
                                        }
                                        if (wordArray.sigBytes % 4 > 1) {
                                            byteArray[offset++] = (word >> 16) & 0xff;
                                        }
                                        if (wordArray.sigBytes % 4 > 2) {
                                            byteArray[offset++] = (word >> 8) & 0xff;
                                        }
                                        return byteArray;
                                    },
                                    byteArrayToString: function (bytes, opt_startIndex, length) {
                                        if (length == 0) {
                                            return '';
                                        }
                                        if (opt_startIndex && length) {
                                            let index = this.checkBytesToIntInput(bytes, parseInt(length, 10), parseInt(opt_startIndex, 10));
                                            bytes = bytes.slice(opt_startIndex, opt_startIndex + length);
                                        }
                                        return decodeURIComponent(escape(String.fromCharCode.apply(null, bytes)));
                                    },
                                    byteArrayToShortArray: function (byteArray) {
                                        let shortArray = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
                                        let i;
                                        for (i = 0; i < 16; i++) {
                                            shortArray[i] = byteArray[i * 2] | byteArray[i * 2 + 1] << 8;
                                        }
                                        return shortArray;
                                    },
                                    shortArrayToByteArray: function (shortArray) {
                                        let byteArray = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
                                        let i;
                                        for (i = 0; i < 16; i++) {
                                            byteArray[2 * i] = shortArray[i] & 0xff;
                                            byteArray[2 * i + 1] = shortArray[i] >> 8;
                                        }
                                        return byteArray;
                                    },
                                    shortArrayToHexString: function (ary) {
                                        let res = '';
                                        for (let i = 0; i < ary.length; i++) {
                                            res += nibbleToChar[(ary[i] >> 4) & 0x0f] + nibbleToChar[ary[i] & 0x0f] + nibbleToChar[(ary[i] >> 12) & 0x0f] + nibbleToChar[(ary[i] >> 8) & 0x0f];
                                        }
                                        return res;
                                    },
                                    /**
                                     * Produces an array of the specified number of bytes to represent the integer
                                     * value. Default output encodes ints in little endian format. Handles signed
                                     * as well as unsigned integers. Due to limitations in JavaScript's number
                                     * format, x cannot be a true 64 bit integer (8 bytes).
                                     */
                                    intToBytes_: function (x, numBytes, unsignedMax, opt_bigEndian) {
                                        let signedMax = Math.floor(unsignedMax / 2);
                                        let negativeMax = (signedMax + 1) * -1;
                                        if (x != Math.floor(x) || x < negativeMax || x > unsignedMax) {
                                            throw new Error(x + ' is not a ' + (numBytes * 8) + ' bit integer');
                                        }
                                        let bytes = [];
                                        let current;
                                        // Number type 0 is in the positive int range, 1 is larger than signed int,
                                        // and 2 is negative int.
                                        let numberType = x >= 0 && x <= signedMax ? 0 :
                                            x > signedMax && x <= unsignedMax ? 1 : 2;
                                        if (numberType == 2) {
                                            x = (x * -1) - 1;
                                        }
                                        for (let i = 0; i < numBytes; i++) {
                                            if (numberType == 2) {
                                                current = 255 - (x % 256);
                                            }
                                            else {
                                                current = x % 256;
                                            }
                                            if (opt_bigEndian) {
                                                bytes.unshift(current);
                                            }
                                            else {
                                                bytes.push(current);
                                            }
                                            if (numberType == 1) {
                                                x = Math.floor(x / 256);
                                            }
                                            else {
                                                x = x >> 8;
                                            }
                                        }
                                        return bytes;
                                    },
                                    int32ToBytes: function (x, opt_bigEndian) {
                                        return converters.intToBytes_(x, 4, 4294967295, opt_bigEndian);
                                    },
                                    int16ToBytes: function (x, opt_bigEndian) {
                                        return converters.intToBytes_(x, 2, 65535, opt_bigEndian);
                                    },
                                    /**
                                     * Based on https://groups.google.com/d/msg/crypto-js/TOb92tcJlU0/Eq7VZ5tpi-QJ
                                     * Converts a word array to a Uint8Array.
                                     * @param {WordArray} wordArray The word array.
                                     * @return {Uint8Array} The Uint8Array.
                                     */
                                    wordArrayToByteArrayEx: function (wordArray) {
                                        // Shortcuts
                                        let words = wordArray.words;
                                        let sigBytes = wordArray.sigBytes;
                                        // Convert
                                        let u8 = new Uint8Array(sigBytes);
                                        for (let i = 0; i < sigBytes; i++) {
                                            let byte = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
                                            u8[i] = byte;
                                        }
                                        return u8;
                                    },
                                    /**
                                     * Converts a Uint8Array to a word array.
                                     * @param {string} u8Str The Uint8Array.
                                     * @return {WordArray} The word array.
                                     */
                                    byteArrayToWordArrayEx: function (u8arr) {
                                        // Shortcut
                                        let len = u8arr.length;
                                        // Convert
                                        let words = [];
                                        for (let i = 0; i < len; i++) {
                                            words[i >>> 2] |= (u8arr[i] & 0xff) << (24 - (i % 4) * 8);
                                        }
                                        return CryptoJS.lib.WordArray.create(words, len);
                                    }
                                };
                            }();
                            /** END OF THE LICENSED CODE */
                            exports.default = converters;

                        }, {"crypto-js": 81}],
                        11: [function (require, module, exports) {
                            (function (Buffer) {
                                "use strict";
                                Object.defineProperty(exports, "__esModule", {value: true});

                                function nodeRandom(count, options) {
                                    const crypto = require('crypto');
                                    const buf = crypto.randomBytes(count);
                                    switch (options.type) {
                                        case 'Array':
                                            return [].slice.call(buf);
                                        case 'Buffer':
                                            return buf;
                                        case 'Uint8Array':
                                            const arr = new Uint8Array(count);
                                            for (let i = 0; i < count; ++i) {
                                                arr[i] = buf.readUInt8(i);
                                            }
                                            return arr;
                                        default:
                                            throw new Error(options.type + ' is unsupported.');
                                    }
                                }

                                function browserRandom(count, options) {
                                    const nativeArr = new Uint8Array(count);
                                    const crypto = self.crypto || self.msCrypto;
                                    crypto.getRandomValues(nativeArr);
                                    switch (options.type) {
                                        case 'Array':
                                            return [].slice.call(nativeArr);
                                        case 'Buffer':
                                            try {
                                                const b = new Buffer(1);
                                            }
                                            catch (e) {
                                                throw new Error('Buffer not supported in this environment. Use Node.js or Browserify for browser support.');
                                            }
                                            return new Buffer(nativeArr);
                                        case 'Uint8Array':
                                            return nativeArr;
                                        default:
                                            throw new Error(options.type + ' is unsupported.');
                                    }
                                }

                                function secureRandom(count, options) {
                                    options = options || {type: 'Array'};
                                    if (typeof window !== 'undefined' || typeof self !== 'undefined') {
                                        return browserRandom(count, options);
                                    }
                                    else if (typeof exports === 'object' && typeof module !== 'undefined') {
                                        return nodeRandom(count, options);
                                    }
                                    else {
                                        throw new Error('Your environment is not defined');
                                    }
                                }

                                exports.default = {
                                    secureRandom: secureRandom,
                                    randomArray(byteCount) {
                                        return secureRandom(byteCount, {type: 'Array'});
                                    },
                                    randomUint8Array(byteCount) {
                                        return secureRandom(byteCount, {type: 'Uint8Array'});
                                    },
                                    randomBuffer(byteCount) {
                                        return secureRandom(byteCount, {type: 'Buffer'});
                                    }
                                };

                            }).call(this, require("buffer").Buffer)
                        }, {"buffer": 64, "crypto": 72}],
                        12: [function (require, module, exports) {
                            "use strict";
                            /**
                             * [js-sha3]{@link https://github.com/emn178/js-sha3}
                             *
                             * @version 0.5.7
                             * @author Chen, Yi-Cyuan [emn178@gmail.com]
                             * @copyright Chen, Yi-Cyuan 2015-2016
                             * @license MIT
                             */
                            Object.defineProperty(exports, "__esModule", {value: true});
                            const sha3 = {};
                            const HEX_CHARS = '0123456789abcdef'.split('');
                            const SHAKE_PADDING = [31, 7936, 2031616, 520093696];
                            const KECCAK_PADDING = [1, 256, 65536, 16777216];
                            const PADDING = [6, 1536, 393216, 100663296];
                            const SHIFT = [0, 8, 16, 24];
                            const RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,
                                0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0,
                                2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771,
                                2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,
                                2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
                            const BITS = [224, 256, 384, 512];
                            const SHAKE_BITS = [128, 256];
                            const OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array'];
                            const createOutputMethod = function (bits, padding, outputType) {
                                return function (message) {
                                    return new Keccak(bits, padding, bits).update(message)[outputType]();
                                };
                            };
                            const createShakeOutputMethod = function (bits, padding, outputType) {
                                return function (message, outputBits) {
                                    return new Keccak(bits, padding, outputBits).update(message)[outputType]();
                                };
                            };
                            const createMethod = function (bits, padding) {
                                const method = createOutputMethod(bits, padding, 'hex');
                                method.create = function () {
                                    return new Keccak(bits, padding, bits);
                                };
                                method.update = function (message) {
                                    return method.create().update(message);
                                };
                                for (let i = 0; i < OUTPUT_TYPES.length; ++i) {
                                    const type = OUTPUT_TYPES[i];
                                    method[type] = createOutputMethod(bits, padding, type);
                                }
                                return method;
                            };
                            const createShakeMethod = function (bits, padding) {
                                const method = createShakeOutputMethod(bits, padding, 'hex');
                                method.create = function (outputBits) {
                                    return new Keccak(bits, padding, outputBits);
                                };
                                method.update = function (message, outputBits) {
                                    return method.create(outputBits).update(message);
                                };
                                for (let i = 0; i < OUTPUT_TYPES.length; ++i) {
                                    const type = OUTPUT_TYPES[i];
                                    method[type] = createShakeOutputMethod(bits, padding, type);
                                }
                                return method;
                            };
                            const algorithms = [
                                {name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod},
                                {name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod},
                                {
                                    name: 'shake',
                                    padding: SHAKE_PADDING,
                                    bits: SHAKE_BITS,
                                    createMethod: createShakeMethod
                                }
                            ];
                            const methods = {}, methodNames = [];
                            for (let i = 0; i < algorithms.length; ++i) {
                                const algorithm = algorithms[i];
                                const bits = algorithm.bits;
                                for (let j = 0; j < bits.length; ++j) {
                                    const methodName = algorithm.name + '_' + bits[j];
                                    methodNames.push(methodName);
                                    methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
                                }
                            }

                            function Keccak(bits, padding, outputBits) {
                                this.blocks = [];
                                this.s = [];
                                this.padding = padding;
                                this.outputBits = outputBits;
                                this.reset = true;
                                this.block = 0;
                                this.start = 0;
                                this.blockCount = (1600 - (bits << 1)) >> 5;
                                this.byteCount = this.blockCount << 2;
                                this.outputBlocks = outputBits >> 5;
                                this.extraBytes = (outputBits & 31) >> 3;
                                for (let i = 0; i < 50; ++i) {
                                    this.s[i] = 0;
                                }
                            }

                            Keccak.prototype.update = function (message) {
                                const notString = typeof message !== 'string';
                                if (notString && message.constructor === ArrayBuffer) {
                                    message = new Uint8Array(message);
                                }
                                const length = message.length, blocks = this.blocks, byteCount = this.byteCount;
                                let blockCount = this.blockCount, index = 0, s = this.s, i, code;
                                while (index < length) {
                                    if (this.reset) {
                                        this.reset = false;
                                        blocks[0] = this.block;
                                        for (i = 1; i < blockCount + 1; ++i) {
                                            blocks[i] = 0;
                                        }
                                    }
                                    if (notString) {
                                        for (i = this.start; index < length && i < byteCount; ++index) {
                                            blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
                                        }
                                    }
                                    else {
                                        for (i = this.start; index < length && i < byteCount; ++index) {
                                            code = message.charCodeAt(index);
                                            if (code < 0x80) {
                                                blocks[i >> 2] |= code << SHIFT[i++ & 3];
                                            }
                                            else if (code < 0x800) {
                                                blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
                                                blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
                                            }
                                            else if (code < 0xd800 || code >= 0xe000) {
                                                blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
                                                blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
                                                blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
                                            }
                                            else {
                                                code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
                                                blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
                                                blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
                                                blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
                                                blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
                                            }
                                        }
                                    }
                                    this.lastByteIndex = i;
                                    if (i >= byteCount) {
                                        this.start = i - byteCount;
                                        this.block = blocks[blockCount];
                                        for (i = 0; i < blockCount; ++i) {
                                            s[i] ^= blocks[i];
                                        }
                                        f(s);
                                        this.reset = true;
                                    }
                                    else {
                                        this.start = i;
                                    }
                                }
                                return this;
                            };
                            Keccak.prototype.finalize = function () {
                                const blocks = this.blocks;
                                let i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
                                blocks[i >> 2] |= this.padding[i & 3];
                                if (this.lastByteIndex === this.byteCount) {
                                    blocks[0] = blocks[blockCount];
                                    for (i = 1; i < blockCount + 1; ++i) {
                                        blocks[i] = 0;
                                    }
                                }
                                blocks[blockCount - 1] |= 0x80000000;
                                for (i = 0; i < blockCount; ++i) {
                                    s[i] ^= blocks[i];
                                }
                                f(s);
                            };
                            Keccak.prototype.toString = Keccak.prototype.hex = function () {
                                this.finalize();
                                const blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks;
                                let extraBytes = this.extraBytes, i = 0, j = 0;
                                let hex = '', block;
                                while (j < outputBlocks) {
                                    for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
                                        block = s[i];
                                        hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +
                                            HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +
                                            HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +
                                            HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];
                                    }
                                    if (j % blockCount === 0) {
                                        f(s);
                                        i = 0;
                                    }
                                }
                                if (extraBytes) {
                                    block = s[i];
                                    if (extraBytes > 0) {
                                        hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];
                                    }
                                    if (extraBytes > 1) {
                                        hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];
                                    }
                                    if (extraBytes > 2) {
                                        hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];
                                    }
                                }
                                return hex;
                            };
                            Keccak.prototype.arrayBuffer = function () {
                                this.finalize();
                                const blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks;
                                let extraBytes = this.extraBytes, i = 0, j = 0;
                                const bytes = this.outputBits >> 3;
                                let buffer;
                                if (extraBytes) {
                                    buffer = new ArrayBuffer((outputBlocks + 1) << 2);
                                }
                                else {
                                    buffer = new ArrayBuffer(bytes);
                                }
                                const array = new Uint32Array(buffer);
                                while (j < outputBlocks) {
                                    for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
                                        array[j] = s[i];
                                    }
                                    if (j % blockCount === 0) {
                                        f(s);
                                    }
                                }
                                if (extraBytes) {
                                    array[i] = s[i];
                                    buffer = buffer.slice(0, bytes);
                                }
                                return buffer;
                            };
                            Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;
                            Keccak.prototype.digest = Keccak.prototype.array = function () {
                                this.finalize();
                                const blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks;
                                let extraBytes = this.extraBytes, i = 0, j = 0;
                                const array = [];
                                let offset, block;
                                while (j < outputBlocks) {
                                    for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
                                        offset = j << 2;
                                        block = s[i];
                                        array[offset] = block & 0xFF;
                                        array[offset + 1] = (block >> 8) & 0xFF;
                                        array[offset + 2] = (block >> 16) & 0xFF;
                                        array[offset + 3] = (block >> 24) & 0xFF;
                                    }
                                    if (j % blockCount === 0) {
                                        f(s);
                                    }
                                }
                                if (extraBytes) {
                                    offset = j << 2;
                                    block = s[i];
                                    if (extraBytes > 0) {
                                        array[offset] = block & 0xFF;
                                    }
                                    if (extraBytes > 1) {
                                        array[offset + 1] = (block >> 8) & 0xFF;
                                    }
                                    if (extraBytes > 2) {
                                        array[offset + 2] = (block >> 16) & 0xFF;
                                    }
                                }
                                return array;
                            };
                            const f = function (s) {
                                let h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, b0, b1, b2, b3, b4, b5, b6, b7, b8,
                                    b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25,
                                    b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42,
                                    b43, b44, b45, b46, b47, b48, b49;
                                for (n = 0; n < 48; n += 2) {
                                    c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
                                    c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
                                    c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
                                    c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
                                    c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
                                    c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
                                    c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
                                    c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
                                    c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
                                    c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];
                                    h = c8 ^ ((c2 << 1) | (c3 >>> 31));
                                    l = c9 ^ ((c3 << 1) | (c2 >>> 31));
                                    s[0] ^= h;
                                    s[1] ^= l;
                                    s[10] ^= h;
                                    s[11] ^= l;
                                    s[20] ^= h;
                                    s[21] ^= l;
                                    s[30] ^= h;
                                    s[31] ^= l;
                                    s[40] ^= h;
                                    s[41] ^= l;
                                    h = c0 ^ ((c4 << 1) | (c5 >>> 31));
                                    l = c1 ^ ((c5 << 1) | (c4 >>> 31));
                                    s[2] ^= h;
                                    s[3] ^= l;
                                    s[12] ^= h;
                                    s[13] ^= l;
                                    s[22] ^= h;
                                    s[23] ^= l;
                                    s[32] ^= h;
                                    s[33] ^= l;
                                    s[42] ^= h;
                                    s[43] ^= l;
                                    h = c2 ^ ((c6 << 1) | (c7 >>> 31));
                                    l = c3 ^ ((c7 << 1) | (c6 >>> 31));
                                    s[4] ^= h;
                                    s[5] ^= l;
                                    s[14] ^= h;
                                    s[15] ^= l;
                                    s[24] ^= h;
                                    s[25] ^= l;
                                    s[34] ^= h;
                                    s[35] ^= l;
                                    s[44] ^= h;
                                    s[45] ^= l;
                                    h = c4 ^ ((c8 << 1) | (c9 >>> 31));
                                    l = c5 ^ ((c9 << 1) | (c8 >>> 31));
                                    s[6] ^= h;
                                    s[7] ^= l;
                                    s[16] ^= h;
                                    s[17] ^= l;
                                    s[26] ^= h;
                                    s[27] ^= l;
                                    s[36] ^= h;
                                    s[37] ^= l;
                                    s[46] ^= h;
                                    s[47] ^= l;
                                    h = c6 ^ ((c0 << 1) | (c1 >>> 31));
                                    l = c7 ^ ((c1 << 1) | (c0 >>> 31));
                                    s[8] ^= h;
                                    s[9] ^= l;
                                    s[18] ^= h;
                                    s[19] ^= l;
                                    s[28] ^= h;
                                    s[29] ^= l;
                                    s[38] ^= h;
                                    s[39] ^= l;
                                    s[48] ^= h;
                                    s[49] ^= l;
                                    b0 = s[0];
                                    b1 = s[1];
                                    b32 = (s[11] << 4) | (s[10] >>> 28);
                                    b33 = (s[10] << 4) | (s[11] >>> 28);
                                    b14 = (s[20] << 3) | (s[21] >>> 29);
                                    b15 = (s[21] << 3) | (s[20] >>> 29);
                                    b46 = (s[31] << 9) | (s[30] >>> 23);
                                    b47 = (s[30] << 9) | (s[31] >>> 23);
                                    b28 = (s[40] << 18) | (s[41] >>> 14);
                                    b29 = (s[41] << 18) | (s[40] >>> 14);
                                    b20 = (s[2] << 1) | (s[3] >>> 31);
                                    b21 = (s[3] << 1) | (s[2] >>> 31);
                                    b2 = (s[13] << 12) | (s[12] >>> 20);
                                    b3 = (s[12] << 12) | (s[13] >>> 20);
                                    b34 = (s[22] << 10) | (s[23] >>> 22);
                                    b35 = (s[23] << 10) | (s[22] >>> 22);
                                    b16 = (s[33] << 13) | (s[32] >>> 19);
                                    b17 = (s[32] << 13) | (s[33] >>> 19);
                                    b48 = (s[42] << 2) | (s[43] >>> 30);
                                    b49 = (s[43] << 2) | (s[42] >>> 30);
                                    b40 = (s[5] << 30) | (s[4] >>> 2);
                                    b41 = (s[4] << 30) | (s[5] >>> 2);
                                    b22 = (s[14] << 6) | (s[15] >>> 26);
                                    b23 = (s[15] << 6) | (s[14] >>> 26);
                                    b4 = (s[25] << 11) | (s[24] >>> 21);
                                    b5 = (s[24] << 11) | (s[25] >>> 21);
                                    b36 = (s[34] << 15) | (s[35] >>> 17);
                                    b37 = (s[35] << 15) | (s[34] >>> 17);
                                    b18 = (s[45] << 29) | (s[44] >>> 3);
                                    b19 = (s[44] << 29) | (s[45] >>> 3);
                                    b10 = (s[6] << 28) | (s[7] >>> 4);
                                    b11 = (s[7] << 28) | (s[6] >>> 4);
                                    b42 = (s[17] << 23) | (s[16] >>> 9);
                                    b43 = (s[16] << 23) | (s[17] >>> 9);
                                    b24 = (s[26] << 25) | (s[27] >>> 7);
                                    b25 = (s[27] << 25) | (s[26] >>> 7);
                                    b6 = (s[36] << 21) | (s[37] >>> 11);
                                    b7 = (s[37] << 21) | (s[36] >>> 11);
                                    b38 = (s[47] << 24) | (s[46] >>> 8);
                                    b39 = (s[46] << 24) | (s[47] >>> 8);
                                    b30 = (s[8] << 27) | (s[9] >>> 5);
                                    b31 = (s[9] << 27) | (s[8] >>> 5);
                                    b12 = (s[18] << 20) | (s[19] >>> 12);
                                    b13 = (s[19] << 20) | (s[18] >>> 12);
                                    b44 = (s[29] << 7) | (s[28] >>> 25);
                                    b45 = (s[28] << 7) | (s[29] >>> 25);
                                    b26 = (s[38] << 8) | (s[39] >>> 24);
                                    b27 = (s[39] << 8) | (s[38] >>> 24);
                                    b8 = (s[48] << 14) | (s[49] >>> 18);
                                    b9 = (s[49] << 14) | (s[48] >>> 18);
                                    s[0] = b0 ^ (~b2 & b4);
                                    s[1] = b1 ^ (~b3 & b5);
                                    s[10] = b10 ^ (~b12 & b14);
                                    s[11] = b11 ^ (~b13 & b15);
                                    s[20] = b20 ^ (~b22 & b24);
                                    s[21] = b21 ^ (~b23 & b25);
                                    s[30] = b30 ^ (~b32 & b34);
                                    s[31] = b31 ^ (~b33 & b35);
                                    s[40] = b40 ^ (~b42 & b44);
                                    s[41] = b41 ^ (~b43 & b45);
                                    s[2] = b2 ^ (~b4 & b6);
                                    s[3] = b3 ^ (~b5 & b7);
                                    s[12] = b12 ^ (~b14 & b16);
                                    s[13] = b13 ^ (~b15 & b17);
                                    s[22] = b22 ^ (~b24 & b26);
                                    s[23] = b23 ^ (~b25 & b27);
                                    s[32] = b32 ^ (~b34 & b36);
                                    s[33] = b33 ^ (~b35 & b37);
                                    s[42] = b42 ^ (~b44 & b46);
                                    s[43] = b43 ^ (~b45 & b47);
                                    s[4] = b4 ^ (~b6 & b8);
                                    s[5] = b5 ^ (~b7 & b9);
                                    s[14] = b14 ^ (~b16 & b18);
                                    s[15] = b15 ^ (~b17 & b19);
                                    s[24] = b24 ^ (~b26 & b28);
                                    s[25] = b25 ^ (~b27 & b29);
                                    s[34] = b34 ^ (~b36 & b38);
                                    s[35] = b35 ^ (~b37 & b39);
                                    s[44] = b44 ^ (~b46 & b48);
                                    s[45] = b45 ^ (~b47 & b49);
                                    s[6] = b6 ^ (~b8 & b0);
                                    s[7] = b7 ^ (~b9 & b1);
                                    s[16] = b16 ^ (~b18 & b10);
                                    s[17] = b17 ^ (~b19 & b11);
                                    s[26] = b26 ^ (~b28 & b20);
                                    s[27] = b27 ^ (~b29 & b21);
                                    s[36] = b36 ^ (~b38 & b30);
                                    s[37] = b37 ^ (~b39 & b31);
                                    s[46] = b46 ^ (~b48 & b40);
                                    s[47] = b47 ^ (~b49 & b41);
                                    s[8] = b8 ^ (~b0 & b2);
                                    s[9] = b9 ^ (~b1 & b3);
                                    s[18] = b18 ^ (~b10 & b12);
                                    s[19] = b19 ^ (~b11 & b13);
                                    s[28] = b28 ^ (~b20 & b22);
                                    s[29] = b29 ^ (~b21 & b23);
                                    s[38] = b38 ^ (~b30 & b32);
                                    s[39] = b39 ^ (~b31 & b33);
                                    s[48] = b48 ^ (~b40 & b42);
                                    s[49] = b49 ^ (~b41 & b43);
                                    s[0] ^= RC[n];
                                    s[1] ^= RC[n + 1];
                                }
                            };
                            exports.keccak256 = methods.keccak_256;

                        }, {}],
                        13: [function (require, module, exports) {
                            "use strict";
                            Object.defineProperty(exports, "__esModule", {value: true});
                            const __1 = require("..");
                            const concat_1 = require("../utils/concat");
                            const crypto_1 = require("../utils/crypto");
                            const constants = require("../constants");

                            function generate(fields) {
                                if (!fields || !fields.length) {
                                    throw new Error('It is not possible to create TransactionClass without fields');
                                }
                                // Fields of the original data object
                                const storedFields = Object.create(null);
                                // Data bytes or functions returning data bytes via promises
                                const byteProviders = [];
                                fields.forEach(function (field) {
                                    if (field instanceof __1.ByteProcessor) {
                                        // Remember user data fields
                                        storedFields[field.name] = field;
                                        // All user data must be represented as bytes
                                        byteProviders.push((data) => field.process(data[field.name]));
                                    }
                                    else if (typeof field === 'number') {
                                        // All static data must be converted to bytes as well
                                        byteProviders.push(Uint8Array.from([field]));
                                    }
                                    else {
                                        throw new Error('Invalid field is passed to the createTransactionClass function');
                                    }
                                });

                                class SignatureGenerator {
                                    constructor(hashMap = {}) {
                                        // Save all needed values from user data
                                        this._rawData = Object.keys(storedFields).reduce((store, key) => {
                                            store[key] = hashMap[key];
                                            return store;
                                        }, {});
                                        this._dataHolders = byteProviders.map((provider) => {
                                            if (typeof provider === 'function') {
                                                // Execute function so that they return promises containing Uint8Array data
                                                return provider(this._rawData);
                                            }
                                            else {
                                                // Or just pass Uint8Array data
                                                return provider;
                                            }
                                        });
                                    }

                                    getSignature(privateKey) {
                                        return this.getBytes().then((dataBytes) => {
                                            return crypto_1.default.buildTransactionSignature(dataBytes, privateKey);
                                        });
                                    }

                                    // Get byte representation of the transaction
                                    getBytes() {
                                        return Promise.all(this._dataHolders).then((multipleDataBytes) => {
                                            if (multipleDataBytes.length === 1) {
                                                return multipleDataBytes[0];
                                            }
                                            else {
                                                return concat_1.concatUint8Arrays(...multipleDataBytes);
                                            }
                                        });
                                    }

                                    // Get bytes of an exact field from user data
                                    getExactBytes(fieldName) {
                                        if (!(fieldName in storedFields)) {
                                            throw new Error(`There is no field '${fieldName}' in 'RequestDataType class`);
                                        }
                                        const byteProcessor = storedFields[fieldName];
                                        const userData = this._rawData[fieldName];
                                        return byteProcessor.process(userData);
                                    }
                                }

                                return SignatureGenerator;
                            }

                            exports.generate = generate;
                            exports.TX_NUMBER_MAP = Object.create(null);
                            exports.TX_TYPE_MAP = Object.create(null);
                            exports.CREATE_ORDER_SIGNATURE = generate([
                                new __1.Base58('senderPublicKey'),
                                new __1.Base58('matcherPublicKey'),
                                new __1.AssetId('amountAsset'),
                                new __1.AssetId('priceAsset'),
                                new __1.OrderType('orderType'),
                                new __1.Long('price'),
                                new __1.Long('amount'),
                                new __1.Long('timestamp'),
                                new __1.Long('expiration'),
                                new __1.Long('matcherFee')
                            ]);
                            exports.AUTH_ORDER_SIGNATURE = generate([
                                new __1.Base58('senderPublicKey'),
                                new __1.Long('timestamp')
                            ]);
                            exports.CANCEL_ORDER_SIGNATURE = generate([
                                new __1.Base58('senderPublicKey'),
                                new __1.Base58('orderId')
                            ]);
                            const ISSUE = generate([
                                3 /* ISSUE */,
                                // constants.TRANSACTION_TYPE_VERSION.ISSUE,
                                new __1.Base58('senderPublicKey'),
                                new __1.StringWithLength('name'),
                                new __1.StringWithLength('description'),
                                new __1.Long('quantity'),
                                new __1.Byte('precision'),
                                new __1.Bool('reissuable'),
                                new __1.Long('fee'),
                                new __1.Long('timestamp')
                            ]);
                            exports.TX_NUMBER_MAP[3 /* ISSUE */] = ISSUE;
                            exports.TX_TYPE_MAP["issue" /* ISSUE */] = ISSUE;
                            const TRANSFER = generate([
                                4 /* TRANSFER */,
                                // constants.TRANSACTION_TYPE_VERSION.TRANSFER,
                                new __1.Base58('senderPublicKey'),
                                new __1.AssetId('assetId'),
                                new __1.AssetId('feeAssetId'),
                                new __1.Long('timestamp'),
                                new __1.Long('amount'),
                                new __1.Long('fee'),
                                new __1.Recipient('recipient'),
                                new __1.Attachment('attachment')
                            ]);
                            exports.TX_NUMBER_MAP[4 /* TRANSFER */] = TRANSFER;
                            exports.TX_TYPE_MAP["transfer" /* TRANSFER */] = TRANSFER;
                            const REISSUE = generate([
                                5 /* REISSUE */,
                                // constants.TRANSACTION_TYPE_VERSION.REISSUE,
                                new __1.Base58('senderPublicKey'),
                                new __1.MandatoryAssetId('assetId'),
                                new __1.Long('quantity'),
                                new __1.Bool('reissuable'),
                                new __1.Long('fee'),
                                new __1.Long('timestamp')
                            ]);
                            exports.TX_NUMBER_MAP[5 /* REISSUE */] = REISSUE;
                            exports.TX_TYPE_MAP["reissue" /* REISSUE */] = REISSUE;
                            const BURN = generate([
                                6 /* BURN */,
                                // constants.TRANSACTION_TYPE_VERSION.BURN,
                                new __1.Base58('senderPublicKey'),
                                new __1.MandatoryAssetId('assetId'),
                                new __1.Long('quantity'),
                                new __1.Long('fee'),
                                new __1.Long('timestamp')
                            ]);
                            exports.TX_NUMBER_MAP[6 /* BURN */] = BURN;
                            exports.TX_TYPE_MAP["burn" /* BURN */] = BURN;
                            const LEASE = generate([
                                8 /* LEASE */,
                                // constants.TRANSACTION_TYPE_VERSION.LEASE,
                                new __1.Base58('senderPublicKey'),
                                new __1.Recipient('recipient'),
                                new __1.Long('amount'),
                                new __1.Long('fee'),
                                new __1.Long('timestamp')
                            ]);
                            exports.TX_NUMBER_MAP[8 /* LEASE */] = LEASE;
                            exports.TX_TYPE_MAP["lease" /* LEASE */] = LEASE;
                            const CANCEL_LEASING = generate([
                                9 /* CANCEL_LEASING */,
                                // constants.TRANSACTION_TYPE_VERSION.CANCEL_LEASING,
                                new __1.Base58('senderPublicKey'),
                                new __1.Long('fee'),
                                new __1.Long('timestamp'),
                                new __1.Base58('transactionId')
                            ]);
                            exports.TX_NUMBER_MAP[9 /* CANCEL_LEASING */] = CANCEL_LEASING;
                            exports.TX_TYPE_MAP["cancelLeasing" /* CANCEL_LEASING */] = CANCEL_LEASING;
                            const CREATE_ALIAS = generate([
                                10 /* CREATE_ALIAS */,
                                // constants.TRANSACTION_TYPE_VERSION.CREATE_ALIAS,
                                new __1.Base58('senderPublicKey'),
                                new __1.Alias('alias'),
                                new __1.Long('fee'),
                                new __1.Long('timestamp')
                            ]);
                            exports.TX_NUMBER_MAP[10 /* CREATE_ALIAS */] = CREATE_ALIAS;
                            exports.TX_TYPE_MAP["createAlias" /* CREATE_ALIAS */] = CREATE_ALIAS;
                            const MASS_TRANSFER = generate([
                                11 /* MASS_TRANSFER */,
                                1 /* MASS_TRANSFER */,
                                new __1.Base58('senderPublicKey'),
                                new __1.AssetId('assetId'),
                                new __1.Transfers('transfers'),
                                new __1.Long('timestamp'),
                                new __1.Long('fee'),
                                new __1.Attachment('attachment')
                            ]);
                            exports.TX_NUMBER_MAP[11 /* MASS_TRANSFER */] = MASS_TRANSFER;
                            exports.TX_TYPE_MAP["massTransfer" /* MASS_TRANSFER */] = MASS_TRANSFER;
                            const DATA = generate([
                                12 /* DATA */,
                                1 /* DATA */,
                                new __1.Base58('senderPublicKey'),
                                new __1.DataEntries('data'),
                                new __1.Long('timestamp'),
                                new __1.Long('fee')
                            ]);
                            exports.TX_NUMBER_MAP[12 /* DATA */] = DATA;
                            exports.TX_TYPE_MAP["data" /* DATA */] = DATA;
                            const SET_SCRIPT = generate([
                                13 /* SET_SCRIPT */,
                                1 /* SET_SCRIPT */,
                                new __1.Byte('chainId'),
                                new __1.Base58('senderPublicKey'),
                                constants.SET_SCRIPT_LANG_VERSION,
                                new __1.Base64('script'),
                                new __1.Long('fee'),
                                new __1.Long('timestamp')
                            ]);
                            exports.TX_NUMBER_MAP[13 /* SET_SCRIPT */] = SET_SCRIPT;
                            exports.TX_TYPE_MAP["setScript" /* SET_SCRIPT */] = SET_SCRIPT;
                            const SPONSORSHIP = generate([
                                14 /* SPONSORSHIP */,
                                1 /* SPONSORSHIP */,
                                new __1.Base58('senderPublicKey'),
                                new __1.Base58('assetId'),
                                new __1.Long('minSponsoredAssetFee'),
                                new __1.Long('timestamp'),
                                new __1.Long('fee')
                            ]);
                            exports.TX_NUMBER_MAP[14 /* SPONSORSHIP */] = SPONSORSHIP;
                            exports.TX_TYPE_MAP["sponsorship" /* SPONSORSHIP */] = SPONSORSHIP;

                        }, {"..": 6, "../constants": 4, "../utils/concat": 14, "../utils/crypto": 16}],
                        14: [function (require, module, exports) {
                            "use strict";
                            Object.defineProperty(exports, "__esModule", {value: true});

                            function concatUint8Arrays(...args) {
                                if (args.length < 2) {
                                    throw new Error('Two or more Uint8Array are expected');
                                }
                                if (!(args.every((arg) => arg instanceof Uint8Array))) {
                                    throw new Error('One of arguments is not a Uint8Array');
                                }
                                const count = args.length;
                                const sumLength = args.reduce((sum, arr) => sum + arr.length, 0);
                                const result = new Uint8Array(sumLength);
                                let curLength = 0;
                                for (let i = 0; i < count; i++) {
                                    result.set(args[i], curLength);
                                    curLength += args[i].length;
                                }
                                return result;
                            }

                            exports.concatUint8Arrays = concatUint8Arrays;

                        }, {}],
                        15: [function (require, module, exports) {
                            "use strict";
                            Object.defineProperty(exports, "__esModule", {value: true});
                            const bignumber_js_1 = require("bignumber.js");
                            const converters_1 = require("../libs/converters");

                            function performBitwiseAnd(a, b) {
                                const sa = a.toString(2).split('.')[0];
                                const sb = b.toString(2).split('.')[0];
                                const len = Math.min(sa.length, sb.length);
                                const s1 = sa.slice(sa.length - len);
                                const s2 = sb.slice(sb.length - len);
                                let result = new Array(len);
                                for (let i = len - 1; i >= 0; i--) {
                                    result[i] = (s1[i] === '1' && s2[i] === '1') ? '1' : '0';
                                }
                                return parseInt(result.join(''), 2);
                            }

                            exports.default = {
                                booleanToBytes(input) {
                                    if (typeof input !== 'boolean') {
                                        throw new Error('Boolean input is expected');
                                    }
                                    return input ? [1] : [0];
                                },
                                shortToByteArray(input) {
                                    if (typeof input !== 'number') {
                                        throw new Error('Numeric input is expected');
                                    }
                                    return converters_1.default.int16ToBytes(input, true);
                                },
                                bytesToByteArrayWithSize(input) {
                                    if (!(input instanceof Array || input instanceof Uint8Array)) {
                                        throw new Error('Byte array or Uint8Array input is expected');
                                    }
                                    else if (input instanceof Array && !(input.every((n) => typeof n === 'number'))) {
                                        throw new Error('Byte array contains non-numeric elements');
                                    }
                                    if (!(input instanceof Array)) {
                                        input = Array.prototype.slice.call(input);
                                    }
                                    const lengthBytes = converters_1.default.int16ToBytes(input.length, true);
                                    return [...lengthBytes, ...input];
                                },
                                longToByteArray(input) {
                                    if (typeof input !== 'number') {
                                        throw new Error('Numeric input is expected');
                                    }
                                    const bytes = new Array(7);
                                    for (let k = 7; k >= 0; k--) {
                                        bytes[k] = input & (255);
                                        input = input / 256;
                                    }
                                    return bytes;
                                },
                                bigNumberToByteArray(input) {
                                    if (!(input instanceof bignumber_js_1.default)) {
                                        throw new Error('BigNumber input is expected');
                                    }
                                    const performBitwiseAnd255 = performBitwiseAnd.bind(null, new bignumber_js_1.default(255));
                                    const bytes = new Array(7);
                                    for (let k = 7; k >= 0; k--) {
                                        bytes[k] = performBitwiseAnd255(input);
                                        input = input.div(256);
                                    }
                                    return bytes;
                                },
                                stringToByteArray(input) {
                                    if (typeof input !== 'string') {
                                        throw new Error('String input is expected');
                                    }
                                    return converters_1.default.stringToByteArray(input);
                                },
                                stringToByteArrayWithSize(input) {
                                    if (typeof input !== 'string') {
                                        throw new Error('String input is expected');
                                    }
                                    const stringBytes = converters_1.default.stringToByteArray(input);
                                    const lengthBytes = converters_1.default.int16ToBytes(stringBytes.length, true);
                                    return [...lengthBytes, ...stringBytes];
                                }
                            };

                        }, {"../libs/converters": 10, "bignumber.js": 32}],
                        16: [function (require, module, exports) {
                            "use strict";
                            Object.defineProperty(exports, "__esModule", {value: true});
                            const CryptoJS = require("crypto-js");
                            const axlsign_1 = require("../libs/axlsign");
                            const base58_1 = require("../libs/base58");
                            const blake = require("../libs/blake2b");
                            const converters_1 = require("../libs/converters");
                            const secure_random_1 = require("../libs/secure-random");
                            const sha3_1 = require("../libs/sha3");
                            const concat_1 = require("./concat");
                            const _1 = require("../");
                            const constants_1 = require("../constants");

                            function sha256(input) {
                                let bytes;
                                if (typeof input === 'string') {
                                    bytes = converters_1.default.stringToByteArray(input);
                                }
                                else {
                                    bytes = input;
                                }
                                const wordArray = converters_1.default.byteArrayToWordArrayEx(Uint8Array.from(bytes));
                                const resultWordArray = CryptoJS.SHA256(wordArray);
                                return converters_1.default.wordArrayToByteArrayEx(resultWordArray);
                            }

                            function blake2b(input) {
                                return blake.blake2b(input, null, 32);
                            }

                            function keccak(input) {
                                return sha3_1.keccak256.array(input);
                            }

                            function hashChain(input) {
                                return keccak(blake2b(input));
                            }

                            function buildSeedHash(seedBytes) {
                                const nonce = new Uint8Array(converters_1.default.int32ToBytes(constants_1.INITIAL_NONCE, true));
                                const seedBytesWithNonce = concat_1.concatUint8Arrays(nonce, seedBytes);
                                const seedHash = hashChain(seedBytesWithNonce);
                                return sha256(seedHash);
                            }

                            function strengthenPassword(password, rounds = 5000) {
                                while (rounds--)
                                    password = converters_1.default.byteArrayToHexString(sha256(password));
                                return password;
                            }

                            exports.default = {
                                buildTransactionSignature(dataBytes, privateKey) {
                                    if (!dataBytes || !(dataBytes instanceof Uint8Array)) {
                                        throw new Error('Missing or invalid data');
                                    }
                                    if (!privateKey || typeof privateKey !== 'string') {
                                        throw new Error('Missing or invalid private key');
                                    }
                                    const privateKeyBytes = base58_1.default.decode(privateKey);
                                    if (privateKeyBytes.length !== constants_1.PRIVATE_KEY_LENGTH) {
                                        throw new Error('Invalid public key');
                                    }
                                    const signature = axlsign_1.default.sign(privateKeyBytes, dataBytes, secure_random_1.default.randomUint8Array(64));
                                    return base58_1.default.encode(signature);
                                },
                                buildTransactionId(dataBytes) {
                                    if (!dataBytes || !(dataBytes instanceof Uint8Array)) {
                                        throw new Error('Missing or invalid data');
                                    }
                                    const hash = blake2b(dataBytes);
                                    return base58_1.default.encode(hash);
                                },
                                buildKeyPair(seed) {
                                    if (!seed || typeof seed !== 'string') {
                                        throw new Error('Missing or invalid seed phrase');
                                    }
                                    const seedBytes = Uint8Array.from(converters_1.default.stringToByteArray(seed));
                                    const seedHash = buildSeedHash(seedBytes);
                                    const keys = axlsign_1.default.generateKeyPair(seedHash);
                                    return {
                                        privateKey: keys.private,
                                        publicKey: keys.public
                                    };
                                },
                                isValidAddress(address) {
                                    if (!address || typeof address !== 'string') {
                                        throw new Error('Missing or invalid address');
                                    }
                                    const addressBytes = base58_1.default.decode(address);
                                    if (addressBytes[0] !== 1 || addressBytes[1] !== _1.config.getNetworkByte()) {
                                        return false;
                                    }
                                    const key = addressBytes.slice(0, 22);
                                    const check = addressBytes.slice(22, 26);
                                    const keyHash = hashChain(key).slice(0, 4);
                                    for (let i = 0; i < 4; i++) {
                                        if (check[i] !== keyHash[i]) {
                                            return false;
                                        }
                                    }
                                    return true;
                                },
                                buildRawAddress(publicKeyBytes) {
                                    if (!publicKeyBytes || publicKeyBytes.length !== constants_1.PUBLIC_KEY_LENGTH || !(publicKeyBytes instanceof Uint8Array)) {
                                        throw new Error('Missing or invalid public key');
                                    }
                                    const prefix = Uint8Array.from([constants_1.ADDRESS_VERSION, _1.config.getNetworkByte()]);
                                    const publicKeyHashPart = Uint8Array.from(hashChain(publicKeyBytes).slice(0, 20));
                                    const rawAddress = concat_1.concatUint8Arrays(prefix, publicKeyHashPart);
                                    const addressHash = Uint8Array.from(hashChain(rawAddress).slice(0, 4));
                                    return base58_1.default.encode(concat_1.concatUint8Arrays(rawAddress, addressHash));
                                },
                                encryptSeed(seed, password, encryptionRounds) {
                                    if (!seed || typeof seed !== 'string') {
                                        throw new Error('Seed is required');
                                    }
                                    if (!password || typeof password !== 'string') {
                                        throw new Error('Password is required');
                                    }
                                    password = strengthenPassword(password, encryptionRounds);
                                    return CryptoJS.AES.encrypt(seed, password).toString();
                                },
                                decryptSeed(encryptedSeed, password, encryptionRounds) {
                                    if (!encryptedSeed || typeof encryptedSeed !== 'string') {
                                        throw new Error('Encrypted seed is required');
                                    }
                                    if (!password || typeof password !== 'string') {
                                        throw new Error('Password is required');
                                    }
                                    password = strengthenPassword(password, encryptionRounds);
                                    const hexSeed = CryptoJS.AES.decrypt(encryptedSeed, password);
                                    return converters_1.default.hexStringToString(hexSeed.toString());
                                },
                                generateRandomUint32Array(length) {
                                    if (!length || length < 0) {
                                        throw new Error('Missing or invalid array length');
                                    }
                                    const a = secure_random_1.default.randomUint8Array(length);
                                    const b = secure_random_1.default.randomUint8Array(length);
                                    const result = new Uint32Array(length);
                                    for (let i = 0; i < length; i++) {
                                        const hash = converters_1.default.byteArrayToHexString(sha256(`${a[i]}${b[i]}`));
                                        const randomValue = parseInt(hash.slice(0, 13), 16);
                                        result.set([randomValue], i);
                                    }
                                    return result;
                                }
                            };

                        }, {
                            "../": 6,
                            "../constants": 4,
                            "../libs/axlsign": 7,
                            "../libs/base58": 8,
                            "../libs/blake2b": 9,
                            "../libs/converters": 10,
                            "../libs/secure-random": 11,
                            "../libs/sha3": 12,
                            "./concat": 14,
                            "crypto-js": 81
                        }],
                        17: [function (require, module, exports) {
                            var asn1 = exports;

                            asn1.bignum = require('bn.js');

                            asn1.define = require('./asn1/api').define;
                            asn1.base = require('./asn1/base');
                            asn1.constants = require('./asn1/constants');
                            asn1.decoders = require('./asn1/decoders');
                            asn1.encoders = require('./asn1/encoders');

                        }, {
                            "./asn1/api": 18,
                            "./asn1/base": 20,
                            "./asn1/constants": 24,
                            "./asn1/decoders": 26,
                            "./asn1/encoders": 29,
                            "bn.js": 33
                        }],
                        18: [function (require, module, exports) {
                            var asn1 = require('../asn1');
                            var inherits = require('inherits');

                            var api = exports;

                            api.define = function define(name, body) {
                                return new Entity(name, body);
                            };

                            function Entity(name, body) {
                                this.name = name;
                                this.body = body;

                                this.decoders = {};
                                this.encoders = {};
                            };

                            Entity.prototype._createNamed = function createNamed(base) {
                                var named;
                                try {
                                    named = require('vm').runInThisContext(
                                        '(function ' + this.name + '(entity) {\n' +
                                        '  this._initNamed(entity);\n' +
                                        '})'
                                    );
                                } catch (e) {
                                    named = function (entity) {
                                        this._initNamed(entity);
                                    };
                                }
                                inherits(named, base);
                                named.prototype._initNamed = function initnamed(entity) {
                                    base.call(this, entity);
                                };

                                return new named(this);
                            };

                            Entity.prototype._getDecoder = function _getDecoder(enc) {
                                enc = enc || 'der';
                                // Lazily create decoder
                                if (!this.decoders.hasOwnProperty(enc))
                                    this.decoders[enc] = this._createNamed(asn1.decoders[enc]);
                                return this.decoders[enc];
                            };

                            Entity.prototype.decode = function decode(data, enc, options) {
                                return this._getDecoder(enc).decode(data, options);
                            };

                            Entity.prototype._getEncoder = function _getEncoder(enc) {
                                enc = enc || 'der';
                                // Lazily create encoder
                                if (!this.encoders.hasOwnProperty(enc))
                                    this.encoders[enc] = this._createNamed(asn1.encoders[enc]);
                                return this.encoders[enc];
                            };

                            Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
                                return this._getEncoder(enc).encode(data, reporter);
                            };

                        }, {"../asn1": 17, "inherits": 150, "vm": 204}],
                        19: [function (require, module, exports) {
                            var inherits = require('inherits');
                            var Reporter = require('../base').Reporter;
                            var Buffer = require('buffer').Buffer;

                            function DecoderBuffer(base, options) {
                                Reporter.call(this, options);
                                if (!Buffer.isBuffer(base)) {
                                    this.error('Input not Buffer');
                                    return;
                                }

                                this.base = base;
                                this.offset = 0;
                                this.length = base.length;
                            }

                            inherits(DecoderBuffer, Reporter);
                            exports.DecoderBuffer = DecoderBuffer;

                            DecoderBuffer.prototype.save = function save() {
                                return {offset: this.offset, reporter: Reporter.prototype.save.call(this)};
                            };

                            DecoderBuffer.prototype.restore = function restore(save) {
                                // Return skipped data
                                var res = new DecoderBuffer(this.base);
                                res.offset = save.offset;
                                res.length = this.offset;

                                this.offset = save.offset;
                                Reporter.prototype.restore.call(this, save.reporter);

                                return res;
                            };

                            DecoderBuffer.prototype.isEmpty = function isEmpty() {
                                return this.offset === this.length;
                            };

                            DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
                                if (this.offset + 1 <= this.length)
                                    return this.base.readUInt8(this.offset++, true);
                                else
                                    return this.error(fail || 'DecoderBuffer overrun');
                            }

                            DecoderBuffer.prototype.skip = function skip(bytes, fail) {
                                if (!(this.offset + bytes <= this.length))
                                    return this.error(fail || 'DecoderBuffer overrun');

                                var res = new DecoderBuffer(this.base);

                                // Share reporter state
                                res._reporterState = this._reporterState;

                                res.offset = this.offset;
                                res.length = this.offset + bytes;
                                this.offset += bytes;
                                return res;
                            }

                            DecoderBuffer.prototype.raw = function raw(save) {
                                return this.base.slice(save ? save.offset : this.offset, this.length);
                            }

                            function EncoderBuffer(value, reporter) {
                                if (Array.isArray(value)) {
                                    this.length = 0;
                                    this.value = value.map(function (item) {
                                        if (!(item instanceof EncoderBuffer))
                                            item = new EncoderBuffer(item, reporter);
                                        this.length += item.length;
                                        return item;
                                    }, this);
                                } else if (typeof value === 'number') {
                                    if (!(0 <= value && value <= 0xff))
                                        return reporter.error('non-byte EncoderBuffer value');
                                    this.value = value;
                                    this.length = 1;
                                } else if (typeof value === 'string') {
                                    this.value = value;
                                    this.length = Buffer.byteLength(value);
                                } else if (Buffer.isBuffer(value)) {
                                    this.value = value;
                                    this.length = value.length;
                                } else {
                                    return reporter.error('Unsupported type: ' + typeof value);
                                }
                            }

                            exports.EncoderBuffer = EncoderBuffer;

                            EncoderBuffer.prototype.join = function join(out, offset) {
                                if (!out)
                                    out = new Buffer(this.length);
                                if (!offset)
                                    offset = 0;

                                if (this.length === 0)
                                    return out;

                                if (Array.isArray(this.value)) {
                                    this.value.forEach(function (item) {
                                        item.join(out, offset);
                                        offset += item.length;
                                    });
                                } else {
                                    if (typeof this.value === 'number')
                                        out[offset] = this.value;
                                    else if (typeof this.value === 'string')
                                        out.write(this.value, offset);
                                    else if (Buffer.isBuffer(this.value))
                                        this.value.copy(out, offset);
                                    offset += this.length;
                                }

                                return out;
                            };

                        }, {"../base": 20, "buffer": 64, "inherits": 150}],
                        20: [function (require, module, exports) {
                            var base = exports;

                            base.Reporter = require('./reporter').Reporter;
                            base.DecoderBuffer = require('./buffer').DecoderBuffer;
                            base.EncoderBuffer = require('./buffer').EncoderBuffer;
                            base.Node = require('./node');

                        }, {"./buffer": 19, "./node": 21, "./reporter": 22}],
                        21: [function (require, module, exports) {
                            var Reporter = require('../base').Reporter;
                            var EncoderBuffer = require('../base').EncoderBuffer;
                            var DecoderBuffer = require('../base').DecoderBuffer;
                            var assert = require('minimalistic-assert');

// Supported tags
                            var tags = [
                                'seq', 'seqof', 'set', 'setof', 'objid', 'bool',
                                'gentime', 'utctime', 'null_', 'enum', 'int', 'objDesc',
                                'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str',
                                'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr'
                            ];

// Public methods list
                            var methods = [
                                'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',
                                'any', 'contains'
                            ].concat(tags);

// Overrided methods list
                            var overrided = [
                                '_peekTag', '_decodeTag', '_use',
                                '_decodeStr', '_decodeObjid', '_decodeTime',
                                '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',

                                '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',
                                '_encodeNull', '_encodeInt', '_encodeBool'
                            ];

                            function Node(enc, parent) {
                                var state = {};
                                this._baseState = state;

                                state.enc = enc;

                                state.parent = parent || null;
                                state.children = null;

                                // State
                                state.tag = null;
                                state.args = null;
                                state.reverseArgs = null;
                                state.choice = null;
                                state.optional = false;
                                state.any = false;
                                state.obj = false;
                                state.use = null;
                                state.useDecoder = null;
                                state.key = null;
                                state['default'] = null;
                                state.explicit = null;
                                state.implicit = null;
                                state.contains = null;

                                // Should create new instance on each method
                                if (!state.parent) {
                                    state.children = [];
                                    this._wrap();
                                }
                            }

                            module.exports = Node;

                            var stateProps = [
                                'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',
                                'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',
                                'implicit', 'contains'
                            ];

                            Node.prototype.clone = function clone() {
                                var state = this._baseState;
                                var cstate = {};
                                stateProps.forEach(function (prop) {
                                    cstate[prop] = state[prop];
                                });
                                var res = new this.constructor(cstate.parent);
                                res._baseState = cstate;
                                return res;
                            };

                            Node.prototype._wrap = function wrap() {
                                var state = this._baseState;
                                methods.forEach(function (method) {
                                    this[method] = function _wrappedMethod() {
                                        var clone = new this.constructor(this);
                                        state.children.push(clone);
                                        return clone[method].apply(clone, arguments);
                                    };
                                }, this);
                            };

                            Node.prototype._init = function init(body) {
                                var state = this._baseState;

                                assert(state.parent === null);
                                body.call(this);

                                // Filter children
                                state.children = state.children.filter(function (child) {
                                    return child._baseState.parent === this;
                                }, this);
                                assert.equal(state.children.length, 1, 'Root node can have only one child');
                            };

                            Node.prototype._useArgs = function useArgs(args) {
                                var state = this._baseState;

                                // Filter children and args
                                var children = args.filter(function (arg) {
                                    return arg instanceof this.constructor;
                                }, this);
                                args = args.filter(function (arg) {
                                    return !(arg instanceof this.constructor);
                                }, this);

                                if (children.length !== 0) {
                                    assert(state.children === null);
                                    state.children = children;

                                    // Replace parent to maintain backward link
                                    children.forEach(function (child) {
                                        child._baseState.parent = this;
                                    }, this);
                                }
                                if (args.length !== 0) {
                                    assert(state.args === null);
                                    state.args = args;
                                    state.reverseArgs = args.map(function (arg) {
                                        if (typeof arg !== 'object' || arg.constructor !== Object)
                                            return arg;

                                        var res = {};
                                        Object.keys(arg).forEach(function (key) {
                                            if (key == (key | 0))
                                                key |= 0;
                                            var value = arg[key];
                                            res[value] = key;
                                        });
                                        return res;
                                    });
                                }
                            };

//
// Overrided methods
//

                            overrided.forEach(function (method) {
                                Node.prototype[method] = function _overrided() {
                                    var state = this._baseState;
                                    throw new Error(method + ' not implemented for encoding: ' + state.enc);
                                };
                            });

//
// Public methods
//

                            tags.forEach(function (tag) {
                                Node.prototype[tag] = function _tagMethod() {
                                    var state = this._baseState;
                                    var args = Array.prototype.slice.call(arguments);

                                    assert(state.tag === null);
                                    state.tag = tag;

                                    this._useArgs(args);

                                    return this;
                                };
                            });

                            Node.prototype.use = function use(item) {
                                assert(item);
                                var state = this._baseState;

                                assert(state.use === null);
                                state.use = item;

                                return this;
                            };

                            Node.prototype.optional = function optional() {
                                var state = this._baseState;

                                state.optional = true;

                                return this;
                            };

                            Node.prototype.def = function def(val) {
                                var state = this._baseState;

                                assert(state['default'] === null);
                                state['default'] = val;
                                state.optional = true;

                                return this;
                            };

                            Node.prototype.explicit = function explicit(num) {
                                var state = this._baseState;

                                assert(state.explicit === null && state.implicit === null);
                                state.explicit = num;

                                return this;
                            };

                            Node.prototype.implicit = function implicit(num) {
                                var state = this._baseState;

                                assert(state.explicit === null && state.implicit === null);
                                state.implicit = num;

                                return this;
                            };

                            Node.prototype.obj = function obj() {
                                var state = this._baseState;
                                var args = Array.prototype.slice.call(arguments);

                                state.obj = true;

                                if (args.length !== 0)
                                    this._useArgs(args);

                                return this;
                            };

                            Node.prototype.key = function key(newKey) {
                                var state = this._baseState;

                                assert(state.key === null);
                                state.key = newKey;

                                return this;
                            };

                            Node.prototype.any = function any() {
                                var state = this._baseState;

                                state.any = true;

                                return this;
                            };

                            Node.prototype.choice = function choice(obj) {
                                var state = this._baseState;

                                assert(state.choice === null);
                                state.choice = obj;
                                this._useArgs(Object.keys(obj).map(function (key) {
                                    return obj[key];
                                }));

                                return this;
                            };

                            Node.prototype.contains = function contains(item) {
                                var state = this._baseState;

                                assert(state.use === null);
                                state.contains = item;

                                return this;
                            };

//
// Decoding
//

                            Node.prototype._decode = function decode(input, options) {
                                var state = this._baseState;

                                // Decode root node
                                if (state.parent === null)
                                    return input.wrapResult(state.children[0]._decode(input, options));

                                var result = state['default'];
                                var present = true;

                                var prevKey = null;
                                if (state.key !== null)
                                    prevKey = input.enterKey(state.key);

                                // Check if tag is there
                                if (state.optional) {
                                    var tag = null;
                                    if (state.explicit !== null)
                                        tag = state.explicit;
                                    else if (state.implicit !== null)
                                        tag = state.implicit;
                                    else if (state.tag !== null)
                                        tag = state.tag;

                                    if (tag === null && !state.any) {
                                        // Trial and Error
                                        var save = input.save();
                                        try {
                                            if (state.choice === null)
                                                this._decodeGeneric(state.tag, input, options);
                                            else
                                                this._decodeChoice(input, options);
                                            present = true;
                                        } catch (e) {
                                            present = false;
                                        }
                                        input.restore(save);
                                    } else {
                                        present = this._peekTag(input, tag, state.any);

                                        if (input.isError(present))
                                            return present;
                                    }
                                }

                                // Push object on stack
                                var prevObj;
                                if (state.obj && present)
                                    prevObj = input.enterObject();

                                if (present) {
                                    // Unwrap explicit values
                                    if (state.explicit !== null) {
                                        var explicit = this._decodeTag(input, state.explicit);
                                        if (input.isError(explicit))
                                            return explicit;
                                        input = explicit;
                                    }

                                    var start = input.offset;

                                    // Unwrap implicit and normal values
                                    if (state.use === null && state.choice === null) {
                                        if (state.any)
                                            var save = input.save();
                                        var body = this._decodeTag(
                                            input,
                                            state.implicit !== null ? state.implicit : state.tag,
                                            state.any
                                        );
                                        if (input.isError(body))
                                            return body;

                                        if (state.any)
                                            result = input.raw(save);
                                        else
                                            input = body;
                                    }

                                    if (options && options.track && state.tag !== null)
                                        options.track(input.path(), start, input.length, 'tagged');

                                    if (options && options.track && state.tag !== null)
                                        options.track(input.path(), input.offset, input.length, 'content');

                                    // Select proper method for tag
                                    if (state.any)
                                        result = result;
                                    else if (state.choice === null)
                                        result = this._decodeGeneric(state.tag, input, options);
                                    else
                                        result = this._decodeChoice(input, options);

                                    if (input.isError(result))
                                        return result;

                                    // Decode children
                                    if (!state.any && state.choice === null && state.children !== null) {
                                        state.children.forEach(function decodeChildren(child) {
                                            // NOTE: We are ignoring errors here, to let parser continue with other
                                            // parts of encoded data
                                            child._decode(input, options);
                                        });
                                    }

                                    // Decode contained/encoded by schema, only in bit or octet strings
                                    if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
                                        var data = new DecoderBuffer(result);
                                        result = this._getUse(state.contains, input._reporterState.obj)
                                            ._decode(data, options);
                                    }
                                }

                                // Pop object
                                if (state.obj && present)
                                    result = input.leaveObject(prevObj);

                                // Set key
                                if (state.key !== null && (result !== null || present === true))
                                    input.leaveKey(prevKey, state.key, result);
                                else if (prevKey !== null)
                                    input.exitKey(prevKey);

                                return result;
                            };

                            Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
                                var state = this._baseState;

                                if (tag === 'seq' || tag === 'set')
                                    return null;
                                if (tag === 'seqof' || tag === 'setof')
                                    return this._decodeList(input, tag, state.args[0], options);
                                else if (/str$/.test(tag))
                                    return this._decodeStr(input, tag, options);
                                else if (tag === 'objid' && state.args)
                                    return this._decodeObjid(input, state.args[0], state.args[1], options);
                                else if (tag === 'objid')
                                    return this._decodeObjid(input, null, null, options);
                                else if (tag === 'gentime' || tag === 'utctime')
                                    return this._decodeTime(input, tag, options);
                                else if (tag === 'null_')
                                    return this._decodeNull(input, options);
                                else if (tag === 'bool')
                                    return this._decodeBool(input, options);
                                else if (tag === 'objDesc')
                                    return this._decodeStr(input, tag, options);
                                else if (tag === 'int' || tag === 'enum')
                                    return this._decodeInt(input, state.args && state.args[0], options);

                                if (state.use !== null) {
                                    return this._getUse(state.use, input._reporterState.obj)
                                        ._decode(input, options);
                                } else {
                                    return input.error('unknown tag: ' + tag);
                                }
                            };

                            Node.prototype._getUse = function _getUse(entity, obj) {

                                var state = this._baseState;
                                // Create altered use decoder if implicit is set
                                state.useDecoder = this._use(entity, obj);
                                assert(state.useDecoder._baseState.parent === null);
                                state.useDecoder = state.useDecoder._baseState.children[0];
                                if (state.implicit !== state.useDecoder._baseState.implicit) {
                                    state.useDecoder = state.useDecoder.clone();
                                    state.useDecoder._baseState.implicit = state.implicit;
                                }
                                return state.useDecoder;
                            };

                            Node.prototype._decodeChoice = function decodeChoice(input, options) {
                                var state = this._baseState;
                                var result = null;
                                var match = false;

                                Object.keys(state.choice).some(function (key) {
                                    var save = input.save();
                                    var node = state.choice[key];
                                    try {
                                        var value = node._decode(input, options);
                                        if (input.isError(value))
                                            return false;

                                        result = {type: key, value: value};
                                        match = true;
                                    } catch (e) {
                                        input.restore(save);
                                        return false;
                                    }
                                    return true;
                                }, this);

                                if (!match)
                                    return input.error('Choice not matched');

                                return result;
                            };

//
// Encoding
//

                            Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
                                return new EncoderBuffer(data, this.reporter);
                            };

                            Node.prototype._encode = function encode(data, reporter, parent) {
                                var state = this._baseState;
                                if (state['default'] !== null && state['default'] === data)
                                    return;

                                var result = this._encodeValue(data, reporter, parent);
                                if (result === undefined)
                                    return;

                                if (this._skipDefault(result, reporter, parent))
                                    return;

                                return result;
                            };

                            Node.prototype._encodeValue = function encode(data, reporter, parent) {
                                var state = this._baseState;

                                // Decode root node
                                if (state.parent === null)
                                    return state.children[0]._encode(data, reporter || new Reporter());

                                var result = null;

                                // Set reporter to share it with a child class
                                this.reporter = reporter;

                                // Check if data is there
                                if (state.optional && data === undefined) {
                                    if (state['default'] !== null)
                                        data = state['default']
                                    else
                                        return;
                                }

                                // Encode children first
                                var content = null;
                                var primitive = false;
                                if (state.any) {
                                    // Anything that was given is translated to buffer
                                    result = this._createEncoderBuffer(data);
                                } else if (state.choice) {
                                    result = this._encodeChoice(data, reporter);
                                } else if (state.contains) {
                                    content = this._getUse(state.contains, parent)._encode(data, reporter);
                                    primitive = true;
                                } else if (state.children) {
                                    content = state.children.map(function (child) {
                                        if (child._baseState.tag === 'null_')
                                            return child._encode(null, reporter, data);

                                        if (child._baseState.key === null)
                                            return reporter.error('Child should have a key');
                                        var prevKey = reporter.enterKey(child._baseState.key);

                                        if (typeof data !== 'object')
                                            return reporter.error('Child expected, but input is not object');

                                        var res = child._encode(data[child._baseState.key], reporter, data);
                                        reporter.leaveKey(prevKey);

                                        return res;
                                    }, this).filter(function (child) {
                                        return child;
                                    });
                                    content = this._createEncoderBuffer(content);
                                } else {
                                    if (state.tag === 'seqof' || state.tag === 'setof') {
                                        // TODO(indutny): this should be thrown on DSL level
                                        if (!(state.args && state.args.length === 1))
                                            return reporter.error('Too many args for : ' + state.tag);

                                        if (!Array.isArray(data))
                                            return reporter.error('seqof/setof, but data is not Array');

                                        var child = this.clone();
                                        child._baseState.implicit = null;
                                        content = this._createEncoderBuffer(data.map(function (item) {
                                            var state = this._baseState;

                                            return this._getUse(state.args[0], data)._encode(item, reporter);
                                        }, child));
                                    } else if (state.use !== null) {
                                        result = this._getUse(state.use, parent)._encode(data, reporter);
                                    } else {
                                        content = this._encodePrimitive(state.tag, data);
                                        primitive = true;
                                    }
                                }

                                // Encode data itself
                                var result;
                                if (!state.any && state.choice === null) {
                                    var tag = state.implicit !== null ? state.implicit : state.tag;
                                    var cls = state.implicit === null ? 'universal' : 'context';

                                    if (tag === null) {
                                        if (state.use === null)
                                            reporter.error('Tag could be omitted only for .use()');
                                    } else {
                                        if (state.use === null)
                                            result = this._encodeComposite(tag, primitive, cls, content);
                                    }
                                }

                                // Wrap in explicit
                                if (state.explicit !== null)
                                    result = this._encodeComposite(state.explicit, false, 'context', result);

                                return result;
                            };

                            Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
                                var state = this._baseState;

                                var node = state.choice[data.type];
                                if (!node) {
                                    assert(
                                        false,
                                        data.type + ' not found in ' +
                                        JSON.stringify(Object.keys(state.choice)));
                                }
                                return node._encode(data.value, reporter);
                            };

                            Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
                                var state = this._baseState;

                                if (/str$/.test(tag))
                                    return this._encodeStr(data, tag);
                                else if (tag === 'objid' && state.args)
                                    return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
                                else if (tag === 'objid')
                                    return this._encodeObjid(data, null, null);
                                else if (tag === 'gentime' || tag === 'utctime')
                                    return this._encodeTime(data, tag);
                                else if (tag === 'null_')
                                    return this._encodeNull();
                                else if (tag === 'int' || tag === 'enum')
                                    return this._encodeInt(data, state.args && state.reverseArgs[0]);
                                else if (tag === 'bool')
                                    return this._encodeBool(data);
                                else if (tag === 'objDesc')
                                    return this._encodeStr(data, tag);
                                else
                                    throw new Error('Unsupported tag: ' + tag);
                            };

                            Node.prototype._isNumstr = function isNumstr(str) {
                                return /^[0-9 ]*$/.test(str);
                            };

                            Node.prototype._isPrintstr = function isPrintstr(str) {
                                return /^[A-Za-z0-9 '\(\)\+,\-\.\/:=\?]*$/.test(str);
                            };

                        }, {"../base": 20, "minimalistic-assert": 155}],
                        22: [function (require, module, exports) {
                            var inherits = require('inherits');

                            function Reporter(options) {
                                this._reporterState = {
                                    obj: null,
                                    path: [],
                                    options: options || {},
                                    errors: []
                                };
                            }

                            exports.Reporter = Reporter;

                            Reporter.prototype.isError = function isError(obj) {
                                return obj instanceof ReporterError;
                            };

                            Reporter.prototype.save = function save() {
                                var state = this._reporterState;

                                return {obj: state.obj, pathLen: state.path.length};
                            };

                            Reporter.prototype.restore = function restore(data) {
                                var state = this._reporterState;

                                state.obj = data.obj;
                                state.path = state.path.slice(0, data.pathLen);
                            };

                            Reporter.prototype.enterKey = function enterKey(key) {
                                return this._reporterState.path.push(key);
                            };

                            Reporter.prototype.exitKey = function exitKey(index) {
                                var state = this._reporterState;

                                state.path = state.path.slice(0, index - 1);
                            };

                            Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
                                var state = this._reporterState;

                                this.exitKey(index);
                                if (state.obj !== null)
                                    state.obj[key] = value;
                            };

                            Reporter.prototype.path = function path() {
                                return this._reporterState.path.join('/');
                            };

                            Reporter.prototype.enterObject = function enterObject() {
                                var state = this._reporterState;

                                var prev = state.obj;
                                state.obj = {};
                                return prev;
                            };

                            Reporter.prototype.leaveObject = function leaveObject(prev) {
                                var state = this._reporterState;

                                var now = state.obj;
                                state.obj = prev;
                                return now;
                            };

                            Reporter.prototype.error = function error(msg) {
                                var err;
                                var state = this._reporterState;

                                var inherited = msg instanceof ReporterError;
                                if (inherited) {
                                    err = msg;
                                } else {
                                    err = new ReporterError(state.path.map(function (elem) {
                                        return '[' + JSON.stringify(elem) + ']';
                                    }).join(''), msg.message || msg, msg.stack);
                                }

                                if (!state.options.partial)
                                    throw err;

                                if (!inherited)
                                    state.errors.push(err);

                                return err;
                            };

                            Reporter.prototype.wrapResult = function wrapResult(result) {
                                var state = this._reporterState;
                                if (!state.options.partial)
                                    return result;

                                return {
                                    result: this.isError(result) ? null : result,
                                    errors: state.errors
                                };
                            };

                            function ReporterError(path, msg) {
                                this.path = path;
                                this.rethrow(msg);
                            };
                            inherits(ReporterError, Error);

                            ReporterError.prototype.rethrow = function rethrow(msg) {
                                this.message = msg + ' at: ' + (this.path || '(shallow)');
                                if (Error.captureStackTrace)
                                    Error.captureStackTrace(this, ReporterError);

                                if (!this.stack) {
                                    try {
                                        // IE only adds stack when thrown
                                        throw new Error(this.message);
                                    } catch (e) {
                                        this.stack = e.stack;
                                    }
                                }
                                return this;
                            };

                        }, {"inherits": 150}],
                        23: [function (require, module, exports) {
                            var constants = require('../constants');

                            exports.tagClass = {
                                0: 'universal',
                                1: 'application',
                                2: 'context',
                                3: 'private'
                            };
                            exports.tagClassByName = constants._reverse(exports.tagClass);

                            exports.tag = {
                                0x00: 'end',
                                0x01: 'bool',
                                0x02: 'int',
                                0x03: 'bitstr',
                                0x04: 'octstr',
                                0x05: 'null_',
                                0x06: 'objid',
                                0x07: 'objDesc',
                                0x08: 'external',
                                0x09: 'real',
                                0x0a: 'enum',
                                0x0b: 'embed',
                                0x0c: 'utf8str',
                                0x0d: 'relativeOid',
                                0x10: 'seq',
                                0x11: 'set',
                                0x12: 'numstr',
                                0x13: 'printstr',
                                0x14: 't61str',
                                0x15: 'videostr',
                                0x16: 'ia5str',
                                0x17: 'utctime',
                                0x18: 'gentime',
                                0x19: 'graphstr',
                                0x1a: 'iso646str',
                                0x1b: 'genstr',
                                0x1c: 'unistr',
                                0x1d: 'charstr',
                                0x1e: 'bmpstr'
                            };
                            exports.tagByName = constants._reverse(exports.tag);

                        }, {"../constants": 24}],
                        24: [function (require, module, exports) {
                            var constants = exports;

// Helper
                            constants._reverse = function reverse(map) {
                                var res = {};

                                Object.keys(map).forEach(function (key) {
                                    // Convert key to integer if it is stringified
                                    if ((key | 0) == key)
                                        key = key | 0;

                                    var value = map[key];
                                    res[value] = key;
                                });

                                return res;
                            };

                            constants.der = require('./der');

                        }, {"./der": 23}],
                        25: [function (require, module, exports) {
                            var inherits = require('inherits');

                            var asn1 = require('../../asn1');
                            var base = asn1.base;
                            var bignum = asn1.bignum;

// Import DER constants
                            var der = asn1.constants.der;

                            function DERDecoder(entity) {
                                this.enc = 'der';
                                this.name = entity.name;
                                this.entity = entity;

                                // Construct base tree
                                this.tree = new DERNode();
                                this.tree._init(entity.body);
                            };
                            module.exports = DERDecoder;

                            DERDecoder.prototype.decode = function decode(data, options) {
                                if (!(data instanceof base.DecoderBuffer))
                                    data = new base.DecoderBuffer(data, options);

                                return this.tree._decode(data, options);
                            };

// Tree methods

                            function DERNode(parent) {
                                base.Node.call(this, 'der', parent);
                            }

                            inherits(DERNode, base.Node);

                            DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
                                if (buffer.isEmpty())
                                    return false;

                                var state = buffer.save();
                                var decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
                                if (buffer.isError(decodedTag))
                                    return decodedTag;

                                buffer.restore(state);

                                return decodedTag.tag === tag || decodedTag.tagStr === tag ||
                                    (decodedTag.tagStr + 'of') === tag || any;
                            };

                            DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
                                var decodedTag = derDecodeTag(buffer,
                                    'Failed to decode tag of "' + tag + '"');
                                if (buffer.isError(decodedTag))
                                    return decodedTag;

                                var len = derDecodeLen(buffer,
                                    decodedTag.primitive,
                                    'Failed to get length of "' + tag + '"');

                                // Failure
                                if (buffer.isError(len))
                                    return len;

                                if (!any &&
                                    decodedTag.tag !== tag &&
                                    decodedTag.tagStr !== tag &&
                                    decodedTag.tagStr + 'of' !== tag) {
                                    return buffer.error('Failed to match tag: "' + tag + '"');
                                }

                                if (decodedTag.primitive || len !== null)
                                    return buffer.skip(len, 'Failed to match body of: "' + tag + '"');

                                // Indefinite length... find END tag
                                var state = buffer.save();
                                var res = this._skipUntilEnd(
                                    buffer,
                                    'Failed to skip indefinite length body: "' + this.tag + '"');
                                if (buffer.isError(res))
                                    return res;

                                len = buffer.offset - state.offset;
                                buffer.restore(state);
                                return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
                            };

                            DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
                                while (true) {
                                    var tag = derDecodeTag(buffer, fail);
                                    if (buffer.isError(tag))
                                        return tag;
                                    var len = derDecodeLen(buffer, tag.primitive, fail);
                                    if (buffer.isError(len))
                                        return len;

                                    var res;
                                    if (tag.primitive || len !== null)
                                        res = buffer.skip(len)
                                    else
                                        res = this._skipUntilEnd(buffer, fail);

                                    // Failure
                                    if (buffer.isError(res))
                                        return res;

                                    if (tag.tagStr === 'end')
                                        break;
                                }
                            };

                            DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder,
                                                                                options) {
                                var result = [];
                                while (!buffer.isEmpty()) {
                                    var possibleEnd = this._peekTag(buffer, 'end');
                                    if (buffer.isError(possibleEnd))
                                        return possibleEnd;

                                    var res = decoder.decode(buffer, 'der', options);
                                    if (buffer.isError(res) && possibleEnd)
                                        break;
                                    result.push(res);
                                }
                                return result;
                            };

                            DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
                                if (tag === 'bitstr') {
                                    var unused = buffer.readUInt8();
                                    if (buffer.isError(unused))
                                        return unused;
                                    return {unused: unused, data: buffer.raw()};
                                } else if (tag === 'bmpstr') {
                                    var raw = buffer.raw();
                                    if (raw.length % 2 === 1)
                                        return buffer.error('Decoding of string type: bmpstr length mismatch');

                                    var str = '';
                                    for (var i = 0; i < raw.length / 2; i++) {
                                        str += String.fromCharCode(raw.readUInt16BE(i * 2));
                                    }
                                    return str;
                                } else if (tag === 'numstr') {
                                    var numstr = buffer.raw().toString('ascii');
                                    if (!this._isNumstr(numstr)) {
                                        return buffer.error('Decoding of string type: ' +
                                            'numstr unsupported characters');
                                    }
                                    return numstr;
                                } else if (tag === 'octstr') {
                                    return buffer.raw();
                                } else if (tag === 'objDesc') {
                                    return buffer.raw();
                                } else if (tag === 'printstr') {
                                    var printstr = buffer.raw().toString('ascii');
                                    if (!this._isPrintstr(printstr)) {
                                        return buffer.error('Decoding of string type: ' +
                                            'printstr unsupported characters');
                                    }
                                    return printstr;
                                } else if (/str$/.test(tag)) {
                                    return buffer.raw().toString();
                                } else {
                                    return buffer.error('Decoding of string type: ' + tag + ' unsupported');
                                }
                            };

                            DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
                                var result;
                                var identifiers = [];
                                var ident = 0;
                                while (!buffer.isEmpty()) {
                                    var subident = buffer.readUInt8();
                                    ident <<= 7;
                                    ident |= subident & 0x7f;
                                    if ((subident & 0x80) === 0) {
                                        identifiers.push(ident);
                                        ident = 0;
                                    }
                                }
                                if (subident & 0x80)
                                    identifiers.push(ident);

                                var first = (identifiers[0] / 40) | 0;
                                var second = identifiers[0] % 40;

                                if (relative)
                                    result = identifiers;
                                else
                                    result = [first, second].concat(identifiers.slice(1));

                                if (values) {
                                    var tmp = values[result.join(' ')];
                                    if (tmp === undefined)
                                        tmp = values[result.join('.')];
                                    if (tmp !== undefined)
                                        result = tmp;
                                }

                                return result;
                            };

                            DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
                                var str = buffer.raw().toString();
                                if (tag === 'gentime') {
                                    var year = str.slice(0, 4) | 0;
                                    var mon = str.slice(4, 6) | 0;
                                    var day = str.slice(6, 8) | 0;
                                    var hour = str.slice(8, 10) | 0;
                                    var min = str.slice(10, 12) | 0;
                                    var sec = str.slice(12, 14) | 0;
                                } else if (tag === 'utctime') {
                                    var year = str.slice(0, 2) | 0;
                                    var mon = str.slice(2, 4) | 0;
                                    var day = str.slice(4, 6) | 0;
                                    var hour = str.slice(6, 8) | 0;
                                    var min = str.slice(8, 10) | 0;
                                    var sec = str.slice(10, 12) | 0;
                                    if (year < 70)
                                        year = 2000 + year;
                                    else
                                        year = 1900 + year;
                                } else {
                                    return buffer.error('Decoding ' + tag + ' time is not supported yet');
                                }

                                return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
                            };

                            DERNode.prototype._decodeNull = function decodeNull(buffer) {
                                return null;
                            };

                            DERNode.prototype._decodeBool = function decodeBool(buffer) {
                                var res = buffer.readUInt8();
                                if (buffer.isError(res))
                                    return res;
                                else
                                    return res !== 0;
                            };

                            DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
                                // Bigint, return as it is (assume big endian)
                                var raw = buffer.raw();
                                var res = new bignum(raw);

                                if (values)
                                    res = values[res.toString(10)] || res;

                                return res;
                            };

                            DERNode.prototype._use = function use(entity, obj) {
                                if (typeof entity === 'function')
                                    entity = entity(obj);
                                return entity._getDecoder('der').tree;
                            };

// Utility methods

                            function derDecodeTag(buf, fail) {
                                var tag = buf.readUInt8(fail);
                                if (buf.isError(tag))
                                    return tag;

                                var cls = der.tagClass[tag >> 6];
                                var primitive = (tag & 0x20) === 0;

                                // Multi-octet tag - load
                                if ((tag & 0x1f) === 0x1f) {
                                    var oct = tag;
                                    tag = 0;
                                    while ((oct & 0x80) === 0x80) {
                                        oct = buf.readUInt8(fail);
                                        if (buf.isError(oct))
                                            return oct;

                                        tag <<= 7;
                                        tag |= oct & 0x7f;
                                    }
                                } else {
                                    tag &= 0x1f;
                                }
                                var tagStr = der.tag[tag];

                                return {
                                    cls: cls,
                                    primitive: primitive,
                                    tag: tag,
                                    tagStr: tagStr
                                };
                            }

                            function derDecodeLen(buf, primitive, fail) {
                                var len = buf.readUInt8(fail);
                                if (buf.isError(len))
                                    return len;

                                // Indefinite form
                                if (!primitive && len === 0x80)
                                    return null;

                                // Definite form
                                if ((len & 0x80) === 0) {
                                    // Short form
                                    return len;
                                }

                                // Long form
                                var num = len & 0x7f;
                                if (num > 4)
                                    return buf.error('length octect is too long');

                                len = 0;
                                for (var i = 0; i < num; i++) {
                                    len <<= 8;
                                    var j = buf.readUInt8(fail);
                                    if (buf.isError(j))
                                        return j;
                                    len |= j;
                                }

                                return len;
                            }

                        }, {"../../asn1": 17, "inherits": 150}],
                        26: [function (require, module, exports) {
                            var decoders = exports;

                            decoders.der = require('./der');
                            decoders.pem = require('./pem');

                        }, {"./der": 25, "./pem": 27}],
                        27: [function (require, module, exports) {
                            var inherits = require('inherits');
                            var Buffer = require('buffer').Buffer;

                            var DERDecoder = require('./der');

                            function PEMDecoder(entity) {
                                DERDecoder.call(this, entity);
                                this.enc = 'pem';
                            };
                            inherits(PEMDecoder, DERDecoder);
                            module.exports = PEMDecoder;

                            PEMDecoder.prototype.decode = function decode(data, options) {
                                var lines = data.toString().split(/[\r\n]+/g);

                                var label = options.label.toUpperCase();

                                var re = /^-----(BEGIN|END) ([^-]+)-----$/;
                                var start = -1;
                                var end = -1;
                                for (var i = 0; i < lines.length; i++) {
                                    var match = lines[i].match(re);
                                    if (match === null)
                                        continue;

                                    if (match[2] !== label)
                                        continue;

                                    if (start === -1) {
                                        if (match[1] !== 'BEGIN')
                                            break;
                                        start = i;
                                    } else {
                                        if (match[1] !== 'END')
                                            break;
                                        end = i;
                                        break;
                                    }
                                }
                                if (start === -1 || end === -1)
                                    throw new Error('PEM section not found for: ' + label);

                                var base64 = lines.slice(start + 1, end).join('');
                                // Remove excessive symbols
                                base64.replace(/[^a-z0-9\+\/=]+/gi, '');

                                var input = new Buffer(base64, 'base64');
                                return DERDecoder.prototype.decode.call(this, input, options);
                            };

                        }, {"./der": 25, "buffer": 64, "inherits": 150}],
                        28: [function (require, module, exports) {
                            var inherits = require('inherits');
                            var Buffer = require('buffer').Buffer;

                            var asn1 = require('../../asn1');
                            var base = asn1.base;

// Import DER constants
                            var der = asn1.constants.der;

                            function DEREncoder(entity) {
                                this.enc = 'der';
                                this.name = entity.name;
                                this.entity = entity;

                                // Construct base tree
                                this.tree = new DERNode();
                                this.tree._init(entity.body);
                            };
                            module.exports = DEREncoder;

                            DEREncoder.prototype.encode = function encode(data, reporter) {
                                return this.tree._encode(data, reporter).join();
                            };

// Tree methods

                            function DERNode(parent) {
                                base.Node.call(this, 'der', parent);
                            }

                            inherits(DERNode, base.Node);

                            DERNode.prototype._encodeComposite = function encodeComposite(tag,
                                                                                          primitive,
                                                                                          cls,
                                                                                          content) {
                                var encodedTag = encodeTag(tag, primitive, cls, this.reporter);

                                // Short form
                                if (content.length < 0x80) {
                                    var header = new Buffer(2);
                                    header[0] = encodedTag;
                                    header[1] = content.length;
                                    return this._createEncoderBuffer([header, content]);
                                }

                                // Long form
                                // Count octets required to store length
                                var lenOctets = 1;
                                for (var i = content.length; i >= 0x100; i >>= 8)
                                    lenOctets++;

                                var header = new Buffer(1 + 1 + lenOctets);
                                header[0] = encodedTag;
                                header[1] = 0x80 | lenOctets;

                                for (var i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)
                                    header[i] = j & 0xff;

                                return this._createEncoderBuffer([header, content]);
                            };

                            DERNode.prototype._encodeStr = function encodeStr(str, tag) {
                                if (tag === 'bitstr') {
                                    return this._createEncoderBuffer([str.unused | 0, str.data]);
                                } else if (tag === 'bmpstr') {
                                    var buf = new Buffer(str.length * 2);
                                    for (var i = 0; i < str.length; i++) {
                                        buf.writeUInt16BE(str.charCodeAt(i), i * 2);
                                    }
                                    return this._createEncoderBuffer(buf);
                                } else if (tag === 'numstr') {
                                    if (!this._isNumstr(str)) {
                                        return this.reporter.error('Encoding of string type: numstr supports ' +
                                            'only digits and space');
                                    }
                                    return this._createEncoderBuffer(str);
                                } else if (tag === 'printstr') {
                                    if (!this._isPrintstr(str)) {
                                        return this.reporter.error('Encoding of string type: printstr supports ' +
                                            'only latin upper and lower case letters, ' +
                                            'digits, space, apostrophe, left and rigth ' +
                                            'parenthesis, plus sign, comma, hyphen, ' +
                                            'dot, slash, colon, equal sign, ' +
                                            'question mark');
                                    }
                                    return this._createEncoderBuffer(str);
                                } else if (/str$/.test(tag)) {
                                    return this._createEncoderBuffer(str);
                                } else if (tag === 'objDesc') {
                                    return this._createEncoderBuffer(str);
                                } else {
                                    return this.reporter.error('Encoding of string type: ' + tag +
                                        ' unsupported');
                                }
                            };

                            DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
                                if (typeof id === 'string') {
                                    if (!values)
                                        return this.reporter.error('string objid given, but no values map found');
                                    if (!values.hasOwnProperty(id))
                                        return this.reporter.error('objid not found in values map');
                                    id = values[id].split(/[\s\.]+/g);
                                    for (var i = 0; i < id.length; i++)
                                        id[i] |= 0;
                                } else if (Array.isArray(id)) {
                                    id = id.slice();
                                    for (var i = 0; i < id.length; i++)
                                        id[i] |= 0;
                                }

                                if (!Array.isArray(id)) {
                                    return this.reporter.error('objid() should be either array or string, ' +
                                        'got: ' + JSON.stringify(id));
                                }

                                if (!relative) {
                                    if (id[1] >= 40)
                                        return this.reporter.error('Second objid identifier OOB');
                                    id.splice(0, 2, id[0] * 40 + id[1]);
                                }

                                // Count number of octets
                                var size = 0;
                                for (var i = 0; i < id.length; i++) {
                                    var ident = id[i];
                                    for (size++; ident >= 0x80; ident >>= 7)
                                        size++;
                                }

                                var objid = new Buffer(size);
                                var offset = objid.length - 1;
                                for (var i = id.length - 1; i >= 0; i--) {
                                    var ident = id[i];
                                    objid[offset--] = ident & 0x7f;
                                    while ((ident >>= 7) > 0)
                                        objid[offset--] = 0x80 | (ident & 0x7f);
                                }

                                return this._createEncoderBuffer(objid);
                            };

                            function two(num) {
                                if (num < 10)
                                    return '0' + num;
                                else
                                    return num;
                            }

                            DERNode.prototype._encodeTime = function encodeTime(time, tag) {
                                var str;
                                var date = new Date(time);

                                if (tag === 'gentime') {
                                    str = [
                                        two(date.getFullYear()),
                                        two(date.getUTCMonth() + 1),
                                        two(date.getUTCDate()),
                                        two(date.getUTCHours()),
                                        two(date.getUTCMinutes()),
                                        two(date.getUTCSeconds()),
                                        'Z'
                                    ].join('');
                                } else if (tag === 'utctime') {
                                    str = [
                                        two(date.getFullYear() % 100),
                                        two(date.getUTCMonth() + 1),
                                        two(date.getUTCDate()),
                                        two(date.getUTCHours()),
                                        two(date.getUTCMinutes()),
                                        two(date.getUTCSeconds()),
                                        'Z'
                                    ].join('');
                                } else {
                                    this.reporter.error('Encoding ' + tag + ' time is not supported yet');
                                }

                                return this._encodeStr(str, 'octstr');
                            };

                            DERNode.prototype._encodeNull = function encodeNull() {
                                return this._createEncoderBuffer('');
                            };

                            DERNode.prototype._encodeInt = function encodeInt(num, values) {
                                if (typeof num === 'string') {
                                    if (!values)
                                        return this.reporter.error('String int or enum given, but no values map');
                                    if (!values.hasOwnProperty(num)) {
                                        return this.reporter.error('Values map doesn\'t contain: ' +
                                            JSON.stringify(num));
                                    }
                                    num = values[num];
                                }

                                // Bignum, assume big endian
                                if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
                                    var numArray = num.toArray();
                                    if (!num.sign && numArray[0] & 0x80) {
                                        numArray.unshift(0);
                                    }
                                    num = new Buffer(numArray);
                                }

                                if (Buffer.isBuffer(num)) {
                                    var size = num.length;
                                    if (num.length === 0)
                                        size++;

                                    var out = new Buffer(size);
                                    num.copy(out);
                                    if (num.length === 0)
                                        out[0] = 0
                                    return this._createEncoderBuffer(out);
                                }

                                if (num < 0x80)
                                    return this._createEncoderBuffer(num);

                                if (num < 0x100)
                                    return this._createEncoderBuffer([0, num]);

                                var size = 1;
                                for (var i = num; i >= 0x100; i >>= 8)
                                    size++;

                                var out = new Array(size);
                                for (var i = out.length - 1; i >= 0; i--) {
                                    out[i] = num & 0xff;
                                    num >>= 8;
                                }
                                if (out[0] & 0x80) {
                                    out.unshift(0);
                                }

                                return this._createEncoderBuffer(new Buffer(out));
                            };

                            DERNode.prototype._encodeBool = function encodeBool(value) {
                                return this._createEncoderBuffer(value ? 0xff : 0);
                            };

                            DERNode.prototype._use = function use(entity, obj) {
                                if (typeof entity === 'function')
                                    entity = entity(obj);
                                return entity._getEncoder('der').tree;
                            };

                            DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
                                var state = this._baseState;
                                var i;
                                if (state['default'] === null)
                                    return false;

                                var data = dataBuffer.join();
                                if (state.defaultBuffer === undefined)
                                    state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();

                                if (data.length !== state.defaultBuffer.length)
                                    return false;

                                for (i = 0; i < data.length; i++)
                                    if (data[i] !== state.defaultBuffer[i])
                                        return false;

                                return true;
                            };

// Utility methods

                            function encodeTag(tag, primitive, cls, reporter) {
                                var res;

                                if (tag === 'seqof')
                                    tag = 'seq';
                                else if (tag === 'setof')
                                    tag = 'set';

                                if (der.tagByName.hasOwnProperty(tag))
                                    res = der.tagByName[tag];
                                else if (typeof tag === 'number' && (tag | 0) === tag)
                                    res = tag;
                                else
                                    return reporter.error('Unknown tag: ' + tag);

                                if (res >= 0x1f)
                                    return reporter.error('Multi-octet tag encoding unsupported');

                                if (!primitive)
                                    res |= 0x20;

                                res |= (der.tagClassByName[cls || 'universal'] << 6);

                                return res;
                            }

                        }, {"../../asn1": 17, "buffer": 64, "inherits": 150}],
                        29: [function (require, module, exports) {
                            var encoders = exports;

                            encoders.der = require('./der');
                            encoders.pem = require('./pem');

                        }, {"./der": 28, "./pem": 30}],
                        30: [function (require, module, exports) {
                            var inherits = require('inherits');

                            var DEREncoder = require('./der');

                            function PEMEncoder(entity) {
                                DEREncoder.call(this, entity);
                                this.enc = 'pem';
                            };
                            inherits(PEMEncoder, DEREncoder);
                            module.exports = PEMEncoder;

                            PEMEncoder.prototype.encode = function encode(data, options) {
                                var buf = DEREncoder.prototype.encode.call(this, data);

                                var p = buf.toString('base64');
                                var out = ['-----BEGIN ' + options.label + '-----'];
                                for (var i = 0; i < p.length; i += 64)
                                    out.push(p.slice(i, i + 64));
                                out.push('-----END ' + options.label + '-----');
                                return out.join('\n');
                            };

                        }, {"./der": 28, "inherits": 150}],
                        31: [function (require, module, exports) {
                            'use strict'

                            exports.byteLength = byteLength
                            exports.toByteArray = toByteArray
                            exports.fromByteArray = fromByteArray

                            var lookup = []
                            var revLookup = []
                            var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

                            var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
                            for (var i = 0, len = code.length; i < len; ++i) {
                                lookup[i] = code[i]
                                revLookup[code.charCodeAt(i)] = i
                            }

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
                            revLookup['-'.charCodeAt(0)] = 62
                            revLookup['_'.charCodeAt(0)] = 63

                            function getLens(b64) {
                                var len = b64.length

                                if (len % 4 > 0) {
                                    throw new Error('Invalid string. Length must be a multiple of 4')
                                }

                                // Trim off extra bytes after placeholder bytes are found
                                // See: https://github.com/beatgammit/base64-js/issues/42
                                var validLen = b64.indexOf('=')
                                if (validLen === -1) validLen = len

                                var placeHoldersLen = validLen === len
                                    ? 0
                                    : 4 - (validLen % 4)

                                return [validLen, placeHoldersLen]
                            }

// base64 is 4/3 + up to two characters of the original data
                            function byteLength(b64) {
                                var lens = getLens(b64)
                                var validLen = lens[0]
                                var placeHoldersLen = lens[1]
                                return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
                            }

                            function _byteLength(b64, validLen, placeHoldersLen) {
                                return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
                            }

                            function toByteArray(b64) {
                                var tmp
                                var lens = getLens(b64)
                                var validLen = lens[0]
                                var placeHoldersLen = lens[1]

                                var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

                                var curByte = 0

                                // if there are placeholders, only get up to the last complete 4 chars
                                var len = placeHoldersLen > 0
                                    ? validLen - 4
                                    : validLen

                                for (var i = 0; i < len; i += 4) {
                                    tmp =
                                        (revLookup[b64.charCodeAt(i)] << 18) |
                                        (revLookup[b64.charCodeAt(i + 1)] << 12) |
                                        (revLookup[b64.charCodeAt(i + 2)] << 6) |
                                        revLookup[b64.charCodeAt(i + 3)]
                                    arr[curByte++] = (tmp >> 16) & 0xFF
                                    arr[curByte++] = (tmp >> 8) & 0xFF
                                    arr[curByte++] = tmp & 0xFF
                                }

                                if (placeHoldersLen === 2) {
                                    tmp =
                                        (revLookup[b64.charCodeAt(i)] << 2) |
                                        (revLookup[b64.charCodeAt(i + 1)] >> 4)
                                    arr[curByte++] = tmp & 0xFF
                                }

                                if (placeHoldersLen === 1) {
                                    tmp =
                                        (revLookup[b64.charCodeAt(i)] << 10) |
                                        (revLookup[b64.charCodeAt(i + 1)] << 4) |
                                        (revLookup[b64.charCodeAt(i + 2)] >> 2)
                                    arr[curByte++] = (tmp >> 8) & 0xFF
                                    arr[curByte++] = tmp & 0xFF
                                }

                                return arr
                            }

                            function tripletToBase64(num) {
                                return lookup[num >> 18 & 0x3F] +
                                    lookup[num >> 12 & 0x3F] +
                                    lookup[num >> 6 & 0x3F] +
                                    lookup[num & 0x3F]
                            }

                            function encodeChunk(uint8, start, end) {
                                var tmp
                                var output = []
                                for (var i = start; i < end; i += 3) {
                                    tmp =
                                        ((uint8[i] << 16) & 0xFF0000) +
                                        ((uint8[i + 1] << 8) & 0xFF00) +
                                        (uint8[i + 2] & 0xFF)
                                    output.push(tripletToBase64(tmp))
                                }
                                return output.join('')
                            }

                            function fromByteArray(uint8) {
                                var tmp
                                var len = uint8.length
                                var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
                                var parts = []
                                var maxChunkLength = 16383 // must be multiple of 3

                                // go through the array every three bytes, we'll deal with trailing stuff later
                                for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
                                    parts.push(encodeChunk(
                                        uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
                                    ))
                                }

                                // pad the end with zeros, but make sure to not forget the extra bytes
                                if (extraBytes === 1) {
                                    tmp = uint8[len - 1]
                                    parts.push(
                                        lookup[tmp >> 2] +
                                        lookup[(tmp << 4) & 0x3F] +
                                        '=='
                                    )
                                } else if (extraBytes === 2) {
                                    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
                                    parts.push(
                                        lookup[tmp >> 10] +
                                        lookup[(tmp >> 4) & 0x3F] +
                                        lookup[(tmp << 2) & 0x3F] +
                                        '='
                                    )
                                }

                                return parts.join('')
                            }

                        }, {}],
                        32: [function (require, module, exports) {
                            ;(function (globalObject) {
                                'use strict';

                                /*
 *      bignumber.js v7.2.1
 *      A JavaScript library for arbitrary-precision arithmetic.
 *      https://github.com/MikeMcl/bignumber.js
 *      Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>
 *      MIT Licensed.
 *
 *      BigNumber.prototype methods     |  BigNumber methods
 *                                      |
 *      absoluteValue            abs    |  clone
 *      comparedTo                      |  config               set
 *      decimalPlaces            dp     |      DECIMAL_PLACES
 *      dividedBy                div    |      ROUNDING_MODE
 *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT
 *      exponentiatedBy          pow    |      RANGE
 *      integerValue                    |      CRYPTO
 *      isEqualTo                eq     |      MODULO_MODE
 *      isFinite                        |      POW_PRECISION
 *      isGreaterThan            gt     |      FORMAT
 *      isGreaterThanOrEqualTo   gte    |      ALPHABET
 *      isInteger                       |  isBigNumber
 *      isLessThan               lt     |  maximum              max
 *      isLessThanOrEqualTo      lte    |  minimum              min
 *      isNaN                           |  random
 *      isNegative                      |
 *      isPositive                      |
 *      isZero                          |
 *      minus                           |
 *      modulo                   mod    |
 *      multipliedBy             times  |
 *      negated                         |
 *      plus                            |
 *      precision                sd     |
 *      shiftedBy                       |
 *      squareRoot               sqrt   |
 *      toExponential                   |
 *      toFixed                         |
 *      toFormat                        |
 *      toFraction                      |
 *      toJSON                          |
 *      toNumber                        |
 *      toPrecision                     |
 *      toString                        |
 *      valueOf                         |
 *
 */


                                var BigNumber,
                                    isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,

                                    mathceil = Math.ceil,
                                    mathfloor = Math.floor,

                                    bignumberError = '[BigNumber Error] ',
                                    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',

                                    BASE = 1e14,
                                    LOG_BASE = 14,
                                    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1
                                    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1
                                    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],
                                    SQRT_BASE = 1e7,

                                    // EDITABLE
                                    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and
                                    // the arguments to toExponential, toFixed, toFormat, and toPrecision.
                                    MAX = 1E9;                                   // 0 to MAX_INT32


                                /*
   * Create and return a BigNumber constructor.
   */
                                function clone(configObject) {
                                    var div, convertBase, parseNumeric,
                                        P = BigNumber.prototype = {
                                            constructor: BigNumber,
                                            toString: null,
                                            valueOf: null
                                        },
                                        ONE = new BigNumber(1),


                                        //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------


                                        // The default values below must be integers within the inclusive ranges stated.
                                        // The values can also be changed at run-time using BigNumber.set.

                                        // The maximum number of decimal places for operations involving division.
                                        DECIMAL_PLACES = 20,                     // 0 to MAX

                                        // The rounding mode used when rounding to the above decimal places, and when using
                                        // toExponential, toFixed, toFormat and toPrecision, and round (default value).
                                        // UP         0 Away from zero.
                                        // DOWN       1 Towards zero.
                                        // CEIL       2 Towards +Infinity.
                                        // FLOOR      3 Towards -Infinity.
                                        // HALF_UP    4 Towards nearest neighbour. If equidistant, up.
                                        // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
                                        // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
                                        // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
                                        // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
                                        ROUNDING_MODE = 4,                       // 0 to 8

                                        // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]

                                        // The exponent value at and beneath which toString returns exponential notation.
                                        // Number type: -7
                                        TO_EXP_NEG = -7,                         // 0 to -MAX

                                        // The exponent value at and above which toString returns exponential notation.
                                        // Number type: 21
                                        TO_EXP_POS = 21,                         // 0 to MAX

                                        // RANGE : [MIN_EXP, MAX_EXP]

                                        // The minimum exponent value, beneath which underflow to zero occurs.
                                        // Number type: -324  (5e-324)
                                        MIN_EXP = -1e7,                          // -1 to -MAX

                                        // The maximum exponent value, above which overflow to Infinity occurs.
                                        // Number type:  308  (1.7976931348623157e+308)
                                        // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.
                                        MAX_EXP = 1e7,                           // 1 to MAX

                                        // Whether to use cryptographically-secure random number generation, if available.
                                        CRYPTO = false,                          // true or false

                                        // The modulo mode used when calculating the modulus: a mod n.
                                        // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
                                        // The remainder (r) is calculated as: r = a - n * q.
                                        //
                                        // UP        0 The remainder is positive if the dividend is negative, else is negative.
                                        // DOWN      1 The remainder has the same sign as the dividend.
                                        //             This modulo mode is commonly known as 'truncated division' and is
                                        //             equivalent to (a % n) in JavaScript.
                                        // FLOOR     3 The remainder has the same sign as the divisor (Python %).
                                        // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.
                                        // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).
                                        //             The remainder is always positive.
                                        //
                                        // The truncated division, floored division, Euclidian division and IEEE 754 remainder
                                        // modes are commonly used for the modulus operation.
                                        // Although the other rounding modes can also be used, they may not give useful results.
                                        MODULO_MODE = 1,                         // 0 to 9

                                        // The maximum number of significant digits of the result of the exponentiatedBy operation.
                                        // If POW_PRECISION is 0, there will be unlimited significant digits.
                                        POW_PRECISION = 0,                    // 0 to MAX

                                        // The format specification used by the BigNumber.prototype.toFormat method.
                                        FORMAT = {
                                            decimalSeparator: '.',
                                            groupSeparator: ',',
                                            groupSize: 3,
                                            secondaryGroupSize: 0,
                                            fractionGroupSeparator: '\xA0',      // non-breaking space
                                            fractionGroupSize: 0
                                        },

                                        // The alphabet used for base conversion.
                                        // It must be at least 2 characters long, with no '.' or repeated character.
                                        // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'
                                        ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';


                                    //------------------------------------------------------------------------------------------


                                    // CONSTRUCTOR


                                    /*
     * The BigNumber constructor and exported function.
     * Create and return a new instance of a BigNumber object.
     *
     * n {number|string|BigNumber} A numeric value.
     * [b] {number} The base of n. Integer, 2 to ALPHABET.length inclusive.
     */
                                    function BigNumber(n, b) {
                                        var alphabet, c, caseChanged, e, i, isNum, len, str,
                                            x = this;

                                        // Enable constructor usage without new.
                                        if (!(x instanceof BigNumber)) {

                                            // Don't throw on constructor call without new (#81).
                                            // '[BigNumber Error] Constructor call without new: {n}'
                                            //throw Error(bignumberError + ' Constructor call without new: ' + n);
                                            return new BigNumber(n, b);
                                        }

                                        if (b == null) {

                                            // Duplicate.
                                            if (n instanceof BigNumber) {
                                                x.s = n.s;
                                                x.e = n.e;
                                                x.c = (n = n.c) ? n.slice() : n;
                                                return;
                                            }

                                            isNum = typeof n == 'number';

                                            if (isNum && n * 0 == 0) {

                                                // Use `1 / n` to handle minus zero also.
                                                x.s = 1 / n < 0 ? (n = -n, -1) : 1;

                                                // Faster path for integers.
                                                if (n === ~~n) {
                                                    for (e = 0, i = n; i >= 10; i /= 10, e++) ;
                                                    x.e = e;
                                                    x.c = [n];
                                                    return;
                                                }

                                                str = n + '';
                                            } else {
                                                if (!isNumeric.test(str = n + '')) return parseNumeric(x, str, isNum);
                                                x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;
                                            }

                                            // Decimal point?
                                            if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');

                                            // Exponential form?
                                            if ((i = str.search(/e/i)) > 0) {

                                                // Determine exponent.
                                                if (e < 0) e = i;
                                                e += +str.slice(i + 1);
                                                str = str.substring(0, i);
                                            } else if (e < 0) {

                                                // Integer.
                                                e = str.length;
                                            }

                                        } else {

                                            // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
                                            intCheck(b, 2, ALPHABET.length, 'Base');
                                            str = n + '';

                                            // Allow exponential notation to be used with base 10 argument, while
                                            // also rounding to DECIMAL_PLACES as with other bases.
                                            if (b == 10) {
                                                x = new BigNumber(n instanceof BigNumber ? n : str);
                                                return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
                                            }

                                            isNum = typeof n == 'number';

                                            if (isNum) {

                                                // Avoid potential interpretation of Infinity and NaN as base 44+ values.
                                                if (n * 0 != 0) return parseNumeric(x, str, isNum, b);

                                                x.s = 1 / n < 0 ? (str = str.slice(1), -1) : 1;

                                                // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
                                                if (BigNumber.DEBUG && str.replace(/^0\.0*|\./, '').length > 15) {
                                                    throw Error
                                                    (tooManyDigits + n);
                                                }

                                                // Prevent later check for length on converted number.
                                                isNum = false;
                                            } else {
                                                x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
                                            }

                                            alphabet = ALPHABET.slice(0, b);
                                            e = i = 0;

                                            // Check that str is a valid base b number.
                                            // Don't use RegExp so alphabet can contain special characters.
                                            for (len = str.length; i < len; i++) {
                                                if (alphabet.indexOf(c = str.charAt(i)) < 0) {
                                                    if (c == '.') {

                                                        // If '.' is not the first character and it has not be found before.
                                                        if (i > e) {
                                                            e = len;
                                                            continue;
                                                        }
                                                    } else if (!caseChanged) {

                                                        // Allow e.g. hexadecimal 'FF' as well as 'ff'.
                                                        if (str == str.toUpperCase() && (str = str.toLowerCase()) ||
                                                            str == str.toLowerCase() && (str = str.toUpperCase())) {
                                                            caseChanged = true;
                                                            i = -1;
                                                            e = 0;
                                                            continue;
                                                        }
                                                    }

                                                    return parseNumeric(x, n + '', isNum, b);
                                                }
                                            }

                                            str = convertBase(str, b, 10, x.s);

                                            // Decimal point?
                                            if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');
                                            else e = str.length;
                                        }

                                        // Determine leading zeros.
                                        for (i = 0; str.charCodeAt(i) === 48; i++) ;

                                        // Determine trailing zeros.
                                        for (len = str.length; str.charCodeAt(--len) === 48;) ;

                                        str = str.slice(i, ++len);

                                        if (str) {
                                            len -= i;

                                            // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
                                            if (isNum && BigNumber.DEBUG &&
                                                len > 15 && (n > MAX_SAFE_INTEGER || n !== mathfloor(n))) {
                                                throw Error
                                                (tooManyDigits + (x.s * n));
                                            }

                                            e = e - i - 1;

                                            // Overflow?
                                            if (e > MAX_EXP) {

                                                // Infinity.
                                                x.c = x.e = null;

                                                // Underflow?
                                            } else if (e < MIN_EXP) {

                                                // Zero.
                                                x.c = [x.e = 0];
                                            } else {
                                                x.e = e;
                                                x.c = [];

                                                // Transform base

                                                // e is the base 10 exponent.
                                                // i is where to slice str to get the first element of the coefficient array.
                                                i = (e + 1) % LOG_BASE;
                                                if (e < 0) i += LOG_BASE;

                                                if (i < len) {
                                                    if (i) x.c.push(+str.slice(0, i));

                                                    for (len -= LOG_BASE; i < len;) {
                                                        x.c.push(+str.slice(i, i += LOG_BASE));
                                                    }

                                                    str = str.slice(i);
                                                    i = LOG_BASE - str.length;
                                                } else {
                                                    i -= len;
                                                }

                                                for (; i--; str += '0') ;
                                                x.c.push(+str);
                                            }
                                        } else {

                                            // Zero.
                                            x.c = [x.e = 0];
                                        }
                                    }


                                    // CONSTRUCTOR PROPERTIES


                                    BigNumber.clone = clone;

                                    BigNumber.ROUND_UP = 0;
                                    BigNumber.ROUND_DOWN = 1;
                                    BigNumber.ROUND_CEIL = 2;
                                    BigNumber.ROUND_FLOOR = 3;
                                    BigNumber.ROUND_HALF_UP = 4;
                                    BigNumber.ROUND_HALF_DOWN = 5;
                                    BigNumber.ROUND_HALF_EVEN = 6;
                                    BigNumber.ROUND_HALF_CEIL = 7;
                                    BigNumber.ROUND_HALF_FLOOR = 8;
                                    BigNumber.EUCLID = 9;


                                    /*
     * Configure infrequently-changing library-wide settings.
     *
     * Accept an object with the following optional properties (if the value of a property is
     * a number, it must be an integer within the inclusive range stated):
     *
     *   DECIMAL_PLACES   {number}           0 to MAX
     *   ROUNDING_MODE    {number}           0 to 8
     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]
     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]
     *   CRYPTO           {boolean}          true or false
     *   MODULO_MODE      {number}           0 to 9
     *   POW_PRECISION       {number}           0 to MAX
     *   ALPHABET         {string}           A string of two or more unique characters which does
     *                                       not contain '.'.
     *   FORMAT           {object}           An object with some of the following properties:
     *      decimalSeparator       {string}
     *      groupSeparator         {string}
     *      groupSize              {number}
     *      secondaryGroupSize     {number}
     *      fractionGroupSeparator {string}
     *      fractionGroupSize      {number}
     *
     * (The values assigned to the above FORMAT object properties are not checked for validity.)
     *
     * E.g.
     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })
     *
     * Ignore properties/parameters set to null or undefined, except for ALPHABET.
     *
     * Return an object with the properties current values.
     */
                                    BigNumber.config = BigNumber.set = function (obj) {
                                        var p, v;

                                        if (obj != null) {

                                            if (typeof obj == 'object') {

                                                // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.
                                                // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'
                                                if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {
                                                    v = obj[p];
                                                    intCheck(v, 0, MAX, p);
                                                    DECIMAL_PLACES = v;
                                                }

                                                // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.
                                                // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'
                                                if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {
                                                    v = obj[p];
                                                    intCheck(v, 0, 8, p);
                                                    ROUNDING_MODE = v;
                                                }

                                                // EXPONENTIAL_AT {number|number[]}
                                                // Integer, -MAX to MAX inclusive or
                                                // [integer -MAX to 0 inclusive, 0 to MAX inclusive].
                                                // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'
                                                if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {
                                                    v = obj[p];
                                                    if (isArray(v)) {
                                                        intCheck(v[0], -MAX, 0, p);
                                                        intCheck(v[1], 0, MAX, p);
                                                        TO_EXP_NEG = v[0];
                                                        TO_EXP_POS = v[1];
                                                    } else {
                                                        intCheck(v, -MAX, MAX, p);
                                                        TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);
                                                    }
                                                }

                                                // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or
                                                // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].
                                                // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'
                                                if (obj.hasOwnProperty(p = 'RANGE')) {
                                                    v = obj[p];
                                                    if (isArray(v)) {
                                                        intCheck(v[0], -MAX, -1, p);
                                                        intCheck(v[1], 1, MAX, p);
                                                        MIN_EXP = v[0];
                                                        MAX_EXP = v[1];
                                                    } else {
                                                        intCheck(v, -MAX, MAX, p);
                                                        if (v) {
                                                            MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);
                                                        } else {
                                                            throw Error
                                                            (bignumberError + p + ' cannot be zero: ' + v);
                                                        }
                                                    }
                                                }

                                                // CRYPTO {boolean} true or false.
                                                // '[BigNumber Error] CRYPTO not true or false: {v}'
                                                // '[BigNumber Error] crypto unavailable'
                                                if (obj.hasOwnProperty(p = 'CRYPTO')) {
                                                    v = obj[p];
                                                    if (v === !!v) {
                                                        if (v) {
                                                            if (typeof crypto != 'undefined' && crypto &&
                                                                (crypto.getRandomValues || crypto.randomBytes)) {
                                                                CRYPTO = v;
                                                            } else {
                                                                CRYPTO = !v;
                                                                throw Error
                                                                (bignumberError + 'crypto unavailable');
                                                            }
                                                        } else {
                                                            CRYPTO = v;
                                                        }
                                                    } else {
                                                        throw Error
                                                        (bignumberError + p + ' not true or false: ' + v);
                                                    }
                                                }

                                                // MODULO_MODE {number} Integer, 0 to 9 inclusive.
                                                // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'
                                                if (obj.hasOwnProperty(p = 'MODULO_MODE')) {
                                                    v = obj[p];
                                                    intCheck(v, 0, 9, p);
                                                    MODULO_MODE = v;
                                                }

                                                // POW_PRECISION {number} Integer, 0 to MAX inclusive.
                                                // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'
                                                if (obj.hasOwnProperty(p = 'POW_PRECISION')) {
                                                    v = obj[p];
                                                    intCheck(v, 0, MAX, p);
                                                    POW_PRECISION = v;
                                                }

                                                // FORMAT {object}
                                                // '[BigNumber Error] FORMAT not an object: {v}'
                                                if (obj.hasOwnProperty(p = 'FORMAT')) {
                                                    v = obj[p];
                                                    if (typeof v == 'object') FORMAT = v;
                                                    else throw Error
                                                    (bignumberError + p + ' not an object: ' + v);
                                                }

                                                // ALPHABET {string}
                                                // '[BigNumber Error] ALPHABET invalid: {v}'
                                                if (obj.hasOwnProperty(p = 'ALPHABET')) {
                                                    v = obj[p];

                                                    // Disallow if only one character, or contains '.' or a repeated character.
                                                    if (typeof v == 'string' && !/^.$|\.|(.).*\1/.test(v)) {
                                                        ALPHABET = v;
                                                    } else {
                                                        throw Error
                                                        (bignumberError + p + ' invalid: ' + v);
                                                    }
                                                }

                                            } else {

                                                // '[BigNumber Error] Object expected: {v}'
                                                throw Error
                                                (bignumberError + 'Object expected: ' + obj);
                                            }
                                        }

                                        return {
                                            DECIMAL_PLACES: DECIMAL_PLACES,
                                            ROUNDING_MODE: ROUNDING_MODE,
                                            EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],
                                            RANGE: [MIN_EXP, MAX_EXP],
                                            CRYPTO: CRYPTO,
                                            MODULO_MODE: MODULO_MODE,
                                            POW_PRECISION: POW_PRECISION,
                                            FORMAT: FORMAT,
                                            ALPHABET: ALPHABET
                                        };
                                    };


                                    /*
     * Return true if v is a BigNumber instance, otherwise return false.
     *
     * v {any}
     */
                                    BigNumber.isBigNumber = function (v) {
                                        return v instanceof BigNumber || v && v._isBigNumber === true || false;
                                    };


                                    /*
     * Return a new BigNumber whose value is the maximum of the arguments.
     *
     * arguments {number|string|BigNumber}
     */
                                    BigNumber.maximum = BigNumber.max = function () {
                                        return maxOrMin(arguments, P.lt);
                                    };


                                    /*
     * Return a new BigNumber whose value is the minimum of the arguments.
     *
     * arguments {number|string|BigNumber}
     */
                                    BigNumber.minimum = BigNumber.min = function () {
                                        return maxOrMin(arguments, P.gt);
                                    };


                                    /*
     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,
     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing
     * zeros are produced).
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'
     * '[BigNumber Error] crypto unavailable'
     */
                                    BigNumber.random = (function () {
                                        var pow2_53 = 0x20000000000000;

                                        // Return a 53 bit integer n, where 0 <= n < 9007199254740992.
                                        // Check if Math.random() produces more than 32 bits of randomness.
                                        // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.
                                        // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.
                                        var random53bitInt = (Math.random() * pow2_53) & 0x1fffff
                                            ? function () {
                                                return mathfloor(Math.random() * pow2_53);
                                            }
                                            : function () {
                                                return ((Math.random() * 0x40000000 | 0) * 0x800000) +
                                                    (Math.random() * 0x800000 | 0);
                                            };

                                        return function (dp) {
                                            var a, b, e, k, v,
                                                i = 0,
                                                c = [],
                                                rand = new BigNumber(ONE);

                                            if (dp == null) dp = DECIMAL_PLACES;
                                            else intCheck(dp, 0, MAX);

                                            k = mathceil(dp / LOG_BASE);

                                            if (CRYPTO) {

                                                // Browsers supporting crypto.getRandomValues.
                                                if (crypto.getRandomValues) {

                                                    a = crypto.getRandomValues(new Uint32Array(k *= 2));

                                                    for (; i < k;) {

                                                        // 53 bits:
                                                        // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)
                                                        // 11111 11111111 11111111 11111111 11100000 00000000 00000000
                                                        // ((Math.pow(2, 32) - 1) >>> 11).toString(2)
                                                        //                                     11111 11111111 11111111
                                                        // 0x20000 is 2^21.
                                                        v = a[i] * 0x20000 + (a[i + 1] >>> 11);

                                                        // Rejection sampling:
                                                        // 0 <= v < 9007199254740992
                                                        // Probability that v >= 9e15, is
                                                        // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251
                                                        if (v >= 9e15) {
                                                            b = crypto.getRandomValues(new Uint32Array(2));
                                                            a[i] = b[0];
                                                            a[i + 1] = b[1];
                                                        } else {

                                                            // 0 <= v <= 8999999999999999
                                                            // 0 <= (v % 1e14) <= 99999999999999
                                                            c.push(v % 1e14);
                                                            i += 2;
                                                        }
                                                    }
                                                    i = k / 2;

                                                    // Node.js supporting crypto.randomBytes.
                                                } else if (crypto.randomBytes) {

                                                    // buffer
                                                    a = crypto.randomBytes(k *= 7);

                                                    for (; i < k;) {

                                                        // 0x1000000000000 is 2^48, 0x10000000000 is 2^40
                                                        // 0x100000000 is 2^32, 0x1000000 is 2^24
                                                        // 11111 11111111 11111111 11111111 11111111 11111111 11111111
                                                        // 0 <= v < 9007199254740992
                                                        v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +
                                                            (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +
                                                            (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];

                                                        if (v >= 9e15) {
                                                            crypto.randomBytes(7).copy(a, i);
                                                        } else {

                                                            // 0 <= (v % 1e14) <= 99999999999999
                                                            c.push(v % 1e14);
                                                            i += 7;
                                                        }
                                                    }
                                                    i = k / 7;
                                                } else {
                                                    CRYPTO = false;
                                                    throw Error
                                                    (bignumberError + 'crypto unavailable');
                                                }
                                            }

                                            // Use Math.random.
                                            if (!CRYPTO) {

                                                for (; i < k;) {
                                                    v = random53bitInt();
                                                    if (v < 9e15) c[i++] = v % 1e14;
                                                }
                                            }

                                            k = c[--i];
                                            dp %= LOG_BASE;

                                            // Convert trailing digits to zeros according to dp.
                                            if (k && dp) {
                                                v = POWS_TEN[LOG_BASE - dp];
                                                c[i] = mathfloor(k / v) * v;
                                            }

                                            // Remove trailing elements which are zero.
                                            for (; c[i] === 0; c.pop(), i--) ;

                                            // Zero?
                                            if (i < 0) {
                                                c = [e = 0];
                                            } else {

                                                // Remove leading elements which are zero and adjust exponent accordingly.
                                                for (e = -1; c[0] === 0; c.splice(0, 1), e -= LOG_BASE) ;

                                                // Count the digits of the first element of c to determine leading zeros, and...
                                                for (i = 1, v = c[0]; v >= 10; v /= 10, i++) ;

                                                // adjust the exponent accordingly.
                                                if (i < LOG_BASE) e -= LOG_BASE - i;
                                            }

                                            rand.e = e;
                                            rand.c = c;
                                            return rand;
                                        };
                                    })();


                                    // PRIVATE FUNCTIONS


                                    // Called by BigNumber and BigNumber.prototype.toString.
                                    convertBase = (function () {
                                        var decimal = '0123456789';

                                        /*
       * Convert string of baseIn to an array of numbers of baseOut.
       * Eg. toBaseOut('255', 10, 16) returns [15, 15].
       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].
       */
                                        function toBaseOut(str, baseIn, baseOut, alphabet) {
                                            var j,
                                                arr = [0],
                                                arrL,
                                                i = 0,
                                                len = str.length;

                                            for (; i < len;) {
                                                for (arrL = arr.length; arrL--; arr[arrL] *= baseIn) ;

                                                arr[0] += alphabet.indexOf(str.charAt(i++));

                                                for (j = 0; j < arr.length; j++) {

                                                    if (arr[j] > baseOut - 1) {
                                                        if (arr[j + 1] == null) arr[j + 1] = 0;
                                                        arr[j + 1] += arr[j] / baseOut | 0;
                                                        arr[j] %= baseOut;
                                                    }
                                                }
                                            }

                                            return arr.reverse();
                                        }

                                        // Convert a numeric string of baseIn to a numeric string of baseOut.
                                        // If the caller is toString, we are converting from base 10 to baseOut.
                                        // If the caller is BigNumber, we are converting from baseIn to base 10.
                                        return function (str, baseIn, baseOut, sign, callerIsToString) {
                                            var alphabet, d, e, k, r, x, xc, y,
                                                i = str.indexOf('.'),
                                                dp = DECIMAL_PLACES,
                                                rm = ROUNDING_MODE;

                                            // Non-integer.
                                            if (i >= 0) {
                                                k = POW_PRECISION;

                                                // Unlimited precision.
                                                POW_PRECISION = 0;
                                                str = str.replace('.', '');
                                                y = new BigNumber(baseIn);
                                                x = y.pow(str.length - i);
                                                POW_PRECISION = k;

                                                // Convert str as if an integer, then restore the fraction part by dividing the
                                                // result by its base raised to a power.

                                                y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),
                                                    10, baseOut, decimal);
                                                y.e = y.c.length;
                                            }

                                            // Convert the number as integer.

                                            xc = toBaseOut(str, baseIn, baseOut, callerIsToString
                                                ? (alphabet = ALPHABET, decimal)
                                                : (alphabet = decimal, ALPHABET));

                                            // xc now represents str as an integer and converted to baseOut. e is the exponent.
                                            e = k = xc.length;

                                            // Remove trailing zeros.
                                            for (; xc[--k] == 0; xc.pop()) ;

                                            // Zero?
                                            if (!xc[0]) return alphabet.charAt(0);

                                            // Does str represent an integer? If so, no need for the division.
                                            if (i < 0) {
                                                --e;
                                            } else {
                                                x.c = xc;
                                                x.e = e;

                                                // The sign is needed for correct rounding.
                                                x.s = sign;
                                                x = div(x, y, dp, rm, baseOut);
                                                xc = x.c;
                                                r = x.r;
                                                e = x.e;
                                            }

                                            // xc now represents str converted to baseOut.

                                            // THe index of the rounding digit.
                                            d = e + dp + 1;

                                            // The rounding digit: the digit to the right of the digit that may be rounded up.
                                            i = xc[d];

                                            // Look at the rounding digits and mode to determine whether to round up.

                                            k = baseOut / 2;
                                            r = r || d < 0 || xc[d + 1] != null;

                                            r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
                                                : i > k || i == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||
                                                rm == (x.s < 0 ? 8 : 7));

                                            // If the index of the rounding digit is not greater than zero, or xc represents
                                            // zero, then the result of the base conversion is zero or, if rounding up, a value
                                            // such as 0.00001.
                                            if (d < 1 || !xc[0]) {

                                                // 1^-dp or 0
                                                str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0))
                                                    : alphabet.charAt(0);
                                            } else {

                                                // Truncate xc to the required number of decimal places.
                                                xc.length = d;

                                                // Round up?
                                                if (r) {

                                                    // Rounding up may mean the previous digit has to be rounded up and so on.
                                                    for (--baseOut; ++xc[--d] > baseOut;) {
                                                        xc[d] = 0;

                                                        if (!d) {
                                                            ++e;
                                                            xc = [1].concat(xc);
                                                        }
                                                    }
                                                }

                                                // Determine trailing zeros.
                                                for (k = xc.length; !xc[--k];) ;

                                                // E.g. [4, 11, 15] becomes 4bf.
                                                for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++])) ;

                                                // Add leading zeros, decimal point and trailing zeros as required.
                                                str = toFixedPoint(str, e, alphabet.charAt(0));
                                            }

                                            // The caller will add the sign.
                                            return str;
                                        };
                                    })();


                                    // Perform division in the specified base. Called by div and convertBase.
                                    div = (function () {

                                        // Assume non-zero x and k.
                                        function multiply(x, k, base) {
                                            var m, temp, xlo, xhi,
                                                carry = 0,
                                                i = x.length,
                                                klo = k % SQRT_BASE,
                                                khi = k / SQRT_BASE | 0;

                                            for (x = x.slice(); i--;) {
                                                xlo = x[i] % SQRT_BASE;
                                                xhi = x[i] / SQRT_BASE | 0;
                                                m = khi * xlo + xhi * klo;
                                                temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;
                                                carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;
                                                x[i] = temp % base;
                                            }

                                            if (carry) x = [carry].concat(x);

                                            return x;
                                        }

                                        function compare(a, b, aL, bL) {
                                            var i, cmp;

                                            if (aL != bL) {
                                                cmp = aL > bL ? 1 : -1;
                                            } else {

                                                for (i = cmp = 0; i < aL; i++) {

                                                    if (a[i] != b[i]) {
                                                        cmp = a[i] > b[i] ? 1 : -1;
                                                        break;
                                                    }
                                                }
                                            }

                                            return cmp;
                                        }

                                        function subtract(a, b, aL, base) {
                                            var i = 0;

                                            // Subtract b from a.
                                            for (; aL--;) {
                                                a[aL] -= i;
                                                i = a[aL] < b[aL] ? 1 : 0;
                                                a[aL] = i * base + a[aL] - b[aL];
                                            }

                                            // Remove leading zeros.
                                            for (; !a[0] && a.length > 1; a.splice(0, 1)) ;
                                        }

                                        // x: dividend, y: divisor.
                                        return function (x, y, dp, rm, base) {
                                            var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,
                                                yL, yz,
                                                s = x.s == y.s ? 1 : -1,
                                                xc = x.c,
                                                yc = y.c;

                                            // Either NaN, Infinity or 0?
                                            if (!xc || !xc[0] || !yc || !yc[0]) {

                                                return new BigNumber(
                                                    // Return NaN if either NaN, or both Infinity or 0.
                                                    !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :

                                                        // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
                                                        xc && xc[0] == 0 || !yc ? s * 0 : s / 0
                                                );
                                            }

                                            q = new BigNumber(s);
                                            qc = q.c = [];
                                            e = x.e - y.e;
                                            s = dp + e + 1;

                                            if (!base) {
                                                base = BASE;
                                                e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
                                                s = s / LOG_BASE | 0;
                                            }

                                            // Result exponent may be one less then the current value of e.
                                            // The coefficients of the BigNumbers from convertBase may have trailing zeros.
                                            for (i = 0; yc[i] == (xc[i] || 0); i++) ;

                                            if (yc[i] > (xc[i] || 0)) e--;

                                            if (s < 0) {
                                                qc.push(1);
                                                more = true;
                                            } else {
                                                xL = xc.length;
                                                yL = yc.length;
                                                i = 0;
                                                s += 2;

                                                // Normalise xc and yc so highest order digit of yc is >= base / 2.

                                                n = mathfloor(base / (yc[0] + 1));

                                                // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.
                                                // if (n > 1 || n++ == 1 && yc[0] < base / 2) {
                                                if (n > 1) {
                                                    yc = multiply(yc, n, base);
                                                    xc = multiply(xc, n, base);
                                                    yL = yc.length;
                                                    xL = xc.length;
                                                }

                                                xi = yL;
                                                rem = xc.slice(0, yL);
                                                remL = rem.length;

                                                // Add zeros to make remainder as long as divisor.
                                                for (; remL < yL; rem[remL++] = 0) ;
                                                yz = yc.slice();
                                                yz = [0].concat(yz);
                                                yc0 = yc[0];
                                                if (yc[1] >= base / 2) yc0++;
                                                // Not necessary, but to prevent trial digit n > base, when using base 3.
                                                // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;

                                                do {
                                                    n = 0;

                                                    // Compare divisor and remainder.
                                                    cmp = compare(yc, rem, yL, remL);

                                                    // If divisor < remainder.
                                                    if (cmp < 0) {

                                                        // Calculate trial digit, n.

                                                        rem0 = rem[0];
                                                        if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);

                                                        // n is how many times the divisor goes into the current remainder.
                                                        n = mathfloor(rem0 / yc0);

                                                        //  Algorithm:
                                                        //  product = divisor multiplied by trial digit (n).
                                                        //  Compare product and remainder.
                                                        //  If product is greater than remainder:
                                                        //    Subtract divisor from product, decrement trial digit.
                                                        //  Subtract product from remainder.
                                                        //  If product was less than remainder at the last compare:
                                                        //    Compare new remainder and divisor.
                                                        //    If remainder is greater than divisor:
                                                        //      Subtract divisor from remainder, increment trial digit.

                                                        if (n > 1) {

                                                            // n may be > base only when base is 3.
                                                            if (n >= base) n = base - 1;

                                                            // product = divisor * trial digit.
                                                            prod = multiply(yc, n, base);
                                                            prodL = prod.length;
                                                            remL = rem.length;

                                                            // Compare product and remainder.
                                                            // If product > remainder then trial digit n too high.
                                                            // n is 1 too high about 5% of the time, and is not known to have
                                                            // ever been more than 1 too high.
                                                            while (compare(prod, rem, prodL, remL) == 1) {
                                                                n--;

                                                                // Subtract divisor from product.
                                                                subtract(prod, yL < prodL ? yz : yc, prodL, base);
                                                                prodL = prod.length;
                                                                cmp = 1;
                                                            }
                                                        } else {

                                                            // n is 0 or 1, cmp is -1.
                                                            // If n is 0, there is no need to compare yc and rem again below,
                                                            // so change cmp to 1 to avoid it.
                                                            // If n is 1, leave cmp as -1, so yc and rem are compared again.
                                                            if (n == 0) {

                                                                // divisor < remainder, so n must be at least 1.
                                                                cmp = n = 1;
                                                            }

                                                            // product = divisor
                                                            prod = yc.slice();
                                                            prodL = prod.length;
                                                        }

                                                        if (prodL < remL) prod = [0].concat(prod);

                                                        // Subtract product from remainder.
                                                        subtract(rem, prod, remL, base);
                                                        remL = rem.length;

                                                        // If product was < remainder.
                                                        if (cmp == -1) {

                                                            // Compare divisor and new remainder.
                                                            // If divisor < new remainder, subtract divisor from remainder.
                                                            // Trial digit n too low.
                                                            // n is 1 too low about 5% of the time, and very rarely 2 too low.
                                                            while (compare(yc, rem, yL, remL) < 1) {
                                                                n++;

                                                                // Subtract divisor from remainder.
                                                                subtract(rem, yL < remL ? yz : yc, remL, base);
                                                                remL = rem.length;
                                                            }
                                                        }
                                                    } else if (cmp === 0) {
                                                        n++;
                                                        rem = [0];
                                                    } // else cmp === 1 and n will be 0

                                                    // Add the next digit, n, to the result array.
                                                    qc[i++] = n;

                                                    // Update the remainder.
                                                    if (rem[0]) {
                                                        rem[remL++] = xc[xi] || 0;
                                                    } else {
                                                        rem = [xc[xi]];
                                                        remL = 1;
                                                    }
                                                } while ((xi++ < xL || rem[0] != null) && s--);

                                                more = rem[0] != null;

                                                // Leading zero?
                                                if (!qc[0]) qc.splice(0, 1);
                                            }

                                            if (base == BASE) {

                                                // To calculate q.e, first get the number of digits of qc[0].
                                                for (i = 1, s = qc[0]; s >= 10; s /= 10, i++) ;

                                                round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);

                                                // Caller is convertBase.
                                            } else {
                                                q.e = e;
                                                q.r = +more;
                                            }

                                            return q;
                                        };
                                    })();


                                    /*
     * Return a string representing the value of BigNumber n in fixed-point or exponential
     * notation rounded to the specified decimal places or significant digits.
     *
     * n: a BigNumber.
     * i: the index of the last digit required (i.e. the digit that may be rounded up).
     * rm: the rounding mode.
     * id: 1 (toExponential) or 2 (toPrecision).
     */
                                    function format(n, i, rm, id) {
                                        var c0, e, ne, len, str;

                                        if (rm == null) rm = ROUNDING_MODE;
                                        else intCheck(rm, 0, 8);

                                        if (!n.c) return n.toString();

                                        c0 = n.c[0];
                                        ne = n.e;

                                        if (i == null) {
                                            str = coeffToString(n.c);
                                            str = id == 1 || id == 2 && ne <= TO_EXP_NEG
                                                ? toExponential(str, ne)
                                                : toFixedPoint(str, ne, '0');
                                        } else {
                                            n = round(new BigNumber(n), i, rm);

                                            // n.e may have changed if the value was rounded up.
                                            e = n.e;

                                            str = coeffToString(n.c);
                                            len = str.length;

                                            // toPrecision returns exponential notation if the number of significant digits
                                            // specified is less than the number of digits necessary to represent the integer
                                            // part of the value in fixed-point notation.

                                            // Exponential notation.
                                            if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {

                                                // Append zeros?
                                                for (; len < i; str += '0', len++) ;
                                                str = toExponential(str, e);

                                                // Fixed-point notation.
                                            } else {
                                                i -= ne;
                                                str = toFixedPoint(str, e, '0');

                                                // Append zeros?
                                                if (e + 1 > len) {
                                                    if (--i > 0) for (str += '.'; i--; str += '0') ;
                                                } else {
                                                    i += e - len;
                                                    if (i > 0) {
                                                        if (e + 1 == len) str += '.';
                                                        for (; i--; str += '0') ;
                                                    }
                                                }
                                            }
                                        }

                                        return n.s < 0 && c0 ? '-' + str : str;
                                    }


                                    // Handle BigNumber.max and BigNumber.min.
                                    function maxOrMin(args, method) {
                                        var m, n,
                                            i = 0;

                                        if (isArray(args[0])) args = args[0];
                                        m = new BigNumber(args[0]);

                                        for (; ++i < args.length;) {
                                            n = new BigNumber(args[i]);

                                            // If any number is NaN, return NaN.
                                            if (!n.s) {
                                                m = n;
                                                break;
                                            } else if (method.call(m, n)) {
                                                m = n;
                                            }
                                        }

                                        return m;
                                    }


                                    /*
     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.
     * Called by minus, plus and times.
     */
                                    function normalise(n, c, e) {
                                        var i = 1,
                                            j = c.length;

                                        // Remove trailing zeros.
                                        for (; !c[--j]; c.pop()) ;

                                        // Calculate the base 10 exponent. First get the number of digits of c[0].
                                        for (j = c[0]; j >= 10; j /= 10, i++) ;

                                        // Overflow?
                                        if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {

                                            // Infinity.
                                            n.c = n.e = null;

                                            // Underflow?
                                        } else if (e < MIN_EXP) {

                                            // Zero.
                                            n.c = [n.e = 0];
                                        } else {
                                            n.e = e;
                                            n.c = c;
                                        }

                                        return n;
                                    }


                                    // Handle values that fail the validity test in BigNumber.
                                    parseNumeric = (function () {
                                        var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i,
                                            dotAfter = /^([^.]+)\.$/,
                                            dotBefore = /^\.([^.]+)$/,
                                            isInfinityOrNaN = /^-?(Infinity|NaN)$/,
                                            whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;

                                        return function (x, str, isNum, b) {
                                            var base,
                                                s = isNum ? str : str.replace(whitespaceOrPlus, '');

                                            // No exception on ±Infinity or NaN.
                                            if (isInfinityOrNaN.test(s)) {
                                                x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
                                                x.c = x.e = null;
                                            } else {
                                                if (!isNum) {

                                                    // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i
                                                    s = s.replace(basePrefix, function (m, p1, p2) {
                                                        base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;
                                                        return !b || b == base ? p1 : m;
                                                    });

                                                    if (b) {
                                                        base = b;

                                                        // E.g. '1.' to '1', '.1' to '0.1'
                                                        s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');
                                                    }

                                                    if (str != s) return new BigNumber(s, base);
                                                }

                                                // '[BigNumber Error] Not a number: {n}'
                                                // '[BigNumber Error] Not a base {b} number: {n}'
                                                if (BigNumber.DEBUG) {
                                                    throw Error
                                                    (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);
                                                }

                                                // NaN
                                                x.c = x.e = x.s = null;
                                            }
                                        }
                                    })();


                                    /*
     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.
     * If r is truthy, it is known that there are more digits after the rounding digit.
     */
                                    function round(x, sd, rm, r) {
                                        var d, i, j, k, n, ni, rd,
                                            xc = x.c,
                                            pows10 = POWS_TEN;

                                        // if x is not Infinity or NaN...
                                        if (xc) {

                                            // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.
                                            // n is a base 1e14 number, the value of the element of array x.c containing rd.
                                            // ni is the index of n within x.c.
                                            // d is the number of digits of n.
                                            // i is the index of rd within n including leading zeros.
                                            // j is the actual index of rd within n (if < 0, rd is a leading zero).
                                            out: {

                                                // Get the number of digits of the first element of xc.
                                                for (d = 1, k = xc[0]; k >= 10; k /= 10, d++) ;
                                                i = sd - d;

                                                // If the rounding digit is in the first element of xc...
                                                if (i < 0) {
                                                    i += LOG_BASE;
                                                    j = sd;
                                                    n = xc[ni = 0];

                                                    // Get the rounding digit at index j of n.
                                                    rd = n / pows10[d - j - 1] % 10 | 0;
                                                } else {
                                                    ni = mathceil((i + 1) / LOG_BASE);

                                                    if (ni >= xc.length) {

                                                        if (r) {

                                                            // Needed by sqrt.
                                                            for (; xc.length <= ni; xc.push(0)) ;
                                                            n = rd = 0;
                                                            d = 1;
                                                            i %= LOG_BASE;
                                                            j = i - LOG_BASE + 1;
                                                        } else {
                                                            break out;
                                                        }
                                                    } else {
                                                        n = k = xc[ni];

                                                        // Get the number of digits of n.
                                                        for (d = 1; k >= 10; k /= 10, d++) ;

                                                        // Get the index of rd within n.
                                                        i %= LOG_BASE;

                                                        // Get the index of rd within n, adjusted for leading zeros.
                                                        // The number of leading zeros of n is given by LOG_BASE - d.
                                                        j = i - LOG_BASE + d;

                                                        // Get the rounding digit at index j of n.
                                                        rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;
                                                    }
                                                }

                                                r = r || sd < 0 ||

                                                    // Are there any non-zero digits after the rounding digit?
                                                    // The expression  n % pows10[d - j - 1]  returns all digits of n to the right
                                                    // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
                                                    xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);

                                                r = rm < 4
                                                    ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
                                                    : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&

                                                    // Check whether the digit to the left of the rounding digit is odd.
                                                    ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||
                                                    rm == (x.s < 0 ? 8 : 7));

                                                if (sd < 1 || !xc[0]) {
                                                    xc.length = 0;

                                                    if (r) {

                                                        // Convert sd to decimal places.
                                                        sd -= x.e + 1;

                                                        // 1, 0.1, 0.01, 0.001, 0.0001 etc.
                                                        xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
                                                        x.e = -sd || 0;
                                                    } else {

                                                        // Zero.
                                                        xc[0] = x.e = 0;
                                                    }

                                                    return x;
                                                }

                                                // Remove excess digits.
                                                if (i == 0) {
                                                    xc.length = ni;
                                                    k = 1;
                                                    ni--;
                                                } else {
                                                    xc.length = ni + 1;
                                                    k = pows10[LOG_BASE - i];

                                                    // E.g. 56700 becomes 56000 if 7 is the rounding digit.
                                                    // j > 0 means i > number of leading zeros of n.
                                                    xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
                                                }

                                                // Round up?
                                                if (r) {

                                                    for (; ;) {

                                                        // If the digit to be rounded up is in the first element of xc...
                                                        if (ni == 0) {

                                                            // i will be the length of xc[0] before k is added.
                                                            for (i = 1, j = xc[0]; j >= 10; j /= 10, i++) ;
                                                            j = xc[0] += k;
                                                            for (k = 1; j >= 10; j /= 10, k++) ;

                                                            // if i != k the length has increased.
                                                            if (i != k) {
                                                                x.e++;
                                                                if (xc[0] == BASE) xc[0] = 1;
                                                            }

                                                            break;
                                                        } else {
                                                            xc[ni] += k;
                                                            if (xc[ni] != BASE) break;
                                                            xc[ni--] = 0;
                                                            k = 1;
                                                        }
                                                    }
                                                }

                                                // Remove trailing zeros.
                                                for (i = xc.length; xc[--i] === 0; xc.pop()) ;
                                            }

                                            // Overflow? Infinity.
                                            if (x.e > MAX_EXP) {
                                                x.c = x.e = null;

                                                // Underflow? Zero.
                                            } else if (x.e < MIN_EXP) {
                                                x.c = [x.e = 0];
                                            }
                                        }

                                        return x;
                                    }


                                    // PROTOTYPE/INSTANCE METHODS


                                    /*
     * Return a new BigNumber whose value is the absolute value of this BigNumber.
     */
                                    P.absoluteValue = P.abs = function () {
                                        var x = new BigNumber(this);
                                        if (x.s < 0) x.s = 1;
                                        return x;
                                    };


                                    /*
     * Return
     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),
     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),
     *   0 if they have the same value,
     *   or null if the value of either is NaN.
     */
                                    P.comparedTo = function (y, b) {
                                        return compare(this, new BigNumber(y, b));
                                    };


                                    /*
     * If dp is undefined or null or true or false, return the number of decimal places of the
     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
     *
     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this
     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or
     * ROUNDING_MODE if rm is omitted.
     *
     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     */
                                    P.decimalPlaces = P.dp = function (dp, rm) {
                                        var c, n, v,
                                            x = this;

                                        if (dp != null) {
                                            intCheck(dp, 0, MAX);
                                            if (rm == null) rm = ROUNDING_MODE;
                                            else intCheck(rm, 0, 8);

                                            return round(new BigNumber(x), dp + x.e + 1, rm);
                                        }

                                        if (!(c = x.c)) return null;
                                        n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;

                                        // Subtract the number of trailing zeros of the last number.
                                        if (v = c[v]) for (; v % 10 == 0; v /= 10, n--) ;
                                        if (n < 0) n = 0;

                                        return n;
                                    };


                                    /*
     *  n / 0 = I
     *  n / N = N
     *  n / I = 0
     *  0 / n = 0
     *  0 / 0 = N
     *  0 / N = N
     *  0 / I = 0
     *  N / n = N
     *  N / 0 = N
     *  N / N = N
     *  N / I = N
     *  I / n = I
     *  I / 0 = I
     *  I / N = N
     *  I / I = N
     *
     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of
     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.
     */
                                    P.dividedBy = P.div = function (y, b) {
                                        return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);
                                    };


                                    /*
     * Return a new BigNumber whose value is the integer part of dividing the value of this
     * BigNumber by the value of BigNumber(y, b).
     */
                                    P.dividedToIntegerBy = P.idiv = function (y, b) {
                                        return div(this, new BigNumber(y, b), 0, 1);
                                    };


                                    /*
     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.
     *
     * If m is present, return the result modulo m.
     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.
     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.
     *
     * The modular power operation works efficiently when x, n, and m are integers, otherwise it
     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.
     *
     * n {number|string|BigNumber} The exponent. An integer.
     * [m] {number|string|BigNumber} The modulus.
     *
     * '[BigNumber Error] Exponent not an integer: {n}'
     */
                                    P.exponentiatedBy = P.pow = function (n, m) {
                                        var half, isModExp, k, more, nIsBig, nIsNeg, nIsOdd, y,
                                            x = this;

                                        n = new BigNumber(n);

                                        // Allow NaN and ±Infinity, but not other non-integers.
                                        if (n.c && !n.isInteger()) {
                                            throw Error
                                            (bignumberError + 'Exponent not an integer: ' + n);
                                        }

                                        if (m != null) m = new BigNumber(m);

                                        // Exponent of MAX_SAFE_INTEGER is 15.
                                        nIsBig = n.e > 14;

                                        // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.
                                        if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {

                                            // The sign of the result of pow when x is negative depends on the evenness of n.
                                            // If +n overflows to ±Infinity, the evenness of n would be not be known.
                                            y = new BigNumber(Math.pow(+x.valueOf(), nIsBig ? 2 - isOdd(n) : +n));
                                            return m ? y.mod(m) : y;
                                        }

                                        nIsNeg = n.s < 0;

                                        if (m) {

                                            // x % m returns NaN if abs(m) is zero, or m is NaN.
                                            if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);

                                            isModExp = !nIsNeg && x.isInteger() && m.isInteger();

                                            if (isModExp) x = x.mod(m);

                                            // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.
                                            // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.
                                        } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0
                                            // [1, 240000000]
                                            ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7
                                            // [80000000000000]  [99999750000000]
                                            : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {

                                            // If x is negative and n is odd, k = -0, else k = 0.
                                            k = x.s < 0 && isOdd(n) ? -0 : 0;

                                            // If x >= 1, k = ±Infinity.
                                            if (x.e > -1) k = 1 / k;

                                            // If n is negative return ±0, else return ±Infinity.
                                            return new BigNumber(nIsNeg ? 1 / k : k);

                                        } else if (POW_PRECISION) {

                                            // Truncating each coefficient array to a length of k after each multiplication
                                            // equates to truncating significant digits to POW_PRECISION + [28, 41],
                                            // i.e. there will be a minimum of 28 guard digits retained.
                                            k = mathceil(POW_PRECISION / LOG_BASE + 2);
                                        }

                                        if (nIsBig) {
                                            half = new BigNumber(0.5);
                                            nIsOdd = isOdd(n);
                                        } else {
                                            nIsOdd = n % 2;
                                        }

                                        if (nIsNeg) n.s = 1;

                                        y = new BigNumber(ONE);

                                        // Performs 54 loop iterations for n of 9007199254740991.
                                        for (; ;) {

                                            if (nIsOdd) {
                                                y = y.times(x);
                                                if (!y.c) break;

                                                if (k) {
                                                    if (y.c.length > k) y.c.length = k;
                                                } else if (isModExp) {
                                                    y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));
                                                }
                                            }

                                            if (nIsBig) {
                                                n = n.times(half);
                                                round(n, n.e + 1, 1);
                                                if (!n.c[0]) break;
                                                nIsBig = n.e > 14;
                                                nIsOdd = isOdd(n);
                                            } else {
                                                n = mathfloor(n / 2);
                                                if (!n) break;
                                                nIsOdd = n % 2;
                                            }

                                            x = x.times(x);

                                            if (k) {
                                                if (x.c && x.c.length > k) x.c.length = k;
                                            } else if (isModExp) {
                                                x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));
                                            }
                                        }

                                        if (isModExp) return y;
                                        if (nIsNeg) y = ONE.div(y);

                                        return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;
                                    };


                                    /*
     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer
     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.
     *
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'
     */
                                    P.integerValue = function (rm) {
                                        var n = new BigNumber(this);
                                        if (rm == null) rm = ROUNDING_MODE;
                                        else intCheck(rm, 0, 8);
                                        return round(n, n.e + 1, rm);
                                    };


                                    /*
     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),
     * otherwise return false.
     */
                                    P.isEqualTo = P.eq = function (y, b) {
                                        return compare(this, new BigNumber(y, b)) === 0;
                                    };


                                    /*
     * Return true if the value of this BigNumber is a finite number, otherwise return false.
     */
                                    P.isFinite = function () {
                                        return !!this.c;
                                    };


                                    /*
     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),
     * otherwise return false.
     */
                                    P.isGreaterThan = P.gt = function (y, b) {
                                        return compare(this, new BigNumber(y, b)) > 0;
                                    };


                                    /*
     * Return true if the value of this BigNumber is greater than or equal to the value of
     * BigNumber(y, b), otherwise return false.
     */
                                    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {
                                        return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;

                                    };


                                    /*
     * Return true if the value of this BigNumber is an integer, otherwise return false.
     */
                                    P.isInteger = function () {
                                        return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
                                    };


                                    /*
     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),
     * otherwise return false.
     */
                                    P.isLessThan = P.lt = function (y, b) {
                                        return compare(this, new BigNumber(y, b)) < 0;
                                    };


                                    /*
     * Return true if the value of this BigNumber is less than or equal to the value of
     * BigNumber(y, b), otherwise return false.
     */
                                    P.isLessThanOrEqualTo = P.lte = function (y, b) {
                                        return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;
                                    };


                                    /*
     * Return true if the value of this BigNumber is NaN, otherwise return false.
     */
                                    P.isNaN = function () {
                                        return !this.s;
                                    };


                                    /*
     * Return true if the value of this BigNumber is negative, otherwise return false.
     */
                                    P.isNegative = function () {
                                        return this.s < 0;
                                    };


                                    /*
     * Return true if the value of this BigNumber is positive, otherwise return false.
     */
                                    P.isPositive = function () {
                                        return this.s > 0;
                                    };


                                    /*
     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.
     */
                                    P.isZero = function () {
                                        return !!this.c && this.c[0] == 0;
                                    };


                                    /*
     *  n - 0 = n
     *  n - N = N
     *  n - I = -I
     *  0 - n = -n
     *  0 - 0 = 0
     *  0 - N = N
     *  0 - I = -I
     *  N - n = N
     *  N - 0 = N
     *  N - N = N
     *  N - I = N
     *  I - n = I
     *  I - 0 = I
     *  I - N = N
     *  I - I = N
     *
     * Return a new BigNumber whose value is the value of this BigNumber minus the value of
     * BigNumber(y, b).
     */
                                    P.minus = function (y, b) {
                                        var i, j, t, xLTy,
                                            x = this,
                                            a = x.s;

                                        y = new BigNumber(y, b);
                                        b = y.s;

                                        // Either NaN?
                                        if (!a || !b) return new BigNumber(NaN);

                                        // Signs differ?
                                        if (a != b) {
                                            y.s = -b;
                                            return x.plus(y);
                                        }

                                        var xe = x.e / LOG_BASE,
                                            ye = y.e / LOG_BASE,
                                            xc = x.c,
                                            yc = y.c;

                                        if (!xe || !ye) {

                                            // Either Infinity?
                                            if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);

                                            // Either zero?
                                            if (!xc[0] || !yc[0]) {

                                                // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
                                                return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :

                                                    // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
                                                    ROUNDING_MODE == 3 ? -0 : 0);
                                            }
                                        }

                                        xe = bitFloor(xe);
                                        ye = bitFloor(ye);
                                        xc = xc.slice();

                                        // Determine which is the bigger number.
                                        if (a = xe - ye) {

                                            if (xLTy = a < 0) {
                                                a = -a;
                                                t = xc;
                                            } else {
                                                ye = xe;
                                                t = yc;
                                            }

                                            t.reverse();

                                            // Prepend zeros to equalise exponents.
                                            for (b = a; b--; t.push(0)) ;
                                            t.reverse();
                                        } else {

                                            // Exponents equal. Check digit by digit.
                                            j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;

                                            for (a = b = 0; b < j; b++) {

                                                if (xc[b] != yc[b]) {
                                                    xLTy = xc[b] < yc[b];
                                                    break;
                                                }
                                            }
                                        }

                                        // x < y? Point xc to the array of the bigger number.
                                        if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;

                                        b = (j = yc.length) - (i = xc.length);

                                        // Append zeros to xc if shorter.
                                        // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.
                                        if (b > 0) for (; b--; xc[i++] = 0) ;
                                        b = BASE - 1;

                                        // Subtract yc from xc.
                                        for (; j > a;) {

                                            if (xc[--j] < yc[j]) {
                                                for (i = j; i && !xc[--i]; xc[i] = b) ;
                                                --xc[i];
                                                xc[j] += BASE;
                                            }

                                            xc[j] -= yc[j];
                                        }

                                        // Remove leading zeros and adjust exponent accordingly.
                                        for (; xc[0] == 0; xc.splice(0, 1), --ye) ;

                                        // Zero?
                                        if (!xc[0]) {

                                            // Following IEEE 754 (2008) 6.3,
                                            // n - n = +0  but  n - n = -0  when rounding towards -Infinity.
                                            y.s = ROUNDING_MODE == 3 ? -1 : 1;
                                            y.c = [y.e = 0];
                                            return y;
                                        }

                                        // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity
                                        // for finite x and y.
                                        return normalise(y, xc, ye);
                                    };


                                    /*
     *   n % 0 =  N
     *   n % N =  N
     *   n % I =  n
     *   0 % n =  0
     *  -0 % n = -0
     *   0 % 0 =  N
     *   0 % N =  N
     *   0 % I =  0
     *   N % n =  N
     *   N % 0 =  N
     *   N % N =  N
     *   N % I =  N
     *   I % n =  N
     *   I % 0 =  N
     *   I % N =  N
     *   I % I =  N
     *
     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of
     * BigNumber(y, b). The result depends on the value of MODULO_MODE.
     */
                                    P.modulo = P.mod = function (y, b) {
                                        var q, s,
                                            x = this;

                                        y = new BigNumber(y, b);

                                        // Return NaN if x is Infinity or NaN, or y is NaN or zero.
                                        if (!x.c || !y.s || y.c && !y.c[0]) {
                                            return new BigNumber(NaN);

                                            // Return x if y is Infinity or x is zero.
                                        } else if (!y.c || x.c && !x.c[0]) {
                                            return new BigNumber(x);
                                        }

                                        if (MODULO_MODE == 9) {

                                            // Euclidian division: q = sign(y) * floor(x / abs(y))
                                            // r = x - qy    where  0 <= r < abs(y)
                                            s = y.s;
                                            y.s = 1;
                                            q = div(x, y, 0, 3);
                                            y.s = s;
                                            q.s *= s;
                                        } else {
                                            q = div(x, y, 0, MODULO_MODE);
                                        }

                                        y = x.minus(q.times(y));

                                        // To match JavaScript %, ensure sign of zero is sign of dividend.
                                        if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;

                                        return y;
                                    };


                                    /*
     *  n * 0 = 0
     *  n * N = N
     *  n * I = I
     *  0 * n = 0
     *  0 * 0 = 0
     *  0 * N = N
     *  0 * I = N
     *  N * n = N
     *  N * 0 = N
     *  N * N = N
     *  N * I = N
     *  I * n = I
     *  I * 0 = N
     *  I * N = N
     *  I * I = I
     *
     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value
     * of BigNumber(y, b).
     */
                                    P.multipliedBy = P.times = function (y, b) {
                                        var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,
                                            base, sqrtBase,
                                            x = this,
                                            xc = x.c,
                                            yc = (y = new BigNumber(y, b)).c;

                                        // Either NaN, ±Infinity or ±0?
                                        if (!xc || !yc || !xc[0] || !yc[0]) {

                                            // Return NaN if either is NaN, or one is 0 and the other is Infinity.
                                            if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
                                                y.c = y.e = y.s = null;
                                            } else {
                                                y.s *= x.s;

                                                // Return ±Infinity if either is ±Infinity.
                                                if (!xc || !yc) {
                                                    y.c = y.e = null;

                                                    // Return ±0 if either is ±0.
                                                } else {
                                                    y.c = [0];
                                                    y.e = 0;
                                                }
                                            }

                                            return y;
                                        }

                                        e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
                                        y.s *= x.s;
                                        xcL = xc.length;
                                        ycL = yc.length;

                                        // Ensure xc points to longer array and xcL to its length.
                                        if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;

                                        // Initialise the result array with zeros.
                                        for (i = xcL + ycL, zc = []; i--; zc.push(0)) ;

                                        base = BASE;
                                        sqrtBase = SQRT_BASE;

                                        for (i = ycL; --i >= 0;) {
                                            c = 0;
                                            ylo = yc[i] % sqrtBase;
                                            yhi = yc[i] / sqrtBase | 0;

                                            for (k = xcL, j = i + k; j > i;) {
                                                xlo = xc[--k] % sqrtBase;
                                                xhi = xc[k] / sqrtBase | 0;
                                                m = yhi * xlo + xhi * ylo;
                                                xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;
                                                c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;
                                                zc[j--] = xlo % base;
                                            }

                                            zc[j] = c;
                                        }

                                        if (c) {
                                            ++e;
                                        } else {
                                            zc.splice(0, 1);
                                        }

                                        return normalise(y, zc, e);
                                    };


                                    /*
     * Return a new BigNumber whose value is the value of this BigNumber negated,
     * i.e. multiplied by -1.
     */
                                    P.negated = function () {
                                        var x = new BigNumber(this);
                                        x.s = -x.s || null;
                                        return x;
                                    };


                                    /*
     *  n + 0 = n
     *  n + N = N
     *  n + I = I
     *  0 + n = n
     *  0 + 0 = 0
     *  0 + N = N
     *  0 + I = I
     *  N + n = N
     *  N + 0 = N
     *  N + N = N
     *  N + I = N
     *  I + n = I
     *  I + 0 = I
     *  I + N = N
     *  I + I = I
     *
     * Return a new BigNumber whose value is the value of this BigNumber plus the value of
     * BigNumber(y, b).
     */
                                    P.plus = function (y, b) {
                                        var t,
                                            x = this,
                                            a = x.s;

                                        y = new BigNumber(y, b);
                                        b = y.s;

                                        // Either NaN?
                                        if (!a || !b) return new BigNumber(NaN);

                                        // Signs differ?
                                        if (a != b) {
                                            y.s = -b;
                                            return x.minus(y);
                                        }

                                        var xe = x.e / LOG_BASE,
                                            ye = y.e / LOG_BASE,
                                            xc = x.c,
                                            yc = y.c;

                                        if (!xe || !ye) {

                                            // Return ±Infinity if either ±Infinity.
                                            if (!xc || !yc) return new BigNumber(a / 0);

                                            // Either zero?
                                            // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
                                            if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);
                                        }

                                        xe = bitFloor(xe);
                                        ye = bitFloor(ye);
                                        xc = xc.slice();

                                        // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.
                                        if (a = xe - ye) {
                                            if (a > 0) {
                                                ye = xe;
                                                t = yc;
                                            } else {
                                                a = -a;
                                                t = xc;
                                            }

                                            t.reverse();
                                            for (; a--; t.push(0)) ;
                                            t.reverse();
                                        }

                                        a = xc.length;
                                        b = yc.length;

                                        // Point xc to the longer array, and b to the shorter length.
                                        if (a - b < 0) t = yc, yc = xc, xc = t, b = a;

                                        // Only start adding at yc.length - 1 as the further digits of xc can be ignored.
                                        for (a = 0; b;) {
                                            a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
                                            xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;
                                        }

                                        if (a) {
                                            xc = [a].concat(xc);
                                            ++ye;
                                        }

                                        // No need to check for zero, as +x + +y != 0 && -x + -y != 0
                                        // ye = MAX_EXP + 1 possible
                                        return normalise(y, xc, ye);
                                    };


                                    /*
     * If sd is undefined or null or true or false, return the number of significant digits of
     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
     * If sd is true include integer-part trailing zeros in the count.
     *
     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this
     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or
     * ROUNDING_MODE if rm is omitted.
     *
     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.
     *                     boolean: whether to count integer-part trailing zeros: true or false.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
     */
                                    P.precision = P.sd = function (sd, rm) {
                                        var c, n, v,
                                            x = this;

                                        if (sd != null && sd !== !!sd) {
                                            intCheck(sd, 1, MAX);
                                            if (rm == null) rm = ROUNDING_MODE;
                                            else intCheck(rm, 0, 8);

                                            return round(new BigNumber(x), sd, rm);
                                        }

                                        if (!(c = x.c)) return null;
                                        v = c.length - 1;
                                        n = v * LOG_BASE + 1;

                                        if (v = c[v]) {

                                            // Subtract the number of trailing zeros of the last element.
                                            for (; v % 10 == 0; v /= 10, n--) ;

                                            // Add the number of digits of the first element.
                                            for (v = c[0]; v >= 10; v /= 10, n++) ;
                                        }

                                        if (sd && x.e + 1 > n) n = x.e + 1;

                                        return n;
                                    };


                                    /*
     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places
     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.
     *
     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'
     */
                                    P.shiftedBy = function (k) {
                                        intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
                                        return this.times('1e' + k);
                                    };


                                    /*
     *  sqrt(-n) =  N
     *  sqrt(N) =  N
     *  sqrt(-I) =  N
     *  sqrt(I) =  I
     *  sqrt(0) =  0
     *  sqrt(-0) = -0
     *
     * Return a new BigNumber whose value is the square root of the value of this BigNumber,
     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.
     */
                                    P.squareRoot = P.sqrt = function () {
                                        var m, n, r, rep, t,
                                            x = this,
                                            c = x.c,
                                            s = x.s,
                                            e = x.e,
                                            dp = DECIMAL_PLACES + 4,
                                            half = new BigNumber('0.5');

                                        // Negative/NaN/Infinity/zero?
                                        if (s !== 1 || !c || !c[0]) {
                                            return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
                                        }

                                        // Initial estimate.
                                        s = Math.sqrt(+x);

                                        // Math.sqrt underflow/overflow?
                                        // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
                                        if (s == 0 || s == 1 / 0) {
                                            n = coeffToString(c);
                                            if ((n.length + e) % 2 == 0) n += '0';
                                            s = Math.sqrt(n);
                                            e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);

                                            if (s == 1 / 0) {
                                                n = '1e' + e;
                                            } else {
                                                n = s.toExponential();
                                                n = n.slice(0, n.indexOf('e') + 1) + e;
                                            }

                                            r = new BigNumber(n);
                                        } else {
                                            r = new BigNumber(s + '');
                                        }

                                        // Check for zero.
                                        // r could be zero if MIN_EXP is changed after the this value was created.
                                        // This would cause a division by zero (x/t) and hence Infinity below, which would cause
                                        // coeffToString to throw.
                                        if (r.c[0]) {
                                            e = r.e;
                                            s = e + dp;
                                            if (s < 3) s = 0;

                                            // Newton-Raphson iteration.
                                            for (; ;) {
                                                t = r;
                                                r = half.times(t.plus(div(x, t, dp, 1)));

                                                if (coeffToString(t.c).slice(0, s) === (n =
                                                    coeffToString(r.c)).slice(0, s)) {

                                                    // The exponent of r may here be one less than the final result exponent,
                                                    // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits
                                                    // are indexed correctly.
                                                    if (r.e < e) --s;
                                                    n = n.slice(s - 3, s + 1);

                                                    // The 4th rounding digit may be in error by -1 so if the 4 rounding digits
                                                    // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the
                                                    // iteration.
                                                    if (n == '9999' || !rep && n == '4999') {

                                                        // On the first iteration only, check to see if rounding up gives the
                                                        // exact result as the nines may infinitely repeat.
                                                        if (!rep) {
                                                            round(t, t.e + DECIMAL_PLACES + 2, 0);

                                                            if (t.times(t).eq(x)) {
                                                                r = t;
                                                                break;
                                                            }
                                                        }

                                                        dp += 4;
                                                        s += 4;
                                                        rep = 1;
                                                    } else {

                                                        // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact
                                                        // result. If not, then there are further digits and m will be truthy.
                                                        if (!+n || !+n.slice(1) && n.charAt(0) == '5') {

                                                            // Truncate to the first rounding digit.
                                                            round(r, r.e + DECIMAL_PLACES + 2, 1);
                                                            m = !r.times(r).eq(x);
                                                        }

                                                        break;
                                                    }
                                                }
                                            }
                                        }

                                        return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
                                    };


                                    /*
     * Return a string representing the value of this BigNumber in exponential notation and
     * rounded using ROUNDING_MODE to dp fixed decimal places.
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     */
                                    P.toExponential = function (dp, rm) {
                                        if (dp != null) {
                                            intCheck(dp, 0, MAX);
                                            dp++;
                                        }
                                        return format(this, dp, rm, 1);
                                    };


                                    /*
     * Return a string representing the value of this BigNumber in fixed-point notation rounding
     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.
     *
     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',
     * but e.g. (-0.00001).toFixed(0) is '-0'.
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     */
                                    P.toFixed = function (dp, rm) {
                                        if (dp != null) {
                                            intCheck(dp, 0, MAX);
                                            dp = dp + this.e + 1;
                                        }
                                        return format(this, dp, rm);
                                    };


                                    /*
     * Return a string representing the value of this BigNumber in fixed-point notation rounded
     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties
     * of the FORMAT object (see BigNumber.set).
     *
     * FORMAT = {
     *      decimalSeparator : '.',
     *      groupSeparator : ',',
     *      groupSize : 3,
     *      secondaryGroupSize : 0,
     *      fractionGroupSeparator : '\xA0',    // non-breaking space
     *      fractionGroupSize : 0
     * };
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     */
                                    P.toFormat = function (dp, rm) {
                                        var str = this.toFixed(dp, rm);

                                        if (this.c) {
                                            var i,
                                                arr = str.split('.'),
                                                g1 = +FORMAT.groupSize,
                                                g2 = +FORMAT.secondaryGroupSize,
                                                groupSeparator = FORMAT.groupSeparator,
                                                intPart = arr[0],
                                                fractionPart = arr[1],
                                                isNeg = this.s < 0,
                                                intDigits = isNeg ? intPart.slice(1) : intPart,
                                                len = intDigits.length;

                                            if (g2) i = g1, g1 = g2, g2 = i, len -= i;

                                            if (g1 > 0 && len > 0) {
                                                i = len % g1 || g1;
                                                intPart = intDigits.substr(0, i);

                                                for (; i < len; i += g1) {
                                                    intPart += groupSeparator + intDigits.substr(i, g1);
                                                }

                                                if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);
                                                if (isNeg) intPart = '-' + intPart;
                                            }

                                            str = fractionPart
                                                ? intPart + FORMAT.decimalSeparator + ((g2 = +FORMAT.fractionGroupSize)
                                                ? fractionPart.replace(new RegExp('\\d{' + g2 + '}\\B', 'g'),
                                                    '$&' + FORMAT.fractionGroupSeparator)
                                                : fractionPart)
                                                : intPart;
                                        }

                                        return str;
                                    };


                                    /*
     * Return a string array representing the value of this BigNumber as a simple fraction with
     * an integer numerator and an integer denominator. The denominator will be a positive
     * non-zero value less than or equal to the specified maximum denominator. If a maximum
     * denominator is not specified, the denominator will be the lowest value necessary to
     * represent the number exactly.
     *
     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.
     *
     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'
     */
                                    P.toFraction = function (md) {
                                        var arr, d, d0, d1, d2, e, exp, n, n0, n1, q, s,
                                            x = this,
                                            xc = x.c;

                                        if (md != null) {
                                            n = new BigNumber(md);

                                            // Throw if md is less than one or is not an integer, unless it is Infinity.
                                            if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {
                                                throw Error
                                                (bignumberError + 'Argument ' +
                                                    (n.isInteger() ? 'out of range: ' : 'not an integer: ') + md);
                                            }
                                        }

                                        if (!xc) return x.toString();

                                        d = new BigNumber(ONE);
                                        n1 = d0 = new BigNumber(ONE);
                                        d1 = n0 = new BigNumber(ONE);
                                        s = coeffToString(xc);

                                        // Determine initial denominator.
                                        // d is a power of 10 and the minimum max denominator that specifies the value exactly.
                                        e = d.e = s.length - x.e - 1;
                                        d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
                                        md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;

                                        exp = MAX_EXP;
                                        MAX_EXP = 1 / 0;
                                        n = new BigNumber(s);

                                        // n0 = d1 = 0
                                        n0.c[0] = 0;

                                        for (; ;) {
                                            q = div(n, d, 0, 1);
                                            d2 = d0.plus(q.times(d1));
                                            if (d2.comparedTo(md) == 1) break;
                                            d0 = d1;
                                            d1 = d2;
                                            n1 = n0.plus(q.times(d2 = n1));
                                            n0 = d2;
                                            d = n.minus(q.times(d2 = d));
                                            n = d2;
                                        }

                                        d2 = div(md.minus(d0), d1, 0, 1);
                                        n0 = n0.plus(d2.times(n1));
                                        d0 = d0.plus(d2.times(d1));
                                        n0.s = n1.s = x.s;
                                        e *= 2;

                                        // Determine which fraction is closer to x, n0/d0 or n1/d1
                                        arr = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(
                                            div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1
                                            ? [n1.toString(), d1.toString()]
                                            : [n0.toString(), d0.toString()];

                                        MAX_EXP = exp;
                                        return arr;
                                    };


                                    /*
     * Return the value of this BigNumber converted to a number primitive.
     */
                                    P.toNumber = function () {
                                        return +this;
                                    };


                                    /*
     * Return a string representing the value of this BigNumber rounded to sd significant digits
     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits
     * necessary to represent the integer part of the value in fixed-point notation, then use
     * exponential notation.
     *
     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
     */
                                    P.toPrecision = function (sd, rm) {
                                        if (sd != null) intCheck(sd, 1, MAX);
                                        return format(this, sd, rm, 2);
                                    };


                                    /*
     * Return a string representing the value of this BigNumber in base b, or base 10 if b is
     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and
     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent
     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than
     * TO_EXP_NEG, return exponential notation.
     *
     * [b] {number} Integer, 2 to ALPHABET.length inclusive.
     *
     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
     */
                                    P.toString = function (b) {
                                        var str,
                                            n = this,
                                            s = n.s,
                                            e = n.e;

                                        // Infinity or NaN?
                                        if (e === null) {

                                            if (s) {
                                                str = 'Infinity';
                                                if (s < 0) str = '-' + str;
                                            } else {
                                                str = 'NaN';
                                            }
                                        } else {
                                            str = coeffToString(n.c);

                                            if (b == null) {
                                                str = e <= TO_EXP_NEG || e >= TO_EXP_POS
                                                    ? toExponential(str, e)
                                                    : toFixedPoint(str, e, '0');
                                            } else {
                                                intCheck(b, 2, ALPHABET.length, 'Base');
                                                str = convertBase(toFixedPoint(str, e, '0'), 10, b, s, true);
                                            }

                                            if (s < 0 && n.c[0]) str = '-' + str;
                                        }

                                        return str;
                                    };


                                    /*
     * Return as toString, but do not accept a base argument, and include the minus sign for
     * negative zero.
     */
                                    P.valueOf = P.toJSON = function () {
                                        var str,
                                            n = this,
                                            e = n.e;

                                        if (e === null) return n.toString();

                                        str = coeffToString(n.c);

                                        str = e <= TO_EXP_NEG || e >= TO_EXP_POS
                                            ? toExponential(str, e)
                                            : toFixedPoint(str, e, '0');

                                        return n.s < 0 ? '-' + str : str;
                                    };


                                    P._isBigNumber = true;

                                    if (configObject != null) BigNumber.set(configObject);

                                    return BigNumber;
                                }


                                // PRIVATE HELPER FUNCTIONS


                                function bitFloor(n) {
                                    var i = n | 0;
                                    return n > 0 || n === i ? i : i - 1;
                                }


                                // Return a coefficient array as a string of base 10 digits.
                                function coeffToString(a) {
                                    var s, z,
                                        i = 1,
                                        j = a.length,
                                        r = a[0] + '';

                                    for (; i < j;) {
                                        s = a[i++] + '';
                                        z = LOG_BASE - s.length;
                                        for (; z--; s = '0' + s) ;
                                        r += s;
                                    }

                                    // Determine trailing zeros.
                                    for (j = r.length; r.charCodeAt(--j) === 48;) ;
                                    return r.slice(0, j + 1 || 1);
                                }


                                // Compare the value of BigNumbers x and y.
                                function compare(x, y) {
                                    var a, b,
                                        xc = x.c,
                                        yc = y.c,
                                        i = x.s,
                                        j = y.s,
                                        k = x.e,
                                        l = y.e;

                                    // Either NaN?
                                    if (!i || !j) return null;

                                    a = xc && !xc[0];
                                    b = yc && !yc[0];

                                    // Either zero?
                                    if (a || b) return a ? b ? 0 : -j : i;

                                    // Signs differ?
                                    if (i != j) return i;

                                    a = i < 0;
                                    b = k == l;

                                    // Either Infinity?
                                    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;

                                    // Compare exponents.
                                    if (!b) return k > l ^ a ? 1 : -1;

                                    j = (k = xc.length) < (l = yc.length) ? k : l;

                                    // Compare digit by digit.
                                    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;

                                    // Compare lengths.
                                    return k == l ? 0 : k > l ^ a ? 1 : -1;
                                }


                                /*
   * Check that n is a primitive number, an integer, and in range, otherwise throw.
   */
                                function intCheck(n, min, max, name) {
                                    if (n < min || n > max || n !== (n < 0 ? mathceil(n) : mathfloor(n))) {
                                        throw Error
                                        (bignumberError + (name || 'Argument') + (typeof n == 'number'
                                            ? n < min || n > max ? ' out of range: ' : ' not an integer: '
                                            : ' not a primitive number: ') + n);
                                    }
                                }


                                function isArray(obj) {
                                    return Object.prototype.toString.call(obj) == '[object Array]';
                                }


                                // Assumes finite n.
                                function isOdd(n) {
                                    var k = n.c.length - 1;
                                    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;
                                }


                                function toExponential(str, e) {
                                    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +
                                        (e < 0 ? 'e' : 'e+') + e;
                                }


                                function toFixedPoint(str, e, z) {
                                    var len, zs;

                                    // Negative exponent?
                                    if (e < 0) {

                                        // Prepend zeros.
                                        for (zs = z + '.'; ++e; zs += z) ;
                                        str = zs + str;

                                        // Positive exponent
                                    } else {
                                        len = str.length;

                                        // Append zeros.
                                        if (++e > len) {
                                            for (zs = z, e -= len; --e; zs += z) ;
                                            str += zs;
                                        } else if (e < len) {
                                            str = str.slice(0, e) + '.' + str.slice(e);
                                        }
                                    }

                                    return str;
                                }


                                // EXPORT


                                BigNumber = clone();
                                BigNumber['default'] = BigNumber.BigNumber = BigNumber;

                                // AMD.
                                if (typeof define == 'function' && define.amd) {
                                    define(function () {
                                        return BigNumber;
                                    });

                                    // Node.js and other environments that support module.exports.
                                } else if (typeof module != 'undefined' && module.exports) {
                                    module.exports = BigNumber;

                                    // Browser.
                                } else {
                                    if (!globalObject) {
                                        globalObject = typeof self != 'undefined' && self ? self : window;
                                    }

                                    globalObject.BigNumber = BigNumber;
                                }
                            })(this);

                        }, {}],
                        33: [function (require, module, exports) {
                            (function (module, exports) {
                                'use strict';

                                // Utils
                                function assert(val, msg) {
                                    if (!val) throw new Error(msg || 'Assertion failed');
                                }

                                // Could use `inherits` module, but don't want to move from single file
                                // architecture yet.
                                function inherits(ctor, superCtor) {
                                    ctor.super_ = superCtor;
                                    var TempCtor = function () {
                                    };
                                    TempCtor.prototype = superCtor.prototype;
                                    ctor.prototype = new TempCtor();
                                    ctor.prototype.constructor = ctor;
                                }

                                // BN

                                function BN(number, base, endian) {
                                    if (BN.isBN(number)) {
                                        return number;
                                    }

                                    this.negative = 0;
                                    this.words = null;
                                    this.length = 0;

                                    // Reduction context
                                    this.red = null;

                                    if (number !== null) {
                                        if (base === 'le' || base === 'be') {
                                            endian = base;
                                            base = 10;
                                        }

                                        this._init(number || 0, base || 10, endian || 'be');
                                    }
                                }

                                if (typeof module === 'object') {
                                    module.exports = BN;
                                } else {
                                    exports.BN = BN;
                                }

                                BN.BN = BN;
                                BN.wordSize = 26;

                                var Buffer;
                                try {
                                    Buffer = require('buffer').Buffer;
                                } catch (e) {
                                }

                                BN.isBN = function isBN(num) {
                                    if (num instanceof BN) {
                                        return true;
                                    }

                                    return num !== null && typeof num === 'object' &&
                                        num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
                                };

                                BN.max = function max(left, right) {
                                    if (left.cmp(right) > 0) return left;
                                    return right;
                                };

                                BN.min = function min(left, right) {
                                    if (left.cmp(right) < 0) return left;
                                    return right;
                                };

                                BN.prototype._init = function init(number, base, endian) {
                                    if (typeof number === 'number') {
                                        return this._initNumber(number, base, endian);
                                    }

                                    if (typeof number === 'object') {
                                        return this._initArray(number, base, endian);
                                    }

                                    if (base === 'hex') {
                                        base = 16;
                                    }
                                    assert(base === (base | 0) && base >= 2 && base <= 36);

                                    number = number.toString().replace(/\s+/g, '');
                                    var start = 0;
                                    if (number[0] === '-') {
                                        start++;
                                    }

                                    if (base === 16) {
                                        this._parseHex(number, start);
                                    } else {
                                        this._parseBase(number, base, start);
                                    }

                                    if (number[0] === '-') {
                                        this.negative = 1;
                                    }

                                    this.strip();

                                    if (endian !== 'le') return;

                                    this._initArray(this.toArray(), base, endian);
                                };

                                BN.prototype._initNumber = function _initNumber(number, base, endian) {
                                    if (number < 0) {
                                        this.negative = 1;
                                        number = -number;
                                    }
                                    if (number < 0x4000000) {
                                        this.words = [number & 0x3ffffff];
                                        this.length = 1;
                                    } else if (number < 0x10000000000000) {
                                        this.words = [
                                            number & 0x3ffffff,
                                            (number / 0x4000000) & 0x3ffffff
                                        ];
                                        this.length = 2;
                                    } else {
                                        assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
                                        this.words = [
                                            number & 0x3ffffff,
                                            (number / 0x4000000) & 0x3ffffff,
                                            1
                                        ];
                                        this.length = 3;
                                    }

                                    if (endian !== 'le') return;

                                    // Reverse the bytes
                                    this._initArray(this.toArray(), base, endian);
                                };

                                BN.prototype._initArray = function _initArray(number, base, endian) {
                                    // Perhaps a Uint8Array
                                    assert(typeof number.length === 'number');
                                    if (number.length <= 0) {
                                        this.words = [0];
                                        this.length = 1;
                                        return this;
                                    }

                                    this.length = Math.ceil(number.length / 3);
                                    this.words = new Array(this.length);
                                    for (var i = 0; i < this.length; i++) {
                                        this.words[i] = 0;
                                    }

                                    var j, w;
                                    var off = 0;
                                    if (endian === 'be') {
                                        for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
                                            w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
                                            this.words[j] |= (w << off) & 0x3ffffff;
                                            this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
                                            off += 24;
                                            if (off >= 26) {
                                                off -= 26;
                                                j++;
                                            }
                                        }
                                    } else if (endian === 'le') {
                                        for (i = 0, j = 0; i < number.length; i += 3) {
                                            w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
                                            this.words[j] |= (w << off) & 0x3ffffff;
                                            this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
                                            off += 24;
                                            if (off >= 26) {
                                                off -= 26;
                                                j++;
                                            }
                                        }
                                    }
                                    return this.strip();
                                };

                                function parseHex(str, start, end) {
                                    var r = 0;
                                    var len = Math.min(str.length, end);
                                    for (var i = start; i < len; i++) {
                                        var c = str.charCodeAt(i) - 48;

                                        r <<= 4;

                                        // 'a' - 'f'
                                        if (c >= 49 && c <= 54) {
                                            r |= c - 49 + 0xa;

                                            // 'A' - 'F'
                                        } else if (c >= 17 && c <= 22) {
                                            r |= c - 17 + 0xa;

                                            // '0' - '9'
                                        } else {
                                            r |= c & 0xf;
                                        }
                                    }
                                    return r;
                                }

                                BN.prototype._parseHex = function _parseHex(number, start) {
                                    // Create possibly bigger array to ensure that it fits the number
                                    this.length = Math.ceil((number.length - start) / 6);
                                    this.words = new Array(this.length);
                                    for (var i = 0; i < this.length; i++) {
                                        this.words[i] = 0;
                                    }

                                    var j, w;
                                    // Scan 24-bit chunks and add them to the number
                                    var off = 0;
                                    for (i = number.length - 6, j = 0; i >= start; i -= 6) {
                                        w = parseHex(number, i, i + 6);
                                        this.words[j] |= (w << off) & 0x3ffffff;
                                        // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
                                        this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
                                        off += 24;
                                        if (off >= 26) {
                                            off -= 26;
                                            j++;
                                        }
                                    }
                                    if (i + 6 !== start) {
                                        w = parseHex(number, start, i + 6);
                                        this.words[j] |= (w << off) & 0x3ffffff;
                                        this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
                                    }
                                    this.strip();
                                };

                                function parseBase(str, start, end, mul) {
                                    var r = 0;
                                    var len = Math.min(str.length, end);
                                    for (var i = start; i < len; i++) {
                                        var c = str.charCodeAt(i) - 48;

                                        r *= mul;

                                        // 'a'
                                        if (c >= 49) {
                                            r += c - 49 + 0xa;

                                            // 'A'
                                        } else if (c >= 17) {
                                            r += c - 17 + 0xa;

                                            // '0' - '9'
                                        } else {
                                            r += c;
                                        }
                                    }
                                    return r;
                                }

                                BN.prototype._parseBase = function _parseBase(number, base, start) {
                                    // Initialize as zero
                                    this.words = [0];
                                    this.length = 1;

                                    // Find length of limb in base
                                    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
                                        limbLen++;
                                    }
                                    limbLen--;
                                    limbPow = (limbPow / base) | 0;

                                    var total = number.length - start;
                                    var mod = total % limbLen;
                                    var end = Math.min(total, total - mod) + start;

                                    var word = 0;
                                    for (var i = start; i < end; i += limbLen) {
                                        word = parseBase(number, i, i + limbLen, base);

                                        this.imuln(limbPow);
                                        if (this.words[0] + word < 0x4000000) {
                                            this.words[0] += word;
                                        } else {
                                            this._iaddn(word);
                                        }
                                    }

                                    if (mod !== 0) {
                                        var pow = 1;
                                        word = parseBase(number, i, number.length, base);

                                        for (i = 0; i < mod; i++) {
                                            pow *= base;
                                        }

                                        this.imuln(pow);
                                        if (this.words[0] + word < 0x4000000) {
                                            this.words[0] += word;
                                        } else {
                                            this._iaddn(word);
                                        }
                                    }
                                };

                                BN.prototype.copy = function copy(dest) {
                                    dest.words = new Array(this.length);
                                    for (var i = 0; i < this.length; i++) {
                                        dest.words[i] = this.words[i];
                                    }
                                    dest.length = this.length;
                                    dest.negative = this.negative;
                                    dest.red = this.red;
                                };

                                BN.prototype.clone = function clone() {
                                    var r = new BN(null);
                                    this.copy(r);
                                    return r;
                                };

                                BN.prototype._expand = function _expand(size) {
                                    while (this.length < size) {
                                        this.words[this.length++] = 0;
                                    }
                                    return this;
                                };

                                // Remove leading `0` from `this`
                                BN.prototype.strip = function strip() {
                                    while (this.length > 1 && this.words[this.length - 1] === 0) {
                                        this.length--;
                                    }
                                    return this._normSign();
                                };

                                BN.prototype._normSign = function _normSign() {
                                    // -0 = 0
                                    if (this.length === 1 && this.words[0] === 0) {
                                        this.negative = 0;
                                    }
                                    return this;
                                };

                                BN.prototype.inspect = function inspect() {
                                    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
                                };

                                /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

                                var zeros = [
                                    '',
                                    '0',
                                    '00',
                                    '000',
                                    '0000',
                                    '00000',
                                    '000000',
                                    '0000000',
                                    '00000000',
                                    '000000000',
                                    '0000000000',
                                    '00000000000',
                                    '000000000000',
                                    '0000000000000',
                                    '00000000000000',
                                    '000000000000000',
                                    '0000000000000000',
                                    '00000000000000000',
                                    '000000000000000000',
                                    '0000000000000000000',
                                    '00000000000000000000',
                                    '000000000000000000000',
                                    '0000000000000000000000',
                                    '00000000000000000000000',
                                    '000000000000000000000000',
                                    '0000000000000000000000000'
                                ];

                                var groupSizes = [
                                    0, 0,
                                    25, 16, 12, 11, 10, 9, 8,
                                    8, 7, 7, 7, 7, 6, 6,
                                    6, 6, 6, 6, 6, 5, 5,
                                    5, 5, 5, 5, 5, 5, 5,
                                    5, 5, 5, 5, 5, 5, 5
                                ];

                                var groupBases = [
                                    0, 0,
                                    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
                                    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
                                    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
                                    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
                                    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
                                ];

                                BN.prototype.toString = function toString(base, padding) {
                                    base = base || 10;
                                    padding = padding | 0 || 1;

                                    var out;
                                    if (base === 16 || base === 'hex') {
                                        out = '';
                                        var off = 0;
                                        var carry = 0;
                                        for (var i = 0; i < this.length; i++) {
                                            var w = this.words[i];
                                            var word = (((w << off) | carry) & 0xffffff).toString(16);
                                            carry = (w >>> (24 - off)) & 0xffffff;
                                            if (carry !== 0 || i !== this.length - 1) {
                                                out = zeros[6 - word.length] + word + out;
                                            } else {
                                                out = word + out;
                                            }
                                            off += 2;
                                            if (off >= 26) {
                                                off -= 26;
                                                i--;
                                            }
                                        }
                                        if (carry !== 0) {
                                            out = carry.toString(16) + out;
                                        }
                                        while (out.length % padding !== 0) {
                                            out = '0' + out;
                                        }
                                        if (this.negative !== 0) {
                                            out = '-' + out;
                                        }
                                        return out;
                                    }

                                    if (base === (base | 0) && base >= 2 && base <= 36) {
                                        // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
                                        var groupSize = groupSizes[base];
                                        // var groupBase = Math.pow(base, groupSize);
                                        var groupBase = groupBases[base];
                                        out = '';
                                        var c = this.clone();
                                        c.negative = 0;
                                        while (!c.isZero()) {
                                            var r = c.modn(groupBase).toString(base);
                                            c = c.idivn(groupBase);

                                            if (!c.isZero()) {
                                                out = zeros[groupSize - r.length] + r + out;
                                            } else {
                                                out = r + out;
                                            }
                                        }
                                        if (this.isZero()) {
                                            out = '0' + out;
                                        }
                                        while (out.length % padding !== 0) {
                                            out = '0' + out;
                                        }
                                        if (this.negative !== 0) {
                                            out = '-' + out;
                                        }
                                        return out;
                                    }

                                    assert(false, 'Base should be between 2 and 36');
                                };

                                BN.prototype.toNumber = function toNumber() {
                                    var ret = this.words[0];
                                    if (this.length === 2) {
                                        ret += this.words[1] * 0x4000000;
                                    } else if (this.length === 3 && this.words[2] === 0x01) {
                                        // NOTE: at this stage it is known that the top bit is set
                                        ret += 0x10000000000000 + (this.words[1] * 0x4000000);
                                    } else if (this.length > 2) {
                                        assert(false, 'Number can only safely store up to 53 bits');
                                    }
                                    return (this.negative !== 0) ? -ret : ret;
                                };

                                BN.prototype.toJSON = function toJSON() {
                                    return this.toString(16);
                                };

                                BN.prototype.toBuffer = function toBuffer(endian, length) {
                                    assert(typeof Buffer !== 'undefined');
                                    return this.toArrayLike(Buffer, endian, length);
                                };

                                BN.prototype.toArray = function toArray(endian, length) {
                                    return this.toArrayLike(Array, endian, length);
                                };

                                BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
                                    var byteLength = this.byteLength();
                                    var reqLength = length || Math.max(1, byteLength);
                                    assert(byteLength <= reqLength, 'byte array longer than desired length');
                                    assert(reqLength > 0, 'Requested array length <= 0');

                                    this.strip();
                                    var littleEndian = endian === 'le';
                                    var res = new ArrayType(reqLength);

                                    var b, i;
                                    var q = this.clone();
                                    if (!littleEndian) {
                                        // Assume big-endian
                                        for (i = 0; i < reqLength - byteLength; i++) {
                                            res[i] = 0;
                                        }

                                        for (i = 0; !q.isZero(); i++) {
                                            b = q.andln(0xff);
                                            q.iushrn(8);

                                            res[reqLength - i - 1] = b;
                                        }
                                    } else {
                                        for (i = 0; !q.isZero(); i++) {
                                            b = q.andln(0xff);
                                            q.iushrn(8);

                                            res[i] = b;
                                        }

                                        for (; i < reqLength; i++) {
                                            res[i] = 0;
                                        }
                                    }

                                    return res;
                                };

                                if (Math.clz32) {
                                    BN.prototype._countBits = function _countBits(w) {
                                        return 32 - Math.clz32(w);
                                    };
                                } else {
                                    BN.prototype._countBits = function _countBits(w) {
                                        var t = w;
                                        var r = 0;
                                        if (t >= 0x1000) {
                                            r += 13;
                                            t >>>= 13;
                                        }
                                        if (t >= 0x40) {
                                            r += 7;
                                            t >>>= 7;
                                        }
                                        if (t >= 0x8) {
                                            r += 4;
                                            t >>>= 4;
                                        }
                                        if (t >= 0x02) {
                                            r += 2;
                                            t >>>= 2;
                                        }
                                        return r + t;
                                    };
                                }

                                BN.prototype._zeroBits = function _zeroBits(w) {
                                    // Short-cut
                                    if (w === 0) return 26;

                                    var t = w;
                                    var r = 0;
                                    if ((t & 0x1fff) === 0) {
                                        r += 13;
                                        t >>>= 13;
                                    }
                                    if ((t & 0x7f) === 0) {
                                        r += 7;
                                        t >>>= 7;
                                    }
                                    if ((t & 0xf) === 0) {
                                        r += 4;
                                        t >>>= 4;
                                    }
                                    if ((t & 0x3) === 0) {
                                        r += 2;
                                        t >>>= 2;
                                    }
                                    if ((t & 0x1) === 0) {
                                        r++;
                                    }
                                    return r;
                                };

                                // Return number of used bits in a BN
                                BN.prototype.bitLength = function bitLength() {
                                    var w = this.words[this.length - 1];
                                    var hi = this._countBits(w);
                                    return (this.length - 1) * 26 + hi;
                                };

                                function toBitArray(num) {
                                    var w = new Array(num.bitLength());

                                    for (var bit = 0; bit < w.length; bit++) {
                                        var off = (bit / 26) | 0;
                                        var wbit = bit % 26;

                                        w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
                                    }

                                    return w;
                                }

                                // Number of trailing zero bits
                                BN.prototype.zeroBits = function zeroBits() {
                                    if (this.isZero()) return 0;

                                    var r = 0;
                                    for (var i = 0; i < this.length; i++) {
                                        var b = this._zeroBits(this.words[i]);
                                        r += b;
                                        if (b !== 26) break;
                                    }
                                    return r;
                                };

                                BN.prototype.byteLength = function byteLength() {
                                    return Math.ceil(this.bitLength() / 8);
                                };

                                BN.prototype.toTwos = function toTwos(width) {
                                    if (this.negative !== 0) {
                                        return this.abs().inotn(width).iaddn(1);
                                    }
                                    return this.clone();
                                };

                                BN.prototype.fromTwos = function fromTwos(width) {
                                    if (this.testn(width - 1)) {
                                        return this.notn(width).iaddn(1).ineg();
                                    }
                                    return this.clone();
                                };

                                BN.prototype.isNeg = function isNeg() {
                                    return this.negative !== 0;
                                };

                                // Return negative clone of `this`
                                BN.prototype.neg = function neg() {
                                    return this.clone().ineg();
                                };

                                BN.prototype.ineg = function ineg() {
                                    if (!this.isZero()) {
                                        this.negative ^= 1;
                                    }

                                    return this;
                                };

                                // Or `num` with `this` in-place
                                BN.prototype.iuor = function iuor(num) {
                                    while (this.length < num.length) {
                                        this.words[this.length++] = 0;
                                    }

                                    for (var i = 0; i < num.length; i++) {
                                        this.words[i] = this.words[i] | num.words[i];
                                    }

                                    return this.strip();
                                };

                                BN.prototype.ior = function ior(num) {
                                    assert((this.negative | num.negative) === 0);
                                    return this.iuor(num);
                                };

                                // Or `num` with `this`
                                BN.prototype.or = function or(num) {
                                    if (this.length > num.length) return this.clone().ior(num);
                                    return num.clone().ior(this);
                                };

                                BN.prototype.uor = function uor(num) {
                                    if (this.length > num.length) return this.clone().iuor(num);
                                    return num.clone().iuor(this);
                                };

                                // And `num` with `this` in-place
                                BN.prototype.iuand = function iuand(num) {
                                    // b = min-length(num, this)
                                    var b;
                                    if (this.length > num.length) {
                                        b = num;
                                    } else {
                                        b = this;
                                    }

                                    for (var i = 0; i < b.length; i++) {
                                        this.words[i] = this.words[i] & num.words[i];
                                    }

                                    this.length = b.length;

                                    return this.strip();
                                };

                                BN.prototype.iand = function iand(num) {
                                    assert((this.negative | num.negative) === 0);
                                    return this.iuand(num);
                                };

                                // And `num` with `this`
                                BN.prototype.and = function and(num) {
                                    if (this.length > num.length) return this.clone().iand(num);
                                    return num.clone().iand(this);
                                };

                                BN.prototype.uand = function uand(num) {
                                    if (this.length > num.length) return this.clone().iuand(num);
                                    return num.clone().iuand(this);
                                };

                                // Xor `num` with `this` in-place
                                BN.prototype.iuxor = function iuxor(num) {
                                    // a.length > b.length
                                    var a;
                                    var b;
                                    if (this.length > num.length) {
                                        a = this;
                                        b = num;
                                    } else {
                                        a = num;
                                        b = this;
                                    }

                                    for (var i = 0; i < b.length; i++) {
                                        this.words[i] = a.words[i] ^ b.words[i];
                                    }

                                    if (this !== a) {
                                        for (; i < a.length; i++) {
                                            this.words[i] = a.words[i];
                                        }
                                    }

                                    this.length = a.length;

                                    return this.strip();
                                };

                                BN.prototype.ixor = function ixor(num) {
                                    assert((this.negative | num.negative) === 0);
                                    return this.iuxor(num);
                                };

                                // Xor `num` with `this`
                                BN.prototype.xor = function xor(num) {
                                    if (this.length > num.length) return this.clone().ixor(num);
                                    return num.clone().ixor(this);
                                };

                                BN.prototype.uxor = function uxor(num) {
                                    if (this.length > num.length) return this.clone().iuxor(num);
                                    return num.clone().iuxor(this);
                                };

                                // Not ``this`` with ``width`` bitwidth
                                BN.prototype.inotn = function inotn(width) {
                                    assert(typeof width === 'number' && width >= 0);

                                    var bytesNeeded = Math.ceil(width / 26) | 0;
                                    var bitsLeft = width % 26;

                                    // Extend the buffer with leading zeroes
                                    this._expand(bytesNeeded);

                                    if (bitsLeft > 0) {
                                        bytesNeeded--;
                                    }

                                    // Handle complete words
                                    for (var i = 0; i < bytesNeeded; i++) {
                                        this.words[i] = ~this.words[i] & 0x3ffffff;
                                    }

                                    // Handle the residue
                                    if (bitsLeft > 0) {
                                        this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
                                    }

                                    // And remove leading zeroes
                                    return this.strip();
                                };

                                BN.prototype.notn = function notn(width) {
                                    return this.clone().inotn(width);
                                };

                                // Set `bit` of `this`
                                BN.prototype.setn = function setn(bit, val) {
                                    assert(typeof bit === 'number' && bit >= 0);

                                    var off = (bit / 26) | 0;
                                    var wbit = bit % 26;

                                    this._expand(off + 1);

                                    if (val) {
                                        this.words[off] = this.words[off] | (1 << wbit);
                                    } else {
                                        this.words[off] = this.words[off] & ~(1 << wbit);
                                    }

                                    return this.strip();
                                };

                                // Add `num` to `this` in-place
                                BN.prototype.iadd = function iadd(num) {
                                    var r;

                                    // negative + positive
                                    if (this.negative !== 0 && num.negative === 0) {
                                        this.negative = 0;
                                        r = this.isub(num);
                                        this.negative ^= 1;
                                        return this._normSign();

                                        // positive + negative
                                    } else if (this.negative === 0 && num.negative !== 0) {
                                        num.negative = 0;
                                        r = this.isub(num);
                                        num.negative = 1;
                                        return r._normSign();
                                    }

                                    // a.length > b.length
                                    var a, b;
                                    if (this.length > num.length) {
                                        a = this;
                                        b = num;
                                    } else {
                                        a = num;
                                        b = this;
                                    }

                                    var carry = 0;
                                    for (var i = 0; i < b.length; i++) {
                                        r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
                                        this.words[i] = r & 0x3ffffff;
                                        carry = r >>> 26;
                                    }
                                    for (; carry !== 0 && i < a.length; i++) {
                                        r = (a.words[i] | 0) + carry;
                                        this.words[i] = r & 0x3ffffff;
                                        carry = r >>> 26;
                                    }

                                    this.length = a.length;
                                    if (carry !== 0) {
                                        this.words[this.length] = carry;
                                        this.length++;
                                        // Copy the rest of the words
                                    } else if (a !== this) {
                                        for (; i < a.length; i++) {
                                            this.words[i] = a.words[i];
                                        }
                                    }

                                    return this;
                                };

                                // Add `num` to `this`
                                BN.prototype.add = function add(num) {
                                    var res;
                                    if (num.negative !== 0 && this.negative === 0) {
                                        num.negative = 0;
                                        res = this.sub(num);
                                        num.negative ^= 1;
                                        return res;
                                    } else if (num.negative === 0 && this.negative !== 0) {
                                        this.negative = 0;
                                        res = num.sub(this);
                                        this.negative = 1;
                                        return res;
                                    }

                                    if (this.length > num.length) return this.clone().iadd(num);

                                    return num.clone().iadd(this);
                                };

                                // Subtract `num` from `this` in-place
                                BN.prototype.isub = function isub(num) {
                                    // this - (-num) = this + num
                                    if (num.negative !== 0) {
                                        num.negative = 0;
                                        var r = this.iadd(num);
                                        num.negative = 1;
                                        return r._normSign();

                                        // -this - num = -(this + num)
                                    } else if (this.negative !== 0) {
                                        this.negative = 0;
                                        this.iadd(num);
                                        this.negative = 1;
                                        return this._normSign();
                                    }

                                    // At this point both numbers are positive
                                    var cmp = this.cmp(num);

                                    // Optimization - zeroify
                                    if (cmp === 0) {
                                        this.negative = 0;
                                        this.length = 1;
                                        this.words[0] = 0;
                                        return this;
                                    }

                                    // a > b
                                    var a, b;
                                    if (cmp > 0) {
                                        a = this;
                                        b = num;
                                    } else {
                                        a = num;
                                        b = this;
                                    }

                                    var carry = 0;
                                    for (var i = 0; i < b.length; i++) {
                                        r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
                                        carry = r >> 26;
                                        this.words[i] = r & 0x3ffffff;
                                    }
                                    for (; carry !== 0 && i < a.length; i++) {
                                        r = (a.words[i] | 0) + carry;
                                        carry = r >> 26;
                                        this.words[i] = r & 0x3ffffff;
                                    }

                                    // Copy rest of the words
                                    if (carry === 0 && i < a.length && a !== this) {
                                        for (; i < a.length; i++) {
                                            this.words[i] = a.words[i];
                                        }
                                    }

                                    this.length = Math.max(this.length, i);

                                    if (a !== this) {
                                        this.negative = 1;
                                    }

                                    return this.strip();
                                };

                                // Subtract `num` from `this`
                                BN.prototype.sub = function sub(num) {
                                    return this.clone().isub(num);
                                };

                                function smallMulTo(self, num, out) {
                                    out.negative = num.negative ^ self.negative;
                                    var len = (self.length + num.length) | 0;
                                    out.length = len;
                                    len = (len - 1) | 0;

                                    // Peel one iteration (compiler can't do it, because of code complexity)
                                    var a = self.words[0] | 0;
                                    var b = num.words[0] | 0;
                                    var r = a * b;

                                    var lo = r & 0x3ffffff;
                                    var carry = (r / 0x4000000) | 0;
                                    out.words[0] = lo;

                                    for (var k = 1; k < len; k++) {
                                        // Sum all words with the same `i + j = k` and accumulate `ncarry`,
                                        // note that ncarry could be >= 0x3ffffff
                                        var ncarry = carry >>> 26;
                                        var rword = carry & 0x3ffffff;
                                        var maxJ = Math.min(k, num.length - 1);
                                        for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
                                            var i = (k - j) | 0;
                                            a = self.words[i] | 0;
                                            b = num.words[j] | 0;
                                            r = a * b + rword;
                                            ncarry += (r / 0x4000000) | 0;
                                            rword = r & 0x3ffffff;
                                        }
                                        out.words[k] = rword | 0;
                                        carry = ncarry | 0;
                                    }
                                    if (carry !== 0) {
                                        out.words[k] = carry | 0;
                                    } else {
                                        out.length--;
                                    }

                                    return out.strip();
                                }

                                // TODO(indutny): it may be reasonable to omit it for users who don't need
                                // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
                                // multiplication (like elliptic secp256k1).
                                var comb10MulTo = function comb10MulTo(self, num, out) {
                                    var a = self.words;
                                    var b = num.words;
                                    var o = out.words;
                                    var c = 0;
                                    var lo;
                                    var mid;
                                    var hi;
                                    var a0 = a[0] | 0;
                                    var al0 = a0 & 0x1fff;
                                    var ah0 = a0 >>> 13;
                                    var a1 = a[1] | 0;
                                    var al1 = a1 & 0x1fff;
                                    var ah1 = a1 >>> 13;
                                    var a2 = a[2] | 0;
                                    var al2 = a2 & 0x1fff;
                                    var ah2 = a2 >>> 13;
                                    var a3 = a[3] | 0;
                                    var al3 = a3 & 0x1fff;
                                    var ah3 = a3 >>> 13;
                                    var a4 = a[4] | 0;
                                    var al4 = a4 & 0x1fff;
                                    var ah4 = a4 >>> 13;
                                    var a5 = a[5] | 0;
                                    var al5 = a5 & 0x1fff;
                                    var ah5 = a5 >>> 13;
                                    var a6 = a[6] | 0;
                                    var al6 = a6 & 0x1fff;
                                    var ah6 = a6 >>> 13;
                                    var a7 = a[7] | 0;
                                    var al7 = a7 & 0x1fff;
                                    var ah7 = a7 >>> 13;
                                    var a8 = a[8] | 0;
                                    var al8 = a8 & 0x1fff;
                                    var ah8 = a8 >>> 13;
                                    var a9 = a[9] | 0;
                                    var al9 = a9 & 0x1fff;
                                    var ah9 = a9 >>> 13;
                                    var b0 = b[0] | 0;
                                    var bl0 = b0 & 0x1fff;
                                    var bh0 = b0 >>> 13;
                                    var b1 = b[1] | 0;
                                    var bl1 = b1 & 0x1fff;
                                    var bh1 = b1 >>> 13;
                                    var b2 = b[2] | 0;
                                    var bl2 = b2 & 0x1fff;
                                    var bh2 = b2 >>> 13;
                                    var b3 = b[3] | 0;
                                    var bl3 = b3 & 0x1fff;
                                    var bh3 = b3 >>> 13;
                                    var b4 = b[4] | 0;
                                    var bl4 = b4 & 0x1fff;
                                    var bh4 = b4 >>> 13;
                                    var b5 = b[5] | 0;
                                    var bl5 = b5 & 0x1fff;
                                    var bh5 = b5 >>> 13;
                                    var b6 = b[6] | 0;
                                    var bl6 = b6 & 0x1fff;
                                    var bh6 = b6 >>> 13;
                                    var b7 = b[7] | 0;
                                    var bl7 = b7 & 0x1fff;
                                    var bh7 = b7 >>> 13;
                                    var b8 = b[8] | 0;
                                    var bl8 = b8 & 0x1fff;
                                    var bh8 = b8 >>> 13;
                                    var b9 = b[9] | 0;
                                    var bl9 = b9 & 0x1fff;
                                    var bh9 = b9 >>> 13;

                                    out.negative = self.negative ^ num.negative;
                                    out.length = 19;
                                    /* k = 0 */
                                    lo = Math.imul(al0, bl0);
                                    mid = Math.imul(al0, bh0);
                                    mid = (mid + Math.imul(ah0, bl0)) | 0;
                                    hi = Math.imul(ah0, bh0);
                                    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                                    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
                                    w0 &= 0x3ffffff;
                                    /* k = 1 */
                                    lo = Math.imul(al1, bl0);
                                    mid = Math.imul(al1, bh0);
                                    mid = (mid + Math.imul(ah1, bl0)) | 0;
                                    hi = Math.imul(ah1, bh0);
                                    lo = (lo + Math.imul(al0, bl1)) | 0;
                                    mid = (mid + Math.imul(al0, bh1)) | 0;
                                    mid = (mid + Math.imul(ah0, bl1)) | 0;
                                    hi = (hi + Math.imul(ah0, bh1)) | 0;
                                    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                                    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
                                    w1 &= 0x3ffffff;
                                    /* k = 2 */
                                    lo = Math.imul(al2, bl0);
                                    mid = Math.imul(al2, bh0);
                                    mid = (mid + Math.imul(ah2, bl0)) | 0;
                                    hi = Math.imul(ah2, bh0);
                                    lo = (lo + Math.imul(al1, bl1)) | 0;
                                    mid = (mid + Math.imul(al1, bh1)) | 0;
                                    mid = (mid + Math.imul(ah1, bl1)) | 0;
                                    hi = (hi + Math.imul(ah1, bh1)) | 0;
                                    lo = (lo + Math.imul(al0, bl2)) | 0;
                                    mid = (mid + Math.imul(al0, bh2)) | 0;
                                    mid = (mid + Math.imul(ah0, bl2)) | 0;
                                    hi = (hi + Math.imul(ah0, bh2)) | 0;
                                    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                                    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
                                    w2 &= 0x3ffffff;
                                    /* k = 3 */
                                    lo = Math.imul(al3, bl0);
                                    mid = Math.imul(al3, bh0);
                                    mid = (mid + Math.imul(ah3, bl0)) | 0;
                                    hi = Math.imul(ah3, bh0);
                                    lo = (lo + Math.imul(al2, bl1)) | 0;
                                    mid = (mid + Math.imul(al2, bh1)) | 0;
                                    mid = (mid + Math.imul(ah2, bl1)) | 0;
                                    hi = (hi + Math.imul(ah2, bh1)) | 0;
                                    lo = (lo + Math.imul(al1, bl2)) | 0;
                                    mid = (mid + Math.imul(al1, bh2)) | 0;
                                    mid = (mid + Math.imul(ah1, bl2)) | 0;
                                    hi = (hi + Math.imul(ah1, bh2)) | 0;
                                    lo = (lo + Math.imul(al0, bl3)) | 0;
                                    mid = (mid + Math.imul(al0, bh3)) | 0;
                                    mid = (mid + Math.imul(ah0, bl3)) | 0;
                                    hi = (hi + Math.imul(ah0, bh3)) | 0;
                                    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                                    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
                                    w3 &= 0x3ffffff;
                                    /* k = 4 */
                                    lo = Math.imul(al4, bl0);
                                    mid = Math.imul(al4, bh0);
                                    mid = (mid + Math.imul(ah4, bl0)) | 0;
                                    hi = Math.imul(ah4, bh0);
                                    lo = (lo + Math.imul(al3, bl1)) | 0;
                                    mid = (mid + Math.imul(al3, bh1)) | 0;
                                    mid = (mid + Math.imul(ah3, bl1)) | 0;
                                    hi = (hi + Math.imul(ah3, bh1)) | 0;
                                    lo = (lo + Math.imul(al2, bl2)) | 0;
                                    mid = (mid + Math.imul(al2, bh2)) | 0;
                                    mid = (mid + Math.imul(ah2, bl2)) | 0;
                                    hi = (hi + Math.imul(ah2, bh2)) | 0;
                                    lo = (lo + Math.imul(al1, bl3)) | 0;
                                    mid = (mid + Math.imul(al1, bh3)) | 0;
                                    mid = (mid + Math.imul(ah1, bl3)) | 0;
                                    hi = (hi + Math.imul(ah1, bh3)) | 0;
                                    lo = (lo + Math.imul(al0, bl4)) | 0;
                                    mid = (mid + Math.imul(al0, bh4)) | 0;
                                    mid = (mid + Math.imul(ah0, bl4)) | 0;
                                    hi = (hi + Math.imul(ah0, bh4)) | 0;
                                    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                                    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
                                    w4 &= 0x3ffffff;
                                    /* k = 5 */
                                    lo = Math.imul(al5, bl0);
                                    mid = Math.imul(al5, bh0);
                                    mid = (mid + Math.imul(ah5, bl0)) | 0;
                                    hi = Math.imul(ah5, bh0);
                                    lo = (lo + Math.imul(al4, bl1)) | 0;
                                    mid = (mid + Math.imul(al4, bh1)) | 0;
                                    mid = (mid + Math.imul(ah4, bl1)) | 0;
                                    hi = (hi + Math.imul(ah4, bh1)) | 0;
                                    lo = (lo + Math.imul(al3, bl2)) | 0;
                                    mid = (mid + Math.imul(al3, bh2)) | 0;
                                    mid = (mid + Math.imul(ah3, bl2)) | 0;
                                    hi = (hi + Math.imul(ah3, bh2)) | 0;
                                    lo = (lo + Math.imul(al2, bl3)) | 0;
                                    mid = (mid + Math.imul(al2, bh3)) | 0;
                                    mid = (mid + Math.imul(ah2, bl3)) | 0;
                                    hi = (hi + Math.imul(ah2, bh3)) | 0;
                                    lo = (lo + Math.imul(al1, bl4)) | 0;
                                    mid = (mid + Math.imul(al1, bh4)) | 0;
                                    mid = (mid + Math.imul(ah1, bl4)) | 0;
                                    hi = (hi + Math.imul(ah1, bh4)) | 0;
                                    lo = (lo + Math.imul(al0, bl5)) | 0;
                                    mid = (mid + Math.imul(al0, bh5)) | 0;
                                    mid = (mid + Math.imul(ah0, bl5)) | 0;
                                    hi = (hi + Math.imul(ah0, bh5)) | 0;
                                    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                                    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
                                    w5 &= 0x3ffffff;
                                    /* k = 6 */
                                    lo = Math.imul(al6, bl0);
                                    mid = Math.imul(al6, bh0);
                                    mid = (mid + Math.imul(ah6, bl0)) | 0;
                                    hi = Math.imul(ah6, bh0);
                                    lo = (lo + Math.imul(al5, bl1)) | 0;
                                    mid = (mid + Math.imul(al5, bh1)) | 0;
                                    mid = (mid + Math.imul(ah5, bl1)) | 0;
                                    hi = (hi + Math.imul(ah5, bh1)) | 0;
                                    lo = (lo + Math.imul(al4, bl2)) | 0;
                                    mid = (mid + Math.imul(al4, bh2)) | 0;
                                    mid = (mid + Math.imul(ah4, bl2)) | 0;
                                    hi = (hi + Math.imul(ah4, bh2)) | 0;
                                    lo = (lo + Math.imul(al3, bl3)) | 0;
                                    mid = (mid + Math.imul(al3, bh3)) | 0;
                                    mid = (mid + Math.imul(ah3, bl3)) | 0;
                                    hi = (hi + Math.imul(ah3, bh3)) | 0;
                                    lo = (lo + Math.imul(al2, bl4)) | 0;
                                    mid = (mid + Math.imul(al2, bh4)) | 0;
                                    mid = (mid + Math.imul(ah2, bl4)) | 0;
                                    hi = (hi + Math.imul(ah2, bh4)) | 0;
                                    lo = (lo + Math.imul(al1, bl5)) | 0;
                                    mid = (mid + Math.imul(al1, bh5)) | 0;
                                    mid = (mid + Math.imul(ah1, bl5)) | 0;
                                    hi = (hi + Math.imul(ah1, bh5)) | 0;
                                    lo = (lo + Math.imul(al0, bl6)) | 0;
                                    mid = (mid + Math.imul(al0, bh6)) | 0;
                                    mid = (mid + Math.imul(ah0, bl6)) | 0;
                                    hi = (hi + Math.imul(ah0, bh6)) | 0;
                                    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                                    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
                                    w6 &= 0x3ffffff;
                                    /* k = 7 */
                                    lo = Math.imul(al7, bl0);
                                    mid = Math.imul(al7, bh0);
                                    mid = (mid + Math.imul(ah7, bl0)) | 0;
                                    hi = Math.imul(ah7, bh0);
                                    lo = (lo + Math.imul(al6, bl1)) | 0;
                                    mid = (mid + Math.imul(al6, bh1)) | 0;
                                    mid = (mid + Math.imul(ah6, bl1)) | 0;
                                    hi = (hi + Math.imul(ah6, bh1)) | 0;
                                    lo = (lo + Math.imul(al5, bl2)) | 0;
                                    mid = (mid + Math.imul(al5, bh2)) | 0;
                                    mid = (mid + Math.imul(ah5, bl2)) | 0;
                                    hi = (hi + Math.imul(ah5, bh2)) | 0;
                                    lo = (lo + Math.imul(al4, bl3)) | 0;
                                    mid = (mid + Math.imul(al4, bh3)) | 0;
                                    mid = (mid + Math.imul(ah4, bl3)) | 0;
                                    hi = (hi + Math.imul(ah4, bh3)) | 0;
                                    lo = (lo + Math.imul(al3, bl4)) | 0;
                                    mid = (mid + Math.imul(al3, bh4)) | 0;
                                    mid = (mid + Math.imul(ah3, bl4)) | 0;
                                    hi = (hi + Math.imul(ah3, bh4)) | 0;
                                    lo = (lo + Math.imul(al2, bl5)) | 0;
                                    mid = (mid + Math.imul(al2, bh5)) | 0;
                                    mid = (mid + Math.imul(ah2, bl5)) | 0;
                                    hi = (hi + Math.imul(ah2, bh5)) | 0;
                                    lo = (lo + Math.imul(al1, bl6)) | 0;
                                    mid = (mid + Math.imul(al1, bh6)) | 0;
                                    mid = (mid + Math.imul(ah1, bl6)) | 0;
                                    hi = (hi + Math.imul(ah1, bh6)) | 0;
                                    lo = (lo + Math.imul(al0, bl7)) | 0;
                                    mid = (mid + Math.imul(al0, bh7)) | 0;
                                    mid = (mid + Math.imul(ah0, bl7)) | 0;
                                    hi = (hi + Math.imul(ah0, bh7)) | 0;
                                    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                                    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
                                    w7 &= 0x3ffffff;
                                    /* k = 8 */
                                    lo = Math.imul(al8, bl0);
                                    mid = Math.imul(al8, bh0);
                                    mid = (mid + Math.imul(ah8, bl0)) | 0;
                                    hi = Math.imul(ah8, bh0);
                                    lo = (lo + Math.imul(al7, bl1)) | 0;
                                    mid = (mid + Math.imul(al7, bh1)) | 0;
                                    mid = (mid + Math.imul(ah7, bl1)) | 0;
                                    hi = (hi + Math.imul(ah7, bh1)) | 0;
                                    lo = (lo + Math.imul(al6, bl2)) | 0;
                                    mid = (mid + Math.imul(al6, bh2)) | 0;
                                    mid = (mid + Math.imul(ah6, bl2)) | 0;
                                    hi = (hi + Math.imul(ah6, bh2)) | 0;
                                    lo = (lo + Math.imul(al5, bl3)) | 0;
                                    mid = (mid + Math.imul(al5, bh3)) | 0;
                                    mid = (mid + Math.imul(ah5, bl3)) | 0;
                                    hi = (hi + Math.imul(ah5, bh3)) | 0;
                                    lo = (lo + Math.imul(al4, bl4)) | 0;
                                    mid = (mid + Math.imul(al4, bh4)) | 0;
                                    mid = (mid + Math.imul(ah4, bl4)) | 0;
                                    hi = (hi + Math.imul(ah4, bh4)) | 0;
                                    lo = (lo + Math.imul(al3, bl5)) | 0;
                                    mid = (mid + Math.imul(al3, bh5)) | 0;
                                    mid = (mid + Math.imul(ah3, bl5)) | 0;
                                    hi = (hi + Math.imul(ah3, bh5)) | 0;
                                    lo = (lo + Math.imul(al2, bl6)) | 0;
                                    mid = (mid + Math.imul(al2, bh6)) | 0;
                                    mid = (mid + Math.imul(ah2, bl6)) | 0;
                                    hi = (hi + Math.imul(ah2, bh6)) | 0;
                                    lo = (lo + Math.imul(al1, bl7)) | 0;
                                    mid = (mid + Math.imul(al1, bh7)) | 0;
                                    mid = (mid + Math.imul(ah1, bl7)) | 0;
                                    hi = (hi + Math.imul(ah1, bh7)) | 0;
                                    lo = (lo + Math.imul(al0, bl8)) | 0;
                                    mid = (mid + Math.imul(al0, bh8)) | 0;
                                    mid = (mid + Math.imul(ah0, bl8)) | 0;
                                    hi = (hi + Math.imul(ah0, bh8)) | 0;
                                    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                                    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
                                    w8 &= 0x3ffffff;
                                    /* k = 9 */
                                    lo = Math.imul(al9, bl0);
                                    mid = Math.imul(al9, bh0);
                                    mid = (mid + Math.imul(ah9, bl0)) | 0;
                                    hi = Math.imul(ah9, bh0);
                                    lo = (lo + Math.imul(al8, bl1)) | 0;
                                    mid = (mid + Math.imul(al8, bh1)) | 0;
                                    mid = (mid + Math.imul(ah8, bl1)) | 0;
                                    hi = (hi + Math.imul(ah8, bh1)) | 0;
                                    lo = (lo + Math.imul(al7, bl2)) | 0;
                                    mid = (mid + Math.imul(al7, bh2)) | 0;
                                    mid = (mid + Math.imul(ah7, bl2)) | 0;
                                    hi = (hi + Math.imul(ah7, bh2)) | 0;
                                    lo = (lo + Math.imul(al6, bl3)) | 0;
                                    mid = (mid + Math.imul(al6, bh3)) | 0;
                                    mid = (mid + Math.imul(ah6, bl3)) | 0;
                                    hi = (hi + Math.imul(ah6, bh3)) | 0;
                                    lo = (lo + Math.imul(al5, bl4)) | 0;
                                    mid = (mid + Math.imul(al5, bh4)) | 0;
                                    mid = (mid + Math.imul(ah5, bl4)) | 0;
                                    hi = (hi + Math.imul(ah5, bh4)) | 0;
                                    lo = (lo + Math.imul(al4, bl5)) | 0;
                                    mid = (mid + Math.imul(al4, bh5)) | 0;
                                    mid = (mid + Math.imul(ah4, bl5)) | 0;
                                    hi = (hi + Math.imul(ah4, bh5)) | 0;
                                    lo = (lo + Math.imul(al3, bl6)) | 0;
                                    mid = (mid + Math.imul(al3, bh6)) | 0;
                                    mid = (mid + Math.imul(ah3, bl6)) | 0;
                                    hi = (hi + Math.imul(ah3, bh6)) | 0;
                                    lo = (lo + Math.imul(al2, bl7)) | 0;
                                    mid = (mid + Math.imul(al2, bh7)) | 0;
                                    mid = (mid + Math.imul(ah2, bl7)) | 0;
                                    hi = (hi + Math.imul(ah2, bh7)) | 0;
                                    lo = (lo + Math.imul(al1, bl8)) | 0;
                                    mid = (mid + Math.imul(al1, bh8)) | 0;
                                    mid = (mid + Math.imul(ah1, bl8)) | 0;
                                    hi = (hi + Math.imul(ah1, bh8)) | 0;
                                    lo = (lo + Math.imul(al0, bl9)) | 0;
                                    mid = (mid + Math.imul(al0, bh9)) | 0;
                                    mid = (mid + Math.imul(ah0, bl9)) | 0;
                                    hi = (hi + Math.imul(ah0, bh9)) | 0;
                                    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                                    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
                                    w9 &= 0x3ffffff;
                                    /* k = 10 */
                                    lo = Math.imul(al9, bl1);
                                    mid = Math.imul(al9, bh1);
                                    mid = (mid + Math.imul(ah9, bl1)) | 0;
                                    hi = Math.imul(ah9, bh1);
                                    lo = (lo + Math.imul(al8, bl2)) | 0;
                                    mid = (mid + Math.imul(al8, bh2)) | 0;
                                    mid = (mid + Math.imul(ah8, bl2)) | 0;
                                    hi = (hi + Math.imul(ah8, bh2)) | 0;
                                    lo = (lo + Math.imul(al7, bl3)) | 0;
                                    mid = (mid + Math.imul(al7, bh3)) | 0;
                                    mid = (mid + Math.imul(ah7, bl3)) | 0;
                                    hi = (hi + Math.imul(ah7, bh3)) | 0;
                                    lo = (lo + Math.imul(al6, bl4)) | 0;
                                    mid = (mid + Math.imul(al6, bh4)) | 0;
                                    mid = (mid + Math.imul(ah6, bl4)) | 0;
                                    hi = (hi + Math.imul(ah6, bh4)) | 0;
                                    lo = (lo + Math.imul(al5, bl5)) | 0;
                                    mid = (mid + Math.imul(al5, bh5)) | 0;
                                    mid = (mid + Math.imul(ah5, bl5)) | 0;
                                    hi = (hi + Math.imul(ah5, bh5)) | 0;
                                    lo = (lo + Math.imul(al4, bl6)) | 0;
                                    mid = (mid + Math.imul(al4, bh6)) | 0;
                                    mid = (mid + Math.imul(ah4, bl6)) | 0;
                                    hi = (hi + Math.imul(ah4, bh6)) | 0;
                                    lo = (lo + Math.imul(al3, bl7)) | 0;
                                    mid = (mid + Math.imul(al3, bh7)) | 0;
                                    mid = (mid + Math.imul(ah3, bl7)) | 0;
                                    hi = (hi + Math.imul(ah3, bh7)) | 0;
                                    lo = (lo + Math.imul(al2, bl8)) | 0;
                                    mid = (mid + Math.imul(al2, bh8)) | 0;
                                    mid = (mid + Math.imul(ah2, bl8)) | 0;
                                    hi = (hi + Math.imul(ah2, bh8)) | 0;
                                    lo = (lo + Math.imul(al1, bl9)) | 0;
                                    mid = (mid + Math.imul(al1, bh9)) | 0;
                                    mid = (mid + Math.imul(ah1, bl9)) | 0;
                                    hi = (hi + Math.imul(ah1, bh9)) | 0;
                                    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                                    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
                                    w10 &= 0x3ffffff;
                                    /* k = 11 */
                                    lo = Math.imul(al9, bl2);
                                    mid = Math.imul(al9, bh2);
                                    mid = (mid + Math.imul(ah9, bl2)) | 0;
                                    hi = Math.imul(ah9, bh2);
                                    lo = (lo + Math.imul(al8, bl3)) | 0;
                                    mid = (mid + Math.imul(al8, bh3)) | 0;
                                    mid = (mid + Math.imul(ah8, bl3)) | 0;
                                    hi = (hi + Math.imul(ah8, bh3)) | 0;
                                    lo = (lo + Math.imul(al7, bl4)) | 0;
                                    mid = (mid + Math.imul(al7, bh4)) | 0;
                                    mid = (mid + Math.imul(ah7, bl4)) | 0;
                                    hi = (hi + Math.imul(ah7, bh4)) | 0;
                                    lo = (lo + Math.imul(al6, bl5)) | 0;
                                    mid = (mid + Math.imul(al6, bh5)) | 0;
                                    mid = (mid + Math.imul(ah6, bl5)) | 0;
                                    hi = (hi + Math.imul(ah6, bh5)) | 0;
                                    lo = (lo + Math.imul(al5, bl6)) | 0;
                                    mid = (mid + Math.imul(al5, bh6)) | 0;
                                    mid = (mid + Math.imul(ah5, bl6)) | 0;
                                    hi = (hi + Math.imul(ah5, bh6)) | 0;
                                    lo = (lo + Math.imul(al4, bl7)) | 0;
                                    mid = (mid + Math.imul(al4, bh7)) | 0;
                                    mid = (mid + Math.imul(ah4, bl7)) | 0;
                                    hi = (hi + Math.imul(ah4, bh7)) | 0;
                                    lo = (lo + Math.imul(al3, bl8)) | 0;
                                    mid = (mid + Math.imul(al3, bh8)) | 0;
                                    mid = (mid + Math.imul(ah3, bl8)) | 0;
                                    hi = (hi + Math.imul(ah3, bh8)) | 0;
                                    lo = (lo + Math.imul(al2, bl9)) | 0;
                                    mid = (mid + Math.imul(al2, bh9)) | 0;
                                    mid = (mid + Math.imul(ah2, bl9)) | 0;
                                    hi = (hi + Math.imul(ah2, bh9)) | 0;
                                    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                                    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
                                    w11 &= 0x3ffffff;
                                    /* k = 12 */
                                    lo = Math.imul(al9, bl3);
                                    mid = Math.imul(al9, bh3);
                                    mid = (mid + Math.imul(ah9, bl3)) | 0;
                                    hi = Math.imul(ah9, bh3);
                                    lo = (lo + Math.imul(al8, bl4)) | 0;
                                    mid = (mid + Math.imul(al8, bh4)) | 0;
                                    mid = (mid + Math.imul(ah8, bl4)) | 0;
                                    hi = (hi + Math.imul(ah8, bh4)) | 0;
                                    lo = (lo + Math.imul(al7, bl5)) | 0;
                                    mid = (mid + Math.imul(al7, bh5)) | 0;
                                    mid = (mid + Math.imul(ah7, bl5)) | 0;
                                    hi = (hi + Math.imul(ah7, bh5)) | 0;
                                    lo = (lo + Math.imul(al6, bl6)) | 0;
                                    mid = (mid + Math.imul(al6, bh6)) | 0;
                                    mid = (mid + Math.imul(ah6, bl6)) | 0;
                                    hi = (hi + Math.imul(ah6, bh6)) | 0;
                                    lo = (lo + Math.imul(al5, bl7)) | 0;
                                    mid = (mid + Math.imul(al5, bh7)) | 0;
                                    mid = (mid + Math.imul(ah5, bl7)) | 0;
                                    hi = (hi + Math.imul(ah5, bh7)) | 0;
                                    lo = (lo + Math.imul(al4, bl8)) | 0;
                                    mid = (mid + Math.imul(al4, bh8)) | 0;
                                    mid = (mid + Math.imul(ah4, bl8)) | 0;
                                    hi = (hi + Math.imul(ah4, bh8)) | 0;
                                    lo = (lo + Math.imul(al3, bl9)) | 0;
                                    mid = (mid + Math.imul(al3, bh9)) | 0;
                                    mid = (mid + Math.imul(ah3, bl9)) | 0;
                                    hi = (hi + Math.imul(ah3, bh9)) | 0;
                                    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                                    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
                                    w12 &= 0x3ffffff;
                                    /* k = 13 */
                                    lo = Math.imul(al9, bl4);
                                    mid = Math.imul(al9, bh4);
                                    mid = (mid + Math.imul(ah9, bl4)) | 0;
                                    hi = Math.imul(ah9, bh4);
                                    lo = (lo + Math.imul(al8, bl5)) | 0;
                                    mid = (mid + Math.imul(al8, bh5)) | 0;
                                    mid = (mid + Math.imul(ah8, bl5)) | 0;
                                    hi = (hi + Math.imul(ah8, bh5)) | 0;
                                    lo = (lo + Math.imul(al7, bl6)) | 0;
                                    mid = (mid + Math.imul(al7, bh6)) | 0;
                                    mid = (mid + Math.imul(ah7, bl6)) | 0;
                                    hi = (hi + Math.imul(ah7, bh6)) | 0;
                                    lo = (lo + Math.imul(al6, bl7)) | 0;
                                    mid = (mid + Math.imul(al6, bh7)) | 0;
                                    mid = (mid + Math.imul(ah6, bl7)) | 0;
                                    hi = (hi + Math.imul(ah6, bh7)) | 0;
                                    lo = (lo + Math.imul(al5, bl8)) | 0;
                                    mid = (mid + Math.imul(al5, bh8)) | 0;
                                    mid = (mid + Math.imul(ah5, bl8)) | 0;
                                    hi = (hi + Math.imul(ah5, bh8)) | 0;
                                    lo = (lo + Math.imul(al4, bl9)) | 0;
                                    mid = (mid + Math.imul(al4, bh9)) | 0;
                                    mid = (mid + Math.imul(ah4, bl9)) | 0;
                                    hi = (hi + Math.imul(ah4, bh9)) | 0;
                                    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                                    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
                                    w13 &= 0x3ffffff;
                                    /* k = 14 */
                                    lo = Math.imul(al9, bl5);
                                    mid = Math.imul(al9, bh5);
                                    mid = (mid + Math.imul(ah9, bl5)) | 0;
                                    hi = Math.imul(ah9, bh5);
                                    lo = (lo + Math.imul(al8, bl6)) | 0;
                                    mid = (mid + Math.imul(al8, bh6)) | 0;
                                    mid = (mid + Math.imul(ah8, bl6)) | 0;
                                    hi = (hi + Math.imul(ah8, bh6)) | 0;
                                    lo = (lo + Math.imul(al7, bl7)) | 0;
                                    mid = (mid + Math.imul(al7, bh7)) | 0;
                                    mid = (mid + Math.imul(ah7, bl7)) | 0;
                                    hi = (hi + Math.imul(ah7, bh7)) | 0;
                                    lo = (lo + Math.imul(al6, bl8)) | 0;
                                    mid = (mid + Math.imul(al6, bh8)) | 0;
                                    mid = (mid + Math.imul(ah6, bl8)) | 0;
                                    hi = (hi + Math.imul(ah6, bh8)) | 0;
                                    lo = (lo + Math.imul(al5, bl9)) | 0;
                                    mid = (mid + Math.imul(al5, bh9)) | 0;
                                    mid = (mid + Math.imul(ah5, bl9)) | 0;
                                    hi = (hi + Math.imul(ah5, bh9)) | 0;
                                    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                                    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
                                    w14 &= 0x3ffffff;
                                    /* k = 15 */
                                    lo = Math.imul(al9, bl6);
                                    mid = Math.imul(al9, bh6);
                                    mid = (mid + Math.imul(ah9, bl6)) | 0;
                                    hi = Math.imul(ah9, bh6);
                                    lo = (lo + Math.imul(al8, bl7)) | 0;
                                    mid = (mid + Math.imul(al8, bh7)) | 0;
                                    mid = (mid + Math.imul(ah8, bl7)) | 0;
                                    hi = (hi + Math.imul(ah8, bh7)) | 0;
                                    lo = (lo + Math.imul(al7, bl8)) | 0;
                                    mid = (mid + Math.imul(al7, bh8)) | 0;
                                    mid = (mid + Math.imul(ah7, bl8)) | 0;
                                    hi = (hi + Math.imul(ah7, bh8)) | 0;
                                    lo = (lo + Math.imul(al6, bl9)) | 0;
                                    mid = (mid + Math.imul(al6, bh9)) | 0;
                                    mid = (mid + Math.imul(ah6, bl9)) | 0;
                                    hi = (hi + Math.imul(ah6, bh9)) | 0;
                                    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                                    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
                                    w15 &= 0x3ffffff;
                                    /* k = 16 */
                                    lo = Math.imul(al9, bl7);
                                    mid = Math.imul(al9, bh7);
                                    mid = (mid + Math.imul(ah9, bl7)) | 0;
                                    hi = Math.imul(ah9, bh7);
                                    lo = (lo + Math.imul(al8, bl8)) | 0;
                                    mid = (mid + Math.imul(al8, bh8)) | 0;
                                    mid = (mid + Math.imul(ah8, bl8)) | 0;
                                    hi = (hi + Math.imul(ah8, bh8)) | 0;
                                    lo = (lo + Math.imul(al7, bl9)) | 0;
                                    mid = (mid + Math.imul(al7, bh9)) | 0;
                                    mid = (mid + Math.imul(ah7, bl9)) | 0;
                                    hi = (hi + Math.imul(ah7, bh9)) | 0;
                                    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                                    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
                                    w16 &= 0x3ffffff;
                                    /* k = 17 */
                                    lo = Math.imul(al9, bl8);
                                    mid = Math.imul(al9, bh8);
                                    mid = (mid + Math.imul(ah9, bl8)) | 0;
                                    hi = Math.imul(ah9, bh8);
                                    lo = (lo + Math.imul(al8, bl9)) | 0;
                                    mid = (mid + Math.imul(al8, bh9)) | 0;
                                    mid = (mid + Math.imul(ah8, bl9)) | 0;
                                    hi = (hi + Math.imul(ah8, bh9)) | 0;
                                    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                                    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
                                    w17 &= 0x3ffffff;
                                    /* k = 18 */
                                    lo = Math.imul(al9, bl9);
                                    mid = Math.imul(al9, bh9);
                                    mid = (mid + Math.imul(ah9, bl9)) | 0;
                                    hi = Math.imul(ah9, bh9);
                                    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                                    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
                                    w18 &= 0x3ffffff;
                                    o[0] = w0;
                                    o[1] = w1;
                                    o[2] = w2;
                                    o[3] = w3;
                                    o[4] = w4;
                                    o[5] = w5;
                                    o[6] = w6;
                                    o[7] = w7;
                                    o[8] = w8;
                                    o[9] = w9;
                                    o[10] = w10;
                                    o[11] = w11;
                                    o[12] = w12;
                                    o[13] = w13;
                                    o[14] = w14;
                                    o[15] = w15;
                                    o[16] = w16;
                                    o[17] = w17;
                                    o[18] = w18;
                                    if (c !== 0) {
                                        o[19] = c;
                                        out.length++;
                                    }
                                    return out;
                                };

                                // Polyfill comb
                                if (!Math.imul) {
                                    comb10MulTo = smallMulTo;
                                }

                                function bigMulTo(self, num, out) {
                                    out.negative = num.negative ^ self.negative;
                                    out.length = self.length + num.length;

                                    var carry = 0;
                                    var hncarry = 0;
                                    for (var k = 0; k < out.length - 1; k++) {
                                        // Sum all words with the same `i + j = k` and accumulate `ncarry`,
                                        // note that ncarry could be >= 0x3ffffff
                                        var ncarry = hncarry;
                                        hncarry = 0;
                                        var rword = carry & 0x3ffffff;
                                        var maxJ = Math.min(k, num.length - 1);
                                        for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
                                            var i = k - j;
                                            var a = self.words[i] | 0;
                                            var b = num.words[j] | 0;
                                            var r = a * b;

                                            var lo = r & 0x3ffffff;
                                            ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
                                            lo = (lo + rword) | 0;
                                            rword = lo & 0x3ffffff;
                                            ncarry = (ncarry + (lo >>> 26)) | 0;

                                            hncarry += ncarry >>> 26;
                                            ncarry &= 0x3ffffff;
                                        }
                                        out.words[k] = rword;
                                        carry = ncarry;
                                        ncarry = hncarry;
                                    }
                                    if (carry !== 0) {
                                        out.words[k] = carry;
                                    } else {
                                        out.length--;
                                    }

                                    return out.strip();
                                }

                                function jumboMulTo(self, num, out) {
                                    var fftm = new FFTM();
                                    return fftm.mulp(self, num, out);
                                }

                                BN.prototype.mulTo = function mulTo(num, out) {
                                    var res;
                                    var len = this.length + num.length;
                                    if (this.length === 10 && num.length === 10) {
                                        res = comb10MulTo(this, num, out);
                                    } else if (len < 63) {
                                        res = smallMulTo(this, num, out);
                                    } else if (len < 1024) {
                                        res = bigMulTo(this, num, out);
                                    } else {
                                        res = jumboMulTo(this, num, out);
                                    }

                                    return res;
                                };

                                // Cooley-Tukey algorithm for FFT
                                // slightly revisited to rely on looping instead of recursion

                                function FFTM(x, y) {
                                    this.x = x;
                                    this.y = y;
                                }

                                FFTM.prototype.makeRBT = function makeRBT(N) {
                                    var t = new Array(N);
                                    var l = BN.prototype._countBits(N) - 1;
                                    for (var i = 0; i < N; i++) {
                                        t[i] = this.revBin(i, l, N);
                                    }

                                    return t;
                                };

                                // Returns binary-reversed representation of `x`
                                FFTM.prototype.revBin = function revBin(x, l, N) {
                                    if (x === 0 || x === N - 1) return x;

                                    var rb = 0;
                                    for (var i = 0; i < l; i++) {
                                        rb |= (x & 1) << (l - i - 1);
                                        x >>= 1;
                                    }

                                    return rb;
                                };

                                // Performs "tweedling" phase, therefore 'emulating'
                                // behaviour of the recursive algorithm
                                FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
                                    for (var i = 0; i < N; i++) {
                                        rtws[i] = rws[rbt[i]];
                                        itws[i] = iws[rbt[i]];
                                    }
                                };

                                FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
                                    this.permute(rbt, rws, iws, rtws, itws, N);

                                    for (var s = 1; s < N; s <<= 1) {
                                        var l = s << 1;

                                        var rtwdf = Math.cos(2 * Math.PI / l);
                                        var itwdf = Math.sin(2 * Math.PI / l);

                                        for (var p = 0; p < N; p += l) {
                                            var rtwdf_ = rtwdf;
                                            var itwdf_ = itwdf;

                                            for (var j = 0; j < s; j++) {
                                                var re = rtws[p + j];
                                                var ie = itws[p + j];

                                                var ro = rtws[p + j + s];
                                                var io = itws[p + j + s];

                                                var rx = rtwdf_ * ro - itwdf_ * io;

                                                io = rtwdf_ * io + itwdf_ * ro;
                                                ro = rx;

                                                rtws[p + j] = re + ro;
                                                itws[p + j] = ie + io;

                                                rtws[p + j + s] = re - ro;
                                                itws[p + j + s] = ie - io;

                                                /* jshint maxdepth : false */
                                                if (j !== l) {
                                                    rx = rtwdf * rtwdf_ - itwdf * itwdf_;

                                                    itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                                                    rtwdf_ = rx;
                                                }
                                            }
                                        }
                                    }
                                };

                                FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
                                    var N = Math.max(m, n) | 1;
                                    var odd = N & 1;
                                    var i = 0;
                                    for (N = N / 2 | 0; N; N = N >>> 1) {
                                        i++;
                                    }

                                    return 1 << i + 1 + odd;
                                };

                                FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
                                    if (N <= 1) return;

                                    for (var i = 0; i < N / 2; i++) {
                                        var t = rws[i];

                                        rws[i] = rws[N - i - 1];
                                        rws[N - i - 1] = t;

                                        t = iws[i];

                                        iws[i] = -iws[N - i - 1];
                                        iws[N - i - 1] = -t;
                                    }
                                };

                                FFTM.prototype.normalize13b = function normalize13b(ws, N) {
                                    var carry = 0;
                                    for (var i = 0; i < N / 2; i++) {
                                        var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
                                            Math.round(ws[2 * i] / N) +
                                            carry;

                                        ws[i] = w & 0x3ffffff;

                                        if (w < 0x4000000) {
                                            carry = 0;
                                        } else {
                                            carry = w / 0x4000000 | 0;
                                        }
                                    }

                                    return ws;
                                };

                                FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
                                    var carry = 0;
                                    for (var i = 0; i < len; i++) {
                                        carry = carry + (ws[i] | 0);

                                        rws[2 * i] = carry & 0x1fff;
                                        carry = carry >>> 13;
                                        rws[2 * i + 1] = carry & 0x1fff;
                                        carry = carry >>> 13;
                                    }

                                    // Pad with zeroes
                                    for (i = 2 * len; i < N; ++i) {
                                        rws[i] = 0;
                                    }

                                    assert(carry === 0);
                                    assert((carry & ~0x1fff) === 0);
                                };

                                FFTM.prototype.stub = function stub(N) {
                                    var ph = new Array(N);
                                    for (var i = 0; i < N; i++) {
                                        ph[i] = 0;
                                    }

                                    return ph;
                                };

                                FFTM.prototype.mulp = function mulp(x, y, out) {
                                    var N = 2 * this.guessLen13b(x.length, y.length);

                                    var rbt = this.makeRBT(N);

                                    var _ = this.stub(N);

                                    var rws = new Array(N);
                                    var rwst = new Array(N);
                                    var iwst = new Array(N);

                                    var nrws = new Array(N);
                                    var nrwst = new Array(N);
                                    var niwst = new Array(N);

                                    var rmws = out.words;
                                    rmws.length = N;

                                    this.convert13b(x.words, x.length, rws, N);
                                    this.convert13b(y.words, y.length, nrws, N);

                                    this.transform(rws, _, rwst, iwst, N, rbt);
                                    this.transform(nrws, _, nrwst, niwst, N, rbt);

                                    for (var i = 0; i < N; i++) {
                                        var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
                                        iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
                                        rwst[i] = rx;
                                    }

                                    this.conjugate(rwst, iwst, N);
                                    this.transform(rwst, iwst, rmws, _, N, rbt);
                                    this.conjugate(rmws, _, N);
                                    this.normalize13b(rmws, N);

                                    out.negative = x.negative ^ y.negative;
                                    out.length = x.length + y.length;
                                    return out.strip();
                                };

                                // Multiply `this` by `num`
                                BN.prototype.mul = function mul(num) {
                                    var out = new BN(null);
                                    out.words = new Array(this.length + num.length);
                                    return this.mulTo(num, out);
                                };

                                // Multiply employing FFT
                                BN.prototype.mulf = function mulf(num) {
                                    var out = new BN(null);
                                    out.words = new Array(this.length + num.length);
                                    return jumboMulTo(this, num, out);
                                };

                                // In-place Multiplication
                                BN.prototype.imul = function imul(num) {
                                    return this.clone().mulTo(num, this);
                                };

                                BN.prototype.imuln = function imuln(num) {
                                    assert(typeof num === 'number');
                                    assert(num < 0x4000000);

                                    // Carry
                                    var carry = 0;
                                    for (var i = 0; i < this.length; i++) {
                                        var w = (this.words[i] | 0) * num;
                                        var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
                                        carry >>= 26;
                                        carry += (w / 0x4000000) | 0;
                                        // NOTE: lo is 27bit maximum
                                        carry += lo >>> 26;
                                        this.words[i] = lo & 0x3ffffff;
                                    }

                                    if (carry !== 0) {
                                        this.words[i] = carry;
                                        this.length++;
                                    }

                                    return this;
                                };

                                BN.prototype.muln = function muln(num) {
                                    return this.clone().imuln(num);
                                };

                                // `this` * `this`
                                BN.prototype.sqr = function sqr() {
                                    return this.mul(this);
                                };

                                // `this` * `this` in-place
                                BN.prototype.isqr = function isqr() {
                                    return this.imul(this.clone());
                                };

                                // Math.pow(`this`, `num`)
                                BN.prototype.pow = function pow(num) {
                                    var w = toBitArray(num);
                                    if (w.length === 0) return new BN(1);

                                    // Skip leading zeroes
                                    var res = this;
                                    for (var i = 0; i < w.length; i++, res = res.sqr()) {
                                        if (w[i] !== 0) break;
                                    }

                                    if (++i < w.length) {
                                        for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
                                            if (w[i] === 0) continue;

                                            res = res.mul(q);
                                        }
                                    }

                                    return res;
                                };

                                // Shift-left in-place
                                BN.prototype.iushln = function iushln(bits) {
                                    assert(typeof bits === 'number' && bits >= 0);
                                    var r = bits % 26;
                                    var s = (bits - r) / 26;
                                    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
                                    var i;

                                    if (r !== 0) {
                                        var carry = 0;

                                        for (i = 0; i < this.length; i++) {
                                            var newCarry = this.words[i] & carryMask;
                                            var c = ((this.words[i] | 0) - newCarry) << r;
                                            this.words[i] = c | carry;
                                            carry = newCarry >>> (26 - r);
                                        }

                                        if (carry) {
                                            this.words[i] = carry;
                                            this.length++;
                                        }
                                    }

                                    if (s !== 0) {
                                        for (i = this.length - 1; i >= 0; i--) {
                                            this.words[i + s] = this.words[i];
                                        }

                                        for (i = 0; i < s; i++) {
                                            this.words[i] = 0;
                                        }

                                        this.length += s;
                                    }

                                    return this.strip();
                                };

                                BN.prototype.ishln = function ishln(bits) {
                                    // TODO(indutny): implement me
                                    assert(this.negative === 0);
                                    return this.iushln(bits);
                                };

                                // Shift-right in-place
                                // NOTE: `hint` is a lowest bit before trailing zeroes
                                // NOTE: if `extended` is present - it will be filled with destroyed bits
                                BN.prototype.iushrn = function iushrn(bits, hint, extended) {
                                    assert(typeof bits === 'number' && bits >= 0);
                                    var h;
                                    if (hint) {
                                        h = (hint - (hint % 26)) / 26;
                                    } else {
                                        h = 0;
                                    }

                                    var r = bits % 26;
                                    var s = Math.min((bits - r) / 26, this.length);
                                    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
                                    var maskedWords = extended;

                                    h -= s;
                                    h = Math.max(0, h);

                                    // Extended mode, copy masked part
                                    if (maskedWords) {
                                        for (var i = 0; i < s; i++) {
                                            maskedWords.words[i] = this.words[i];
                                        }
                                        maskedWords.length = s;
                                    }

                                    if (s === 0) {
                                        // No-op, we should not move anything at all
                                    } else if (this.length > s) {
                                        this.length -= s;
                                        for (i = 0; i < this.length; i++) {
                                            this.words[i] = this.words[i + s];
                                        }
                                    } else {
                                        this.words[0] = 0;
                                        this.length = 1;
                                    }

                                    var carry = 0;
                                    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
                                        var word = this.words[i] | 0;
                                        this.words[i] = (carry << (26 - r)) | (word >>> r);
                                        carry = word & mask;
                                    }

                                    // Push carried bits as a mask
                                    if (maskedWords && carry !== 0) {
                                        maskedWords.words[maskedWords.length++] = carry;
                                    }

                                    if (this.length === 0) {
                                        this.words[0] = 0;
                                        this.length = 1;
                                    }

                                    return this.strip();
                                };

                                BN.prototype.ishrn = function ishrn(bits, hint, extended) {
                                    // TODO(indutny): implement me
                                    assert(this.negative === 0);
                                    return this.iushrn(bits, hint, extended);
                                };

                                // Shift-left
                                BN.prototype.shln = function shln(bits) {
                                    return this.clone().ishln(bits);
                                };

                                BN.prototype.ushln = function ushln(bits) {
                                    return this.clone().iushln(bits);
                                };

                                // Shift-right
                                BN.prototype.shrn = function shrn(bits) {
                                    return this.clone().ishrn(bits);
                                };

                                BN.prototype.ushrn = function ushrn(bits) {
                                    return this.clone().iushrn(bits);
                                };

                                // Test if n bit is set
                                BN.prototype.testn = function testn(bit) {
                                    assert(typeof bit === 'number' && bit >= 0);
                                    var r = bit % 26;
                                    var s = (bit - r) / 26;
                                    var q = 1 << r;

                                    // Fast case: bit is much higher than all existing words
                                    if (this.length <= s) return false;

                                    // Check bit and return
                                    var w = this.words[s];

                                    return !!(w & q);
                                };

                                // Return only lowers bits of number (in-place)
                                BN.prototype.imaskn = function imaskn(bits) {
                                    assert(typeof bits === 'number' && bits >= 0);
                                    var r = bits % 26;
                                    var s = (bits - r) / 26;

                                    assert(this.negative === 0, 'imaskn works only with positive numbers');

                                    if (this.length <= s) {
                                        return this;
                                    }

                                    if (r !== 0) {
                                        s++;
                                    }
                                    this.length = Math.min(s, this.length);

                                    if (r !== 0) {
                                        var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
                                        this.words[this.length - 1] &= mask;
                                    }

                                    return this.strip();
                                };

                                // Return only lowers bits of number
                                BN.prototype.maskn = function maskn(bits) {
                                    return this.clone().imaskn(bits);
                                };

                                // Add plain number `num` to `this`
                                BN.prototype.iaddn = function iaddn(num) {
                                    assert(typeof num === 'number');
                                    assert(num < 0x4000000);
                                    if (num < 0) return this.isubn(-num);

                                    // Possible sign change
                                    if (this.negative !== 0) {
                                        if (this.length === 1 && (this.words[0] | 0) < num) {
                                            this.words[0] = num - (this.words[0] | 0);
                                            this.negative = 0;
                                            return this;
                                        }

                                        this.negative = 0;
                                        this.isubn(num);
                                        this.negative = 1;
                                        return this;
                                    }

                                    // Add without checks
                                    return this._iaddn(num);
                                };

                                BN.prototype._iaddn = function _iaddn(num) {
                                    this.words[0] += num;

                                    // Carry
                                    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
                                        this.words[i] -= 0x4000000;
                                        if (i === this.length - 1) {
                                            this.words[i + 1] = 1;
                                        } else {
                                            this.words[i + 1]++;
                                        }
                                    }
                                    this.length = Math.max(this.length, i + 1);

                                    return this;
                                };

                                // Subtract plain number `num` from `this`
                                BN.prototype.isubn = function isubn(num) {
                                    assert(typeof num === 'number');
                                    assert(num < 0x4000000);
                                    if (num < 0) return this.iaddn(-num);

                                    if (this.negative !== 0) {
                                        this.negative = 0;
                                        this.iaddn(num);
                                        this.negative = 1;
                                        return this;
                                    }

                                    this.words[0] -= num;

                                    if (this.length === 1 && this.words[0] < 0) {
                                        this.words[0] = -this.words[0];
                                        this.negative = 1;
                                    } else {
                                        // Carry
                                        for (var i = 0; i < this.length && this.words[i] < 0; i++) {
                                            this.words[i] += 0x4000000;
                                            this.words[i + 1] -= 1;
                                        }
                                    }

                                    return this.strip();
                                };

                                BN.prototype.addn = function addn(num) {
                                    return this.clone().iaddn(num);
                                };

                                BN.prototype.subn = function subn(num) {
                                    return this.clone().isubn(num);
                                };

                                BN.prototype.iabs = function iabs() {
                                    this.negative = 0;

                                    return this;
                                };

                                BN.prototype.abs = function abs() {
                                    return this.clone().iabs();
                                };

                                BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
                                    var len = num.length + shift;
                                    var i;

                                    this._expand(len);

                                    var w;
                                    var carry = 0;
                                    for (i = 0; i < num.length; i++) {
                                        w = (this.words[i + shift] | 0) + carry;
                                        var right = (num.words[i] | 0) * mul;
                                        w -= right & 0x3ffffff;
                                        carry = (w >> 26) - ((right / 0x4000000) | 0);
                                        this.words[i + shift] = w & 0x3ffffff;
                                    }
                                    for (; i < this.length - shift; i++) {
                                        w = (this.words[i + shift] | 0) + carry;
                                        carry = w >> 26;
                                        this.words[i + shift] = w & 0x3ffffff;
                                    }

                                    if (carry === 0) return this.strip();

                                    // Subtraction overflow
                                    assert(carry === -1);
                                    carry = 0;
                                    for (i = 0; i < this.length; i++) {
                                        w = -(this.words[i] | 0) + carry;
                                        carry = w >> 26;
                                        this.words[i] = w & 0x3ffffff;
                                    }
                                    this.negative = 1;

                                    return this.strip();
                                };

                                BN.prototype._wordDiv = function _wordDiv(num, mode) {
                                    var shift = this.length - num.length;

                                    var a = this.clone();
                                    var b = num;

                                    // Normalize
                                    var bhi = b.words[b.length - 1] | 0;
                                    var bhiBits = this._countBits(bhi);
                                    shift = 26 - bhiBits;
                                    if (shift !== 0) {
                                        b = b.ushln(shift);
                                        a.iushln(shift);
                                        bhi = b.words[b.length - 1] | 0;
                                    }

                                    // Initialize quotient
                                    var m = a.length - b.length;
                                    var q;

                                    if (mode !== 'mod') {
                                        q = new BN(null);
                                        q.length = m + 1;
                                        q.words = new Array(q.length);
                                        for (var i = 0; i < q.length; i++) {
                                            q.words[i] = 0;
                                        }
                                    }

                                    var diff = a.clone()._ishlnsubmul(b, 1, m);
                                    if (diff.negative === 0) {
                                        a = diff;
                                        if (q) {
                                            q.words[m] = 1;
                                        }
                                    }

                                    for (var j = m - 1; j >= 0; j--) {
                                        var qj = (a.words[b.length + j] | 0) * 0x4000000 +
                                            (a.words[b.length + j - 1] | 0);

                                        // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
                                        // (0x7ffffff)
                                        qj = Math.min((qj / bhi) | 0, 0x3ffffff);

                                        a._ishlnsubmul(b, qj, j);
                                        while (a.negative !== 0) {
                                            qj--;
                                            a.negative = 0;
                                            a._ishlnsubmul(b, 1, j);
                                            if (!a.isZero()) {
                                                a.negative ^= 1;
                                            }
                                        }
                                        if (q) {
                                            q.words[j] = qj;
                                        }
                                    }
                                    if (q) {
                                        q.strip();
                                    }
                                    a.strip();

                                    // Denormalize
                                    if (mode !== 'div' && shift !== 0) {
                                        a.iushrn(shift);
                                    }

                                    return {
                                        div: q || null,
                                        mod: a
                                    };
                                };

                                // NOTE: 1) `mode` can be set to `mod` to request mod only,
                                //       to `div` to request div only, or be absent to
                                //       request both div & mod
                                //       2) `positive` is true if unsigned mod is requested
                                BN.prototype.divmod = function divmod(num, mode, positive) {
                                    assert(!num.isZero());

                                    if (this.isZero()) {
                                        return {
                                            div: new BN(0),
                                            mod: new BN(0)
                                        };
                                    }

                                    var div, mod, res;
                                    if (this.negative !== 0 && num.negative === 0) {
                                        res = this.neg().divmod(num, mode);

                                        if (mode !== 'mod') {
                                            div = res.div.neg();
                                        }

                                        if (mode !== 'div') {
                                            mod = res.mod.neg();
                                            if (positive && mod.negative !== 0) {
                                                mod.iadd(num);
                                            }
                                        }

                                        return {
                                            div: div,
                                            mod: mod
                                        };
                                    }

                                    if (this.negative === 0 && num.negative !== 0) {
                                        res = this.divmod(num.neg(), mode);

                                        if (mode !== 'mod') {
                                            div = res.div.neg();
                                        }

                                        return {
                                            div: div,
                                            mod: res.mod
                                        };
                                    }

                                    if ((this.negative & num.negative) !== 0) {
                                        res = this.neg().divmod(num.neg(), mode);

                                        if (mode !== 'div') {
                                            mod = res.mod.neg();
                                            if (positive && mod.negative !== 0) {
                                                mod.isub(num);
                                            }
                                        }

                                        return {
                                            div: res.div,
                                            mod: mod
                                        };
                                    }

                                    // Both numbers are positive at this point

                                    // Strip both numbers to approximate shift value
                                    if (num.length > this.length || this.cmp(num) < 0) {
                                        return {
                                            div: new BN(0),
                                            mod: this
                                        };
                                    }

                                    // Very short reduction
                                    if (num.length === 1) {
                                        if (mode === 'div') {
                                            return {
                                                div: this.divn(num.words[0]),
                                                mod: null
                                            };
                                        }

                                        if (mode === 'mod') {
                                            return {
                                                div: null,
                                                mod: new BN(this.modn(num.words[0]))
                                            };
                                        }

                                        return {
                                            div: this.divn(num.words[0]),
                                            mod: new BN(this.modn(num.words[0]))
                                        };
                                    }

                                    return this._wordDiv(num, mode);
                                };

                                // Find `this` / `num`
                                BN.prototype.div = function div(num) {
                                    return this.divmod(num, 'div', false).div;
                                };

                                // Find `this` % `num`
                                BN.prototype.mod = function mod(num) {
                                    return this.divmod(num, 'mod', false).mod;
                                };

                                BN.prototype.umod = function umod(num) {
                                    return this.divmod(num, 'mod', true).mod;
                                };

                                // Find Round(`this` / `num`)
                                BN.prototype.divRound = function divRound(num) {
                                    var dm = this.divmod(num);

                                    // Fast case - exact division
                                    if (dm.mod.isZero()) return dm.div;

                                    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

                                    var half = num.ushrn(1);
                                    var r2 = num.andln(1);
                                    var cmp = mod.cmp(half);

                                    // Round down
                                    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

                                    // Round up
                                    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
                                };

                                BN.prototype.modn = function modn(num) {
                                    assert(num <= 0x3ffffff);
                                    var p = (1 << 26) % num;

                                    var acc = 0;
                                    for (var i = this.length - 1; i >= 0; i--) {
                                        acc = (p * acc + (this.words[i] | 0)) % num;
                                    }

                                    return acc;
                                };

                                // In-place division by number
                                BN.prototype.idivn = function idivn(num) {
                                    assert(num <= 0x3ffffff);

                                    var carry = 0;
                                    for (var i = this.length - 1; i >= 0; i--) {
                                        var w = (this.words[i] | 0) + carry * 0x4000000;
                                        this.words[i] = (w / num) | 0;
                                        carry = w % num;
                                    }

                                    return this.strip();
                                };

                                BN.prototype.divn = function divn(num) {
                                    return this.clone().idivn(num);
                                };

                                BN.prototype.egcd = function egcd(p) {
                                    assert(p.negative === 0);
                                    assert(!p.isZero());

                                    var x = this;
                                    var y = p.clone();

                                    if (x.negative !== 0) {
                                        x = x.umod(p);
                                    } else {
                                        x = x.clone();
                                    }

                                    // A * x + B * y = x
                                    var A = new BN(1);
                                    var B = new BN(0);

                                    // C * x + D * y = y
                                    var C = new BN(0);
                                    var D = new BN(1);

                                    var g = 0;

                                    while (x.isEven() && y.isEven()) {
                                        x.iushrn(1);
                                        y.iushrn(1);
                                        ++g;
                                    }

                                    var yp = y.clone();
                                    var xp = x.clone();

                                    while (!x.isZero()) {
                                        for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1) ;
                                        if (i > 0) {
                                            x.iushrn(i);
                                            while (i-- > 0) {
                                                if (A.isOdd() || B.isOdd()) {
                                                    A.iadd(yp);
                                                    B.isub(xp);
                                                }

                                                A.iushrn(1);
                                                B.iushrn(1);
                                            }
                                        }

                                        for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
                                        if (j > 0) {
                                            y.iushrn(j);
                                            while (j-- > 0) {
                                                if (C.isOdd() || D.isOdd()) {
                                                    C.iadd(yp);
                                                    D.isub(xp);
                                                }

                                                C.iushrn(1);
                                                D.iushrn(1);
                                            }
                                        }

                                        if (x.cmp(y) >= 0) {
                                            x.isub(y);
                                            A.isub(C);
                                            B.isub(D);
                                        } else {
                                            y.isub(x);
                                            C.isub(A);
                                            D.isub(B);
                                        }
                                    }

                                    return {
                                        a: C,
                                        b: D,
                                        gcd: y.iushln(g)
                                    };
                                };

                                // This is reduced incarnation of the binary EEA
                                // above, designated to invert members of the
                                // _prime_ fields F(p) at a maximal speed
                                BN.prototype._invmp = function _invmp(p) {
                                    assert(p.negative === 0);
                                    assert(!p.isZero());

                                    var a = this;
                                    var b = p.clone();

                                    if (a.negative !== 0) {
                                        a = a.umod(p);
                                    } else {
                                        a = a.clone();
                                    }

                                    var x1 = new BN(1);
                                    var x2 = new BN(0);

                                    var delta = b.clone();

                                    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
                                        for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1) ;
                                        if (i > 0) {
                                            a.iushrn(i);
                                            while (i-- > 0) {
                                                if (x1.isOdd()) {
                                                    x1.iadd(delta);
                                                }

                                                x1.iushrn(1);
                                            }
                                        }

                                        for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
                                        if (j > 0) {
                                            b.iushrn(j);
                                            while (j-- > 0) {
                                                if (x2.isOdd()) {
                                                    x2.iadd(delta);
                                                }

                                                x2.iushrn(1);
                                            }
                                        }

                                        if (a.cmp(b) >= 0) {
                                            a.isub(b);
                                            x1.isub(x2);
                                        } else {
                                            b.isub(a);
                                            x2.isub(x1);
                                        }
                                    }

                                    var res;
                                    if (a.cmpn(1) === 0) {
                                        res = x1;
                                    } else {
                                        res = x2;
                                    }

                                    if (res.cmpn(0) < 0) {
                                        res.iadd(p);
                                    }

                                    return res;
                                };

                                BN.prototype.gcd = function gcd(num) {
                                    if (this.isZero()) return num.abs();
                                    if (num.isZero()) return this.abs();

                                    var a = this.clone();
                                    var b = num.clone();
                                    a.negative = 0;
                                    b.negative = 0;

                                    // Remove common factor of two
                                    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
                                        a.iushrn(1);
                                        b.iushrn(1);
                                    }

                                    do {
                                        while (a.isEven()) {
                                            a.iushrn(1);
                                        }
                                        while (b.isEven()) {
                                            b.iushrn(1);
                                        }

                                        var r = a.cmp(b);
                                        if (r < 0) {
                                            // Swap `a` and `b` to make `a` always bigger than `b`
                                            var t = a;
                                            a = b;
                                            b = t;
                                        } else if (r === 0 || b.cmpn(1) === 0) {
                                            break;
                                        }

                                        a.isub(b);
                                    } while (true);

                                    return b.iushln(shift);
                                };

                                // Invert number in the field F(num)
                                BN.prototype.invm = function invm(num) {
                                    return this.egcd(num).a.umod(num);
                                };

                                BN.prototype.isEven = function isEven() {
                                    return (this.words[0] & 1) === 0;
                                };

                                BN.prototype.isOdd = function isOdd() {
                                    return (this.words[0] & 1) === 1;
                                };

                                // And first word and num
                                BN.prototype.andln = function andln(num) {
                                    return this.words[0] & num;
                                };

                                // Increment at the bit position in-line
                                BN.prototype.bincn = function bincn(bit) {
                                    assert(typeof bit === 'number');
                                    var r = bit % 26;
                                    var s = (bit - r) / 26;
                                    var q = 1 << r;

                                    // Fast case: bit is much higher than all existing words
                                    if (this.length <= s) {
                                        this._expand(s + 1);
                                        this.words[s] |= q;
                                        return this;
                                    }

                                    // Add bit and propagate, if needed
                                    var carry = q;
                                    for (var i = s; carry !== 0 && i < this.length; i++) {
                                        var w = this.words[i] | 0;
                                        w += carry;
                                        carry = w >>> 26;
                                        w &= 0x3ffffff;
                                        this.words[i] = w;
                                    }
                                    if (carry !== 0) {
                                        this.words[i] = carry;
                                        this.length++;
                                    }
                                    return this;
                                };

                                BN.prototype.isZero = function isZero() {
                                    return this.length === 1 && this.words[0] === 0;
                                };

                                BN.prototype.cmpn = function cmpn(num) {
                                    var negative = num < 0;

                                    if (this.negative !== 0 && !negative) return -1;
                                    if (this.negative === 0 && negative) return 1;

                                    this.strip();

                                    var res;
                                    if (this.length > 1) {
                                        res = 1;
                                    } else {
                                        if (negative) {
                                            num = -num;
                                        }

                                        assert(num <= 0x3ffffff, 'Number is too big');

                                        var w = this.words[0] | 0;
                                        res = w === num ? 0 : w < num ? -1 : 1;
                                    }
                                    if (this.negative !== 0) return -res | 0;
                                    return res;
                                };

                                // Compare two numbers and return:
                                // 1 - if `this` > `num`
                                // 0 - if `this` == `num`
                                // -1 - if `this` < `num`
                                BN.prototype.cmp = function cmp(num) {
                                    if (this.negative !== 0 && num.negative === 0) return -1;
                                    if (this.negative === 0 && num.negative !== 0) return 1;

                                    var res = this.ucmp(num);
                                    if (this.negative !== 0) return -res | 0;
                                    return res;
                                };

                                // Unsigned comparison
                                BN.prototype.ucmp = function ucmp(num) {
                                    // At this point both numbers have the same sign
                                    if (this.length > num.length) return 1;
                                    if (this.length < num.length) return -1;

                                    var res = 0;
                                    for (var i = this.length - 1; i >= 0; i--) {
                                        var a = this.words[i] | 0;
                                        var b = num.words[i] | 0;

                                        if (a === b) continue;
                                        if (a < b) {
                                            res = -1;
                                        } else if (a > b) {
                                            res = 1;
                                        }
                                        break;
                                    }
                                    return res;
                                };

                                BN.prototype.gtn = function gtn(num) {
                                    return this.cmpn(num) === 1;
                                };

                                BN.prototype.gt = function gt(num) {
                                    return this.cmp(num) === 1;
                                };

                                BN.prototype.gten = function gten(num) {
                                    return this.cmpn(num) >= 0;
                                };

                                BN.prototype.gte = function gte(num) {
                                    return this.cmp(num) >= 0;
                                };

                                BN.prototype.ltn = function ltn(num) {
                                    return this.cmpn(num) === -1;
                                };

                                BN.prototype.lt = function lt(num) {
                                    return this.cmp(num) === -1;
                                };

                                BN.prototype.lten = function lten(num) {
                                    return this.cmpn(num) <= 0;
                                };

                                BN.prototype.lte = function lte(num) {
                                    return this.cmp(num) <= 0;
                                };

                                BN.prototype.eqn = function eqn(num) {
                                    return this.cmpn(num) === 0;
                                };

                                BN.prototype.eq = function eq(num) {
                                    return this.cmp(num) === 0;
                                };

                                //
                                // A reduce context, could be using montgomery or something better, depending
                                // on the `m` itself.
                                //
                                BN.red = function red(num) {
                                    return new Red(num);
                                };

                                BN.prototype.toRed = function toRed(ctx) {
                                    assert(!this.red, 'Already a number in reduction context');
                                    assert(this.negative === 0, 'red works only with positives');
                                    return ctx.convertTo(this)._forceRed(ctx);
                                };

                                BN.prototype.fromRed = function fromRed() {
                                    assert(this.red, 'fromRed works only with numbers in reduction context');
                                    return this.red.convertFrom(this);
                                };

                                BN.prototype._forceRed = function _forceRed(ctx) {
                                    this.red = ctx;
                                    return this;
                                };

                                BN.prototype.forceRed = function forceRed(ctx) {
                                    assert(!this.red, 'Already a number in reduction context');
                                    return this._forceRed(ctx);
                                };

                                BN.prototype.redAdd = function redAdd(num) {
                                    assert(this.red, 'redAdd works only with red numbers');
                                    return this.red.add(this, num);
                                };

                                BN.prototype.redIAdd = function redIAdd(num) {
                                    assert(this.red, 'redIAdd works only with red numbers');
                                    return this.red.iadd(this, num);
                                };

                                BN.prototype.redSub = function redSub(num) {
                                    assert(this.red, 'redSub works only with red numbers');
                                    return this.red.sub(this, num);
                                };

                                BN.prototype.redISub = function redISub(num) {
                                    assert(this.red, 'redISub works only with red numbers');
                                    return this.red.isub(this, num);
                                };

                                BN.prototype.redShl = function redShl(num) {
                                    assert(this.red, 'redShl works only with red numbers');
                                    return this.red.shl(this, num);
                                };

                                BN.prototype.redMul = function redMul(num) {
                                    assert(this.red, 'redMul works only with red numbers');
                                    this.red._verify2(this, num);
                                    return this.red.mul(this, num);
                                };

                                BN.prototype.redIMul = function redIMul(num) {
                                    assert(this.red, 'redMul works only with red numbers');
                                    this.red._verify2(this, num);
                                    return this.red.imul(this, num);
                                };

                                BN.prototype.redSqr = function redSqr() {
                                    assert(this.red, 'redSqr works only with red numbers');
                                    this.red._verify1(this);
                                    return this.red.sqr(this);
                                };

                                BN.prototype.redISqr = function redISqr() {
                                    assert(this.red, 'redISqr works only with red numbers');
                                    this.red._verify1(this);
                                    return this.red.isqr(this);
                                };

                                // Square root over p
                                BN.prototype.redSqrt = function redSqrt() {
                                    assert(this.red, 'redSqrt works only with red numbers');
                                    this.red._verify1(this);
                                    return this.red.sqrt(this);
                                };

                                BN.prototype.redInvm = function redInvm() {
                                    assert(this.red, 'redInvm works only with red numbers');
                                    this.red._verify1(this);
                                    return this.red.invm(this);
                                };

                                // Return negative clone of `this` % `red modulo`
                                BN.prototype.redNeg = function redNeg() {
                                    assert(this.red, 'redNeg works only with red numbers');
                                    this.red._verify1(this);
                                    return this.red.neg(this);
                                };

                                BN.prototype.redPow = function redPow(num) {
                                    assert(this.red && !num.red, 'redPow(normalNum)');
                                    this.red._verify1(this);
                                    return this.red.pow(this, num);
                                };

                                // Prime numbers with efficient reduction
                                var primes = {
                                    k256: null,
                                    p224: null,
                                    p192: null,
                                    p25519: null
                                };

                                // Pseudo-Mersenne prime
                                function MPrime(name, p) {
                                    // P = 2 ^ N - K
                                    this.name = name;
                                    this.p = new BN(p, 16);
                                    this.n = this.p.bitLength();
                                    this.k = new BN(1).iushln(this.n).isub(this.p);

                                    this.tmp = this._tmp();
                                }

                                MPrime.prototype._tmp = function _tmp() {
                                    var tmp = new BN(null);
                                    tmp.words = new Array(Math.ceil(this.n / 13));
                                    return tmp;
                                };

                                MPrime.prototype.ireduce = function ireduce(num) {
                                    // Assumes that `num` is less than `P^2`
                                    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
                                    var r = num;
                                    var rlen;

                                    do {
                                        this.split(r, this.tmp);
                                        r = this.imulK(r);
                                        r = r.iadd(this.tmp);
                                        rlen = r.bitLength();
                                    } while (rlen > this.n);

                                    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
                                    if (cmp === 0) {
                                        r.words[0] = 0;
                                        r.length = 1;
                                    } else if (cmp > 0) {
                                        r.isub(this.p);
                                    } else {
                                        r.strip();
                                    }

                                    return r;
                                };

                                MPrime.prototype.split = function split(input, out) {
                                    input.iushrn(this.n, 0, out);
                                };

                                MPrime.prototype.imulK = function imulK(num) {
                                    return num.imul(this.k);
                                };

                                function K256() {
                                    MPrime.call(
                                        this,
                                        'k256',
                                        'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
                                }

                                inherits(K256, MPrime);

                                K256.prototype.split = function split(input, output) {
                                    // 256 = 9 * 26 + 22
                                    var mask = 0x3fffff;

                                    var outLen = Math.min(input.length, 9);
                                    for (var i = 0; i < outLen; i++) {
                                        output.words[i] = input.words[i];
                                    }
                                    output.length = outLen;

                                    if (input.length <= 9) {
                                        input.words[0] = 0;
                                        input.length = 1;
                                        return;
                                    }

                                    // Shift by 9 limbs
                                    var prev = input.words[9];
                                    output.words[output.length++] = prev & mask;

                                    for (i = 10; i < input.length; i++) {
                                        var next = input.words[i] | 0;
                                        input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
                                        prev = next;
                                    }
                                    prev >>>= 22;
                                    input.words[i - 10] = prev;
                                    if (prev === 0 && input.length > 10) {
                                        input.length -= 10;
                                    } else {
                                        input.length -= 9;
                                    }
                                };

                                K256.prototype.imulK = function imulK(num) {
                                    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
                                    num.words[num.length] = 0;
                                    num.words[num.length + 1] = 0;
                                    num.length += 2;

                                    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
                                    var lo = 0;
                                    for (var i = 0; i < num.length; i++) {
                                        var w = num.words[i] | 0;
                                        lo += w * 0x3d1;
                                        num.words[i] = lo & 0x3ffffff;
                                        lo = w * 0x40 + ((lo / 0x4000000) | 0);
                                    }

                                    // Fast length reduction
                                    if (num.words[num.length - 1] === 0) {
                                        num.length--;
                                        if (num.words[num.length - 1] === 0) {
                                            num.length--;
                                        }
                                    }
                                    return num;
                                };

                                function P224() {
                                    MPrime.call(
                                        this,
                                        'p224',
                                        'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
                                }

                                inherits(P224, MPrime);

                                function P192() {
                                    MPrime.call(
                                        this,
                                        'p192',
                                        'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
                                }

                                inherits(P192, MPrime);

                                function P25519() {
                                    // 2 ^ 255 - 19
                                    MPrime.call(
                                        this,
                                        '25519',
                                        '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
                                }

                                inherits(P25519, MPrime);

                                P25519.prototype.imulK = function imulK(num) {
                                    // K = 0x13
                                    var carry = 0;
                                    for (var i = 0; i < num.length; i++) {
                                        var hi = (num.words[i] | 0) * 0x13 + carry;
                                        var lo = hi & 0x3ffffff;
                                        hi >>>= 26;

                                        num.words[i] = lo;
                                        carry = hi;
                                    }
                                    if (carry !== 0) {
                                        num.words[num.length++] = carry;
                                    }
                                    return num;
                                };

                                // Exported mostly for testing purposes, use plain name instead
                                BN._prime = function prime(name) {
                                    // Cached version of prime
                                    if (primes[name]) return primes[name];

                                    var prime;
                                    if (name === 'k256') {
                                        prime = new K256();
                                    } else if (name === 'p224') {
                                        prime = new P224();
                                    } else if (name === 'p192') {
                                        prime = new P192();
                                    } else if (name === 'p25519') {
                                        prime = new P25519();
                                    } else {
                                        throw new Error('Unknown prime ' + name);
                                    }
                                    primes[name] = prime;

                                    return prime;
                                };

                                //
                                // Base reduction engine
                                //
                                function Red(m) {
                                    if (typeof m === 'string') {
                                        var prime = BN._prime(m);
                                        this.m = prime.p;
                                        this.prime = prime;
                                    } else {
                                        assert(m.gtn(1), 'modulus must be greater than 1');
                                        this.m = m;
                                        this.prime = null;
                                    }
                                }

                                Red.prototype._verify1 = function _verify1(a) {
                                    assert(a.negative === 0, 'red works only with positives');
                                    assert(a.red, 'red works only with red numbers');
                                };

                                Red.prototype._verify2 = function _verify2(a, b) {
                                    assert((a.negative | b.negative) === 0, 'red works only with positives');
                                    assert(a.red && a.red === b.red,
                                        'red works only with red numbers');
                                };

                                Red.prototype.imod = function imod(a) {
                                    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
                                    return a.umod(this.m)._forceRed(this);
                                };

                                Red.prototype.neg = function neg(a) {
                                    if (a.isZero()) {
                                        return a.clone();
                                    }

                                    return this.m.sub(a)._forceRed(this);
                                };

                                Red.prototype.add = function add(a, b) {
                                    this._verify2(a, b);

                                    var res = a.add(b);
                                    if (res.cmp(this.m) >= 0) {
                                        res.isub(this.m);
                                    }
                                    return res._forceRed(this);
                                };

                                Red.prototype.iadd = function iadd(a, b) {
                                    this._verify2(a, b);

                                    var res = a.iadd(b);
                                    if (res.cmp(this.m) >= 0) {
                                        res.isub(this.m);
                                    }
                                    return res;
                                };

                                Red.prototype.sub = function sub(a, b) {
                                    this._verify2(a, b);

                                    var res = a.sub(b);
                                    if (res.cmpn(0) < 0) {
                                        res.iadd(this.m);
                                    }
                                    return res._forceRed(this);
                                };

                                Red.prototype.isub = function isub(a, b) {
                                    this._verify2(a, b);

                                    var res = a.isub(b);
                                    if (res.cmpn(0) < 0) {
                                        res.iadd(this.m);
                                    }
                                    return res;
                                };

                                Red.prototype.shl = function shl(a, num) {
                                    this._verify1(a);
                                    return this.imod(a.ushln(num));
                                };

                                Red.prototype.imul = function imul(a, b) {
                                    this._verify2(a, b);
                                    return this.imod(a.imul(b));
                                };

                                Red.prototype.mul = function mul(a, b) {
                                    this._verify2(a, b);
                                    return this.imod(a.mul(b));
                                };

                                Red.prototype.isqr = function isqr(a) {
                                    return this.imul(a, a.clone());
                                };

                                Red.prototype.sqr = function sqr(a) {
                                    return this.mul(a, a);
                                };

                                Red.prototype.sqrt = function sqrt(a) {
                                    if (a.isZero()) return a.clone();

                                    var mod3 = this.m.andln(3);
                                    assert(mod3 % 2 === 1);

                                    // Fast case
                                    if (mod3 === 3) {
                                        var pow = this.m.add(new BN(1)).iushrn(2);
                                        return this.pow(a, pow);
                                    }

                                    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
                                    //
                                    // Find Q and S, that Q * 2 ^ S = (P - 1)
                                    var q = this.m.subn(1);
                                    var s = 0;
                                    while (!q.isZero() && q.andln(1) === 0) {
                                        s++;
                                        q.iushrn(1);
                                    }
                                    assert(!q.isZero());

                                    var one = new BN(1).toRed(this);
                                    var nOne = one.redNeg();

                                    // Find quadratic non-residue
                                    // NOTE: Max is such because of generalized Riemann hypothesis.
                                    var lpow = this.m.subn(1).iushrn(1);
                                    var z = this.m.bitLength();
                                    z = new BN(2 * z * z).toRed(this);

                                    while (this.pow(z, lpow).cmp(nOne) !== 0) {
                                        z.redIAdd(nOne);
                                    }

                                    var c = this.pow(z, q);
                                    var r = this.pow(a, q.addn(1).iushrn(1));
                                    var t = this.pow(a, q);
                                    var m = s;
                                    while (t.cmp(one) !== 0) {
                                        var tmp = t;
                                        for (var i = 0; tmp.cmp(one) !== 0; i++) {
                                            tmp = tmp.redSqr();
                                        }
                                        assert(i < m);
                                        var b = this.pow(c, new BN(1).iushln(m - i - 1));

                                        r = r.redMul(b);
                                        c = b.redSqr();
                                        t = t.redMul(c);
                                        m = i;
                                    }

                                    return r;
                                };

                                Red.prototype.invm = function invm(a) {
                                    var inv = a._invmp(this.m);
                                    if (inv.negative !== 0) {
                                        inv.negative = 0;
                                        return this.imod(inv).redNeg();
                                    } else {
                                        return this.imod(inv);
                                    }
                                };

                                Red.prototype.pow = function pow(a, num) {
                                    if (num.isZero()) return new BN(1).toRed(this);
                                    if (num.cmpn(1) === 0) return a.clone();

                                    var windowSize = 4;
                                    var wnd = new Array(1 << windowSize);
                                    wnd[0] = new BN(1).toRed(this);
                                    wnd[1] = a;
                                    for (var i = 2; i < wnd.length; i++) {
                                        wnd[i] = this.mul(wnd[i - 1], a);
                                    }

                                    var res = wnd[0];
                                    var current = 0;
                                    var currentLen = 0;
                                    var start = num.bitLength() % 26;
                                    if (start === 0) {
                                        start = 26;
                                    }

                                    for (i = num.length - 1; i >= 0; i--) {
                                        var word = num.words[i];
                                        for (var j = start - 1; j >= 0; j--) {
                                            var bit = (word >> j) & 1;
                                            if (res !== wnd[0]) {
                                                res = this.sqr(res);
                                            }

                                            if (bit === 0 && current === 0) {
                                                currentLen = 0;
                                                continue;
                                            }

                                            current <<= 1;
                                            current |= bit;
                                            currentLen++;
                                            if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

                                            res = this.mul(res, wnd[current]);
                                            currentLen = 0;
                                            current = 0;
                                        }
                                        start = 26;
                                    }

                                    return res;
                                };

                                Red.prototype.convertTo = function convertTo(num) {
                                    var r = num.umod(this.m);

                                    return r === num ? r.clone() : r;
                                };

                                Red.prototype.convertFrom = function convertFrom(num) {
                                    var res = num.clone();
                                    res.red = null;
                                    return res;
                                };

                                //
                                // Montgomery method engine
                                //

                                BN.mont = function mont(num) {
                                    return new Mont(num);
                                };

                                function Mont(m) {
                                    Red.call(this, m);

                                    this.shift = this.m.bitLength();
                                    if (this.shift % 26 !== 0) {
                                        this.shift += 26 - (this.shift % 26);
                                    }

                                    this.r = new BN(1).iushln(this.shift);
                                    this.r2 = this.imod(this.r.sqr());
                                    this.rinv = this.r._invmp(this.m);

                                    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
                                    this.minv = this.minv.umod(this.r);
                                    this.minv = this.r.sub(this.minv);
                                }

                                inherits(Mont, Red);

                                Mont.prototype.convertTo = function convertTo(num) {
                                    return this.imod(num.ushln(this.shift));
                                };

                                Mont.prototype.convertFrom = function convertFrom(num) {
                                    var r = this.imod(num.mul(this.rinv));
                                    r.red = null;
                                    return r;
                                };

                                Mont.prototype.imul = function imul(a, b) {
                                    if (a.isZero() || b.isZero()) {
                                        a.words[0] = 0;
                                        a.length = 1;
                                        return a;
                                    }

                                    var t = a.imul(b);
                                    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
                                    var u = t.isub(c).iushrn(this.shift);
                                    var res = u;

                                    if (u.cmp(this.m) >= 0) {
                                        res = u.isub(this.m);
                                    } else if (u.cmpn(0) < 0) {
                                        res = u.iadd(this.m);
                                    }

                                    return res._forceRed(this);
                                };

                                Mont.prototype.mul = function mul(a, b) {
                                    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

                                    var t = a.mul(b);
                                    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
                                    var u = t.isub(c).iushrn(this.shift);
                                    var res = u;
                                    if (u.cmp(this.m) >= 0) {
                                        res = u.isub(this.m);
                                    } else if (u.cmpn(0) < 0) {
                                        res = u.iadd(this.m);
                                    }

                                    return res._forceRed(this);
                                };

                                Mont.prototype.invm = function invm(a) {
                                    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
                                    var res = this.imod(a._invmp(this.m).mul(this.r2));
                                    return res._forceRed(this);
                                };
                            })(typeof module === 'undefined' || module, this);

                        }, {"buffer": 35}],
                        34: [function (require, module, exports) {
                            var r;

                            module.exports = function rand(len) {
                                if (!r)
                                    r = new Rand(null);

                                return r.generate(len);
                            };

                            function Rand(rand) {
                                this.rand = rand;
                            }

                            module.exports.Rand = Rand;

                            Rand.prototype.generate = function generate(len) {
                                return this._rand(len);
                            };

// Emulate crypto API using randy
                            Rand.prototype._rand = function _rand(n) {
                                if (this.rand.getBytes)
                                    return this.rand.getBytes(n);

                                var res = new Uint8Array(n);
                                for (var i = 0; i < res.length; i++)
                                    res[i] = this.rand.getByte();
                                return res;
                            };

                            if (typeof self === 'object') {
                                if (self.crypto && self.crypto.getRandomValues) {
                                    // Modern browsers
                                    Rand.prototype._rand = function _rand(n) {
                                        var arr = new Uint8Array(n);
                                        self.crypto.getRandomValues(arr);
                                        return arr;
                                    };
                                } else if (self.msCrypto && self.msCrypto.getRandomValues) {
                                    // IE
                                    Rand.prototype._rand = function _rand(n) {
                                        var arr = new Uint8Array(n);
                                        self.msCrypto.getRandomValues(arr);
                                        return arr;
                                    };

                                    // Safari's WebWorkers do not have `crypto`
                                } else if (typeof window === 'object') {
                                    // Old junk
                                    Rand.prototype._rand = function () {
                                        throw new Error('Not implemented yet');
                                    };
                                }
                            } else {
                                // Node.js or Web worker with no crypto support
                                try {
                                    var crypto = require('crypto');
                                    if (typeof crypto.randomBytes !== 'function')
                                        throw new Error('Not supported');

                                    Rand.prototype._rand = function _rand(n) {
                                        return crypto.randomBytes(n);
                                    };
                                } catch (e) {
                                }
                            }

                        }, {"crypto": 35}],
                        35: [function (require, module, exports) {

                        }, {}],
                        36: [function (require, module, exports) {
// based on the aes implimentation in triple sec
// https://github.com/keybase/triplesec
// which is in turn based on the one from crypto-js
// https://code.google.com/p/crypto-js/

                            var Buffer = require('safe-buffer').Buffer

                            function asUInt32Array(buf) {
                                if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)

                                var len = (buf.length / 4) | 0
                                var out = new Array(len)

                                for (var i = 0; i < len; i++) {
                                    out[i] = buf.readUInt32BE(i * 4)
                                }

                                return out
                            }

                            function scrubVec(v) {
                                for (var i = 0; i < v.length; v++) {
                                    v[i] = 0
                                }
                            }

                            function cryptBlock(M, keySchedule, SUB_MIX, SBOX, nRounds) {
                                var SUB_MIX0 = SUB_MIX[0]
                                var SUB_MIX1 = SUB_MIX[1]
                                var SUB_MIX2 = SUB_MIX[2]
                                var SUB_MIX3 = SUB_MIX[3]

                                var s0 = M[0] ^ keySchedule[0]
                                var s1 = M[1] ^ keySchedule[1]
                                var s2 = M[2] ^ keySchedule[2]
                                var s3 = M[3] ^ keySchedule[3]
                                var t0, t1, t2, t3
                                var ksRow = 4

                                for (var round = 1; round < nRounds; round++) {
                                    t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[(s1 >>> 16) & 0xff] ^ SUB_MIX2[(s2 >>> 8) & 0xff] ^ SUB_MIX3[s3 & 0xff] ^ keySchedule[ksRow++]
                                    t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[(s2 >>> 16) & 0xff] ^ SUB_MIX2[(s3 >>> 8) & 0xff] ^ SUB_MIX3[s0 & 0xff] ^ keySchedule[ksRow++]
                                    t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[(s3 >>> 16) & 0xff] ^ SUB_MIX2[(s0 >>> 8) & 0xff] ^ SUB_MIX3[s1 & 0xff] ^ keySchedule[ksRow++]
                                    t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[(s0 >>> 16) & 0xff] ^ SUB_MIX2[(s1 >>> 8) & 0xff] ^ SUB_MIX3[s2 & 0xff] ^ keySchedule[ksRow++]
                                    s0 = t0
                                    s1 = t1
                                    s2 = t2
                                    s3 = t3
                                }

                                t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++]
                                t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++]
                                t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++]
                                t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++]
                                t0 = t0 >>> 0
                                t1 = t1 >>> 0
                                t2 = t2 >>> 0
                                t3 = t3 >>> 0

                                return [t0, t1, t2, t3]
                            }

// AES constants
                            var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]
                            var G = (function () {
                                // Compute double table
                                var d = new Array(256)
                                for (var j = 0; j < 256; j++) {
                                    if (j < 128) {
                                        d[j] = j << 1
                                    } else {
                                        d[j] = (j << 1) ^ 0x11b
                                    }
                                }

                                var SBOX = []
                                var INV_SBOX = []
                                var SUB_MIX = [[], [], [], []]
                                var INV_SUB_MIX = [[], [], [], []]

                                // Walk GF(2^8)
                                var x = 0
                                var xi = 0
                                for (var i = 0; i < 256; ++i) {
                                    // Compute sbox
                                    var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4)
                                    sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63
                                    SBOX[x] = sx
                                    INV_SBOX[sx] = x

                                    // Compute multiplication
                                    var x2 = d[x]
                                    var x4 = d[x2]
                                    var x8 = d[x4]

                                    // Compute sub bytes, mix columns tables
                                    var t = (d[sx] * 0x101) ^ (sx * 0x1010100)
                                    SUB_MIX[0][x] = (t << 24) | (t >>> 8)
                                    SUB_MIX[1][x] = (t << 16) | (t >>> 16)
                                    SUB_MIX[2][x] = (t << 8) | (t >>> 24)
                                    SUB_MIX[3][x] = t

                                    // Compute inv sub bytes, inv mix columns tables
                                    t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100)
                                    INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8)
                                    INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16)
                                    INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24)
                                    INV_SUB_MIX[3][sx] = t

                                    if (x === 0) {
                                        x = xi = 1
                                    } else {
                                        x = x2 ^ d[d[d[x8 ^ x2]]]
                                        xi ^= d[d[xi]]
                                    }
                                }

                                return {
                                    SBOX: SBOX,
                                    INV_SBOX: INV_SBOX,
                                    SUB_MIX: SUB_MIX,
                                    INV_SUB_MIX: INV_SUB_MIX
                                }
                            })()

                            function AES(key) {
                                this._key = asUInt32Array(key)
                                this._reset()
                            }

                            AES.blockSize = 4 * 4
                            AES.keySize = 256 / 8
                            AES.prototype.blockSize = AES.blockSize
                            AES.prototype.keySize = AES.keySize
                            AES.prototype._reset = function () {
                                var keyWords = this._key
                                var keySize = keyWords.length
                                var nRounds = keySize + 6
                                var ksRows = (nRounds + 1) * 4

                                var keySchedule = []
                                for (var k = 0; k < keySize; k++) {
                                    keySchedule[k] = keyWords[k]
                                }

                                for (k = keySize; k < ksRows; k++) {
                                    var t = keySchedule[k - 1]

                                    if (k % keySize === 0) {
                                        t = (t << 8) | (t >>> 24)
                                        t =
                                            (G.SBOX[t >>> 24] << 24) |
                                            (G.SBOX[(t >>> 16) & 0xff] << 16) |
                                            (G.SBOX[(t >>> 8) & 0xff] << 8) |
                                            (G.SBOX[t & 0xff])

                                        t ^= RCON[(k / keySize) | 0] << 24
                                    } else if (keySize > 6 && k % keySize === 4) {
                                        t =
                                            (G.SBOX[t >>> 24] << 24) |
                                            (G.SBOX[(t >>> 16) & 0xff] << 16) |
                                            (G.SBOX[(t >>> 8) & 0xff] << 8) |
                                            (G.SBOX[t & 0xff])
                                    }

                                    keySchedule[k] = keySchedule[k - keySize] ^ t
                                }

                                var invKeySchedule = []
                                for (var ik = 0; ik < ksRows; ik++) {
                                    var ksR = ksRows - ik
                                    var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)]

                                    if (ik < 4 || ksR <= 4) {
                                        invKeySchedule[ik] = tt
                                    } else {
                                        invKeySchedule[ik] =
                                            G.INV_SUB_MIX[0][G.SBOX[tt >>> 24]] ^
                                            G.INV_SUB_MIX[1][G.SBOX[(tt >>> 16) & 0xff]] ^
                                            G.INV_SUB_MIX[2][G.SBOX[(tt >>> 8) & 0xff]] ^
                                            G.INV_SUB_MIX[3][G.SBOX[tt & 0xff]]
                                    }
                                }

                                this._nRounds = nRounds
                                this._keySchedule = keySchedule
                                this._invKeySchedule = invKeySchedule
                            }

                            AES.prototype.encryptBlockRaw = function (M) {
                                M = asUInt32Array(M)
                                return cryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds)
                            }

                            AES.prototype.encryptBlock = function (M) {
                                var out = this.encryptBlockRaw(M)
                                var buf = Buffer.allocUnsafe(16)
                                buf.writeUInt32BE(out[0], 0)
                                buf.writeUInt32BE(out[1], 4)
                                buf.writeUInt32BE(out[2], 8)
                                buf.writeUInt32BE(out[3], 12)
                                return buf
                            }

                            AES.prototype.decryptBlock = function (M) {
                                M = asUInt32Array(M)

                                // swap
                                var m1 = M[1]
                                M[1] = M[3]
                                M[3] = m1

                                var out = cryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds)
                                var buf = Buffer.allocUnsafe(16)
                                buf.writeUInt32BE(out[0], 0)
                                buf.writeUInt32BE(out[3], 4)
                                buf.writeUInt32BE(out[2], 8)
                                buf.writeUInt32BE(out[1], 12)
                                return buf
                            }

                            AES.prototype.scrub = function () {
                                scrubVec(this._keySchedule)
                                scrubVec(this._invKeySchedule)
                                scrubVec(this._key)
                            }

                            module.exports.AES = AES

                        }, {"safe-buffer": 191}],
                        37: [function (require, module, exports) {
                            var aes = require('./aes')
                            var Buffer = require('safe-buffer').Buffer
                            var Transform = require('cipher-base')
                            var inherits = require('inherits')
                            var GHASH = require('./ghash')
                            var xor = require('buffer-xor')
                            var incr32 = require('./incr32')

                            function xorTest(a, b) {
                                var out = 0
                                if (a.length !== b.length) out++

                                var len = Math.min(a.length, b.length)
                                for (var i = 0; i < len; ++i) {
                                    out += (a[i] ^ b[i])
                                }

                                return out
                            }

                            function calcIv(self, iv, ck) {
                                if (iv.length === 12) {
                                    self._finID = Buffer.concat([iv, Buffer.from([0, 0, 0, 1])])
                                    return Buffer.concat([iv, Buffer.from([0, 0, 0, 2])])
                                }
                                var ghash = new GHASH(ck)
                                var len = iv.length
                                var toPad = len % 16
                                ghash.update(iv)
                                if (toPad) {
                                    toPad = 16 - toPad
                                    ghash.update(Buffer.alloc(toPad, 0))
                                }
                                ghash.update(Buffer.alloc(8, 0))
                                var ivBits = len * 8
                                var tail = Buffer.alloc(8)
                                tail.writeUIntBE(ivBits, 0, 8)
                                ghash.update(tail)
                                self._finID = ghash.state
                                var out = Buffer.from(self._finID)
                                incr32(out)
                                return out
                            }

                            function StreamCipher(mode, key, iv, decrypt) {
                                Transform.call(this)

                                var h = Buffer.alloc(4, 0)

                                this._cipher = new aes.AES(key)
                                var ck = this._cipher.encryptBlock(h)
                                this._ghash = new GHASH(ck)
                                iv = calcIv(this, iv, ck)

                                this._prev = Buffer.from(iv)
                                this._cache = Buffer.allocUnsafe(0)
                                this._secCache = Buffer.allocUnsafe(0)
                                this._decrypt = decrypt
                                this._alen = 0
                                this._len = 0
                                this._mode = mode

                                this._authTag = null
                                this._called = false
                            }

                            inherits(StreamCipher, Transform)

                            StreamCipher.prototype._update = function (chunk) {
                                if (!this._called && this._alen) {
                                    var rump = 16 - (this._alen % 16)
                                    if (rump < 16) {
                                        rump = Buffer.alloc(rump, 0)
                                        this._ghash.update(rump)
                                    }
                                }

                                this._called = true
                                var out = this._mode.encrypt(this, chunk)
                                if (this._decrypt) {
                                    this._ghash.update(chunk)
                                } else {
                                    this._ghash.update(out)
                                }
                                this._len += chunk.length
                                return out
                            }

                            StreamCipher.prototype._final = function () {
                                if (this._decrypt && !this._authTag) throw new Error('Unsupported state or unable to authenticate data')

                                var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID))
                                if (this._decrypt && xorTest(tag, this._authTag)) throw new Error('Unsupported state or unable to authenticate data')

                                this._authTag = tag
                                this._cipher.scrub()
                            }

                            StreamCipher.prototype.getAuthTag = function getAuthTag() {
                                if (this._decrypt || !Buffer.isBuffer(this._authTag)) throw new Error('Attempting to get auth tag in unsupported state')

                                return this._authTag
                            }

                            StreamCipher.prototype.setAuthTag = function setAuthTag(tag) {
                                if (!this._decrypt) throw new Error('Attempting to set auth tag in unsupported state')

                                this._authTag = tag
                            }

                            StreamCipher.prototype.setAAD = function setAAD(buf) {
                                if (this._called) throw new Error('Attempting to set AAD in unsupported state')

                                this._ghash.update(buf)
                                this._alen += buf.length
                            }

                            module.exports = StreamCipher

                        }, {
                            "./aes": 36,
                            "./ghash": 41,
                            "./incr32": 42,
                            "buffer-xor": 63,
                            "cipher-base": 65,
                            "inherits": 150,
                            "safe-buffer": 191
                        }],
                        38: [function (require, module, exports) {
                            var ciphers = require('./encrypter')
                            var deciphers = require('./decrypter')
                            var modes = require('./modes/list.json')

                            function getCiphers() {
                                return Object.keys(modes)
                            }

                            exports.createCipher = exports.Cipher = ciphers.createCipher
                            exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv
                            exports.createDecipher = exports.Decipher = deciphers.createDecipher
                            exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv
                            exports.listCiphers = exports.getCiphers = getCiphers

                        }, {"./decrypter": 39, "./encrypter": 40, "./modes/list.json": 50}],
                        39: [function (require, module, exports) {
                            var AuthCipher = require('./authCipher')
                            var Buffer = require('safe-buffer').Buffer
                            var MODES = require('./modes')
                            var StreamCipher = require('./streamCipher')
                            var Transform = require('cipher-base')
                            var aes = require('./aes')
                            var ebtk = require('evp_bytestokey')
                            var inherits = require('inherits')

                            function Decipher(mode, key, iv) {
                                Transform.call(this)

                                this._cache = new Splitter()
                                this._last = void 0
                                this._cipher = new aes.AES(key)
                                this._prev = Buffer.from(iv)
                                this._mode = mode
                                this._autopadding = true
                            }

                            inherits(Decipher, Transform)

                            Decipher.prototype._update = function (data) {
                                this._cache.add(data)
                                var chunk
                                var thing
                                var out = []
                                while ((chunk = this._cache.get(this._autopadding))) {
                                    thing = this._mode.decrypt(this, chunk)
                                    out.push(thing)
                                }
                                return Buffer.concat(out)
                            }

                            Decipher.prototype._final = function () {
                                var chunk = this._cache.flush()
                                if (this._autopadding) {
                                    return unpad(this._mode.decrypt(this, chunk))
                                } else if (chunk) {
                                    throw new Error('data not multiple of block length')
                                }
                            }

                            Decipher.prototype.setAutoPadding = function (setTo) {
                                this._autopadding = !!setTo
                                return this
                            }

                            function Splitter() {
                                this.cache = Buffer.allocUnsafe(0)
                            }

                            Splitter.prototype.add = function (data) {
                                this.cache = Buffer.concat([this.cache, data])
                            }

                            Splitter.prototype.get = function (autoPadding) {
                                var out
                                if (autoPadding) {
                                    if (this.cache.length > 16) {
                                        out = this.cache.slice(0, 16)
                                        this.cache = this.cache.slice(16)
                                        return out
                                    }
                                } else {
                                    if (this.cache.length >= 16) {
                                        out = this.cache.slice(0, 16)
                                        this.cache = this.cache.slice(16)
                                        return out
                                    }
                                }

                                return null
                            }

                            Splitter.prototype.flush = function () {
                                if (this.cache.length) return this.cache
                            }

                            function unpad(last) {
                                var padded = last[15]
                                if (padded < 1 || padded > 16) {
                                    throw new Error('unable to decrypt data')
                                }
                                var i = -1
                                while (++i < padded) {
                                    if (last[(i + (16 - padded))] !== padded) {
                                        throw new Error('unable to decrypt data')
                                    }
                                }
                                if (padded === 16) return

                                return last.slice(0, 16 - padded)
                            }

                            function createDecipheriv(suite, password, iv) {
                                var config = MODES[suite.toLowerCase()]
                                if (!config) throw new TypeError('invalid suite type')

                                if (typeof iv === 'string') iv = Buffer.from(iv)
                                if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

                                if (typeof password === 'string') password = Buffer.from(password)
                                if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

                                if (config.type === 'stream') {
                                    return new StreamCipher(config.module, password, iv, true)
                                } else if (config.type === 'auth') {
                                    return new AuthCipher(config.module, password, iv, true)
                                }

                                return new Decipher(config.module, password, iv)
                            }

                            function createDecipher(suite, password) {
                                var config = MODES[suite.toLowerCase()]
                                if (!config) throw new TypeError('invalid suite type')

                                var keys = ebtk(password, false, config.key, config.iv)
                                return createDecipheriv(suite, keys.key, keys.iv)
                            }

                            exports.createDecipher = createDecipher
                            exports.createDecipheriv = createDecipheriv

                        }, {
                            "./aes": 36,
                            "./authCipher": 37,
                            "./modes": 49,
                            "./streamCipher": 52,
                            "cipher-base": 65,
                            "evp_bytestokey": 134,
                            "inherits": 150,
                            "safe-buffer": 191
                        }],
                        40: [function (require, module, exports) {
                            var MODES = require('./modes')
                            var AuthCipher = require('./authCipher')
                            var Buffer = require('safe-buffer').Buffer
                            var StreamCipher = require('./streamCipher')
                            var Transform = require('cipher-base')
                            var aes = require('./aes')
                            var ebtk = require('evp_bytestokey')
                            var inherits = require('inherits')

                            function Cipher(mode, key, iv) {
                                Transform.call(this)

                                this._cache = new Splitter()
                                this._cipher = new aes.AES(key)
                                this._prev = Buffer.from(iv)
                                this._mode = mode
                                this._autopadding = true
                            }

                            inherits(Cipher, Transform)

                            Cipher.prototype._update = function (data) {
                                this._cache.add(data)
                                var chunk
                                var thing
                                var out = []

                                while ((chunk = this._cache.get())) {
                                    thing = this._mode.encrypt(this, chunk)
                                    out.push(thing)
                                }

                                return Buffer.concat(out)
                            }

                            var PADDING = Buffer.alloc(16, 0x10)

                            Cipher.prototype._final = function () {
                                var chunk = this._cache.flush()
                                if (this._autopadding) {
                                    chunk = this._mode.encrypt(this, chunk)
                                    this._cipher.scrub()
                                    return chunk
                                }

                                if (!chunk.equals(PADDING)) {
                                    this._cipher.scrub()
                                    throw new Error('data not multiple of block length')
                                }
                            }

                            Cipher.prototype.setAutoPadding = function (setTo) {
                                this._autopadding = !!setTo
                                return this
                            }

                            function Splitter() {
                                this.cache = Buffer.allocUnsafe(0)
                            }

                            Splitter.prototype.add = function (data) {
                                this.cache = Buffer.concat([this.cache, data])
                            }

                            Splitter.prototype.get = function () {
                                if (this.cache.length > 15) {
                                    var out = this.cache.slice(0, 16)
                                    this.cache = this.cache.slice(16)
                                    return out
                                }
                                return null
                            }

                            Splitter.prototype.flush = function () {
                                var len = 16 - this.cache.length
                                var padBuff = Buffer.allocUnsafe(len)

                                var i = -1
                                while (++i < len) {
                                    padBuff.writeUInt8(len, i)
                                }

                                return Buffer.concat([this.cache, padBuff])
                            }

                            function createCipheriv(suite, password, iv) {
                                var config = MODES[suite.toLowerCase()]
                                if (!config) throw new TypeError('invalid suite type')

                                if (typeof password === 'string') password = Buffer.from(password)
                                if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

                                if (typeof iv === 'string') iv = Buffer.from(iv)
                                if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

                                if (config.type === 'stream') {
                                    return new StreamCipher(config.module, password, iv)
                                } else if (config.type === 'auth') {
                                    return new AuthCipher(config.module, password, iv)
                                }

                                return new Cipher(config.module, password, iv)
                            }

                            function createCipher(suite, password) {
                                var config = MODES[suite.toLowerCase()]
                                if (!config) throw new TypeError('invalid suite type')

                                var keys = ebtk(password, false, config.key, config.iv)
                                return createCipheriv(suite, keys.key, keys.iv)
                            }

                            exports.createCipheriv = createCipheriv
                            exports.createCipher = createCipher

                        }, {
                            "./aes": 36,
                            "./authCipher": 37,
                            "./modes": 49,
                            "./streamCipher": 52,
                            "cipher-base": 65,
                            "evp_bytestokey": 134,
                            "inherits": 150,
                            "safe-buffer": 191
                        }],
                        41: [function (require, module, exports) {
                            var Buffer = require('safe-buffer').Buffer
                            var ZEROES = Buffer.alloc(16, 0)

                            function toArray(buf) {
                                return [
                                    buf.readUInt32BE(0),
                                    buf.readUInt32BE(4),
                                    buf.readUInt32BE(8),
                                    buf.readUInt32BE(12)
                                ]
                            }

                            function fromArray(out) {
                                var buf = Buffer.allocUnsafe(16)
                                buf.writeUInt32BE(out[0] >>> 0, 0)
                                buf.writeUInt32BE(out[1] >>> 0, 4)
                                buf.writeUInt32BE(out[2] >>> 0, 8)
                                buf.writeUInt32BE(out[3] >>> 0, 12)
                                return buf
                            }

                            function GHASH(key) {
                                this.h = key
                                this.state = Buffer.alloc(16, 0)
                                this.cache = Buffer.allocUnsafe(0)
                            }

// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho Vähä-Herttua
                            GHASH.prototype.ghash = function (block) {
                                var i = -1
                                while (++i < block.length) {
                                    this.state[i] ^= block[i]
                                }
                                this._multiply()
                            }

                            GHASH.prototype._multiply = function () {
                                var Vi = toArray(this.h)
                                var Zi = [0, 0, 0, 0]
                                var j, xi, lsbVi
                                var i = -1
                                while (++i < 128) {
                                    xi = (this.state[~~(i / 8)] & (1 << (7 - (i % 8)))) !== 0
                                    if (xi) {
                                        // Z_i+1 = Z_i ^ V_i
                                        Zi[0] ^= Vi[0]
                                        Zi[1] ^= Vi[1]
                                        Zi[2] ^= Vi[2]
                                        Zi[3] ^= Vi[3]
                                    }

                                    // Store the value of LSB(V_i)
                                    lsbVi = (Vi[3] & 1) !== 0

                                    // V_i+1 = V_i >> 1
                                    for (j = 3; j > 0; j--) {
                                        Vi[j] = (Vi[j] >>> 1) | ((Vi[j - 1] & 1) << 31)
                                    }
                                    Vi[0] = Vi[0] >>> 1

                                    // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
                                    if (lsbVi) {
                                        Vi[0] = Vi[0] ^ (0xe1 << 24)
                                    }
                                }
                                this.state = fromArray(Zi)
                            }

                            GHASH.prototype.update = function (buf) {
                                this.cache = Buffer.concat([this.cache, buf])
                                var chunk
                                while (this.cache.length >= 16) {
                                    chunk = this.cache.slice(0, 16)
                                    this.cache = this.cache.slice(16)
                                    this.ghash(chunk)
                                }
                            }

                            GHASH.prototype.final = function (abl, bl) {
                                if (this.cache.length) {
                                    this.ghash(Buffer.concat([this.cache, ZEROES], 16))
                                }

                                this.ghash(fromArray([0, abl, 0, bl]))
                                return this.state
                            }

                            module.exports = GHASH

                        }, {"safe-buffer": 191}],
                        42: [function (require, module, exports) {
                            function incr32(iv) {
                                var len = iv.length
                                var item
                                while (len--) {
                                    item = iv.readUInt8(len)
                                    if (item === 255) {
                                        iv.writeUInt8(0, len)
                                    } else {
                                        item++
                                        iv.writeUInt8(item, len)
                                        break
                                    }
                                }
                            }

                            module.exports = incr32

                        }, {}],
                        43: [function (require, module, exports) {
                            var xor = require('buffer-xor')

                            exports.encrypt = function (self, block) {
                                var data = xor(block, self._prev)

                                self._prev = self._cipher.encryptBlock(data)
                                return self._prev
                            }

                            exports.decrypt = function (self, block) {
                                var pad = self._prev

                                self._prev = block
                                var out = self._cipher.decryptBlock(block)

                                return xor(out, pad)
                            }

                        }, {"buffer-xor": 63}],
                        44: [function (require, module, exports) {
                            var Buffer = require('safe-buffer').Buffer
                            var xor = require('buffer-xor')

                            function encryptStart(self, data, decrypt) {
                                var len = data.length
                                var out = xor(data, self._cache)
                                self._cache = self._cache.slice(len)
                                self._prev = Buffer.concat([self._prev, decrypt ? data : out])
                                return out
                            }

                            exports.encrypt = function (self, data, decrypt) {
                                var out = Buffer.allocUnsafe(0)
                                var len

                                while (data.length) {
                                    if (self._cache.length === 0) {
                                        self._cache = self._cipher.encryptBlock(self._prev)
                                        self._prev = Buffer.allocUnsafe(0)
                                    }

                                    if (self._cache.length <= data.length) {
                                        len = self._cache.length
                                        out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)])
                                        data = data.slice(len)
                                    } else {
                                        out = Buffer.concat([out, encryptStart(self, data, decrypt)])
                                        break
                                    }
                                }

                                return out
                            }

                        }, {"buffer-xor": 63, "safe-buffer": 191}],
                        45: [function (require, module, exports) {
                            var Buffer = require('safe-buffer').Buffer

                            function encryptByte(self, byteParam, decrypt) {
                                var pad
                                var i = -1
                                var len = 8
                                var out = 0
                                var bit, value
                                while (++i < len) {
                                    pad = self._cipher.encryptBlock(self._prev)
                                    bit = (byteParam & (1 << (7 - i))) ? 0x80 : 0
                                    value = pad[0] ^ bit
                                    out += ((value & 0x80) >> (i % 8))
                                    self._prev = shiftIn(self._prev, decrypt ? bit : value)
                                }
                                return out
                            }

                            function shiftIn(buffer, value) {
                                var len = buffer.length
                                var i = -1
                                var out = Buffer.allocUnsafe(buffer.length)
                                buffer = Buffer.concat([buffer, Buffer.from([value])])

                                while (++i < len) {
                                    out[i] = buffer[i] << 1 | buffer[i + 1] >> (7)
                                }

                                return out
                            }

                            exports.encrypt = function (self, chunk, decrypt) {
                                var len = chunk.length
                                var out = Buffer.allocUnsafe(len)
                                var i = -1

                                while (++i < len) {
                                    out[i] = encryptByte(self, chunk[i], decrypt)
                                }

                                return out
                            }

                        }, {"safe-buffer": 191}],
                        46: [function (require, module, exports) {
                            var Buffer = require('safe-buffer').Buffer

                            function encryptByte(self, byteParam, decrypt) {
                                var pad = self._cipher.encryptBlock(self._prev)
                                var out = pad[0] ^ byteParam

                                self._prev = Buffer.concat([
                                    self._prev.slice(1),
                                    Buffer.from([decrypt ? byteParam : out])
                                ])

                                return out
                            }

                            exports.encrypt = function (self, chunk, decrypt) {
                                var len = chunk.length
                                var out = Buffer.allocUnsafe(len)
                                var i = -1

                                while (++i < len) {
                                    out[i] = encryptByte(self, chunk[i], decrypt)
                                }

                                return out
                            }

                        }, {"safe-buffer": 191}],
                        47: [function (require, module, exports) {
                            var xor = require('buffer-xor')
                            var Buffer = require('safe-buffer').Buffer
                            var incr32 = require('../incr32')

                            function getBlock(self) {
                                var out = self._cipher.encryptBlockRaw(self._prev)
                                incr32(self._prev)
                                return out
                            }

                            var blockSize = 16
                            exports.encrypt = function (self, chunk) {
                                var chunkNum = Math.ceil(chunk.length / blockSize)
                                var start = self._cache.length
                                self._cache = Buffer.concat([
                                    self._cache,
                                    Buffer.allocUnsafe(chunkNum * blockSize)
                                ])
                                for (var i = 0; i < chunkNum; i++) {
                                    var out = getBlock(self)
                                    var offset = start + i * blockSize
                                    self._cache.writeUInt32BE(out[0], offset + 0)
                                    self._cache.writeUInt32BE(out[1], offset + 4)
                                    self._cache.writeUInt32BE(out[2], offset + 8)
                                    self._cache.writeUInt32BE(out[3], offset + 12)
                                }
                                var pad = self._cache.slice(0, chunk.length)
                                self._cache = self._cache.slice(chunk.length)
                                return xor(chunk, pad)
                            }

                        }, {"../incr32": 42, "buffer-xor": 63, "safe-buffer": 191}],
                        48: [function (require, module, exports) {
                            exports.encrypt = function (self, block) {
                                return self._cipher.encryptBlock(block)
                            }

                            exports.decrypt = function (self, block) {
                                return self._cipher.decryptBlock(block)
                            }

                        }, {}],
                        49: [function (require, module, exports) {
                            var modeModules = {
                                ECB: require('./ecb'),
                                CBC: require('./cbc'),
                                CFB: require('./cfb'),
                                CFB8: require('./cfb8'),
                                CFB1: require('./cfb1'),
                                OFB: require('./ofb'),
                                CTR: require('./ctr'),
                                GCM: require('./ctr')
                            }

                            var modes = require('./list.json')

                            for (var key in modes) {
                                modes[key].module = modeModules[modes[key].mode]
                            }

                            module.exports = modes

                        }, {
                            "./cbc": 43,
                            "./cfb": 44,
                            "./cfb1": 45,
                            "./cfb8": 46,
                            "./ctr": 47,
                            "./ecb": 48,
                            "./list.json": 50,
                            "./ofb": 51
                        }],
                        50: [function (require, module, exports) {
                            module.exports = {
                                "aes-128-ecb": {
                                    "cipher": "AES",
                                    "key": 128,
                                    "iv": 0,
                                    "mode": "ECB",
                                    "type": "block"
                                },
                                "aes-192-ecb": {
                                    "cipher": "AES",
                                    "key": 192,
                                    "iv": 0,
                                    "mode": "ECB",
                                    "type": "block"
                                },
                                "aes-256-ecb": {
                                    "cipher": "AES",
                                    "key": 256,
                                    "iv": 0,
                                    "mode": "ECB",
                                    "type": "block"
                                },
                                "aes-128-cbc": {
                                    "cipher": "AES",
                                    "key": 128,
                                    "iv": 16,
                                    "mode": "CBC",
                                    "type": "block"
                                },
                                "aes-192-cbc": {
                                    "cipher": "AES",
                                    "key": 192,
                                    "iv": 16,
                                    "mode": "CBC",
                                    "type": "block"
                                },
                                "aes-256-cbc": {
                                    "cipher": "AES",
                                    "key": 256,
                                    "iv": 16,
                                    "mode": "CBC",
                                    "type": "block"
                                },
                                "aes128": {
                                    "cipher": "AES",
                                    "key": 128,
                                    "iv": 16,
                                    "mode": "CBC",
                                    "type": "block"
                                },
                                "aes192": {
                                    "cipher": "AES",
                                    "key": 192,
                                    "iv": 16,
                                    "mode": "CBC",
                                    "type": "block"
                                },
                                "aes256": {
                                    "cipher": "AES",
                                    "key": 256,
                                    "iv": 16,
                                    "mode": "CBC",
                                    "type": "block"
                                },
                                "aes-128-cfb": {
                                    "cipher": "AES",
                                    "key": 128,
                                    "iv": 16,
                                    "mode": "CFB",
                                    "type": "stream"
                                },
                                "aes-192-cfb": {
                                    "cipher": "AES",
                                    "key": 192,
                                    "iv": 16,
                                    "mode": "CFB",
                                    "type": "stream"
                                },
                                "aes-256-cfb": {
                                    "cipher": "AES",
                                    "key": 256,
                                    "iv": 16,
                                    "mode": "CFB",
                                    "type": "stream"
                                },
                                "aes-128-cfb8": {
                                    "cipher": "AES",
                                    "key": 128,
                                    "iv": 16,
                                    "mode": "CFB8",
                                    "type": "stream"
                                },
                                "aes-192-cfb8": {
                                    "cipher": "AES",
                                    "key": 192,
                                    "iv": 16,
                                    "mode": "CFB8",
                                    "type": "stream"
                                },
                                "aes-256-cfb8": {
                                    "cipher": "AES",
                                    "key": 256,
                                    "iv": 16,
                                    "mode": "CFB8",
                                    "type": "stream"
                                },
                                "aes-128-cfb1": {
                                    "cipher": "AES",
                                    "key": 128,
                                    "iv": 16,
                                    "mode": "CFB1",
                                    "type": "stream"
                                },
                                "aes-192-cfb1": {
                                    "cipher": "AES",
                                    "key": 192,
                                    "iv": 16,
                                    "mode": "CFB1",
                                    "type": "stream"
                                },
                                "aes-256-cfb1": {
                                    "cipher": "AES",
                                    "key": 256,
                                    "iv": 16,
                                    "mode": "CFB1",
                                    "type": "stream"
                                },
                                "aes-128-ofb": {
                                    "cipher": "AES",
                                    "key": 128,
                                    "iv": 16,
                                    "mode": "OFB",
                                    "type": "stream"
                                },
                                "aes-192-ofb": {
                                    "cipher": "AES",
                                    "key": 192,
                                    "iv": 16,
                                    "mode": "OFB",
                                    "type": "stream"
                                },
                                "aes-256-ofb": {
                                    "cipher": "AES",
                                    "key": 256,
                                    "iv": 16,
                                    "mode": "OFB",
                                    "type": "stream"
                                },
                                "aes-128-ctr": {
                                    "cipher": "AES",
                                    "key": 128,
                                    "iv": 16,
                                    "mode": "CTR",
                                    "type": "stream"
                                },
                                "aes-192-ctr": {
                                    "cipher": "AES",
                                    "key": 192,
                                    "iv": 16,
                                    "mode": "CTR",
                                    "type": "stream"
                                },
                                "aes-256-ctr": {
                                    "cipher": "AES",
                                    "key": 256,
                                    "iv": 16,
                                    "mode": "CTR",
                                    "type": "stream"
                                },
                                "aes-128-gcm": {
                                    "cipher": "AES",
                                    "key": 128,
                                    "iv": 12,
                                    "mode": "GCM",
                                    "type": "auth"
                                },
                                "aes-192-gcm": {
                                    "cipher": "AES",
                                    "key": 192,
                                    "iv": 12,
                                    "mode": "GCM",
                                    "type": "auth"
                                },
                                "aes-256-gcm": {
                                    "cipher": "AES",
                                    "key": 256,
                                    "iv": 12,
                                    "mode": "GCM",
                                    "type": "auth"
                                }
                            }

                        }, {}],
                        51: [function (require, module, exports) {
                            (function (Buffer) {
                                var xor = require('buffer-xor')

                                function getBlock(self) {
                                    self._prev = self._cipher.encryptBlock(self._prev)
                                    return self._prev
                                }

                                exports.encrypt = function (self, chunk) {
                                    while (self._cache.length < chunk.length) {
                                        self._cache = Buffer.concat([self._cache, getBlock(self)])
                                    }

                                    var pad = self._cache.slice(0, chunk.length)
                                    self._cache = self._cache.slice(chunk.length)
                                    return xor(chunk, pad)
                                }

                            }).call(this, require("buffer").Buffer)
                        }, {"buffer": 64, "buffer-xor": 63}],
                        52: [function (require, module, exports) {
                            var aes = require('./aes')
                            var Buffer = require('safe-buffer').Buffer
                            var Transform = require('cipher-base')
                            var inherits = require('inherits')

                            function StreamCipher(mode, key, iv, decrypt) {
                                Transform.call(this)

                                this._cipher = new aes.AES(key)
                                this._prev = Buffer.from(iv)
                                this._cache = Buffer.allocUnsafe(0)
                                this._secCache = Buffer.allocUnsafe(0)
                                this._decrypt = decrypt
                                this._mode = mode
                            }

                            inherits(StreamCipher, Transform)

                            StreamCipher.prototype._update = function (chunk) {
                                return this._mode.encrypt(this, chunk, this._decrypt)
                            }

                            StreamCipher.prototype._final = function () {
                                this._cipher.scrub()
                            }

                            module.exports = StreamCipher

                        }, {"./aes": 36, "cipher-base": 65, "inherits": 150, "safe-buffer": 191}],
                        53: [function (require, module, exports) {
                            var DES = require('browserify-des')
                            var aes = require('browserify-aes/browser')
                            var aesModes = require('browserify-aes/modes')
                            var desModes = require('browserify-des/modes')
                            var ebtk = require('evp_bytestokey')

                            function createCipher(suite, password) {
                                suite = suite.toLowerCase()

                                var keyLen, ivLen
                                if (aesModes[suite]) {
                                    keyLen = aesModes[suite].key
                                    ivLen = aesModes[suite].iv
                                } else if (desModes[suite]) {
                                    keyLen = desModes[suite].key * 8
                                    ivLen = desModes[suite].iv
                                } else {
                                    throw new TypeError('invalid suite type')
                                }

                                var keys = ebtk(password, false, keyLen, ivLen)
                                return createCipheriv(suite, keys.key, keys.iv)
                            }

                            function createDecipher(suite, password) {
                                suite = suite.toLowerCase()

                                var keyLen, ivLen
                                if (aesModes[suite]) {
                                    keyLen = aesModes[suite].key
                                    ivLen = aesModes[suite].iv
                                } else if (desModes[suite]) {
                                    keyLen = desModes[suite].key * 8
                                    ivLen = desModes[suite].iv
                                } else {
                                    throw new TypeError('invalid suite type')
                                }

                                var keys = ebtk(password, false, keyLen, ivLen)
                                return createDecipheriv(suite, keys.key, keys.iv)
                            }

                            function createCipheriv(suite, key, iv) {
                                suite = suite.toLowerCase()
                                if (aesModes[suite]) return aes.createCipheriv(suite, key, iv)
                                if (desModes[suite]) return new DES({key: key, iv: iv, mode: suite})

                                throw new TypeError('invalid suite type')
                            }

                            function createDecipheriv(suite, key, iv) {
                                suite = suite.toLowerCase()
                                if (aesModes[suite]) return aes.createDecipheriv(suite, key, iv)
                                if (desModes[suite]) return new DES({key: key, iv: iv, mode: suite, decrypt: true})

                                throw new TypeError('invalid suite type')
                            }

                            function getCiphers() {
                                return Object.keys(desModes).concat(aes.getCiphers())
                            }

                            exports.createCipher = exports.Cipher = createCipher
                            exports.createCipheriv = exports.Cipheriv = createCipheriv
                            exports.createDecipher = exports.Decipher = createDecipher
                            exports.createDecipheriv = exports.Decipheriv = createDecipheriv
                            exports.listCiphers = exports.getCiphers = getCiphers

                        }, {
                            "browserify-aes/browser": 38,
                            "browserify-aes/modes": 49,
                            "browserify-des": 54,
                            "browserify-des/modes": 55,
                            "evp_bytestokey": 134
                        }],
                        54: [function (require, module, exports) {
                            (function (Buffer) {
                                var CipherBase = require('cipher-base')
                                var des = require('des.js')
                                var inherits = require('inherits')

                                var modes = {
                                    'des-ede3-cbc': des.CBC.instantiate(des.EDE),
                                    'des-ede3': des.EDE,
                                    'des-ede-cbc': des.CBC.instantiate(des.EDE),
                                    'des-ede': des.EDE,
                                    'des-cbc': des.CBC.instantiate(des.DES),
                                    'des-ecb': des.DES
                                }
                                modes.des = modes['des-cbc']
                                modes.des3 = modes['des-ede3-cbc']
                                module.exports = DES
                                inherits(DES, CipherBase)

                                function DES(opts) {
                                    CipherBase.call(this)
                                    var modeName = opts.mode.toLowerCase()
                                    var mode = modes[modeName]
                                    var type
                                    if (opts.decrypt) {
                                        type = 'decrypt'
                                    } else {
                                        type = 'encrypt'
                                    }
                                    var key = opts.key
                                    if (modeName === 'des-ede' || modeName === 'des-ede-cbc') {
                                        key = Buffer.concat([key, key.slice(0, 8)])
                                    }
                                    var iv = opts.iv
                                    this._des = mode.create({
                                        key: key,
                                        iv: iv,
                                        type: type
                                    })
                                }

                                DES.prototype._update = function (data) {
                                    return new Buffer(this._des.update(data))
                                }
                                DES.prototype._final = function () {
                                    return new Buffer(this._des.final())
                                }

                            }).call(this, require("buffer").Buffer)
                        }, {"buffer": 64, "cipher-base": 65, "des.js": 107, "inherits": 150}],
                        55: [function (require, module, exports) {
                            exports['des-ecb'] = {
                                key: 8,
                                iv: 0
                            }
                            exports['des-cbc'] = exports.des = {
                                key: 8,
                                iv: 8
                            }
                            exports['des-ede3-cbc'] = exports.des3 = {
                                key: 24,
                                iv: 8
                            }
                            exports['des-ede3'] = {
                                key: 24,
                                iv: 0
                            }
                            exports['des-ede-cbc'] = {
                                key: 16,
                                iv: 8
                            }
                            exports['des-ede'] = {
                                key: 16,
                                iv: 0
                            }

                        }, {}],
                        56: [function (require, module, exports) {
                            (function (Buffer) {
                                var bn = require('bn.js');
                                var randomBytes = require('randombytes');
                                module.exports = crt;

                                function blind(priv) {
                                    var r = getr(priv);
                                    var blinder = r.toRed(bn.mont(priv.modulus))
                                        .redPow(new bn(priv.publicExponent)).fromRed();
                                    return {
                                        blinder: blinder,
                                        unblinder: r.invm(priv.modulus)
                                    };
                                }

                                function crt(msg, priv) {
                                    var blinds = blind(priv);
                                    var len = priv.modulus.byteLength();
                                    var mod = bn.mont(priv.modulus);
                                    var blinded = new bn(msg).mul(blinds.blinder).umod(priv.modulus);
                                    var c1 = blinded.toRed(bn.mont(priv.prime1));
                                    var c2 = blinded.toRed(bn.mont(priv.prime2));
                                    var qinv = priv.coefficient;
                                    var p = priv.prime1;
                                    var q = priv.prime2;
                                    var m1 = c1.redPow(priv.exponent1);
                                    var m2 = c2.redPow(priv.exponent2);
                                    m1 = m1.fromRed();
                                    m2 = m2.fromRed();
                                    var h = m1.isub(m2).imul(qinv).umod(p);
                                    h.imul(q);
                                    m2.iadd(h);
                                    return new Buffer(m2.imul(blinds.unblinder).umod(priv.modulus).toArray(false, len));
                                }

                                crt.getr = getr;

                                function getr(priv) {
                                    var len = priv.modulus.byteLength();
                                    var r = new bn(randomBytes(len));
                                    while (r.cmp(priv.modulus) >= 0 || !r.umod(priv.prime1) || !r.umod(priv.prime2)) {
                                        r = new bn(randomBytes(len));
                                    }
                                    return r;
                                }

                            }).call(this, require("buffer").Buffer)
                        }, {"bn.js": 33, "buffer": 64, "randombytes": 175}],
                        57: [function (require, module, exports) {
                            module.exports = require('./browser/algorithms.json')

                        }, {"./browser/algorithms.json": 58}],
                        58: [function (require, module, exports) {
                            module.exports = {
                                "sha224WithRSAEncryption": {
                                    "sign": "rsa",
                                    "hash": "sha224",
                                    "id": "302d300d06096086480165030402040500041c"
                                },
                                "RSA-SHA224": {
                                    "sign": "ecdsa/rsa",
                                    "hash": "sha224",
                                    "id": "302d300d06096086480165030402040500041c"
                                },
                                "sha256WithRSAEncryption": {
                                    "sign": "rsa",
                                    "hash": "sha256",
                                    "id": "3031300d060960864801650304020105000420"
                                },
                                "RSA-SHA256": {
                                    "sign": "ecdsa/rsa",
                                    "hash": "sha256",
                                    "id": "3031300d060960864801650304020105000420"
                                },
                                "sha384WithRSAEncryption": {
                                    "sign": "rsa",
                                    "hash": "sha384",
                                    "id": "3041300d060960864801650304020205000430"
                                },
                                "RSA-SHA384": {
                                    "sign": "ecdsa/rsa",
                                    "hash": "sha384",
                                    "id": "3041300d060960864801650304020205000430"
                                },
                                "sha512WithRSAEncryption": {
                                    "sign": "rsa",
                                    "hash": "sha512",
                                    "id": "3051300d060960864801650304020305000440"
                                },
                                "RSA-SHA512": {
                                    "sign": "ecdsa/rsa",
                                    "hash": "sha512",
                                    "id": "3051300d060960864801650304020305000440"
                                },
                                "RSA-SHA1": {
                                    "sign": "rsa",
                                    "hash": "sha1",
                                    "id": "3021300906052b0e03021a05000414"
                                },
                                "ecdsa-with-SHA1": {
                                    "sign": "ecdsa",
                                    "hash": "sha1",
                                    "id": ""
                                },
                                "sha256": {
                                    "sign": "ecdsa",
                                    "hash": "sha256",
                                    "id": ""
                                },
                                "sha224": {
                                    "sign": "ecdsa",
                                    "hash": "sha224",
                                    "id": ""
                                },
                                "sha384": {
                                    "sign": "ecdsa",
                                    "hash": "sha384",
                                    "id": ""
                                },
                                "sha512": {
                                    "sign": "ecdsa",
                                    "hash": "sha512",
                                    "id": ""
                                },
                                "DSA-SHA": {
                                    "sign": "dsa",
                                    "hash": "sha1",
                                    "id": ""
                                },
                                "DSA-SHA1": {
                                    "sign": "dsa",
                                    "hash": "sha1",
                                    "id": ""
                                },
                                "DSA": {
                                    "sign": "dsa",
                                    "hash": "sha1",
                                    "id": ""
                                },
                                "DSA-WITH-SHA224": {
                                    "sign": "dsa",
                                    "hash": "sha224",
                                    "id": ""
                                },
                                "DSA-SHA224": {
                                    "sign": "dsa",
                                    "hash": "sha224",
                                    "id": ""
                                },
                                "DSA-WITH-SHA256": {
                                    "sign": "dsa",
                                    "hash": "sha256",
                                    "id": ""
                                },
                                "DSA-SHA256": {
                                    "sign": "dsa",
                                    "hash": "sha256",
                                    "id": ""
                                },
                                "DSA-WITH-SHA384": {
                                    "sign": "dsa",
                                    "hash": "sha384",
                                    "id": ""
                                },
                                "DSA-SHA384": {
                                    "sign": "dsa",
                                    "hash": "sha384",
                                    "id": ""
                                },
                                "DSA-WITH-SHA512": {
                                    "sign": "dsa",
                                    "hash": "sha512",
                                    "id": ""
                                },
                                "DSA-SHA512": {
                                    "sign": "dsa",
                                    "hash": "sha512",
                                    "id": ""
                                },
                                "DSA-RIPEMD160": {
                                    "sign": "dsa",
                                    "hash": "rmd160",
                                    "id": ""
                                },
                                "ripemd160WithRSA": {
                                    "sign": "rsa",
                                    "hash": "rmd160",
                                    "id": "3021300906052b2403020105000414"
                                },
                                "RSA-RIPEMD160": {
                                    "sign": "rsa",
                                    "hash": "rmd160",
                                    "id": "3021300906052b2403020105000414"
                                },
                                "md5WithRSAEncryption": {
                                    "sign": "rsa",
                                    "hash": "md5",
                                    "id": "3020300c06082a864886f70d020505000410"
                                },
                                "RSA-MD5": {
                                    "sign": "rsa",
                                    "hash": "md5",
                                    "id": "3020300c06082a864886f70d020505000410"
                                }
                            }

                        }, {}],
                        59: [function (require, module, exports) {
                            module.exports = {
                                "1.3.132.0.10": "secp256k1",
                                "1.3.132.0.33": "p224",
                                "1.2.840.10045.3.1.1": "p192",
                                "1.2.840.10045.3.1.7": "p256",
                                "1.3.132.0.34": "p384",
                                "1.3.132.0.35": "p521"
                            }

                        }, {}],
                        60: [function (require, module, exports) {
                            (function (Buffer) {
                                var createHash = require('create-hash')
                                var stream = require('stream')
                                var inherits = require('inherits')
                                var sign = require('./sign')
                                var verify = require('./verify')

                                var algorithms = require('./algorithms.json')
                                Object.keys(algorithms).forEach(function (key) {
                                    algorithms[key].id = new Buffer(algorithms[key].id, 'hex')
                                    algorithms[key.toLowerCase()] = algorithms[key]
                                })

                                function Sign(algorithm) {
                                    stream.Writable.call(this)

                                    var data = algorithms[algorithm]
                                    if (!data) throw new Error('Unknown message digest')

                                    this._hashType = data.hash
                                    this._hash = createHash(data.hash)
                                    this._tag = data.id
                                    this._signType = data.sign
                                }

                                inherits(Sign, stream.Writable)

                                Sign.prototype._write = function _write(data, _, done) {
                                    this._hash.update(data)
                                    done()
                                }

                                Sign.prototype.update = function update(data, enc) {
                                    if (typeof data === 'string') data = new Buffer(data, enc)

                                    this._hash.update(data)
                                    return this
                                }

                                Sign.prototype.sign = function signMethod(key, enc) {
                                    this.end()
                                    var hash = this._hash.digest()
                                    var sig = sign(hash, key, this._hashType, this._signType, this._tag)

                                    return enc ? sig.toString(enc) : sig
                                }

                                function Verify(algorithm) {
                                    stream.Writable.call(this)

                                    var data = algorithms[algorithm]
                                    if (!data) throw new Error('Unknown message digest')

                                    this._hash = createHash(data.hash)
                                    this._tag = data.id
                                    this._signType = data.sign
                                }

                                inherits(Verify, stream.Writable)

                                Verify.prototype._write = function _write(data, _, done) {
                                    this._hash.update(data)
                                    done()
                                }

                                Verify.prototype.update = function update(data, enc) {
                                    if (typeof data === 'string') data = new Buffer(data, enc)

                                    this._hash.update(data)
                                    return this
                                }

                                Verify.prototype.verify = function verifyMethod(key, sig, enc) {
                                    if (typeof sig === 'string') sig = new Buffer(sig, enc)

                                    this.end()
                                    var hash = this._hash.digest()
                                    return verify(sig, hash, key, this._signType, this._tag)
                                }

                                function createSign(algorithm) {
                                    return new Sign(algorithm)
                                }

                                function createVerify(algorithm) {
                                    return new Verify(algorithm)
                                }

                                module.exports = {
                                    Sign: createSign,
                                    Verify: createVerify,
                                    createSign: createSign,
                                    createVerify: createVerify
                                }

                            }).call(this, require("buffer").Buffer)
                        }, {
                            "./algorithms.json": 58,
                            "./sign": 61,
                            "./verify": 62,
                            "buffer": 64,
                            "create-hash": 68,
                            "inherits": 150,
                            "stream": 200
                        }],
                        61: [function (require, module, exports) {
                            (function (Buffer) {
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
                                var createHmac = require('create-hmac')
                                var crt = require('browserify-rsa')
                                var EC = require('elliptic').ec
                                var BN = require('bn.js')
                                var parseKeys = require('parse-asn1')
                                var curves = require('./curves.json')

                                function sign(hash, key, hashType, signType, tag) {
                                    var priv = parseKeys(key)
                                    if (priv.curve) {
                                        // rsa keys can be interpreted as ecdsa ones in openssl
                                        if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
                                        return ecSign(hash, priv)
                                    } else if (priv.type === 'dsa') {
                                        if (signType !== 'dsa') throw new Error('wrong private key type')
                                        return dsaSign(hash, priv, hashType)
                                    } else {
                                        if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
                                    }
                                    hash = Buffer.concat([tag, hash])
                                    var len = priv.modulus.byteLength()
                                    var pad = [0, 1]
                                    while (hash.length + pad.length + 1 < len) pad.push(0xff)
                                    pad.push(0x00)
                                    var i = -1
                                    while (++i < hash.length) pad.push(hash[i])

                                    var out = crt(pad, priv)
                                    return out
                                }

                                function ecSign(hash, priv) {
                                    var curveId = curves[priv.curve.join('.')]
                                    if (!curveId) throw new Error('unknown curve ' + priv.curve.join('.'))

                                    var curve = new EC(curveId)
                                    var key = curve.keyFromPrivate(priv.privateKey)
                                    var out = key.sign(hash)

                                    return new Buffer(out.toDER())
                                }

                                function dsaSign(hash, priv, algo) {
                                    var x = priv.params.priv_key
                                    var p = priv.params.p
                                    var q = priv.params.q
                                    var g = priv.params.g
                                    var r = new BN(0)
                                    var k
                                    var H = bits2int(hash, q).mod(q)
                                    var s = false
                                    var kv = getKey(x, q, hash, algo)
                                    while (s === false) {
                                        k = makeKey(q, kv, algo)
                                        r = makeR(g, k, p, q)
                                        s = k.invm(q).imul(H.add(x.mul(r))).mod(q)
                                        if (s.cmpn(0) === 0) {
                                            s = false
                                            r = new BN(0)
                                        }
                                    }
                                    return toDER(r, s)
                                }

                                function toDER(r, s) {
                                    r = r.toArray()
                                    s = s.toArray()

                                    // Pad values
                                    if (r[0] & 0x80) r = [0].concat(r)
                                    if (s[0] & 0x80) s = [0].concat(s)

                                    var total = r.length + s.length + 4
                                    var res = [0x30, total, 0x02, r.length]
                                    res = res.concat(r, [0x02, s.length], s)
                                    return new Buffer(res)
                                }

                                function getKey(x, q, hash, algo) {
                                    x = new Buffer(x.toArray())
                                    if (x.length < q.byteLength()) {
                                        var zeros = new Buffer(q.byteLength() - x.length)
                                        zeros.fill(0)
                                        x = Buffer.concat([zeros, x])
                                    }
                                    var hlen = hash.length
                                    var hbits = bits2octets(hash, q)
                                    var v = new Buffer(hlen)
                                    v.fill(1)
                                    var k = new Buffer(hlen)
                                    k.fill(0)
                                    k = createHmac(algo, k).update(v).update(new Buffer([0])).update(x).update(hbits).digest()
                                    v = createHmac(algo, k).update(v).digest()
                                    k = createHmac(algo, k).update(v).update(new Buffer([1])).update(x).update(hbits).digest()
                                    v = createHmac(algo, k).update(v).digest()
                                    return {k: k, v: v}
                                }

                                function bits2int(obits, q) {
                                    var bits = new BN(obits)
                                    var shift = (obits.length << 3) - q.bitLength()
                                    if (shift > 0) bits.ishrn(shift)
                                    return bits
                                }

                                function bits2octets(bits, q) {
                                    bits = bits2int(bits, q)
                                    bits = bits.mod(q)
                                    var out = new Buffer(bits.toArray())
                                    if (out.length < q.byteLength()) {
                                        var zeros = new Buffer(q.byteLength() - out.length)
                                        zeros.fill(0)
                                        out = Buffer.concat([zeros, out])
                                    }
                                    return out
                                }

                                function makeKey(q, kv, algo) {
                                    var t
                                    var k

                                    do {
                                        t = new Buffer(0)

                                        while (t.length * 8 < q.bitLength()) {
                                            kv.v = createHmac(algo, kv.k).update(kv.v).digest()
                                            t = Buffer.concat([t, kv.v])
                                        }

                                        k = bits2int(t, q)
                                        kv.k = createHmac(algo, kv.k).update(kv.v).update(new Buffer([0])).digest()
                                        kv.v = createHmac(algo, kv.k).update(kv.v).digest()
                                    } while (k.cmp(q) !== -1)

                                    return k
                                }

                                function makeR(g, k, p, q) {
                                    return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q)
                                }

                                module.exports = sign
                                module.exports.getKey = getKey
                                module.exports.makeKey = makeKey

                            }).call(this, require("buffer").Buffer)
                        }, {
                            "./curves.json": 59,
                            "bn.js": 33,
                            "browserify-rsa": 56,
                            "buffer": 64,
                            "create-hmac": 70,
                            "elliptic": 117,
                            "parse-asn1": 161
                        }],
                        62: [function (require, module, exports) {
                            (function (Buffer) {
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
                                var BN = require('bn.js')
                                var EC = require('elliptic').ec
                                var parseKeys = require('parse-asn1')
                                var curves = require('./curves.json')

                                function verify(sig, hash, key, signType, tag) {
                                    var pub = parseKeys(key)
                                    if (pub.type === 'ec') {
                                        // rsa keys can be interpreted as ecdsa ones in openssl
                                        if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
                                        return ecVerify(sig, hash, pub)
                                    } else if (pub.type === 'dsa') {
                                        if (signType !== 'dsa') throw new Error('wrong public key type')
                                        return dsaVerify(sig, hash, pub)
                                    } else {
                                        if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
                                    }
                                    hash = Buffer.concat([tag, hash])
                                    var len = pub.modulus.byteLength()
                                    var pad = [1]
                                    var padNum = 0
                                    while (hash.length + pad.length + 2 < len) {
                                        pad.push(0xff)
                                        padNum++
                                    }
                                    pad.push(0x00)
                                    var i = -1
                                    while (++i < hash.length) {
                                        pad.push(hash[i])
                                    }
                                    pad = new Buffer(pad)
                                    var red = BN.mont(pub.modulus)
                                    sig = new BN(sig).toRed(red)

                                    sig = sig.redPow(new BN(pub.publicExponent))
                                    sig = new Buffer(sig.fromRed().toArray())
                                    var out = padNum < 8 ? 1 : 0
                                    len = Math.min(sig.length, pad.length)
                                    if (sig.length !== pad.length) out = 1

                                    i = -1
                                    while (++i < len) out |= sig[i] ^ pad[i]
                                    return out === 0
                                }

                                function ecVerify(sig, hash, pub) {
                                    var curveId = curves[pub.data.algorithm.curve.join('.')]
                                    if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'))

                                    var curve = new EC(curveId)
                                    var pubkey = pub.data.subjectPrivateKey.data

                                    return curve.verify(hash, sig, pubkey)
                                }

                                function dsaVerify(sig, hash, pub) {
                                    var p = pub.data.p
                                    var q = pub.data.q
                                    var g = pub.data.g
                                    var y = pub.data.pub_key
                                    var unpacked = parseKeys.signature.decode(sig, 'der')
                                    var s = unpacked.s
                                    var r = unpacked.r
                                    checkValue(s, q)
                                    checkValue(r, q)
                                    var montp = BN.mont(p)
                                    var w = s.invm(q)
                                    var v = g.toRed(montp)
                                        .redPow(new BN(hash).mul(w).mod(q))
                                        .fromRed()
                                        .mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed())
                                        .mod(p)
                                        .mod(q)
                                    return v.cmp(r) === 0
                                }

                                function checkValue(b, q) {
                                    if (b.cmpn(0) <= 0) throw new Error('invalid sig')
                                    if (b.cmp(q) >= q) throw new Error('invalid sig')
                                }

                                module.exports = verify

                            }).call(this, require("buffer").Buffer)
                        }, {"./curves.json": 59, "bn.js": 33, "buffer": 64, "elliptic": 117, "parse-asn1": 161}],
                        63: [function (require, module, exports) {
                            (function (Buffer) {
                                module.exports = function xor(a, b) {
                                    var length = Math.min(a.length, b.length)
                                    var buffer = new Buffer(length)

                                    for (var i = 0; i < length; ++i) {
                                        buffer[i] = a[i] ^ b[i]
                                    }

                                    return buffer
                                }

                            }).call(this, require("buffer").Buffer)
                        }, {"buffer": 64}],
                        64: [function (require, module, exports) {
                            /*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
                            /* eslint-disable no-proto */

                            'use strict'

                            var base64 = require('base64-js')
                            var ieee754 = require('ieee754')

                            exports.Buffer = Buffer
                            exports.SlowBuffer = SlowBuffer
                            exports.INSPECT_MAX_BYTES = 50

                            var K_MAX_LENGTH = 0x7fffffff
                            exports.kMaxLength = K_MAX_LENGTH

                            /**
                             * If `Buffer.TYPED_ARRAY_SUPPORT`:
                             *   === true    Use Uint8Array implementation (fastest)
                             *   === false   Print warning and recommend using `buffer` v4.x which has an Object
                             *               implementation (most compatible, even IE6)
                             *
                             * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
                             * Opera 11.6+, iOS 4.2+.
                             *
                             * We report that the browser does not support typed arrays if the are not subclassable
                             * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
                             * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
                             * for __proto__ and has a buggy typed array implementation.
                             */
                            Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

                            if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
                                typeof console.error === 'function') {
                                console.error(
                                    'This browser lacks typed array (Uint8Array) support which is required by ' +
                                    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
                                )
                            }

                            function typedArraySupport() {
                                // Can typed array instances can be augmented?
                                try {
                                    var arr = new Uint8Array(1)
                                    arr.__proto__ = {
                                        __proto__: Uint8Array.prototype, foo: function () {
                                            return 42
                                        }
                                    }
                                    return arr.foo() === 42
                                } catch (e) {
                                    return false
                                }
                            }

                            Object.defineProperty(Buffer.prototype, 'parent', {
                                get: function () {
                                    if (!(this instanceof Buffer)) {
                                        return undefined
                                    }
                                    return this.buffer
                                }
                            })

                            Object.defineProperty(Buffer.prototype, 'offset', {
                                get: function () {
                                    if (!(this instanceof Buffer)) {
                                        return undefined
                                    }
                                    return this.byteOffset
                                }
                            })

                            function createBuffer(length) {
                                if (length > K_MAX_LENGTH) {
                                    throw new RangeError('Invalid typed array length')
                                }
                                // Return an augmented `Uint8Array` instance
                                var buf = new Uint8Array(length)
                                buf.__proto__ = Buffer.prototype
                                return buf
                            }

                            /**
                             * The Buffer constructor returns instances of `Uint8Array` that have their
                             * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
                             * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
                             * and the `Uint8Array` methods. Square bracket notation works as expected -- it
                             * returns a single octet.
                             *
                             * The `Uint8Array` prototype remains unmodified.
                             */

                            function Buffer(arg, encodingOrOffset, length) {
                                // Common case.
                                if (typeof arg === 'number') {
                                    if (typeof encodingOrOffset === 'string') {
                                        throw new Error(
                                            'If encoding is specified then the first argument must be a string'
                                        )
                                    }
                                    return allocUnsafe(arg)
                                }
                                return from(arg, encodingOrOffset, length)
                            }

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
                            if (typeof Symbol !== 'undefined' && Symbol.species &&
                                Buffer[Symbol.species] === Buffer) {
                                Object.defineProperty(Buffer, Symbol.species, {
                                    value: null,
                                    configurable: true,
                                    enumerable: false,
                                    writable: false
                                })
                            }

                            Buffer.poolSize = 8192 // not used by this implementation

                            function from(value, encodingOrOffset, length) {
                                if (typeof value === 'number') {
                                    throw new TypeError('"value" argument must not be a number')
                                }

                                if (isArrayBuffer(value) || (value && isArrayBuffer(value.buffer))) {
                                    return fromArrayBuffer(value, encodingOrOffset, length)
                                }

                                if (typeof value === 'string') {
                                    return fromString(value, encodingOrOffset)
                                }

                                return fromObject(value)
                            }

                            /**
                             * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
                             * if value is a number.
                             * Buffer.from(str[, encoding])
                             * Buffer.from(array)
                             * Buffer.from(buffer)
                             * Buffer.from(arrayBuffer[, byteOffset[, length]])
                             **/
                            Buffer.from = function (value, encodingOrOffset, length) {
                                return from(value, encodingOrOffset, length)
                            }

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
                            Buffer.prototype.__proto__ = Uint8Array.prototype
                            Buffer.__proto__ = Uint8Array

                            function assertSize(size) {
                                if (typeof size !== 'number') {
                                    throw new TypeError('"size" argument must be of type number')
                                } else if (size < 0) {
                                    throw new RangeError('"size" argument must not be negative')
                                }
                            }

                            function alloc(size, fill, encoding) {
                                assertSize(size)
                                if (size <= 0) {
                                    return createBuffer(size)
                                }
                                if (fill !== undefined) {
                                    // Only pay attention to encoding if it's a string. This
                                    // prevents accidentally sending in a number that would
                                    // be interpretted as a start offset.
                                    return typeof encoding === 'string'
                                        ? createBuffer(size).fill(fill, encoding)
                                        : createBuffer(size).fill(fill)
                                }
                                return createBuffer(size)
                            }

                            /**
                             * Creates a new filled Buffer instance.
                             * alloc(size[, fill[, encoding]])
                             **/
                            Buffer.alloc = function (size, fill, encoding) {
                                return alloc(size, fill, encoding)
                            }

                            function allocUnsafe(size) {
                                assertSize(size)
                                return createBuffer(size < 0 ? 0 : checked(size) | 0)
                            }

                            /**
                             * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
                             * */
                            Buffer.allocUnsafe = function (size) {
                                return allocUnsafe(size)
                            }
                            /**
                             * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
                             */
                            Buffer.allocUnsafeSlow = function (size) {
                                return allocUnsafe(size)
                            }

                            function fromString(string, encoding) {
                                if (typeof encoding !== 'string' || encoding === '') {
                                    encoding = 'utf8'
                                }

                                if (!Buffer.isEncoding(encoding)) {
                                    throw new TypeError('Unknown encoding: ' + encoding)
                                }

                                var length = byteLength(string, encoding) | 0
                                var buf = createBuffer(length)

                                var actual = buf.write(string, encoding)

                                if (actual !== length) {
                                    // Writing a hex string, for example, that contains invalid characters will
                                    // cause everything after the first invalid character to be ignored. (e.g.
                                    // 'abxxcd' will be treated as 'ab')
                                    buf = buf.slice(0, actual)
                                }

                                return buf
                            }

                            function fromArrayLike(array) {
                                var length = array.length < 0 ? 0 : checked(array.length) | 0
                                var buf = createBuffer(length)
                                for (var i = 0; i < length; i += 1) {
                                    buf[i] = array[i] & 255
                                }
                                return buf
                            }

                            function fromArrayBuffer(array, byteOffset, length) {
                                if (byteOffset < 0 || array.byteLength < byteOffset) {
                                    throw new RangeError('"offset" is outside of buffer bounds')
                                }

                                if (array.byteLength < byteOffset + (length || 0)) {
                                    throw new RangeError('"length" is outside of buffer bounds')
                                }

                                var buf
                                if (byteOffset === undefined && length === undefined) {
                                    buf = new Uint8Array(array)
                                } else if (length === undefined) {
                                    buf = new Uint8Array(array, byteOffset)
                                } else {
                                    buf = new Uint8Array(array, byteOffset, length)
                                }

                                // Return an augmented `Uint8Array` instance
                                buf.__proto__ = Buffer.prototype
                                return buf
                            }

                            function fromObject(obj) {
                                if (Buffer.isBuffer(obj)) {
                                    var len = checked(obj.length) | 0
                                    var buf = createBuffer(len)

                                    if (buf.length === 0) {
                                        return buf
                                    }

                                    obj.copy(buf, 0, 0, len)
                                    return buf
                                }

                                if (obj) {
                                    if (ArrayBuffer.isView(obj) || 'length' in obj) {
                                        if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
                                            return createBuffer(0)
                                        }
                                        return fromArrayLike(obj)
                                    }

                                    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
                                        return fromArrayLike(obj.data)
                                    }
                                }

                                throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object.')
                            }

                            function checked(length) {
                                // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
                                // length is NaN (which is otherwise coerced to zero.)
                                if (length >= K_MAX_LENGTH) {
                                    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                                        'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
                                }
                                return length | 0
                            }

                            function SlowBuffer(length) {
                                if (+length != length) { // eslint-disable-line eqeqeq
                                    length = 0
                                }
                                return Buffer.alloc(+length)
                            }

                            Buffer.isBuffer = function isBuffer(b) {
                                return b != null && b._isBuffer === true
                            }

                            Buffer.compare = function compare(a, b) {
                                if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
                                    throw new TypeError('Arguments must be Buffers')
                                }

                                if (a === b) return 0

                                var x = a.length
                                var y = b.length

                                for (var i = 0, len = Math.min(x, y); i < len; ++i) {
                                    if (a[i] !== b[i]) {
                                        x = a[i]
                                        y = b[i]
                                        break
                                    }
                                }

                                if (x < y) return -1
                                if (y < x) return 1
                                return 0
                            }

                            Buffer.isEncoding = function isEncoding(encoding) {
                                switch (String(encoding).toLowerCase()) {
                                    case 'hex':
                                    case 'utf8':
                                    case 'utf-8':
                                    case 'ascii':
                                    case 'latin1':
                                    case 'binary':
                                    case 'base64':
                                    case 'ucs2':
                                    case 'ucs-2':
                                    case 'utf16le':
                                    case 'utf-16le':
                                        return true
                                    default:
                                        return false
                                }
                            }

                            Buffer.concat = function concat(list, length) {
                                if (!Array.isArray(list)) {
                                    throw new TypeError('"list" argument must be an Array of Buffers')
                                }

                                if (list.length === 0) {
                                    return Buffer.alloc(0)
                                }

                                var i
                                if (length === undefined) {
                                    length = 0
                                    for (i = 0; i < list.length; ++i) {
                                        length += list[i].length
                                    }
                                }

                                var buffer = Buffer.allocUnsafe(length)
                                var pos = 0
                                for (i = 0; i < list.length; ++i) {
                                    var buf = list[i]
                                    if (ArrayBuffer.isView(buf)) {
                                        buf = Buffer.from(buf)
                                    }
                                    if (!Buffer.isBuffer(buf)) {
                                        throw new TypeError('"list" argument must be an Array of Buffers')
                                    }
                                    buf.copy(buffer, pos)
                                    pos += buf.length
                                }
                                return buffer
                            }

                            function byteLength(string, encoding) {
                                if (Buffer.isBuffer(string)) {
                                    return string.length
                                }
                                if (ArrayBuffer.isView(string) || isArrayBuffer(string)) {
                                    return string.byteLength
                                }
                                if (typeof string !== 'string') {
                                    string = '' + string
                                }

                                var len = string.length
                                if (len === 0) return 0

                                // Use a for loop to avoid recursion
                                var loweredCase = false
                                for (; ;) {
                                    switch (encoding) {
                                        case 'ascii':
                                        case 'latin1':
                                        case 'binary':
                                            return len
                                        case 'utf8':
                                        case 'utf-8':
                                        case undefined:
                                            return utf8ToBytes(string).length
                                        case 'ucs2':
                                        case 'ucs-2':
                                        case 'utf16le':
                                        case 'utf-16le':
                                            return len * 2
                                        case 'hex':
                                            return len >>> 1
                                        case 'base64':
                                            return base64ToBytes(string).length
                                        default:
                                            if (loweredCase) return utf8ToBytes(string).length // assume utf8
                                            encoding = ('' + encoding).toLowerCase()
                                            loweredCase = true
                                    }
                                }
                            }

                            Buffer.byteLength = byteLength

                            function slowToString(encoding, start, end) {
                                var loweredCase = false

                                // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
                                // property of a typed array.

                                // This behaves neither like String nor Uint8Array in that we set start/end
                                // to their upper/lower bounds if the value passed is out of range.
                                // undefined is handled specially as per ECMA-262 6th Edition,
                                // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
                                if (start === undefined || start < 0) {
                                    start = 0
                                }
                                // Return early if start > this.length. Done here to prevent potential uint32
                                // coercion fail below.
                                if (start > this.length) {
                                    return ''
                                }

                                if (end === undefined || end > this.length) {
                                    end = this.length
                                }

                                if (end <= 0) {
                                    return ''
                                }

                                // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
                                end >>>= 0
                                start >>>= 0

                                if (end <= start) {
                                    return ''
                                }

                                if (!encoding) encoding = 'utf8'

                                while (true) {
                                    switch (encoding) {
                                        case 'hex':
                                            return hexSlice(this, start, end)

                                        case 'utf8':
                                        case 'utf-8':
                                            return utf8Slice(this, start, end)

                                        case 'ascii':
                                            return asciiSlice(this, start, end)

                                        case 'latin1':
                                        case 'binary':
                                            return latin1Slice(this, start, end)

                                        case 'base64':
                                            return base64Slice(this, start, end)

                                        case 'ucs2':
                                        case 'ucs-2':
                                        case 'utf16le':
                                        case 'utf-16le':
                                            return utf16leSlice(this, start, end)

                                        default:
                                            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
                                            encoding = (encoding + '').toLowerCase()
                                            loweredCase = true
                                    }
                                }
                            }

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
                            Buffer.prototype._isBuffer = true

                            function swap(b, n, m) {
                                var i = b[n]
                                b[n] = b[m]
                                b[m] = i
                            }

                            Buffer.prototype.swap16 = function swap16() {
                                var len = this.length
                                if (len % 2 !== 0) {
                                    throw new RangeError('Buffer size must be a multiple of 16-bits')
                                }
                                for (var i = 0; i < len; i += 2) {
                                    swap(this, i, i + 1)
                                }
                                return this
                            }

                            Buffer.prototype.swap32 = function swap32() {
                                var len = this.length
                                if (len % 4 !== 0) {
                                    throw new RangeError('Buffer size must be a multiple of 32-bits')
                                }
                                for (var i = 0; i < len; i += 4) {
                                    swap(this, i, i + 3)
                                    swap(this, i + 1, i + 2)
                                }
                                return this
                            }

                            Buffer.prototype.swap64 = function swap64() {
                                var len = this.length
                                if (len % 8 !== 0) {
                                    throw new RangeError('Buffer size must be a multiple of 64-bits')
                                }
                                for (var i = 0; i < len; i += 8) {
                                    swap(this, i, i + 7)
                                    swap(this, i + 1, i + 6)
                                    swap(this, i + 2, i + 5)
                                    swap(this, i + 3, i + 4)
                                }
                                return this
                            }

                            Buffer.prototype.toString = function toString() {
                                var length = this.length
                                if (length === 0) return ''
                                if (arguments.length === 0) return utf8Slice(this, 0, length)
                                return slowToString.apply(this, arguments)
                            }

                            Buffer.prototype.toLocaleString = Buffer.prototype.toString

                            Buffer.prototype.equals = function equals(b) {
                                if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
                                if (this === b) return true
                                return Buffer.compare(this, b) === 0
                            }

                            Buffer.prototype.inspect = function inspect() {
                                var str = ''
                                var max = exports.INSPECT_MAX_BYTES
                                if (this.length > 0) {
                                    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
                                    if (this.length > max) str += ' ... '
                                }
                                return '<Buffer ' + str + '>'
                            }

                            Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
                                if (!Buffer.isBuffer(target)) {
                                    throw new TypeError('Argument must be a Buffer')
                                }

                                if (start === undefined) {
                                    start = 0
                                }
                                if (end === undefined) {
                                    end = target ? target.length : 0
                                }
                                if (thisStart === undefined) {
                                    thisStart = 0
                                }
                                if (thisEnd === undefined) {
                                    thisEnd = this.length
                                }

                                if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
                                    throw new RangeError('out of range index')
                                }

                                if (thisStart >= thisEnd && start >= end) {
                                    return 0
                                }
                                if (thisStart >= thisEnd) {
                                    return -1
                                }
                                if (start >= end) {
                                    return 1
                                }

                                start >>>= 0
                                end >>>= 0
                                thisStart >>>= 0
                                thisEnd >>>= 0

                                if (this === target) return 0

                                var x = thisEnd - thisStart
                                var y = end - start
                                var len = Math.min(x, y)

                                var thisCopy = this.slice(thisStart, thisEnd)
                                var targetCopy = target.slice(start, end)

                                for (var i = 0; i < len; ++i) {
                                    if (thisCopy[i] !== targetCopy[i]) {
                                        x = thisCopy[i]
                                        y = targetCopy[i]
                                        break
                                    }
                                }

                                if (x < y) return -1
                                if (y < x) return 1
                                return 0
                            }

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
                            function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
                                // Empty buffer means no match
                                if (buffer.length === 0) return -1

                                // Normalize byteOffset
                                if (typeof byteOffset === 'string') {
                                    encoding = byteOffset
                                    byteOffset = 0
                                } else if (byteOffset > 0x7fffffff) {
                                    byteOffset = 0x7fffffff
                                } else if (byteOffset < -0x80000000) {
                                    byteOffset = -0x80000000
                                }
                                byteOffset = +byteOffset  // Coerce to Number.
                                if (numberIsNaN(byteOffset)) {
                                    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
                                    byteOffset = dir ? 0 : (buffer.length - 1)
                                }

                                // Normalize byteOffset: negative offsets start from the end of the buffer
                                if (byteOffset < 0) byteOffset = buffer.length + byteOffset
                                if (byteOffset >= buffer.length) {
                                    if (dir) return -1
                                    else byteOffset = buffer.length - 1
                                } else if (byteOffset < 0) {
                                    if (dir) byteOffset = 0
                                    else return -1
                                }

                                // Normalize val
                                if (typeof val === 'string') {
                                    val = Buffer.from(val, encoding)
                                }

                                // Finally, search either indexOf (if dir is true) or lastIndexOf
                                if (Buffer.isBuffer(val)) {
                                    // Special case: looking for empty string/buffer always fails
                                    if (val.length === 0) {
                                        return -1
                                    }
                                    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
                                } else if (typeof val === 'number') {
                                    val = val & 0xFF // Search for a byte value [0-255]
                                    if (typeof Uint8Array.prototype.indexOf === 'function') {
                                        if (dir) {
                                            return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
                                        } else {
                                            return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
                                        }
                                    }
                                    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)
                                }

                                throw new TypeError('val must be string, number or Buffer')
                            }

                            function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
                                var indexSize = 1
                                var arrLength = arr.length
                                var valLength = val.length

                                if (encoding !== undefined) {
                                    encoding = String(encoding).toLowerCase()
                                    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
                                        encoding === 'utf16le' || encoding === 'utf-16le') {
                                        if (arr.length < 2 || val.length < 2) {
                                            return -1
                                        }
                                        indexSize = 2
                                        arrLength /= 2
                                        valLength /= 2
                                        byteOffset /= 2
                                    }
                                }

                                function read(buf, i) {
                                    if (indexSize === 1) {
                                        return buf[i]
                                    } else {
                                        return buf.readUInt16BE(i * indexSize)
                                    }
                                }

                                var i
                                if (dir) {
                                    var foundIndex = -1
                                    for (i = byteOffset; i < arrLength; i++) {
                                        if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
                                            if (foundIndex === -1) foundIndex = i
                                            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
                                        } else {
                                            if (foundIndex !== -1) i -= i - foundIndex
                                            foundIndex = -1
                                        }
                                    }
                                } else {
                                    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
                                    for (i = byteOffset; i >= 0; i--) {
                                        var found = true
                                        for (var j = 0; j < valLength; j++) {
                                            if (read(arr, i + j) !== read(val, j)) {
                                                found = false
                                                break
                                            }
                                        }
                                        if (found) return i
                                    }
                                }

                                return -1
                            }

                            Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
                                return this.indexOf(val, byteOffset, encoding) !== -1
                            }

                            Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
                                return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
                            }

                            Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
                                return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
                            }

                            function hexWrite(buf, string, offset, length) {
                                offset = Number(offset) || 0
                                var remaining = buf.length - offset
                                if (!length) {
                                    length = remaining
                                } else {
                                    length = Number(length)
                                    if (length > remaining) {
                                        length = remaining
                                    }
                                }

                                var strLen = string.length

                                if (length > strLen / 2) {
                                    length = strLen / 2
                                }
                                for (var i = 0; i < length; ++i) {
                                    var parsed = parseInt(string.substr(i * 2, 2), 16)
                                    if (numberIsNaN(parsed)) return i
                                    buf[offset + i] = parsed
                                }
                                return i
                            }

                            function utf8Write(buf, string, offset, length) {
                                return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
                            }

                            function asciiWrite(buf, string, offset, length) {
                                return blitBuffer(asciiToBytes(string), buf, offset, length)
                            }

                            function latin1Write(buf, string, offset, length) {
                                return asciiWrite(buf, string, offset, length)
                            }

                            function base64Write(buf, string, offset, length) {
                                return blitBuffer(base64ToBytes(string), buf, offset, length)
                            }

                            function ucs2Write(buf, string, offset, length) {
                                return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
                            }

                            Buffer.prototype.write = function write(string, offset, length, encoding) {
                                // Buffer#write(string)
                                if (offset === undefined) {
                                    encoding = 'utf8'
                                    length = this.length
                                    offset = 0
                                    // Buffer#write(string, encoding)
                                } else if (length === undefined && typeof offset === 'string') {
                                    encoding = offset
                                    length = this.length
                                    offset = 0
                                    // Buffer#write(string, offset[, length][, encoding])
                                } else if (isFinite(offset)) {
                                    offset = offset >>> 0
                                    if (isFinite(length)) {
                                        length = length >>> 0
                                        if (encoding === undefined) encoding = 'utf8'
                                    } else {
                                        encoding = length
                                        length = undefined
                                    }
                                } else {
                                    throw new Error(
                                        'Buffer.write(string, encoding, offset[, length]) is no longer supported'
                                    )
                                }

                                var remaining = this.length - offset
                                if (length === undefined || length > remaining) length = remaining

                                if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
                                    throw new RangeError('Attempt to write outside buffer bounds')
                                }

                                if (!encoding) encoding = 'utf8'

                                var loweredCase = false
                                for (; ;) {
                                    switch (encoding) {
                                        case 'hex':
                                            return hexWrite(this, string, offset, length)

                                        case 'utf8':
                                        case 'utf-8':
                                            return utf8Write(this, string, offset, length)

                                        case 'ascii':
                                            return asciiWrite(this, string, offset, length)

                                        case 'latin1':
                                        case 'binary':
                                            return latin1Write(this, string, offset, length)

                                        case 'base64':
                                            // Warning: maxLength not taken into account in base64Write
                                            return base64Write(this, string, offset, length)

                                        case 'ucs2':
                                        case 'ucs-2':
                                        case 'utf16le':
                                        case 'utf-16le':
                                            return ucs2Write(this, string, offset, length)

                                        default:
                                            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
                                            encoding = ('' + encoding).toLowerCase()
                                            loweredCase = true
                                    }
                                }
                            }

                            Buffer.prototype.toJSON = function toJSON() {
                                return {
                                    type: 'Buffer',
                                    data: Array.prototype.slice.call(this._arr || this, 0)
                                }
                            }

                            function base64Slice(buf, start, end) {
                                if (start === 0 && end === buf.length) {
                                    return base64.fromByteArray(buf)
                                } else {
                                    return base64.fromByteArray(buf.slice(start, end))
                                }
                            }

                            function utf8Slice(buf, start, end) {
                                end = Math.min(buf.length, end)
                                var res = []

                                var i = start
                                while (i < end) {
                                    var firstByte = buf[i]
                                    var codePoint = null
                                    var bytesPerSequence = (firstByte > 0xEF) ? 4
                                        : (firstByte > 0xDF) ? 3
                                            : (firstByte > 0xBF) ? 2
                                                : 1

                                    if (i + bytesPerSequence <= end) {
                                        var secondByte, thirdByte, fourthByte, tempCodePoint

                                        switch (bytesPerSequence) {
                                            case 1:
                                                if (firstByte < 0x80) {
                                                    codePoint = firstByte
                                                }
                                                break
                                            case 2:
                                                secondByte = buf[i + 1]
                                                if ((secondByte & 0xC0) === 0x80) {
                                                    tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
                                                    if (tempCodePoint > 0x7F) {
                                                        codePoint = tempCodePoint
                                                    }
                                                }
                                                break
                                            case 3:
                                                secondByte = buf[i + 1]
                                                thirdByte = buf[i + 2]
                                                if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                                                    tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
                                                    if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                                                        codePoint = tempCodePoint
                                                    }
                                                }
                                                break
                                            case 4:
                                                secondByte = buf[i + 1]
                                                thirdByte = buf[i + 2]
                                                fourthByte = buf[i + 3]
                                                if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                                                    tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
                                                    if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                                                        codePoint = tempCodePoint
                                                    }
                                                }
                                        }
                                    }

                                    if (codePoint === null) {
                                        // we did not generate a valid codePoint so insert a
                                        // replacement char (U+FFFD) and advance only 1 byte
                                        codePoint = 0xFFFD
                                        bytesPerSequence = 1
                                    } else if (codePoint > 0xFFFF) {
                                        // encode to utf16 (surrogate pair dance)
                                        codePoint -= 0x10000
                                        res.push(codePoint >>> 10 & 0x3FF | 0xD800)
                                        codePoint = 0xDC00 | codePoint & 0x3FF
                                    }

                                    res.push(codePoint)
                                    i += bytesPerSequence
                                }

                                return decodeCodePointsArray(res)
                            }

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
                            var MAX_ARGUMENTS_LENGTH = 0x1000

                            function decodeCodePointsArray(codePoints) {
                                var len = codePoints.length
                                if (len <= MAX_ARGUMENTS_LENGTH) {
                                    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
                                }

                                // Decode in chunks to avoid "call stack size exceeded".
                                var res = ''
                                var i = 0
                                while (i < len) {
                                    res += String.fromCharCode.apply(
                                        String,
                                        codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
                                    )
                                }
                                return res
                            }

                            function asciiSlice(buf, start, end) {
                                var ret = ''
                                end = Math.min(buf.length, end)

                                for (var i = start; i < end; ++i) {
                                    ret += String.fromCharCode(buf[i] & 0x7F)
                                }
                                return ret
                            }

                            function latin1Slice(buf, start, end) {
                                var ret = ''
                                end = Math.min(buf.length, end)

                                for (var i = start; i < end; ++i) {
                                    ret += String.fromCharCode(buf[i])
                                }
                                return ret
                            }

                            function hexSlice(buf, start, end) {
                                var len = buf.length

                                if (!start || start < 0) start = 0
                                if (!end || end < 0 || end > len) end = len

                                var out = ''
                                for (var i = start; i < end; ++i) {
                                    out += toHex(buf[i])
                                }
                                return out
                            }

                            function utf16leSlice(buf, start, end) {
                                var bytes = buf.slice(start, end)
                                var res = ''
                                for (var i = 0; i < bytes.length; i += 2) {
                                    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
                                }
                                return res
                            }

                            Buffer.prototype.slice = function slice(start, end) {
                                var len = this.length
                                start = ~~start
                                end = end === undefined ? len : ~~end

                                if (start < 0) {
                                    start += len
                                    if (start < 0) start = 0
                                } else if (start > len) {
                                    start = len
                                }

                                if (end < 0) {
                                    end += len
                                    if (end < 0) end = 0
                                } else if (end > len) {
                                    end = len
                                }

                                if (end < start) end = start

                                var newBuf = this.subarray(start, end)
                                // Return an augmented `Uint8Array` instance
                                newBuf.__proto__ = Buffer.prototype
                                return newBuf
                            }

                            /*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
                            function checkOffset(offset, ext, length) {
                                if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
                                if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
                            }

                            Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
                                offset = offset >>> 0
                                byteLength = byteLength >>> 0
                                if (!noAssert) checkOffset(offset, byteLength, this.length)

                                var val = this[offset]
                                var mul = 1
                                var i = 0
                                while (++i < byteLength && (mul *= 0x100)) {
                                    val += this[offset + i] * mul
                                }

                                return val
                            }

                            Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
                                offset = offset >>> 0
                                byteLength = byteLength >>> 0
                                if (!noAssert) {
                                    checkOffset(offset, byteLength, this.length)
                                }

                                var val = this[offset + --byteLength]
                                var mul = 1
                                while (byteLength > 0 && (mul *= 0x100)) {
                                    val += this[offset + --byteLength] * mul
                                }

                                return val
                            }

                            Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
                                offset = offset >>> 0
                                if (!noAssert) checkOffset(offset, 1, this.length)
                                return this[offset]
                            }

                            Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
                                offset = offset >>> 0
                                if (!noAssert) checkOffset(offset, 2, this.length)
                                return this[offset] | (this[offset + 1] << 8)
                            }

                            Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
                                offset = offset >>> 0
                                if (!noAssert) checkOffset(offset, 2, this.length)
                                return (this[offset] << 8) | this[offset + 1]
                            }

                            Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
                                offset = offset >>> 0
                                if (!noAssert) checkOffset(offset, 4, this.length)

                                return ((this[offset]) |
                                    (this[offset + 1] << 8) |
                                    (this[offset + 2] << 16)) +
                                    (this[offset + 3] * 0x1000000)
                            }

                            Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
                                offset = offset >>> 0
                                if (!noAssert) checkOffset(offset, 4, this.length)

                                return (this[offset] * 0x1000000) +
                                    ((this[offset + 1] << 16) |
                                        (this[offset + 2] << 8) |
                                        this[offset + 3])
                            }

                            Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
                                offset = offset >>> 0
                                byteLength = byteLength >>> 0
                                if (!noAssert) checkOffset(offset, byteLength, this.length)

                                var val = this[offset]
                                var mul = 1
                                var i = 0
                                while (++i < byteLength && (mul *= 0x100)) {
                                    val += this[offset + i] * mul
                                }
                                mul *= 0x80

                                if (val >= mul) val -= Math.pow(2, 8 * byteLength)

                                return val
                            }

                            Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
                                offset = offset >>> 0
                                byteLength = byteLength >>> 0
                                if (!noAssert) checkOffset(offset, byteLength, this.length)

                                var i = byteLength
                                var mul = 1
                                var val = this[offset + --i]
                                while (i > 0 && (mul *= 0x100)) {
                                    val += this[offset + --i] * mul
                                }
                                mul *= 0x80

                                if (val >= mul) val -= Math.pow(2, 8 * byteLength)

                                return val
                            }

                            Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
                                offset = offset >>> 0
                                if (!noAssert) checkOffset(offset, 1, this.length)
                                if (!(this[offset] & 0x80)) return (this[offset])
                                return ((0xff - this[offset] + 1) * -1)
                            }

                            Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
                                offset = offset >>> 0
                                if (!noAssert) checkOffset(offset, 2, this.length)
                                var val = this[offset] | (this[offset + 1] << 8)
                                return (val & 0x8000) ? val | 0xFFFF0000 : val
                            }

                            Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
                                offset = offset >>> 0
                                if (!noAssert) checkOffset(offset, 2, this.length)
                                var val = this[offset + 1] | (this[offset] << 8)
                                return (val & 0x8000) ? val | 0xFFFF0000 : val
                            }

                            Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
                                offset = offset >>> 0
                                if (!noAssert) checkOffset(offset, 4, this.length)

                                return (this[offset]) |
                                    (this[offset + 1] << 8) |
                                    (this[offset + 2] << 16) |
                                    (this[offset + 3] << 24)
                            }

                            Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
                                offset = offset >>> 0
                                if (!noAssert) checkOffset(offset, 4, this.length)

                                return (this[offset] << 24) |
                                    (this[offset + 1] << 16) |
                                    (this[offset + 2] << 8) |
                                    (this[offset + 3])
                            }

                            Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
                                offset = offset >>> 0
                                if (!noAssert) checkOffset(offset, 4, this.length)
                                return ieee754.read(this, offset, true, 23, 4)
                            }

                            Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
                                offset = offset >>> 0
                                if (!noAssert) checkOffset(offset, 4, this.length)
                                return ieee754.read(this, offset, false, 23, 4)
                            }

                            Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
                                offset = offset >>> 0
                                if (!noAssert) checkOffset(offset, 8, this.length)
                                return ieee754.read(this, offset, true, 52, 8)
                            }

                            Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
                                offset = offset >>> 0
                                if (!noAssert) checkOffset(offset, 8, this.length)
                                return ieee754.read(this, offset, false, 52, 8)
                            }

                            function checkInt(buf, value, offset, ext, max, min) {
                                if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
                                if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
                                if (offset + ext > buf.length) throw new RangeError('Index out of range')
                            }

                            Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
                                value = +value
                                offset = offset >>> 0
                                byteLength = byteLength >>> 0
                                if (!noAssert) {
                                    var maxBytes = Math.pow(2, 8 * byteLength) - 1
                                    checkInt(this, value, offset, byteLength, maxBytes, 0)
                                }

                                var mul = 1
                                var i = 0
                                this[offset] = value & 0xFF
                                while (++i < byteLength && (mul *= 0x100)) {
                                    this[offset + i] = (value / mul) & 0xFF
                                }

                                return offset + byteLength
                            }

                            Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
                                value = +value
                                offset = offset >>> 0
                                byteLength = byteLength >>> 0
                                if (!noAssert) {
                                    var maxBytes = Math.pow(2, 8 * byteLength) - 1
                                    checkInt(this, value, offset, byteLength, maxBytes, 0)
                                }

                                var i = byteLength - 1
                                var mul = 1
                                this[offset + i] = value & 0xFF
                                while (--i >= 0 && (mul *= 0x100)) {
                                    this[offset + i] = (value / mul) & 0xFF
                                }

                                return offset + byteLength
                            }

                            Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
                                value = +value
                                offset = offset >>> 0
                                if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
                                this[offset] = (value & 0xff)
                                return offset + 1
                            }

                            Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
                                value = +value
                                offset = offset >>> 0
                                if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
                                this[offset] = (value & 0xff)
                                this[offset + 1] = (value >>> 8)
                                return offset + 2
                            }

                            Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
                                value = +value
                                offset = offset >>> 0
                                if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
                                this[offset] = (value >>> 8)
                                this[offset + 1] = (value & 0xff)
                                return offset + 2
                            }

                            Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
                                value = +value
                                offset = offset >>> 0
                                if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
                                this[offset + 3] = (value >>> 24)
                                this[offset + 2] = (value >>> 16)
                                this[offset + 1] = (value >>> 8)
                                this[offset] = (value & 0xff)
                                return offset + 4
                            }

                            Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
                                value = +value
                                offset = offset >>> 0
                                if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
                                this[offset] = (value >>> 24)
                                this[offset + 1] = (value >>> 16)
                                this[offset + 2] = (value >>> 8)
                                this[offset + 3] = (value & 0xff)
                                return offset + 4
                            }

                            Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
                                value = +value
                                offset = offset >>> 0
                                if (!noAssert) {
                                    var limit = Math.pow(2, (8 * byteLength) - 1)

                                    checkInt(this, value, offset, byteLength, limit - 1, -limit)
                                }

                                var i = 0
                                var mul = 1
                                var sub = 0
                                this[offset] = value & 0xFF
                                while (++i < byteLength && (mul *= 0x100)) {
                                    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
                                        sub = 1
                                    }
                                    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
                                }

                                return offset + byteLength
                            }

                            Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
                                value = +value
                                offset = offset >>> 0
                                if (!noAssert) {
                                    var limit = Math.pow(2, (8 * byteLength) - 1)

                                    checkInt(this, value, offset, byteLength, limit - 1, -limit)
                                }

                                var i = byteLength - 1
                                var mul = 1
                                var sub = 0
                                this[offset + i] = value & 0xFF
                                while (--i >= 0 && (mul *= 0x100)) {
                                    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
                                        sub = 1
                                    }
                                    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
                                }

                                return offset + byteLength
                            }

                            Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
                                value = +value
                                offset = offset >>> 0
                                if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
                                if (value < 0) value = 0xff + value + 1
                                this[offset] = (value & 0xff)
                                return offset + 1
                            }

                            Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
                                value = +value
                                offset = offset >>> 0
                                if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
                                this[offset] = (value & 0xff)
                                this[offset + 1] = (value >>> 8)
                                return offset + 2
                            }

                            Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
                                value = +value
                                offset = offset >>> 0
                                if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
                                this[offset] = (value >>> 8)
                                this[offset + 1] = (value & 0xff)
                                return offset + 2
                            }

                            Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
                                value = +value
                                offset = offset >>> 0
                                if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
                                this[offset] = (value & 0xff)
                                this[offset + 1] = (value >>> 8)
                                this[offset + 2] = (value >>> 16)
                                this[offset + 3] = (value >>> 24)
                                return offset + 4
                            }

                            Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
                                value = +value
                                offset = offset >>> 0
                                if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
                                if (value < 0) value = 0xffffffff + value + 1
                                this[offset] = (value >>> 24)
                                this[offset + 1] = (value >>> 16)
                                this[offset + 2] = (value >>> 8)
                                this[offset + 3] = (value & 0xff)
                                return offset + 4
                            }

                            function checkIEEE754(buf, value, offset, ext, max, min) {
                                if (offset + ext > buf.length) throw new RangeError('Index out of range')
                                if (offset < 0) throw new RangeError('Index out of range')
                            }

                            function writeFloat(buf, value, offset, littleEndian, noAssert) {
                                value = +value
                                offset = offset >>> 0
                                if (!noAssert) {
                                    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
                                }
                                ieee754.write(buf, value, offset, littleEndian, 23, 4)
                                return offset + 4
                            }

                            Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
                                return writeFloat(this, value, offset, true, noAssert)
                            }

                            Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
                                return writeFloat(this, value, offset, false, noAssert)
                            }

                            function writeDouble(buf, value, offset, littleEndian, noAssert) {
                                value = +value
                                offset = offset >>> 0
                                if (!noAssert) {
                                    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
                                }
                                ieee754.write(buf, value, offset, littleEndian, 52, 8)
                                return offset + 8
                            }

                            Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
                                return writeDouble(this, value, offset, true, noAssert)
                            }

                            Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
                                return writeDouble(this, value, offset, false, noAssert)
                            }

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
                            Buffer.prototype.copy = function copy(target, targetStart, start, end) {
                                if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
                                if (!start) start = 0
                                if (!end && end !== 0) end = this.length
                                if (targetStart >= target.length) targetStart = target.length
                                if (!targetStart) targetStart = 0
                                if (end > 0 && end < start) end = start

                                // Copy 0 bytes; we're done
                                if (end === start) return 0
                                if (target.length === 0 || this.length === 0) return 0

                                // Fatal error conditions
                                if (targetStart < 0) {
                                    throw new RangeError('targetStart out of bounds')
                                }
                                if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
                                if (end < 0) throw new RangeError('sourceEnd out of bounds')

                                // Are we oob?
                                if (end > this.length) end = this.length
                                if (target.length - targetStart < end - start) {
                                    end = target.length - targetStart + start
                                }

                                var len = end - start

                                if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
                                    // Use built-in when available, missing from IE11
                                    this.copyWithin(targetStart, start, end)
                                } else if (this === target && start < targetStart && targetStart < end) {
                                    // descending copy from end
                                    for (var i = len - 1; i >= 0; --i) {
                                        target[i + targetStart] = this[i + start]
                                    }
                                } else {
                                    Uint8Array.prototype.set.call(
                                        target,
                                        this.subarray(start, end),
                                        targetStart
                                    )
                                }

                                return len
                            }

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
                            Buffer.prototype.fill = function fill(val, start, end, encoding) {
                                // Handle string cases:
                                if (typeof val === 'string') {
                                    if (typeof start === 'string') {
                                        encoding = start
                                        start = 0
                                        end = this.length
                                    } else if (typeof end === 'string') {
                                        encoding = end
                                        end = this.length
                                    }
                                    if (encoding !== undefined && typeof encoding !== 'string') {
                                        throw new TypeError('encoding must be a string')
                                    }
                                    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
                                        throw new TypeError('Unknown encoding: ' + encoding)
                                    }
                                    if (val.length === 1) {
                                        var code = val.charCodeAt(0)
                                        if ((encoding === 'utf8' && code < 128) ||
                                            encoding === 'latin1') {
                                            // Fast path: If `val` fits into a single byte, use that numeric value.
                                            val = code
                                        }
                                    }
                                } else if (typeof val === 'number') {
                                    val = val & 255
                                }

                                // Invalid ranges are not set to a default, so can range check early.
                                if (start < 0 || this.length < start || this.length < end) {
                                    throw new RangeError('Out of range index')
                                }

                                if (end <= start) {
                                    return this
                                }

                                start = start >>> 0
                                end = end === undefined ? this.length : end >>> 0

                                if (!val) val = 0

                                var i
                                if (typeof val === 'number') {
                                    for (i = start; i < end; ++i) {
                                        this[i] = val
                                    }
                                } else {
                                    var bytes = Buffer.isBuffer(val)
                                        ? val
                                        : new Buffer(val, encoding)
                                    var len = bytes.length
                                    if (len === 0) {
                                        throw new TypeError('The value "' + val +
                                            '" is invalid for argument "value"')
                                    }
                                    for (i = 0; i < end - start; ++i) {
                                        this[i + start] = bytes[i % len]
                                    }
                                }

                                return this
                            }

// HELPER FUNCTIONS
// ================

                            var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

                            function base64clean(str) {
                                // Node takes equal signs as end of the Base64 encoding
                                str = str.split('=')[0]
                                // Node strips out invalid characters like \n and \t from the string, base64-js does not
                                str = str.trim().replace(INVALID_BASE64_RE, '')
                                // Node converts strings with length < 2 to ''
                                if (str.length < 2) return ''
                                // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
                                while (str.length % 4 !== 0) {
                                    str = str + '='
                                }
                                return str
                            }

                            function toHex(n) {
                                if (n < 16) return '0' + n.toString(16)
                                return n.toString(16)
                            }

                            function utf8ToBytes(string, units) {
                                units = units || Infinity
                                var codePoint
                                var length = string.length
                                var leadSurrogate = null
                                var bytes = []

                                for (var i = 0; i < length; ++i) {
                                    codePoint = string.charCodeAt(i)

                                    // is surrogate component
                                    if (codePoint > 0xD7FF && codePoint < 0xE000) {
                                        // last char was a lead
                                        if (!leadSurrogate) {
                                            // no lead yet
                                            if (codePoint > 0xDBFF) {
                                                // unexpected trail
                                                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                                                continue
                                            } else if (i + 1 === length) {
                                                // unpaired lead
                                                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                                                continue
                                            }

                                            // valid lead
                                            leadSurrogate = codePoint

                                            continue
                                        }

                                        // 2 leads in a row
                                        if (codePoint < 0xDC00) {
                                            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                                            leadSurrogate = codePoint
                                            continue
                                        }

                                        // valid surrogate pair
                                        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
                                    } else if (leadSurrogate) {
                                        // valid bmp char, but last char was a lead
                                        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                                    }

                                    leadSurrogate = null

                                    // encode utf8
                                    if (codePoint < 0x80) {
                                        if ((units -= 1) < 0) break
                                        bytes.push(codePoint)
                                    } else if (codePoint < 0x800) {
                                        if ((units -= 2) < 0) break
                                        bytes.push(
                                            codePoint >> 0x6 | 0xC0,
                                            codePoint & 0x3F | 0x80
                                        )
                                    } else if (codePoint < 0x10000) {
                                        if ((units -= 3) < 0) break
                                        bytes.push(
                                            codePoint >> 0xC | 0xE0,
                                            codePoint >> 0x6 & 0x3F | 0x80,
                                            codePoint & 0x3F | 0x80
                                        )
                                    } else if (codePoint < 0x110000) {
                                        if ((units -= 4) < 0) break
                                        bytes.push(
                                            codePoint >> 0x12 | 0xF0,
                                            codePoint >> 0xC & 0x3F | 0x80,
                                            codePoint >> 0x6 & 0x3F | 0x80,
                                            codePoint & 0x3F | 0x80
                                        )
                                    } else {
                                        throw new Error('Invalid code point')
                                    }
                                }

                                return bytes
                            }

                            function asciiToBytes(str) {
                                var byteArray = []
                                for (var i = 0; i < str.length; ++i) {
                                    // Node's code seems to be doing this and not & 0x7F..
                                    byteArray.push(str.charCodeAt(i) & 0xFF)
                                }
                                return byteArray
                            }

                            function utf16leToBytes(str, units) {
                                var c, hi, lo
                                var byteArray = []
                                for (var i = 0; i < str.length; ++i) {
                                    if ((units -= 2) < 0) break

                                    c = str.charCodeAt(i)
                                    hi = c >> 8
                                    lo = c % 256
                                    byteArray.push(lo)
                                    byteArray.push(hi)
                                }

                                return byteArray
                            }

                            function base64ToBytes(str) {
                                return base64.toByteArray(base64clean(str))
                            }

                            function blitBuffer(src, dst, offset, length) {
                                for (var i = 0; i < length; ++i) {
                                    if ((i + offset >= dst.length) || (i >= src.length)) break
                                    dst[i + offset] = src[i]
                                }
                                return i
                            }

// ArrayBuffers from another context (i.e. an iframe) do not pass the `instanceof` check
// but they should be treated as valid. See: https://github.com/feross/buffer/issues/166
                            function isArrayBuffer(obj) {
                                return obj instanceof ArrayBuffer ||
                                    (obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' &&
                                        typeof obj.byteLength === 'number')
                            }

                            function numberIsNaN(obj) {
                                return obj !== obj // eslint-disable-line no-self-compare
                            }

                        }, {"base64-js": 31, "ieee754": 149}],
                        65: [function (require, module, exports) {
                            var Buffer = require('safe-buffer').Buffer
                            var Transform = require('stream').Transform
                            var StringDecoder = require('string_decoder').StringDecoder
                            var inherits = require('inherits')

                            function CipherBase(hashMode) {
                                Transform.call(this)
                                this.hashMode = typeof hashMode === 'string'
                                if (this.hashMode) {
                                    this[hashMode] = this._finalOrDigest
                                } else {
                                    this.final = this._finalOrDigest
                                }
                                if (this._final) {
                                    this.__final = this._final
                                    this._final = null
                                }
                                this._decoder = null
                                this._encoding = null
                            }

                            inherits(CipherBase, Transform)

                            CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
                                if (typeof data === 'string') {
                                    data = Buffer.from(data, inputEnc)
                                }

                                var outData = this._update(data)
                                if (this.hashMode) return this

                                if (outputEnc) {
                                    outData = this._toString(outData, outputEnc)
                                }

                                return outData
                            }

                            CipherBase.prototype.setAutoPadding = function () {
                            }
                            CipherBase.prototype.getAuthTag = function () {
                                throw new Error('trying to get auth tag in unsupported state')
                            }

                            CipherBase.prototype.setAuthTag = function () {
                                throw new Error('trying to set auth tag in unsupported state')
                            }

                            CipherBase.prototype.setAAD = function () {
                                throw new Error('trying to set aad in unsupported state')
                            }

                            CipherBase.prototype._transform = function (data, _, next) {
                                var err
                                try {
                                    if (this.hashMode) {
                                        this._update(data)
                                    } else {
                                        this.push(this._update(data))
                                    }
                                } catch (e) {
                                    err = e
                                } finally {
                                    next(err)
                                }
                            }
                            CipherBase.prototype._flush = function (done) {
                                var err
                                try {
                                    this.push(this.__final())
                                } catch (e) {
                                    err = e
                                }

                                done(err)
                            }
                            CipherBase.prototype._finalOrDigest = function (outputEnc) {
                                var outData = this.__final() || Buffer.alloc(0)
                                if (outputEnc) {
                                    outData = this._toString(outData, outputEnc, true)
                                }
                                return outData
                            }

                            CipherBase.prototype._toString = function (value, enc, fin) {
                                if (!this._decoder) {
                                    this._decoder = new StringDecoder(enc)
                                    this._encoding = enc
                                }

                                if (this._encoding !== enc) throw new Error('can\'t switch encodings')

                                var out = this._decoder.write(value)
                                if (fin) {
                                    out += this._decoder.end()
                                }

                                return out
                            }

                            module.exports = CipherBase

                        }, {"inherits": 150, "safe-buffer": 191, "stream": 200, "string_decoder": 201}],
                        66: [function (require, module, exports) {
                            (function (Buffer) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

                                function isArray(arg) {
                                    if (Array.isArray) {
                                        return Array.isArray(arg);
                                    }
                                    return objectToString(arg) === '[object Array]';
                                }

                                exports.isArray = isArray;

                                function isBoolean(arg) {
                                    return typeof arg === 'boolean';
                                }

                                exports.isBoolean = isBoolean;

                                function isNull(arg) {
                                    return arg === null;
                                }

                                exports.isNull = isNull;

                                function isNullOrUndefined(arg) {
                                    return arg == null;
                                }

                                exports.isNullOrUndefined = isNullOrUndefined;

                                function isNumber(arg) {
                                    return typeof arg === 'number';
                                }

                                exports.isNumber = isNumber;

                                function isString(arg) {
                                    return typeof arg === 'string';
                                }

                                exports.isString = isString;

                                function isSymbol(arg) {
                                    return typeof arg === 'symbol';
                                }

                                exports.isSymbol = isSymbol;

                                function isUndefined(arg) {
                                    return arg === void 0;
                                }

                                exports.isUndefined = isUndefined;

                                function isRegExp(re) {
                                    return objectToString(re) === '[object RegExp]';
                                }

                                exports.isRegExp = isRegExp;

                                function isObject(arg) {
                                    return typeof arg === 'object' && arg !== null;
                                }

                                exports.isObject = isObject;

                                function isDate(d) {
                                    return objectToString(d) === '[object Date]';
                                }

                                exports.isDate = isDate;

                                function isError(e) {
                                    return (objectToString(e) === '[object Error]' || e instanceof Error);
                                }

                                exports.isError = isError;

                                function isFunction(arg) {
                                    return typeof arg === 'function';
                                }

                                exports.isFunction = isFunction;

                                function isPrimitive(arg) {
                                    return arg === null ||
                                        typeof arg === 'boolean' ||
                                        typeof arg === 'number' ||
                                        typeof arg === 'string' ||
                                        typeof arg === 'symbol' ||  // ES6 symbol
                                        typeof arg === 'undefined';
                                }

                                exports.isPrimitive = isPrimitive;

                                exports.isBuffer = Buffer.isBuffer;

                                function objectToString(o) {
                                    return Object.prototype.toString.call(o);
                                }

                            }).call(this, {"isBuffer": require("../../is-buffer/index.js")})
                        }, {"../../is-buffer/index.js": 151}],
                        67: [function (require, module, exports) {
                            (function (Buffer) {
                                var elliptic = require('elliptic')
                                var BN = require('bn.js')

                                module.exports = function createECDH(curve) {
                                    return new ECDH(curve)
                                }

                                var aliases = {
                                    secp256k1: {
                                        name: 'secp256k1',
                                        byteLength: 32
                                    },
                                    secp224r1: {
                                        name: 'p224',
                                        byteLength: 28
                                    },
                                    prime256v1: {
                                        name: 'p256',
                                        byteLength: 32
                                    },
                                    prime192v1: {
                                        name: 'p192',
                                        byteLength: 24
                                    },
                                    ed25519: {
                                        name: 'ed25519',
                                        byteLength: 32
                                    },
                                    secp384r1: {
                                        name: 'p384',
                                        byteLength: 48
                                    },
                                    secp521r1: {
                                        name: 'p521',
                                        byteLength: 66
                                    }
                                }

                                aliases.p224 = aliases.secp224r1
                                aliases.p256 = aliases.secp256r1 = aliases.prime256v1
                                aliases.p192 = aliases.secp192r1 = aliases.prime192v1
                                aliases.p384 = aliases.secp384r1
                                aliases.p521 = aliases.secp521r1

                                function ECDH(curve) {
                                    this.curveType = aliases[curve]
                                    if (!this.curveType) {
                                        this.curveType = {
                                            name: curve
                                        }
                                    }
                                    this.curve = new elliptic.ec(this.curveType.name) // eslint-disable-line new-cap
                                    this.keys = void 0
                                }

                                ECDH.prototype.generateKeys = function (enc, format) {
                                    this.keys = this.curve.genKeyPair()
                                    return this.getPublicKey(enc, format)
                                }

                                ECDH.prototype.computeSecret = function (other, inenc, enc) {
                                    inenc = inenc || 'utf8'
                                    if (!Buffer.isBuffer(other)) {
                                        other = new Buffer(other, inenc)
                                    }
                                    var otherPub = this.curve.keyFromPublic(other).getPublic()
                                    var out = otherPub.mul(this.keys.getPrivate()).getX()
                                    return formatReturnValue(out, enc, this.curveType.byteLength)
                                }

                                ECDH.prototype.getPublicKey = function (enc, format) {
                                    var key = this.keys.getPublic(format === 'compressed', true)
                                    if (format === 'hybrid') {
                                        if (key[key.length - 1] % 2) {
                                            key[0] = 7
                                        } else {
                                            key[0] = 6
                                        }
                                    }
                                    return formatReturnValue(key, enc)
                                }

                                ECDH.prototype.getPrivateKey = function (enc) {
                                    return formatReturnValue(this.keys.getPrivate(), enc)
                                }

                                ECDH.prototype.setPublicKey = function (pub, enc) {
                                    enc = enc || 'utf8'
                                    if (!Buffer.isBuffer(pub)) {
                                        pub = new Buffer(pub, enc)
                                    }
                                    this.keys._importPublic(pub)
                                    return this
                                }

                                ECDH.prototype.setPrivateKey = function (priv, enc) {
                                    enc = enc || 'utf8'
                                    if (!Buffer.isBuffer(priv)) {
                                        priv = new Buffer(priv, enc)
                                    }

                                    var _priv = new BN(priv)
                                    _priv = _priv.toString(16)
                                    this.keys = this.curve.genKeyPair()
                                    this.keys._importPrivate(_priv)
                                    return this
                                }

                                function formatReturnValue(bn, enc, len) {
                                    if (!Array.isArray(bn)) {
                                        bn = bn.toArray()
                                    }
                                    var buf = new Buffer(bn)
                                    if (len && buf.length < len) {
                                        var zeros = new Buffer(len - buf.length)
                                        zeros.fill(0)
                                        buf = Buffer.concat([zeros, buf])
                                    }
                                    if (!enc) {
                                        return buf
                                    } else {
                                        return buf.toString(enc)
                                    }
                                }

                            }).call(this, require("buffer").Buffer)
                        }, {"bn.js": 33, "buffer": 64, "elliptic": 117}],
                        68: [function (require, module, exports) {
                            'use strict'
                            var inherits = require('inherits')
                            var MD5 = require('md5.js')
                            var RIPEMD160 = require('ripemd160')
                            var sha = require('sha.js')
                            var Base = require('cipher-base')

                            function Hash(hash) {
                                Base.call(this, 'digest')

                                this._hash = hash
                            }

                            inherits(Hash, Base)

                            Hash.prototype._update = function (data) {
                                this._hash.update(data)
                            }

                            Hash.prototype._final = function () {
                                return this._hash.digest()
                            }

                            module.exports = function createHash(alg) {
                                alg = alg.toLowerCase()
                                if (alg === 'md5') return new MD5()
                                if (alg === 'rmd160' || alg === 'ripemd160') return new RIPEMD160()

                                return new Hash(sha(alg))
                            }

                        }, {"cipher-base": 65, "inherits": 150, "md5.js": 153, "ripemd160": 190, "sha.js": 193}],
                        69: [function (require, module, exports) {
                            var MD5 = require('md5.js')

                            module.exports = function (buffer) {
                                return new MD5().update(buffer).digest()
                            }

                        }, {"md5.js": 153}],
                        70: [function (require, module, exports) {
                            'use strict'
                            var inherits = require('inherits')
                            var Legacy = require('./legacy')
                            var Base = require('cipher-base')
                            var Buffer = require('safe-buffer').Buffer
                            var md5 = require('create-hash/md5')
                            var RIPEMD160 = require('ripemd160')

                            var sha = require('sha.js')

                            var ZEROS = Buffer.alloc(128)

                            function Hmac(alg, key) {
                                Base.call(this, 'digest')
                                if (typeof key === 'string') {
                                    key = Buffer.from(key)
                                }

                                var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

                                this._alg = alg
                                this._key = key
                                if (key.length > blocksize) {
                                    var hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
                                    key = hash.update(key).digest()
                                } else if (key.length < blocksize) {
                                    key = Buffer.concat([key, ZEROS], blocksize)
                                }

                                var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
                                var opad = this._opad = Buffer.allocUnsafe(blocksize)

                                for (var i = 0; i < blocksize; i++) {
                                    ipad[i] = key[i] ^ 0x36
                                    opad[i] = key[i] ^ 0x5C
                                }
                                this._hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
                                this._hash.update(ipad)
                            }

                            inherits(Hmac, Base)

                            Hmac.prototype._update = function (data) {
                                this._hash.update(data)
                            }

                            Hmac.prototype._final = function () {
                                var h = this._hash.digest()
                                var hash = this._alg === 'rmd160' ? new RIPEMD160() : sha(this._alg)
                                return hash.update(this._opad).update(h).digest()
                            }

                            module.exports = function createHmac(alg, key) {
                                alg = alg.toLowerCase()
                                if (alg === 'rmd160' || alg === 'ripemd160') {
                                    return new Hmac('rmd160', key)
                                }
                                if (alg === 'md5') {
                                    return new Legacy(md5, key)
                                }
                                return new Hmac(alg, key)
                            }

                        }, {
                            "./legacy": 71,
                            "cipher-base": 65,
                            "create-hash/md5": 69,
                            "inherits": 150,
                            "ripemd160": 190,
                            "safe-buffer": 191,
                            "sha.js": 193
                        }],
                        71: [function (require, module, exports) {
                            'use strict'
                            var inherits = require('inherits')
                            var Buffer = require('safe-buffer').Buffer

                            var Base = require('cipher-base')

                            var ZEROS = Buffer.alloc(128)
                            var blocksize = 64

                            function Hmac(alg, key) {
                                Base.call(this, 'digest')
                                if (typeof key === 'string') {
                                    key = Buffer.from(key)
                                }

                                this._alg = alg
                                this._key = key

                                if (key.length > blocksize) {
                                    key = alg(key)
                                } else if (key.length < blocksize) {
                                    key = Buffer.concat([key, ZEROS], blocksize)
                                }

                                var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
                                var opad = this._opad = Buffer.allocUnsafe(blocksize)

                                for (var i = 0; i < blocksize; i++) {
                                    ipad[i] = key[i] ^ 0x36
                                    opad[i] = key[i] ^ 0x5C
                                }

                                this._hash = [ipad]
                            }

                            inherits(Hmac, Base)

                            Hmac.prototype._update = function (data) {
                                this._hash.push(data)
                            }

                            Hmac.prototype._final = function () {
                                var h = this._alg(Buffer.concat(this._hash))
                                return this._alg(Buffer.concat([this._opad, h]))
                            }
                            module.exports = Hmac

                        }, {"cipher-base": 65, "inherits": 150, "safe-buffer": 191}],
                        72: [function (require, module, exports) {
                            'use strict'

                            exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require('randombytes')
                            exports.createHash = exports.Hash = require('create-hash')
                            exports.createHmac = exports.Hmac = require('create-hmac')

                            var algos = require('browserify-sign/algos')
                            var algoKeys = Object.keys(algos)
                            var hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(algoKeys)
                            exports.getHashes = function () {
                                return hashes
                            }

                            var p = require('pbkdf2')
                            exports.pbkdf2 = p.pbkdf2
                            exports.pbkdf2Sync = p.pbkdf2Sync

                            var aes = require('browserify-cipher')

                            exports.Cipher = aes.Cipher
                            exports.createCipher = aes.createCipher
                            exports.Cipheriv = aes.Cipheriv
                            exports.createCipheriv = aes.createCipheriv
                            exports.Decipher = aes.Decipher
                            exports.createDecipher = aes.createDecipher
                            exports.Decipheriv = aes.Decipheriv
                            exports.createDecipheriv = aes.createDecipheriv
                            exports.getCiphers = aes.getCiphers
                            exports.listCiphers = aes.listCiphers

                            var dh = require('diffie-hellman')

                            exports.DiffieHellmanGroup = dh.DiffieHellmanGroup
                            exports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup
                            exports.getDiffieHellman = dh.getDiffieHellman
                            exports.createDiffieHellman = dh.createDiffieHellman
                            exports.DiffieHellman = dh.DiffieHellman

                            var sign = require('browserify-sign')

                            exports.createSign = sign.createSign
                            exports.Sign = sign.Sign
                            exports.createVerify = sign.createVerify
                            exports.Verify = sign.Verify

                            exports.createECDH = require('create-ecdh')

                            var publicEncrypt = require('public-encrypt')

                            exports.publicEncrypt = publicEncrypt.publicEncrypt
                            exports.privateEncrypt = publicEncrypt.privateEncrypt
                            exports.publicDecrypt = publicEncrypt.publicDecrypt
                            exports.privateDecrypt = publicEncrypt.privateDecrypt

// the least I can do is make error messages for the rest of the node.js/crypto api.
// ;[
//   'createCredentials'
// ].forEach(function (name) {
//   exports[name] = function () {
//     throw new Error([
//       'sorry, ' + name + ' is not implemented yet',
//       'we accept pull requests',
//       'https://github.com/crypto-browserify/crypto-browserify'
//     ].join('\n'))
//   }
// })

                            var rf = require('randomfill')

                            exports.randomFill = rf.randomFill
                            exports.randomFillSync = rf.randomFillSync

                            exports.createCredentials = function () {
                                throw new Error([
                                    'sorry, createCredentials is not implemented yet',
                                    'we accept pull requests',
                                    'https://github.com/crypto-browserify/crypto-browserify'
                                ].join('\n'))
                            }

                            exports.constants = {
                                'DH_CHECK_P_NOT_SAFE_PRIME': 2,
                                'DH_CHECK_P_NOT_PRIME': 1,
                                'DH_UNABLE_TO_CHECK_GENERATOR': 4,
                                'DH_NOT_SUITABLE_GENERATOR': 8,
                                'NPN_ENABLED': 1,
                                'ALPN_ENABLED': 1,
                                'RSA_PKCS1_PADDING': 1,
                                'RSA_SSLV23_PADDING': 2,
                                'RSA_NO_PADDING': 3,
                                'RSA_PKCS1_OAEP_PADDING': 4,
                                'RSA_X931_PADDING': 5,
                                'RSA_PKCS1_PSS_PADDING': 6,
                                'POINT_CONVERSION_COMPRESSED': 2,
                                'POINT_CONVERSION_UNCOMPRESSED': 4,
                                'POINT_CONVERSION_HYBRID': 6
                            }

                        }, {
                            "browserify-cipher": 53,
                            "browserify-sign": 60,
                            "browserify-sign/algos": 57,
                            "create-ecdh": 67,
                            "create-hash": 68,
                            "create-hmac": 70,
                            "diffie-hellman": 113,
                            "pbkdf2": 162,
                            "public-encrypt": 169,
                            "randombytes": 175,
                            "randomfill": 176
                        }],
                        73: [function (require, module, exports) {
                            ;(function (root, factory, undef) {
                                if (typeof exports === "object") {
                                    // CommonJS
                                    module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
                                }
                                else if (typeof define === "function" && define.amd) {
                                    // AMD
                                    define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
                                }
                                else {
                                    // Global (browser)
                                    factory(root.CryptoJS);
                                }
                            }(this, function (CryptoJS) {

                                (function () {
                                    // Shortcuts
                                    var C = CryptoJS;
                                    var C_lib = C.lib;
                                    var BlockCipher = C_lib.BlockCipher;
                                    var C_algo = C.algo;

                                    // Lookup tables
                                    var SBOX = [];
                                    var INV_SBOX = [];
                                    var SUB_MIX_0 = [];
                                    var SUB_MIX_1 = [];
                                    var SUB_MIX_2 = [];
                                    var SUB_MIX_3 = [];
                                    var INV_SUB_MIX_0 = [];
                                    var INV_SUB_MIX_1 = [];
                                    var INV_SUB_MIX_2 = [];
                                    var INV_SUB_MIX_3 = [];

                                    // Compute lookup tables
                                    (function () {
                                        // Compute double table
                                        var d = [];
                                        for (var i = 0; i < 256; i++) {
                                            if (i < 128) {
                                                d[i] = i << 1;
                                            } else {
                                                d[i] = (i << 1) ^ 0x11b;
                                            }
                                        }

                                        // Walk GF(2^8)
                                        var x = 0;
                                        var xi = 0;
                                        for (var i = 0; i < 256; i++) {
                                            // Compute sbox
                                            var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);
                                            sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;
                                            SBOX[x] = sx;
                                            INV_SBOX[sx] = x;

                                            // Compute multiplication
                                            var x2 = d[x];
                                            var x4 = d[x2];
                                            var x8 = d[x4];

                                            // Compute sub bytes, mix columns tables
                                            var t = (d[sx] * 0x101) ^ (sx * 0x1010100);
                                            SUB_MIX_0[x] = (t << 24) | (t >>> 8);
                                            SUB_MIX_1[x] = (t << 16) | (t >>> 16);
                                            SUB_MIX_2[x] = (t << 8) | (t >>> 24);
                                            SUB_MIX_3[x] = t;

                                            // Compute inv sub bytes, inv mix columns tables
                                            var t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);
                                            INV_SUB_MIX_0[sx] = (t << 24) | (t >>> 8);
                                            INV_SUB_MIX_1[sx] = (t << 16) | (t >>> 16);
                                            INV_SUB_MIX_2[sx] = (t << 8) | (t >>> 24);
                                            INV_SUB_MIX_3[sx] = t;

                                            // Compute next counter
                                            if (!x) {
                                                x = xi = 1;
                                            } else {
                                                x = x2 ^ d[d[d[x8 ^ x2]]];
                                                xi ^= d[d[xi]];
                                            }
                                        }
                                    }());

                                    // Precomputed Rcon lookup
                                    var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];

                                    /**
                                     * AES block cipher algorithm.
                                     */
                                    var AES = C_algo.AES = BlockCipher.extend({
                                        _doReset: function () {
                                            // Skip reset of nRounds has been set before and key did not change
                                            if (this._nRounds && this._keyPriorReset === this._key) {
                                                return;
                                            }

                                            // Shortcuts
                                            var key = this._keyPriorReset = this._key;
                                            var keyWords = key.words;
                                            var keySize = key.sigBytes / 4;

                                            // Compute number of rounds
                                            var nRounds = this._nRounds = keySize + 6;

                                            // Compute number of key schedule rows
                                            var ksRows = (nRounds + 1) * 4;

                                            // Compute key schedule
                                            var keySchedule = this._keySchedule = [];
                                            for (var ksRow = 0; ksRow < ksRows; ksRow++) {
                                                if (ksRow < keySize) {
                                                    keySchedule[ksRow] = keyWords[ksRow];
                                                } else {
                                                    var t = keySchedule[ksRow - 1];

                                                    if (!(ksRow % keySize)) {
                                                        // Rot word
                                                        t = (t << 8) | (t >>> 24);

                                                        // Sub word
                                                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];

                                                        // Mix Rcon
                                                        t ^= RCON[(ksRow / keySize) | 0] << 24;
                                                    } else if (keySize > 6 && ksRow % keySize == 4) {
                                                        // Sub word
                                                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];
                                                    }

                                                    keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;
                                                }
                                            }

                                            // Compute inv key schedule
                                            var invKeySchedule = this._invKeySchedule = [];
                                            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {
                                                var ksRow = ksRows - invKsRow;

                                                if (invKsRow % 4) {
                                                    var t = keySchedule[ksRow];
                                                } else {
                                                    var t = keySchedule[ksRow - 4];
                                                }

                                                if (invKsRow < 4 || ksRow <= 4) {
                                                    invKeySchedule[invKsRow] = t;
                                                } else {
                                                    invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[(t >>> 16) & 0xff]] ^
                                                        INV_SUB_MIX_2[SBOX[(t >>> 8) & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];
                                                }
                                            }
                                        },

                                        encryptBlock: function (M, offset) {
                                            this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
                                        },

                                        decryptBlock: function (M, offset) {
                                            // Swap 2nd and 4th rows
                                            var t = M[offset + 1];
                                            M[offset + 1] = M[offset + 3];
                                            M[offset + 3] = t;

                                            this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);

                                            // Inv swap 2nd and 4th rows
                                            var t = M[offset + 1];
                                            M[offset + 1] = M[offset + 3];
                                            M[offset + 3] = t;
                                        },

                                        _doCryptBlock: function (M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {
                                            // Shortcut
                                            var nRounds = this._nRounds;

                                            // Get input, add round key
                                            var s0 = M[offset] ^ keySchedule[0];
                                            var s1 = M[offset + 1] ^ keySchedule[1];
                                            var s2 = M[offset + 2] ^ keySchedule[2];
                                            var s3 = M[offset + 3] ^ keySchedule[3];

                                            // Key schedule row counter
                                            var ksRow = 4;

                                            // Rounds
                                            for (var round = 1; round < nRounds; round++) {
                                                // Shift rows, sub bytes, mix columns, add round key
                                                var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[(s1 >>> 16) & 0xff] ^ SUB_MIX_2[(s2 >>> 8) & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];
                                                var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[(s2 >>> 16) & 0xff] ^ SUB_MIX_2[(s3 >>> 8) & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];
                                                var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[(s3 >>> 16) & 0xff] ^ SUB_MIX_2[(s0 >>> 8) & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];
                                                var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[(s0 >>> 16) & 0xff] ^ SUB_MIX_2[(s1 >>> 8) & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];

                                                // Update state
                                                s0 = t0;
                                                s1 = t1;
                                                s2 = t2;
                                                s3 = t3;
                                            }

                                            // Shift rows, sub bytes, add round key
                                            var t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
                                            var t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
                                            var t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
                                            var t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];

                                            // Set output
                                            M[offset] = t0;
                                            M[offset + 1] = t1;
                                            M[offset + 2] = t2;
                                            M[offset + 3] = t3;
                                        },

                                        keySize: 256 / 32
                                    });

                                    /**
                                     * Shortcut functions to the cipher's object interface.
                                     *
                                     * @example
                                     *
                                     *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);
                                     *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);
                                     */
                                    C.AES = BlockCipher._createHelper(AES);
                                }());


                                return CryptoJS.AES;

                            }));
                        }, {"./cipher-core": 74, "./core": 75, "./enc-base64": 76, "./evpkdf": 78, "./md5": 83}],
                        74: [function (require, module, exports) {
                            ;(function (root, factory, undef) {
                                if (typeof exports === "object") {
                                    // CommonJS
                                    module.exports = exports = factory(require("./core"), require("./evpkdf"));
                                }
                                else if (typeof define === "function" && define.amd) {
                                    // AMD
                                    define(["./core", "./evpkdf"], factory);
                                }
                                else {
                                    // Global (browser)
                                    factory(root.CryptoJS);
                                }
                            }(this, function (CryptoJS) {

                                /**
                                 * Cipher core components.
                                 */
                                CryptoJS.lib.Cipher || (function (undefined) {
                                    // Shortcuts
                                    var C = CryptoJS;
                                    var C_lib = C.lib;
                                    var Base = C_lib.Base;
                                    var WordArray = C_lib.WordArray;
                                    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
                                    var C_enc = C.enc;
                                    var Utf8 = C_enc.Utf8;
                                    var Base64 = C_enc.Base64;
                                    var C_algo = C.algo;
                                    var EvpKDF = C_algo.EvpKDF;

                                    /**
                                     * Abstract base cipher template.
                                     *
                                     * @property {number} keySize This cipher's key size. Default: 4 (128 bits)
                                     * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)
                                     * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.
                                     * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.
                                     */
                                    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
                                        /**
                                         * Configuration options.
                                         *
                                         * @property {WordArray} iv The IV to use for this operation.
                                         */
                                        cfg: Base.extend(),

                                        /**
                                         * Creates this cipher in encryption mode.
                                         *
                                         * @param {WordArray} key The key.
                                         * @param {Object} cfg (Optional) The configuration options to use for this operation.
                                         *
                                         * @return {Cipher} A cipher instance.
                                         *
                                         * @static
                                         *
                                         * @example
                                         *
                                         *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });
                                         */
                                        createEncryptor: function (key, cfg) {
                                            return this.create(this._ENC_XFORM_MODE, key, cfg);
                                        },

                                        /**
                                         * Creates this cipher in decryption mode.
                                         *
                                         * @param {WordArray} key The key.
                                         * @param {Object} cfg (Optional) The configuration options to use for this operation.
                                         *
                                         * @return {Cipher} A cipher instance.
                                         *
                                         * @static
                                         *
                                         * @example
                                         *
                                         *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });
                                         */
                                        createDecryptor: function (key, cfg) {
                                            return this.create(this._DEC_XFORM_MODE, key, cfg);
                                        },

                                        /**
                                         * Initializes a newly created cipher.
                                         *
                                         * @param {number} xformMode Either the encryption or decryption transormation mode constant.
                                         * @param {WordArray} key The key.
                                         * @param {Object} cfg (Optional) The configuration options to use for this operation.
                                         *
                                         * @example
                                         *
                                         *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
                                         */
                                        init: function (xformMode, key, cfg) {
                                            // Apply config defaults
                                            this.cfg = this.cfg.extend(cfg);

                                            // Store transform mode and key
                                            this._xformMode = xformMode;
                                            this._key = key;

                                            // Set initial values
                                            this.reset();
                                        },

                                        /**
                                         * Resets this cipher to its initial state.
                                         *
                                         * @example
                                         *
                                         *     cipher.reset();
                                         */
                                        reset: function () {
                                            // Reset data buffer
                                            BufferedBlockAlgorithm.reset.call(this);

                                            // Perform concrete-cipher logic
                                            this._doReset();
                                        },

                                        /**
                                         * Adds data to be encrypted or decrypted.
                                         *
                                         * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.
                                         *
                                         * @return {WordArray} The data after processing.
                                         *
                                         * @example
                                         *
                                         *     var encrypted = cipher.process('data');
                                         *     var encrypted = cipher.process(wordArray);
                                         */
                                        process: function (dataUpdate) {
                                            // Append
                                            this._append(dataUpdate);

                                            // Process available blocks
                                            return this._process();
                                        },

                                        /**
                                         * Finalizes the encryption or decryption process.
                                         * Note that the finalize operation is effectively a destructive, read-once operation.
                                         *
                                         * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.
                                         *
                                         * @return {WordArray} The data after final processing.
                                         *
                                         * @example
                                         *
                                         *     var encrypted = cipher.finalize();
                                         *     var encrypted = cipher.finalize('data');
                                         *     var encrypted = cipher.finalize(wordArray);
                                         */
                                        finalize: function (dataUpdate) {
                                            // Final data update
                                            if (dataUpdate) {
                                                this._append(dataUpdate);
                                            }

                                            // Perform concrete-cipher logic
                                            var finalProcessedData = this._doFinalize();

                                            return finalProcessedData;
                                        },

                                        keySize: 128 / 32,

                                        ivSize: 128 / 32,

                                        _ENC_XFORM_MODE: 1,

                                        _DEC_XFORM_MODE: 2,

                                        /**
                                         * Creates shortcut functions to a cipher's object interface.
                                         *
                                         * @param {Cipher} cipher The cipher to create a helper for.
                                         *
                                         * @return {Object} An object with encrypt and decrypt shortcut functions.
                                         *
                                         * @static
                                         *
                                         * @example
                                         *
                                         *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);
                                         */
                                        _createHelper: (function () {
                                            function selectCipherStrategy(key) {
                                                if (typeof key == 'string') {
                                                    return PasswordBasedCipher;
                                                } else {
                                                    return SerializableCipher;
                                                }
                                            }

                                            return function (cipher) {
                                                return {
                                                    encrypt: function (message, key, cfg) {
                                                        return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);
                                                    },

                                                    decrypt: function (ciphertext, key, cfg) {
                                                        return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
                                                    }
                                                };
                                            };
                                        }())
                                    });

                                    /**
                                     * Abstract base stream cipher template.
                                     *
                                     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)
                                     */
                                    var StreamCipher = C_lib.StreamCipher = Cipher.extend({
                                        _doFinalize: function () {
                                            // Process partial blocks
                                            var finalProcessedBlocks = this._process(!!'flush');

                                            return finalProcessedBlocks;
                                        },

                                        blockSize: 1
                                    });

                                    /**
                                     * Mode namespace.
                                     */
                                    var C_mode = C.mode = {};

                                    /**
                                     * Abstract base block cipher mode template.
                                     */
                                    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
                                        /**
                                         * Creates this mode for encryption.
                                         *
                                         * @param {Cipher} cipher A block cipher instance.
                                         * @param {Array} iv The IV words.
                                         *
                                         * @static
                                         *
                                         * @example
                                         *
                                         *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);
                                         */
                                        createEncryptor: function (cipher, iv) {
                                            return this.Encryptor.create(cipher, iv);
                                        },

                                        /**
                                         * Creates this mode for decryption.
                                         *
                                         * @param {Cipher} cipher A block cipher instance.
                                         * @param {Array} iv The IV words.
                                         *
                                         * @static
                                         *
                                         * @example
                                         *
                                         *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);
                                         */
                                        createDecryptor: function (cipher, iv) {
                                            return this.Decryptor.create(cipher, iv);
                                        },

                                        /**
                                         * Initializes a newly created mode.
                                         *
                                         * @param {Cipher} cipher A block cipher instance.
                                         * @param {Array} iv The IV words.
                                         *
                                         * @example
                                         *
                                         *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);
                                         */
                                        init: function (cipher, iv) {
                                            this._cipher = cipher;
                                            this._iv = iv;
                                        }
                                    });

                                    /**
                                     * Cipher Block Chaining mode.
                                     */
                                    var CBC = C_mode.CBC = (function () {
                                        /**
                                         * Abstract base CBC mode.
                                         */
                                        var CBC = BlockCipherMode.extend();

                                        /**
                                         * CBC encryptor.
                                         */
                                        CBC.Encryptor = CBC.extend({
                                            /**
                                             * Processes the data block at offset.
                                             *
                                             * @param {Array} words The data words to operate on.
                                             * @param {number} offset The offset where the block starts.
                                             *
                                             * @example
                                             *
                                             *     mode.processBlock(data.words, offset);
                                             */
                                            processBlock: function (words, offset) {
                                                // Shortcuts
                                                var cipher = this._cipher;
                                                var blockSize = cipher.blockSize;

                                                // XOR and encrypt
                                                xorBlock.call(this, words, offset, blockSize);
                                                cipher.encryptBlock(words, offset);

                                                // Remember this block to use with next block
                                                this._prevBlock = words.slice(offset, offset + blockSize);
                                            }
                                        });

                                        /**
                                         * CBC decryptor.
                                         */
                                        CBC.Decryptor = CBC.extend({
                                            /**
                                             * Processes the data block at offset.
                                             *
                                             * @param {Array} words The data words to operate on.
                                             * @param {number} offset The offset where the block starts.
                                             *
                                             * @example
                                             *
                                             *     mode.processBlock(data.words, offset);
                                             */
                                            processBlock: function (words, offset) {
                                                // Shortcuts
                                                var cipher = this._cipher;
                                                var blockSize = cipher.blockSize;

                                                // Remember this block to use with next block
                                                var thisBlock = words.slice(offset, offset + blockSize);

                                                // Decrypt and XOR
                                                cipher.decryptBlock(words, offset);
                                                xorBlock.call(this, words, offset, blockSize);

                                                // This block becomes the previous block
                                                this._prevBlock = thisBlock;
                                            }
                                        });

                                        function xorBlock(words, offset, blockSize) {
                                            // Shortcut
                                            var iv = this._iv;

                                            // Choose mixing block
                                            if (iv) {
                                                var block = iv;

                                                // Remove IV for subsequent blocks
                                                this._iv = undefined;
                                            } else {
                                                var block = this._prevBlock;
                                            }

                                            // XOR blocks
                                            for (var i = 0; i < blockSize; i++) {
                                                words[offset + i] ^= block[i];
                                            }
                                        }

                                        return CBC;
                                    }());

                                    /**
                                     * Padding namespace.
                                     */
                                    var C_pad = C.pad = {};

                                    /**
                                     * PKCS #5/7 padding strategy.
                                     */
                                    var Pkcs7 = C_pad.Pkcs7 = {
                                        /**
                                         * Pads data using the algorithm defined in PKCS #5/7.
                                         *
                                         * @param {WordArray} data The data to pad.
                                         * @param {number} blockSize The multiple that the data should be padded to.
                                         *
                                         * @static
                                         *
                                         * @example
                                         *
                                         *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);
                                         */
                                        pad: function (data, blockSize) {
                                            // Shortcut
                                            var blockSizeBytes = blockSize * 4;

                                            // Count padding bytes
                                            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;

                                            // Create padding word
                                            var paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;

                                            // Create padding
                                            var paddingWords = [];
                                            for (var i = 0; i < nPaddingBytes; i += 4) {
                                                paddingWords.push(paddingWord);
                                            }
                                            var padding = WordArray.create(paddingWords, nPaddingBytes);

                                            // Add padding
                                            data.concat(padding);
                                        },

                                        /**
                                         * Unpads data that had been padded using the algorithm defined in PKCS #5/7.
                                         *
                                         * @param {WordArray} data The data to unpad.
                                         *
                                         * @static
                                         *
                                         * @example
                                         *
                                         *     CryptoJS.pad.Pkcs7.unpad(wordArray);
                                         */
                                        unpad: function (data) {
                                            // Get number of padding bytes from last byte
                                            var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;

                                            // Remove padding
                                            data.sigBytes -= nPaddingBytes;
                                        }
                                    };

                                    /**
                                     * Abstract base block cipher template.
                                     *
                                     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)
                                     */
                                    var BlockCipher = C_lib.BlockCipher = Cipher.extend({
                                        /**
                                         * Configuration options.
                                         *
                                         * @property {Mode} mode The block mode to use. Default: CBC
                                         * @property {Padding} padding The padding strategy to use. Default: Pkcs7
                                         */
                                        cfg: Cipher.cfg.extend({
                                            mode: CBC,
                                            padding: Pkcs7
                                        }),

                                        reset: function () {
                                            // Reset cipher
                                            Cipher.reset.call(this);

                                            // Shortcuts
                                            var cfg = this.cfg;
                                            var iv = cfg.iv;
                                            var mode = cfg.mode;

                                            // Reset block mode
                                            if (this._xformMode == this._ENC_XFORM_MODE) {
                                                var modeCreator = mode.createEncryptor;
                                            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {
                                                var modeCreator = mode.createDecryptor;
                                                // Keep at least one block in the buffer for unpadding
                                                this._minBufferSize = 1;
                                            }

                                            if (this._mode && this._mode.__creator == modeCreator) {
                                                this._mode.init(this, iv && iv.words);
                                            } else {
                                                this._mode = modeCreator.call(mode, this, iv && iv.words);
                                                this._mode.__creator = modeCreator;
                                            }
                                        },

                                        _doProcessBlock: function (words, offset) {
                                            this._mode.processBlock(words, offset);
                                        },

                                        _doFinalize: function () {
                                            // Shortcut
                                            var padding = this.cfg.padding;

                                            // Finalize
                                            if (this._xformMode == this._ENC_XFORM_MODE) {
                                                // Pad data
                                                padding.pad(this._data, this.blockSize);

                                                // Process final blocks
                                                var finalProcessedBlocks = this._process(!!'flush');
                                            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {
                                                // Process final blocks
                                                var finalProcessedBlocks = this._process(!!'flush');

                                                // Unpad data
                                                padding.unpad(finalProcessedBlocks);
                                            }

                                            return finalProcessedBlocks;
                                        },

                                        blockSize: 128 / 32
                                    });

                                    /**
                                     * A collection of cipher parameters.
                                     *
                                     * @property {WordArray} ciphertext The raw ciphertext.
                                     * @property {WordArray} key The key to this ciphertext.
                                     * @property {WordArray} iv The IV used in the ciphering operation.
                                     * @property {WordArray} salt The salt used with a key derivation function.
                                     * @property {Cipher} algorithm The cipher algorithm.
                                     * @property {Mode} mode The block mode used in the ciphering operation.
                                     * @property {Padding} padding The padding scheme used in the ciphering operation.
                                     * @property {number} blockSize The block size of the cipher.
                                     * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.
                                     */
                                    var CipherParams = C_lib.CipherParams = Base.extend({
                                        /**
                                         * Initializes a newly created cipher params object.
                                         *
                                         * @param {Object} cipherParams An object with any of the possible cipher parameters.
                                         *
                                         * @example
                                         *
                                         *     var cipherParams = CryptoJS.lib.CipherParams.create({
	         *         ciphertext: ciphertextWordArray,
	         *         key: keyWordArray,
	         *         iv: ivWordArray,
	         *         salt: saltWordArray,
	         *         algorithm: CryptoJS.algo.AES,
	         *         mode: CryptoJS.mode.CBC,
	         *         padding: CryptoJS.pad.PKCS7,
	         *         blockSize: 4,
	         *         formatter: CryptoJS.format.OpenSSL
	         *     });
                                         */
                                        init: function (cipherParams) {
                                            this.mixIn(cipherParams);
                                        },

                                        /**
                                         * Converts this cipher params object to a string.
                                         *
                                         * @param {Format} formatter (Optional) The formatting strategy to use.
                                         *
                                         * @return {string} The stringified cipher params.
                                         *
                                         * @throws Error If neither the formatter nor the default formatter is set.
                                         *
                                         * @example
                                         *
                                         *     var string = cipherParams + '';
                                         *     var string = cipherParams.toString();
                                         *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);
                                         */
                                        toString: function (formatter) {
                                            return (formatter || this.formatter).stringify(this);
                                        }
                                    });

                                    /**
                                     * Format namespace.
                                     */
                                    var C_format = C.format = {};

                                    /**
                                     * OpenSSL formatting strategy.
                                     */
                                    var OpenSSLFormatter = C_format.OpenSSL = {
                                        /**
                                         * Converts a cipher params object to an OpenSSL-compatible string.
                                         *
                                         * @param {CipherParams} cipherParams The cipher params object.
                                         *
                                         * @return {string} The OpenSSL-compatible string.
                                         *
                                         * @static
                                         *
                                         * @example
                                         *
                                         *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);
                                         */
                                        stringify: function (cipherParams) {
                                            // Shortcuts
                                            var ciphertext = cipherParams.ciphertext;
                                            var salt = cipherParams.salt;

                                            // Format
                                            if (salt) {
                                                var wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);
                                            } else {
                                                var wordArray = ciphertext;
                                            }

                                            return wordArray.toString(Base64);
                                        },

                                        /**
                                         * Converts an OpenSSL-compatible string to a cipher params object.
                                         *
                                         * @param {string} openSSLStr The OpenSSL-compatible string.
                                         *
                                         * @return {CipherParams} The cipher params object.
                                         *
                                         * @static
                                         *
                                         * @example
                                         *
                                         *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);
                                         */
                                        parse: function (openSSLStr) {
                                            // Parse base64
                                            var ciphertext = Base64.parse(openSSLStr);

                                            // Shortcut
                                            var ciphertextWords = ciphertext.words;

                                            // Test for salt
                                            if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {
                                                // Extract salt
                                                var salt = WordArray.create(ciphertextWords.slice(2, 4));

                                                // Remove salt from ciphertext
                                                ciphertextWords.splice(0, 4);
                                                ciphertext.sigBytes -= 16;
                                            }

                                            return CipherParams.create({ciphertext: ciphertext, salt: salt});
                                        }
                                    };

                                    /**
                                     * A cipher wrapper that returns ciphertext as a serializable cipher params object.
                                     */
                                    var SerializableCipher = C_lib.SerializableCipher = Base.extend({
                                        /**
                                         * Configuration options.
                                         *
                                         * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
                                         */
                                        cfg: Base.extend({
                                            format: OpenSSLFormatter
                                        }),

                                        /**
                                         * Encrypts a message.
                                         *
                                         * @param {Cipher} cipher The cipher algorithm to use.
                                         * @param {WordArray|string} message The message to encrypt.
                                         * @param {WordArray} key The key.
                                         * @param {Object} cfg (Optional) The configuration options to use for this operation.
                                         *
                                         * @return {CipherParams} A cipher params object.
                                         *
                                         * @static
                                         *
                                         * @example
                                         *
                                         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);
                                         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
                                         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
                                         */
                                        encrypt: function (cipher, message, key, cfg) {
                                            // Apply config defaults
                                            cfg = this.cfg.extend(cfg);

                                            // Encrypt
                                            var encryptor = cipher.createEncryptor(key, cfg);
                                            var ciphertext = encryptor.finalize(message);

                                            // Shortcut
                                            var cipherCfg = encryptor.cfg;

                                            // Create and return serializable cipher params
                                            return CipherParams.create({
                                                ciphertext: ciphertext,
                                                key: key,
                                                iv: cipherCfg.iv,
                                                algorithm: cipher,
                                                mode: cipherCfg.mode,
                                                padding: cipherCfg.padding,
                                                blockSize: cipher.blockSize,
                                                formatter: cfg.format
                                            });
                                        },

                                        /**
                                         * Decrypts serialized ciphertext.
                                         *
                                         * @param {Cipher} cipher The cipher algorithm to use.
                                         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
                                         * @param {WordArray} key The key.
                                         * @param {Object} cfg (Optional) The configuration options to use for this operation.
                                         *
                                         * @return {WordArray} The plaintext.
                                         *
                                         * @static
                                         *
                                         * @example
                                         *
                                         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
                                         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
                                         */
                                        decrypt: function (cipher, ciphertext, key, cfg) {
                                            // Apply config defaults
                                            cfg = this.cfg.extend(cfg);

                                            // Convert string to CipherParams
                                            ciphertext = this._parse(ciphertext, cfg.format);

                                            // Decrypt
                                            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);

                                            return plaintext;
                                        },

                                        /**
                                         * Converts serialized ciphertext to CipherParams,
                                         * else assumed CipherParams already and returns ciphertext unchanged.
                                         *
                                         * @param {CipherParams|string} ciphertext The ciphertext.
                                         * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.
                                         *
                                         * @return {CipherParams} The unserialized ciphertext.
                                         *
                                         * @static
                                         *
                                         * @example
                                         *
                                         *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);
                                         */
                                        _parse: function (ciphertext, format) {
                                            if (typeof ciphertext == 'string') {
                                                return format.parse(ciphertext, this);
                                            } else {
                                                return ciphertext;
                                            }
                                        }
                                    });

                                    /**
                                     * Key derivation function namespace.
                                     */
                                    var C_kdf = C.kdf = {};

                                    /**
                                     * OpenSSL key derivation function.
                                     */
                                    var OpenSSLKdf = C_kdf.OpenSSL = {
                                        /**
                                         * Derives a key and IV from a password.
                                         *
                                         * @param {string} password The password to derive from.
                                         * @param {number} keySize The size in words of the key to generate.
                                         * @param {number} ivSize The size in words of the IV to generate.
                                         * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
                                         *
                                         * @return {CipherParams} A cipher params object with the key, IV, and salt.
                                         *
                                         * @static
                                         *
                                         * @example
                                         *
                                         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);
                                         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');
                                         */
                                        execute: function (password, keySize, ivSize, salt) {
                                            // Generate random salt
                                            if (!salt) {
                                                salt = WordArray.random(64 / 8);
                                            }

                                            // Derive key and IV
                                            var key = EvpKDF.create({keySize: keySize + ivSize}).compute(password, salt);

                                            // Separate key and IV
                                            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
                                            key.sigBytes = keySize * 4;

                                            // Return params
                                            return CipherParams.create({key: key, iv: iv, salt: salt});
                                        }
                                    };

                                    /**
                                     * A serializable cipher wrapper that derives the key from a password,
                                     * and returns ciphertext as a serializable cipher params object.
                                     */
                                    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
                                        /**
                                         * Configuration options.
                                         *
                                         * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
                                         */
                                        cfg: SerializableCipher.cfg.extend({
                                            kdf: OpenSSLKdf
                                        }),

                                        /**
                                         * Encrypts a message using a password.
                                         *
                                         * @param {Cipher} cipher The cipher algorithm to use.
                                         * @param {WordArray|string} message The message to encrypt.
                                         * @param {string} password The password.
                                         * @param {Object} cfg (Optional) The configuration options to use for this operation.
                                         *
                                         * @return {CipherParams} A cipher params object.
                                         *
                                         * @static
                                         *
                                         * @example
                                         *
                                         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
                                         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
                                         */
                                        encrypt: function (cipher, message, password, cfg) {
                                            // Apply config defaults
                                            cfg = this.cfg.extend(cfg);

                                            // Derive key and other params
                                            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);

                                            // Add IV to config
                                            cfg.iv = derivedParams.iv;

                                            // Encrypt
                                            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);

                                            // Mix in derived params
                                            ciphertext.mixIn(derivedParams);

                                            return ciphertext;
                                        },

                                        /**
                                         * Decrypts serialized ciphertext using a password.
                                         *
                                         * @param {Cipher} cipher The cipher algorithm to use.
                                         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
                                         * @param {string} password The password.
                                         * @param {Object} cfg (Optional) The configuration options to use for this operation.
                                         *
                                         * @return {WordArray} The plaintext.
                                         *
                                         * @static
                                         *
                                         * @example
                                         *
                                         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
                                         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
                                         */
                                        decrypt: function (cipher, ciphertext, password, cfg) {
                                            // Apply config defaults
                                            cfg = this.cfg.extend(cfg);

                                            // Convert string to CipherParams
                                            ciphertext = this._parse(ciphertext, cfg.format);

                                            // Derive key and other params
                                            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);

                                            // Add IV to config
                                            cfg.iv = derivedParams.iv;

                                            // Decrypt
                                            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);

                                            return plaintext;
                                        }
                                    });
                                }());


                            }));
                        }, {"./core": 75, "./evpkdf": 78}],
                        75: [function (require, module, exports) {
                            ;(function (root, factory) {
                                if (typeof exports === "object") {
                                    // CommonJS
                                    module.exports = exports = factory();
                                }
                                else if (typeof define === "function" && define.amd) {
                                    // AMD
                                    define([], factory);
                                }
                                else {
                                    // Global (browser)
                                    root.CryptoJS = factory();
                                }
                            }(this, function () {

                                /**
                                 * CryptoJS core components.
                                 */
                                var CryptoJS = CryptoJS || (function (Math, undefined) {
                                    /*
	     * Local polyfil of Object.create
	     */
                                    var create = Object.create || (function () {
                                        function F() {
                                        };

                                        return function (obj) {
                                            var subtype;

                                            F.prototype = obj;

                                            subtype = new F();

                                            F.prototype = null;

                                            return subtype;
                                        };
                                    }())

                                    /**
                                     * CryptoJS namespace.
                                     */
                                    var C = {};

                                    /**
                                     * Library namespace.
                                     */
                                    var C_lib = C.lib = {};

                                    /**
                                     * Base object for prototypal inheritance.
                                     */
                                    var Base = C_lib.Base = (function () {


                                        return {
                                            /**
                                             * Creates a new object that inherits from this object.
                                             *
                                             * @param {Object} overrides Properties to copy into the new object.
                                             *
                                             * @return {Object} The new object.
                                             *
                                             * @static
                                             *
                                             * @example
                                             *
                                             *     var MyType = CryptoJS.lib.Base.extend({
	             *         field: 'value',
	             *
	             *         method: function () {
	             *         }
	             *     });
                                             */
                                            extend: function (overrides) {
                                                // Spawn
                                                var subtype = create(this);

                                                // Augment
                                                if (overrides) {
                                                    subtype.mixIn(overrides);
                                                }

                                                // Create default initializer
                                                if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {
                                                    subtype.init = function () {
                                                        subtype.$super.init.apply(this, arguments);
                                                    };
                                                }

                                                // Initializer's prototype is the subtype object
                                                subtype.init.prototype = subtype;

                                                // Reference supertype
                                                subtype.$super = this;

                                                return subtype;
                                            },

                                            /**
                                             * Extends this object and runs the init method.
                                             * Arguments to create() will be passed to init().
                                             *
                                             * @return {Object} The new object.
                                             *
                                             * @static
                                             *
                                             * @example
                                             *
                                             *     var instance = MyType.create();
                                             */
                                            create: function () {
                                                var instance = this.extend();
                                                instance.init.apply(instance, arguments);

                                                return instance;
                                            },

                                            /**
                                             * Initializes a newly created object.
                                             * Override this method to add some logic when your objects are created.
                                             *
                                             * @example
                                             *
                                             *     var MyType = CryptoJS.lib.Base.extend({
	             *         init: function () {
	             *             // ...
	             *         }
	             *     });
                                             */
                                            init: function () {
                                            },

                                            /**
                                             * Copies properties into this object.
                                             *
                                             * @param {Object} properties The properties to mix in.
                                             *
                                             * @example
                                             *
                                             *     MyType.mixIn({
	             *         field: 'value'
	             *     });
                                             */
                                            mixIn: function (properties) {
                                                for (var propertyName in properties) {
                                                    if (properties.hasOwnProperty(propertyName)) {
                                                        this[propertyName] = properties[propertyName];
                                                    }
                                                }

                                                // IE won't copy toString using the loop above
                                                if (properties.hasOwnProperty('toString')) {
                                                    this.toString = properties.toString;
                                                }
                                            },

                                            /**
                                             * Creates a copy of this object.
                                             *
                                             * @return {Object} The clone.
                                             *
                                             * @example
                                             *
                                             *     var clone = instance.clone();
                                             */
                                            clone: function () {
                                                return this.init.prototype.extend(this);
                                            }
                                        };
                                    }());

                                    /**
                                     * An array of 32-bit words.
                                     *
                                     * @property {Array} words The array of 32-bit words.
                                     * @property {number} sigBytes The number of significant bytes in this word array.
                                     */
                                    var WordArray = C_lib.WordArray = Base.extend({
                                        /**
                                         * Initializes a newly created word array.
                                         *
                                         * @param {Array} words (Optional) An array of 32-bit words.
                                         * @param {number} sigBytes (Optional) The number of significant bytes in the words.
                                         *
                                         * @example
                                         *
                                         *     var wordArray = CryptoJS.lib.WordArray.create();
                                         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
                                         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
                                         */
                                        init: function (words, sigBytes) {
                                            words = this.words = words || [];

                                            if (sigBytes != undefined) {
                                                this.sigBytes = sigBytes;
                                            } else {
                                                this.sigBytes = words.length * 4;
                                            }
                                        },

                                        /**
                                         * Converts this word array to a string.
                                         *
                                         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
                                         *
                                         * @return {string} The stringified word array.
                                         *
                                         * @example
                                         *
                                         *     var string = wordArray + '';
                                         *     var string = wordArray.toString();
                                         *     var string = wordArray.toString(CryptoJS.enc.Utf8);
                                         */
                                        toString: function (encoder) {
                                            return (encoder || Hex).stringify(this);
                                        },

                                        /**
                                         * Concatenates a word array to this word array.
                                         *
                                         * @param {WordArray} wordArray The word array to append.
                                         *
                                         * @return {WordArray} This word array.
                                         *
                                         * @example
                                         *
                                         *     wordArray1.concat(wordArray2);
                                         */
                                        concat: function (wordArray) {
                                            // Shortcuts
                                            var thisWords = this.words;
                                            var thatWords = wordArray.words;
                                            var thisSigBytes = this.sigBytes;
                                            var thatSigBytes = wordArray.sigBytes;

                                            // Clamp excess bits
                                            this.clamp();

                                            // Concat
                                            if (thisSigBytes % 4) {
                                                // Copy one byte at a time
                                                for (var i = 0; i < thatSigBytes; i++) {
                                                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
                                                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);
                                                }
                                            } else {
                                                // Copy one word at a time
                                                for (var i = 0; i < thatSigBytes; i += 4) {
                                                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];
                                                }
                                            }
                                            this.sigBytes += thatSigBytes;

                                            // Chainable
                                            return this;
                                        },

                                        /**
                                         * Removes insignificant bits.
                                         *
                                         * @example
                                         *
                                         *     wordArray.clamp();
                                         */
                                        clamp: function () {
                                            // Shortcuts
                                            var words = this.words;
                                            var sigBytes = this.sigBytes;

                                            // Clamp
                                            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);
                                            words.length = Math.ceil(sigBytes / 4);
                                        },

                                        /**
                                         * Creates a copy of this word array.
                                         *
                                         * @return {WordArray} The clone.
                                         *
                                         * @example
                                         *
                                         *     var clone = wordArray.clone();
                                         */
                                        clone: function () {
                                            var clone = Base.clone.call(this);
                                            clone.words = this.words.slice(0);

                                            return clone;
                                        },

                                        /**
                                         * Creates a word array filled with random bytes.
                                         *
                                         * @param {number} nBytes The number of random bytes to generate.
                                         *
                                         * @return {WordArray} The random word array.
                                         *
                                         * @static
                                         *
                                         * @example
                                         *
                                         *     var wordArray = CryptoJS.lib.WordArray.random(16);
                                         */
                                        random: function (nBytes) {
                                            var words = [];

                                            var r = (function (m_w) {
                                                var m_w = m_w;
                                                var m_z = 0x3ade68b1;
                                                var mask = 0xffffffff;

                                                return function () {
                                                    m_z = (0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10)) & mask;
                                                    m_w = (0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10)) & mask;
                                                    var result = ((m_z << 0x10) + m_w) & mask;
                                                    result /= 0x100000000;
                                                    result += 0.5;
                                                    return result * (Math.random() > .5 ? 1 : -1);
                                                }
                                            });

                                            for (var i = 0, rcache; i < nBytes; i += 4) {
                                                var _r = r((rcache || Math.random()) * 0x100000000);

                                                rcache = _r() * 0x3ade67b7;
                                                words.push((_r() * 0x100000000) | 0);
                                            }

                                            return new WordArray.init(words, nBytes);
                                        }
                                    });

                                    /**
                                     * Encoder namespace.
                                     */
                                    var C_enc = C.enc = {};

                                    /**
                                     * Hex encoding strategy.
                                     */
                                    var Hex = C_enc.Hex = {
                                        /**
                                         * Converts a word array to a hex string.
                                         *
                                         * @param {WordArray} wordArray The word array.
                                         *
                                         * @return {string} The hex string.
                                         *
                                         * @static
                                         *
                                         * @example
                                         *
                                         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
                                         */
                                        stringify: function (wordArray) {
                                            // Shortcuts
                                            var words = wordArray.words;
                                            var sigBytes = wordArray.sigBytes;

                                            // Convert
                                            var hexChars = [];
                                            for (var i = 0; i < sigBytes; i++) {
                                                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
                                                hexChars.push((bite >>> 4).toString(16));
                                                hexChars.push((bite & 0x0f).toString(16));
                                            }

                                            return hexChars.join('');
                                        },

                                        /**
                                         * Converts a hex string to a word array.
                                         *
                                         * @param {string} hexStr The hex string.
                                         *
                                         * @return {WordArray} The word array.
                                         *
                                         * @static
                                         *
                                         * @example
                                         *
                                         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
                                         */
                                        parse: function (hexStr) {
                                            // Shortcut
                                            var hexStrLength = hexStr.length;

                                            // Convert
                                            var words = [];
                                            for (var i = 0; i < hexStrLength; i += 2) {
                                                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);
                                            }

                                            return new WordArray.init(words, hexStrLength / 2);
                                        }
                                    };

                                    /**
                                     * Latin1 encoding strategy.
                                     */
                                    var Latin1 = C_enc.Latin1 = {
                                        /**
                                         * Converts a word array to a Latin1 string.
                                         *
                                         * @param {WordArray} wordArray The word array.
                                         *
                                         * @return {string} The Latin1 string.
                                         *
                                         * @static
                                         *
                                         * @example
                                         *
                                         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
                                         */
                                        stringify: function (wordArray) {
                                            // Shortcuts
                                            var words = wordArray.words;
                                            var sigBytes = wordArray.sigBytes;

                                            // Convert
                                            var latin1Chars = [];
                                            for (var i = 0; i < sigBytes; i++) {
                                                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
                                                latin1Chars.push(String.fromCharCode(bite));
                                            }

                                            return latin1Chars.join('');
                                        },

                                        /**
                                         * Converts a Latin1 string to a word array.
                                         *
                                         * @param {string} latin1Str The Latin1 string.
                                         *
                                         * @return {WordArray} The word array.
                                         *
                                         * @static
                                         *
                                         * @example
                                         *
                                         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
                                         */
                                        parse: function (latin1Str) {
                                            // Shortcut
                                            var latin1StrLength = latin1Str.length;

                                            // Convert
                                            var words = [];
                                            for (var i = 0; i < latin1StrLength; i++) {
                                                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);
                                            }

                                            return new WordArray.init(words, latin1StrLength);
                                        }
                                    };

                                    /**
                                     * UTF-8 encoding strategy.
                                     */
                                    var Utf8 = C_enc.Utf8 = {
                                        /**
                                         * Converts a word array to a UTF-8 string.
                                         *
                                         * @param {WordArray} wordArray The word array.
                                         *
                                         * @return {string} The UTF-8 string.
                                         *
                                         * @static
                                         *
                                         * @example
                                         *
                                         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
                                         */
                                        stringify: function (wordArray) {
                                            try {
                                                return decodeURIComponent(escape(Latin1.stringify(wordArray)));
                                            } catch (e) {
                                                throw new Error('Malformed UTF-8 data');
                                            }
                                        },

                                        /**
                                         * Converts a UTF-8 string to a word array.
                                         *
                                         * @param {string} utf8Str The UTF-8 string.
                                         *
                                         * @return {WordArray} The word array.
                                         *
                                         * @static
                                         *
                                         * @example
                                         *
                                         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
                                         */
                                        parse: function (utf8Str) {
                                            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
                                        }
                                    };

                                    /**
                                     * Abstract buffered block algorithm template.
                                     *
                                     * The property blockSize must be implemented in a concrete subtype.
                                     *
                                     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
                                     */
                                    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
                                        /**
                                         * Resets this block algorithm's data buffer to its initial state.
                                         *
                                         * @example
                                         *
                                         *     bufferedBlockAlgorithm.reset();
                                         */
                                        reset: function () {
                                            // Initial values
                                            this._data = new WordArray.init();
                                            this._nDataBytes = 0;
                                        },

                                        /**
                                         * Adds new data to this block algorithm's buffer.
                                         *
                                         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
                                         *
                                         * @example
                                         *
                                         *     bufferedBlockAlgorithm._append('data');
                                         *     bufferedBlockAlgorithm._append(wordArray);
                                         */
                                        _append: function (data) {
                                            // Convert string to WordArray, else assume WordArray already
                                            if (typeof data == 'string') {
                                                data = Utf8.parse(data);
                                            }

                                            // Append
                                            this._data.concat(data);
                                            this._nDataBytes += data.sigBytes;
                                        },

                                        /**
                                         * Processes available data blocks.
                                         *
                                         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
                                         *
                                         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
                                         *
                                         * @return {WordArray} The processed data.
                                         *
                                         * @example
                                         *
                                         *     var processedData = bufferedBlockAlgorithm._process();
                                         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
                                         */
                                        _process: function (doFlush) {
                                            // Shortcuts
                                            var data = this._data;
                                            var dataWords = data.words;
                                            var dataSigBytes = data.sigBytes;
                                            var blockSize = this.blockSize;
                                            var blockSizeBytes = blockSize * 4;

                                            // Count blocks ready
                                            var nBlocksReady = dataSigBytes / blockSizeBytes;
                                            if (doFlush) {
                                                // Round up to include partial blocks
                                                nBlocksReady = Math.ceil(nBlocksReady);
                                            } else {
                                                // Round down to include only full blocks,
                                                // less the number of blocks that must remain in the buffer
                                                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
                                            }

                                            // Count words ready
                                            var nWordsReady = nBlocksReady * blockSize;

                                            // Count bytes ready
                                            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);

                                            // Process blocks
                                            if (nWordsReady) {
                                                for (var offset = 0; offset < nWordsReady; offset += blockSize) {
                                                    // Perform concrete-algorithm logic
                                                    this._doProcessBlock(dataWords, offset);
                                                }

                                                // Remove processed words
                                                var processedWords = dataWords.splice(0, nWordsReady);
                                                data.sigBytes -= nBytesReady;
                                            }

                                            // Return processed words
                                            return new WordArray.init(processedWords, nBytesReady);
                                        },

                                        /**
                                         * Creates a copy of this object.
                                         *
                                         * @return {Object} The clone.
                                         *
                                         * @example
                                         *
                                         *     var clone = bufferedBlockAlgorithm.clone();
                                         */
                                        clone: function () {
                                            var clone = Base.clone.call(this);
                                            clone._data = this._data.clone();

                                            return clone;
                                        },

                                        _minBufferSize: 0
                                    });

                                    /**
                                     * Abstract hasher template.
                                     *
                                     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)
                                     */
                                    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
                                        /**
                                         * Configuration options.
                                         */
                                        cfg: Base.extend(),

                                        /**
                                         * Initializes a newly created hasher.
                                         *
                                         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
                                         *
                                         * @example
                                         *
                                         *     var hasher = CryptoJS.algo.SHA256.create();
                                         */
                                        init: function (cfg) {
                                            // Apply config defaults
                                            this.cfg = this.cfg.extend(cfg);

                                            // Set initial values
                                            this.reset();
                                        },

                                        /**
                                         * Resets this hasher to its initial state.
                                         *
                                         * @example
                                         *
                                         *     hasher.reset();
                                         */
                                        reset: function () {
                                            // Reset data buffer
                                            BufferedBlockAlgorithm.reset.call(this);

                                            // Perform concrete-hasher logic
                                            this._doReset();
                                        },

                                        /**
                                         * Updates this hasher with a message.
                                         *
                                         * @param {WordArray|string} messageUpdate The message to append.
                                         *
                                         * @return {Hasher} This hasher.
                                         *
                                         * @example
                                         *
                                         *     hasher.update('message');
                                         *     hasher.update(wordArray);
                                         */
                                        update: function (messageUpdate) {
                                            // Append
                                            this._append(messageUpdate);

                                            // Update the hash
                                            this._process();

                                            // Chainable
                                            return this;
                                        },

                                        /**
                                         * Finalizes the hash computation.
                                         * Note that the finalize operation is effectively a destructive, read-once operation.
                                         *
                                         * @param {WordArray|string} messageUpdate (Optional) A final message update.
                                         *
                                         * @return {WordArray} The hash.
                                         *
                                         * @example
                                         *
                                         *     var hash = hasher.finalize();
                                         *     var hash = hasher.finalize('message');
                                         *     var hash = hasher.finalize(wordArray);
                                         */
                                        finalize: function (messageUpdate) {
                                            // Final message update
                                            if (messageUpdate) {
                                                this._append(messageUpdate);
                                            }

                                            // Perform concrete-hasher logic
                                            var hash = this._doFinalize();

                                            return hash;
                                        },

                                        blockSize: 512 / 32,

                                        /**
                                         * Creates a shortcut function to a hasher's object interface.
                                         *
                                         * @param {Hasher} hasher The hasher to create a helper for.
                                         *
                                         * @return {Function} The shortcut function.
                                         *
                                         * @static
                                         *
                                         * @example
                                         *
                                         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
                                         */
                                        _createHelper: function (hasher) {
                                            return function (message, cfg) {
                                                return new hasher.init(cfg).finalize(message);
                                            };
                                        },

                                        /**
                                         * Creates a shortcut function to the HMAC's object interface.
                                         *
                                         * @param {Hasher} hasher The hasher to use in this HMAC helper.
                                         *
                                         * @return {Function} The shortcut function.
                                         *
                                         * @static
                                         *
                                         * @example
                                         *
                                         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
                                         */
                                        _createHmacHelper: function (hasher) {
                                            return function (message, key) {
                                                return new C_algo.HMAC.init(hasher, key).finalize(message);
                                            };
                                        }
                                    });

                                    /**
                                     * Algorithm namespace.
                                     */
                                    var C_algo = C.algo = {};

                                    return C;
                                }(Math));


                                return CryptoJS;

                            }));
                        }, {}],
                        76: [function (require, module, exports) {
                            ;(function (root, factory) {
                                if (typeof exports === "object") {
                                    // CommonJS
                                    module.exports = exports = factory(require("./core"));
                                }
                                else if (typeof define === "function" && define.amd) {
                                    // AMD
                                    define(["./core"], factory);
                                }
                                else {
                                    // Global (browser)
                                    factory(root.CryptoJS);
                                }
                            }(this, function (CryptoJS) {

                                (function () {
                                    // Shortcuts
                                    var C = CryptoJS;
                                    var C_lib = C.lib;
                                    var WordArray = C_lib.WordArray;
                                    var C_enc = C.enc;

                                    /**
                                     * Base64 encoding strategy.
                                     */
                                    var Base64 = C_enc.Base64 = {
                                        /**
                                         * Converts a word array to a Base64 string.
                                         *
                                         * @param {WordArray} wordArray The word array.
                                         *
                                         * @return {string} The Base64 string.
                                         *
                                         * @static
                                         *
                                         * @example
                                         *
                                         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
                                         */
                                        stringify: function (wordArray) {
                                            // Shortcuts
                                            var words = wordArray.words;
                                            var sigBytes = wordArray.sigBytes;
                                            var map = this._map;

                                            // Clamp excess bits
                                            wordArray.clamp();

                                            // Convert
                                            var base64Chars = [];
                                            for (var i = 0; i < sigBytes; i += 3) {
                                                var byte1 = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
                                                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;
                                                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;

                                                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;

                                                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {
                                                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));
                                                }
                                            }

                                            // Add padding
                                            var paddingChar = map.charAt(64);
                                            if (paddingChar) {
                                                while (base64Chars.length % 4) {
                                                    base64Chars.push(paddingChar);
                                                }
                                            }

                                            return base64Chars.join('');
                                        },

                                        /**
                                         * Converts a Base64 string to a word array.
                                         *
                                         * @param {string} base64Str The Base64 string.
                                         *
                                         * @return {WordArray} The word array.
                                         *
                                         * @static
                                         *
                                         * @example
                                         *
                                         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
                                         */
                                        parse: function (base64Str) {
                                            // Shortcuts
                                            var base64StrLength = base64Str.length;
                                            var map = this._map;
                                            var reverseMap = this._reverseMap;

                                            if (!reverseMap) {
                                                reverseMap = this._reverseMap = [];
                                                for (var j = 0; j < map.length; j++) {
                                                    reverseMap[map.charCodeAt(j)] = j;
                                                }
                                            }

                                            // Ignore padding
                                            var paddingChar = map.charAt(64);
                                            if (paddingChar) {
                                                var paddingIndex = base64Str.indexOf(paddingChar);
                                                if (paddingIndex !== -1) {
                                                    base64StrLength = paddingIndex;
                                                }
                                            }

                                            // Convert
                                            return parseLoop(base64Str, base64StrLength, reverseMap);

                                        },

                                        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='
                                    };

                                    function parseLoop(base64Str, base64StrLength, reverseMap) {
                                        var words = [];
                                        var nBytes = 0;
                                        for (var i = 0; i < base64StrLength; i++) {
                                            if (i % 4) {
                                                var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);
                                                var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);
                                                words[nBytes >>> 2] |= (bits1 | bits2) << (24 - (nBytes % 4) * 8);
                                                nBytes++;
                                            }
                                        }
                                        return WordArray.create(words, nBytes);
                                    }
                                }());


                                return CryptoJS.enc.Base64;

                            }));
                        }, {"./core": 75}],
                        77: [function (require, module, exports) {
                            ;(function (root, factory) {
                                if (typeof exports === "object") {
                                    // CommonJS
                                    module.exports = exports = factory(require("./core"));
                                }
                                else if (typeof define === "function" && define.amd) {
                                    // AMD
                                    define(["./core"], factory);
                                }
                                else {
                                    // Global (browser)
                                    factory(root.CryptoJS);
                                }
                            }(this, function (CryptoJS) {

                                (function () {
                                    // Shortcuts
                                    var C = CryptoJS;
                                    var C_lib = C.lib;
                                    var WordArray = C_lib.WordArray;
                                    var C_enc = C.enc;

                                    /**
                                     * UTF-16 BE encoding strategy.
                                     */
                                    var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {
                                        /**
                                         * Converts a word array to a UTF-16 BE string.
                                         *
                                         * @param {WordArray} wordArray The word array.
                                         *
                                         * @return {string} The UTF-16 BE string.
                                         *
                                         * @static
                                         *
                                         * @example
                                         *
                                         *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);
                                         */
                                        stringify: function (wordArray) {
                                            // Shortcuts
                                            var words = wordArray.words;
                                            var sigBytes = wordArray.sigBytes;

                                            // Convert
                                            var utf16Chars = [];
                                            for (var i = 0; i < sigBytes; i += 2) {
                                                var codePoint = (words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff;
                                                utf16Chars.push(String.fromCharCode(codePoint));
                                            }

                                            return utf16Chars.join('');
                                        },

                                        /**
                                         * Converts a UTF-16 BE string to a word array.
                                         *
                                         * @param {string} utf16Str The UTF-16 BE string.
                                         *
                                         * @return {WordArray} The word array.
                                         *
                                         * @static
                                         *
                                         * @example
                                         *
                                         *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);
                                         */
                                        parse: function (utf16Str) {
                                            // Shortcut
                                            var utf16StrLength = utf16Str.length;

                                            // Convert
                                            var words = [];
                                            for (var i = 0; i < utf16StrLength; i++) {
                                                words[i >>> 1] |= utf16Str.charCodeAt(i) << (16 - (i % 2) * 16);
                                            }

                                            return WordArray.create(words, utf16StrLength * 2);
                                        }
                                    };

                                    /**
                                     * UTF-16 LE encoding strategy.
                                     */
                                    C_enc.Utf16LE = {
                                        /**
                                         * Converts a word array to a UTF-16 LE string.
                                         *
                                         * @param {WordArray} wordArray The word array.
                                         *
                                         * @return {string} The UTF-16 LE string.
                                         *
                                         * @static
                                         *
                                         * @example
                                         *
                                         *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);
                                         */
                                        stringify: function (wordArray) {
                                            // Shortcuts
                                            var words = wordArray.words;
                                            var sigBytes = wordArray.sigBytes;

                                            // Convert
                                            var utf16Chars = [];
                                            for (var i = 0; i < sigBytes; i += 2) {
                                                var codePoint = swapEndian((words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff);
                                                utf16Chars.push(String.fromCharCode(codePoint));
                                            }

                                            return utf16Chars.join('');
                                        },

                                        /**
                                         * Converts a UTF-16 LE string to a word array.
                                         *
                                         * @param {string} utf16Str The UTF-16 LE string.
                                         *
                                         * @return {WordArray} The word array.
                                         *
                                         * @static
                                         *
                                         * @example
                                         *
                                         *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);
                                         */
                                        parse: function (utf16Str) {
                                            // Shortcut
                                            var utf16StrLength = utf16Str.length;

                                            // Convert
                                            var words = [];
                                            for (var i = 0; i < utf16StrLength; i++) {
                                                words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << (16 - (i % 2) * 16));
                                            }

                                            return WordArray.create(words, utf16StrLength * 2);
                                        }
                                    };

                                    function swapEndian(word) {
                                        return ((word << 8) & 0xff00ff00) | ((word >>> 8) & 0x00ff00ff);
                                    }
                                }());


                                return CryptoJS.enc.Utf16;

                            }));
                        }, {"./core": 75}],
                        78: [function (require, module, exports) {
                            ;(function (root, factory, undef) {
                                if (typeof exports === "object") {
                                    // CommonJS
                                    module.exports = exports = factory(require("./core"), require("./sha1"), require("./hmac"));
                                }
                                else if (typeof define === "function" && define.amd) {
                                    // AMD
                                    define(["./core", "./sha1", "./hmac"], factory);
                                }
                                else {
                                    // Global (browser)
                                    factory(root.CryptoJS);
                                }
                            }(this, function (CryptoJS) {

                                (function () {
                                    // Shortcuts
                                    var C = CryptoJS;
                                    var C_lib = C.lib;
                                    var Base = C_lib.Base;
                                    var WordArray = C_lib.WordArray;
                                    var C_algo = C.algo;
                                    var MD5 = C_algo.MD5;

                                    /**
                                     * This key derivation function is meant to conform with EVP_BytesToKey.
                                     * www.openssl.org/docs/crypto/EVP_BytesToKey.html
                                     */
                                    var EvpKDF = C_algo.EvpKDF = Base.extend({
                                        /**
                                         * Configuration options.
                                         *
                                         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
                                         * @property {Hasher} hasher The hash algorithm to use. Default: MD5
                                         * @property {number} iterations The number of iterations to perform. Default: 1
                                         */
                                        cfg: Base.extend({
                                            keySize: 128 / 32,
                                            hasher: MD5,
                                            iterations: 1
                                        }),

                                        /**
                                         * Initializes a newly created key derivation function.
                                         *
                                         * @param {Object} cfg (Optional) The configuration options to use for the derivation.
                                         *
                                         * @example
                                         *
                                         *     var kdf = CryptoJS.algo.EvpKDF.create();
                                         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });
                                         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });
                                         */
                                        init: function (cfg) {
                                            this.cfg = this.cfg.extend(cfg);
                                        },

                                        /**
                                         * Derives a key from a password.
                                         *
                                         * @param {WordArray|string} password The password.
                                         * @param {WordArray|string} salt A salt.
                                         *
                                         * @return {WordArray} The derived key.
                                         *
                                         * @example
                                         *
                                         *     var key = kdf.compute(password, salt);
                                         */
                                        compute: function (password, salt) {
                                            // Shortcut
                                            var cfg = this.cfg;

                                            // Init hasher
                                            var hasher = cfg.hasher.create();

                                            // Initial values
                                            var derivedKey = WordArray.create();

                                            // Shortcuts
                                            var derivedKeyWords = derivedKey.words;
                                            var keySize = cfg.keySize;
                                            var iterations = cfg.iterations;

                                            // Generate key
                                            while (derivedKeyWords.length < keySize) {
                                                if (block) {
                                                    hasher.update(block);
                                                }
                                                var block = hasher.update(password).finalize(salt);
                                                hasher.reset();

                                                // Iterations
                                                for (var i = 1; i < iterations; i++) {
                                                    block = hasher.finalize(block);
                                                    hasher.reset();
                                                }

                                                derivedKey.concat(block);
                                            }
                                            derivedKey.sigBytes = keySize * 4;

                                            return derivedKey;
                                        }
                                    });

                                    /**
                                     * Derives a key from a password.
                                     *
                                     * @param {WordArray|string} password The password.
                                     * @param {WordArray|string} salt A salt.
                                     * @param {Object} cfg (Optional) The configuration options to use for this computation.
                                     *
                                     * @return {WordArray} The derived key.
                                     *
                                     * @static
                                     *
                                     * @example
                                     *
                                     *     var key = CryptoJS.EvpKDF(password, salt);
                                     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });
                                     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });
                                     */
                                    C.EvpKDF = function (password, salt, cfg) {
                                        return EvpKDF.create(cfg).compute(password, salt);
                                    };
                                }());


                                return CryptoJS.EvpKDF;

                            }));
                        }, {"./core": 75, "./hmac": 80, "./sha1": 99}],
                        79: [function (require, module, exports) {
                            ;(function (root, factory, undef) {
                                if (typeof exports === "object") {
                                    // CommonJS
                                    module.exports = exports = factory(require("./core"), require("./cipher-core"));
                                }
                                else if (typeof define === "function" && define.amd) {
                                    // AMD
                                    define(["./core", "./cipher-core"], factory);
                                }
                                else {
                                    // Global (browser)
                                    factory(root.CryptoJS);
                                }
                            }(this, function (CryptoJS) {

                                (function (undefined) {
                                    // Shortcuts
                                    var C = CryptoJS;
                                    var C_lib = C.lib;
                                    var CipherParams = C_lib.CipherParams;
                                    var C_enc = C.enc;
                                    var Hex = C_enc.Hex;
                                    var C_format = C.format;

                                    var HexFormatter = C_format.Hex = {
                                        /**
                                         * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.
                                         *
                                         * @param {CipherParams} cipherParams The cipher params object.
                                         *
                                         * @return {string} The hexadecimally encoded string.
                                         *
                                         * @static
                                         *
                                         * @example
                                         *
                                         *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);
                                         */
                                        stringify: function (cipherParams) {
                                            return cipherParams.ciphertext.toString(Hex);
                                        },

                                        /**
                                         * Converts a hexadecimally encoded ciphertext string to a cipher params object.
                                         *
                                         * @param {string} input The hexadecimally encoded string.
                                         *
                                         * @return {CipherParams} The cipher params object.
                                         *
                                         * @static
                                         *
                                         * @example
                                         *
                                         *     var cipherParams = CryptoJS.format.Hex.parse(hexString);
                                         */
                                        parse: function (input) {
                                            var ciphertext = Hex.parse(input);
                                            return CipherParams.create({ciphertext: ciphertext});
                                        }
                                    };
                                }());


                                return CryptoJS.format.Hex;

                            }));
                        }, {"./cipher-core": 74, "./core": 75}],
                        80: [function (require, module, exports) {
                            ;(function (root, factory) {
                                if (typeof exports === "object") {
                                    // CommonJS
                                    module.exports = exports = factory(require("./core"));
                                }
                                else if (typeof define === "function" && define.amd) {
                                    // AMD
                                    define(["./core"], factory);
                                }
                                else {
                                    // Global (browser)
                                    factory(root.CryptoJS);
                                }
                            }(this, function (CryptoJS) {

                                (function () {
                                    // Shortcuts
                                    var C = CryptoJS;
                                    var C_lib = C.lib;
                                    var Base = C_lib.Base;
                                    var C_enc = C.enc;
                                    var Utf8 = C_enc.Utf8;
                                    var C_algo = C.algo;

                                    /**
                                     * HMAC algorithm.
                                     */
                                    var HMAC = C_algo.HMAC = Base.extend({
                                        /**
                                         * Initializes a newly created HMAC.
                                         *
                                         * @param {Hasher} hasher The hash algorithm to use.
                                         * @param {WordArray|string} key The secret key.
                                         *
                                         * @example
                                         *
                                         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);
                                         */
                                        init: function (hasher, key) {
                                            // Init hasher
                                            hasher = this._hasher = new hasher.init();

                                            // Convert string to WordArray, else assume WordArray already
                                            if (typeof key == 'string') {
                                                key = Utf8.parse(key);
                                            }

                                            // Shortcuts
                                            var hasherBlockSize = hasher.blockSize;
                                            var hasherBlockSizeBytes = hasherBlockSize * 4;

                                            // Allow arbitrary length keys
                                            if (key.sigBytes > hasherBlockSizeBytes) {
                                                key = hasher.finalize(key);
                                            }

                                            // Clamp excess bits
                                            key.clamp();

                                            // Clone key for inner and outer pads
                                            var oKey = this._oKey = key.clone();
                                            var iKey = this._iKey = key.clone();

                                            // Shortcuts
                                            var oKeyWords = oKey.words;
                                            var iKeyWords = iKey.words;

                                            // XOR keys with pad constants
                                            for (var i = 0; i < hasherBlockSize; i++) {
                                                oKeyWords[i] ^= 0x5c5c5c5c;
                                                iKeyWords[i] ^= 0x36363636;
                                            }
                                            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;

                                            // Set initial values
                                            this.reset();
                                        },

                                        /**
                                         * Resets this HMAC to its initial state.
                                         *
                                         * @example
                                         *
                                         *     hmacHasher.reset();
                                         */
                                        reset: function () {
                                            // Shortcut
                                            var hasher = this._hasher;

                                            // Reset
                                            hasher.reset();
                                            hasher.update(this._iKey);
                                        },

                                        /**
                                         * Updates this HMAC with a message.
                                         *
                                         * @param {WordArray|string} messageUpdate The message to append.
                                         *
                                         * @return {HMAC} This HMAC instance.
                                         *
                                         * @example
                                         *
                                         *     hmacHasher.update('message');
                                         *     hmacHasher.update(wordArray);
                                         */
                                        update: function (messageUpdate) {
                                            this._hasher.update(messageUpdate);

                                            // Chainable
                                            return this;
                                        },

                                        /**
                                         * Finalizes the HMAC computation.
                                         * Note that the finalize operation is effectively a destructive, read-once operation.
                                         *
                                         * @param {WordArray|string} messageUpdate (Optional) A final message update.
                                         *
                                         * @return {WordArray} The HMAC.
                                         *
                                         * @example
                                         *
                                         *     var hmac = hmacHasher.finalize();
                                         *     var hmac = hmacHasher.finalize('message');
                                         *     var hmac = hmacHasher.finalize(wordArray);
                                         */
                                        finalize: function (messageUpdate) {
                                            // Shortcut
                                            var hasher = this._hasher;

                                            // Compute HMAC
                                            var innerHash = hasher.finalize(messageUpdate);
                                            hasher.reset();
                                            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));

                                            return hmac;
                                        }
                                    });
                                }());


                            }));
                        }, {"./core": 75}],
                        81: [function (require, module, exports) {
                            ;(function (root, factory, undef) {
                                if (typeof exports === "object") {
                                    // CommonJS
                                    module.exports = exports = factory(require("./core"), require("./x64-core"), require("./lib-typedarrays"), require("./enc-utf16"), require("./enc-base64"), require("./md5"), require("./sha1"), require("./sha256"), require("./sha224"), require("./sha512"), require("./sha384"), require("./sha3"), require("./ripemd160"), require("./hmac"), require("./pbkdf2"), require("./evpkdf"), require("./cipher-core"), require("./mode-cfb"), require("./mode-ctr"), require("./mode-ctr-gladman"), require("./mode-ofb"), require("./mode-ecb"), require("./pad-ansix923"), require("./pad-iso10126"), require("./pad-iso97971"), require("./pad-zeropadding"), require("./pad-nopadding"), require("./format-hex"), require("./aes"), require("./tripledes"), require("./rc4"), require("./rabbit"), require("./rabbit-legacy"));
                                }
                                else if (typeof define === "function" && define.amd) {
                                    // AMD
                                    define(["./core", "./x64-core", "./lib-typedarrays", "./enc-utf16", "./enc-base64", "./md5", "./sha1", "./sha256", "./sha224", "./sha512", "./sha384", "./sha3", "./ripemd160", "./hmac", "./pbkdf2", "./evpkdf", "./cipher-core", "./mode-cfb", "./mode-ctr", "./mode-ctr-gladman", "./mode-ofb", "./mode-ecb", "./pad-ansix923", "./pad-iso10126", "./pad-iso97971", "./pad-zeropadding", "./pad-nopadding", "./format-hex", "./aes", "./tripledes", "./rc4", "./rabbit", "./rabbit-legacy"], factory);
                                }
                                else {
                                    // Global (browser)
                                    root.CryptoJS = factory(root.CryptoJS);
                                }
                            }(this, function (CryptoJS) {

                                return CryptoJS;

                            }));
                        }, {
                            "./aes": 73,
                            "./cipher-core": 74,
                            "./core": 75,
                            "./enc-base64": 76,
                            "./enc-utf16": 77,
                            "./evpkdf": 78,
                            "./format-hex": 79,
                            "./hmac": 80,
                            "./lib-typedarrays": 82,
                            "./md5": 83,
                            "./mode-cfb": 84,
                            "./mode-ctr": 86,
                            "./mode-ctr-gladman": 85,
                            "./mode-ecb": 87,
                            "./mode-ofb": 88,
                            "./pad-ansix923": 89,
                            "./pad-iso10126": 90,
                            "./pad-iso97971": 91,
                            "./pad-nopadding": 92,
                            "./pad-zeropadding": 93,
                            "./pbkdf2": 94,
                            "./rabbit": 96,
                            "./rabbit-legacy": 95,
                            "./rc4": 97,
                            "./ripemd160": 98,
                            "./sha1": 99,
                            "./sha224": 100,
                            "./sha256": 101,
                            "./sha3": 102,
                            "./sha384": 103,
                            "./sha512": 104,
                            "./tripledes": 105,
                            "./x64-core": 106
                        }],
                        82: [function (require, module, exports) {
                            ;(function (root, factory) {
                                if (typeof exports === "object") {
                                    // CommonJS
                                    module.exports = exports = factory(require("./core"));
                                }
                                else if (typeof define === "function" && define.amd) {
                                    // AMD
                                    define(["./core"], factory);
                                }
                                else {
                                    // Global (browser)
                                    factory(root.CryptoJS);
                                }
                            }(this, function (CryptoJS) {

                                (function () {
                                    // Check if typed arrays are supported
                                    if (typeof ArrayBuffer != 'function') {
                                        return;
                                    }

                                    // Shortcuts
                                    var C = CryptoJS;
                                    var C_lib = C.lib;
                                    var WordArray = C_lib.WordArray;

                                    // Reference original init
                                    var superInit = WordArray.init;

                                    // Augment WordArray.init to handle typed arrays
                                    var subInit = WordArray.init = function (typedArray) {
                                        // Convert buffers to uint8
                                        if (typedArray instanceof ArrayBuffer) {
                                            typedArray = new Uint8Array(typedArray);
                                        }

                                        // Convert other array views to uint8
                                        if (
                                            typedArray instanceof Int8Array ||
                                            (typeof Uint8ClampedArray !== "undefined" && typedArray instanceof Uint8ClampedArray) ||
                                            typedArray instanceof Int16Array ||
                                            typedArray instanceof Uint16Array ||
                                            typedArray instanceof Int32Array ||
                                            typedArray instanceof Uint32Array ||
                                            typedArray instanceof Float32Array ||
                                            typedArray instanceof Float64Array
                                        ) {
                                            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);
                                        }

                                        // Handle Uint8Array
                                        if (typedArray instanceof Uint8Array) {
                                            // Shortcut
                                            var typedArrayByteLength = typedArray.byteLength;

                                            // Extract bytes
                                            var words = [];
                                            for (var i = 0; i < typedArrayByteLength; i++) {
                                                words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);
                                            }

                                            // Initialize this word array
                                            superInit.call(this, words, typedArrayByteLength);
                                        } else {
                                            // Else call normal init
                                            superInit.apply(this, arguments);
                                        }
                                    };

                                    subInit.prototype = WordArray;
                                }());


                                return CryptoJS.lib.WordArray;

                            }));
                        }, {"./core": 75}],
                        83: [function (require, module, exports) {
                            ;(function (root, factory) {
                                if (typeof exports === "object") {
                                    // CommonJS
                                    module.exports = exports = factory(require("./core"));
                                }
                                else if (typeof define === "function" && define.amd) {
                                    // AMD
                                    define(["./core"], factory);
                                }
                                else {
                                    // Global (browser)
                                    factory(root.CryptoJS);
                                }
                            }(this, function (CryptoJS) {

                                (function (Math) {
                                    // Shortcuts
                                    var C = CryptoJS;
                                    var C_lib = C.lib;
                                    var WordArray = C_lib.WordArray;
                                    var Hasher = C_lib.Hasher;
                                    var C_algo = C.algo;

                                    // Constants table
                                    var T = [];

                                    // Compute constants
                                    (function () {
                                        for (var i = 0; i < 64; i++) {
                                            T[i] = (Math.abs(Math.sin(i + 1)) * 0x100000000) | 0;
                                        }
                                    }());

                                    /**
                                     * MD5 hash algorithm.
                                     */
                                    var MD5 = C_algo.MD5 = Hasher.extend({
                                        _doReset: function () {
                                            this._hash = new WordArray.init([
                                                0x67452301, 0xefcdab89,
                                                0x98badcfe, 0x10325476
                                            ]);
                                        },

                                        _doProcessBlock: function (M, offset) {
                                            // Swap endian
                                            for (var i = 0; i < 16; i++) {
                                                // Shortcuts
                                                var offset_i = offset + i;
                                                var M_offset_i = M[offset_i];

                                                M[offset_i] = (
                                                    (((M_offset_i << 8) | (M_offset_i >>> 24)) & 0x00ff00ff) |
                                                    (((M_offset_i << 24) | (M_offset_i >>> 8)) & 0xff00ff00)
                                                );
                                            }

                                            // Shortcuts
                                            var H = this._hash.words;

                                            var M_offset_0 = M[offset + 0];
                                            var M_offset_1 = M[offset + 1];
                                            var M_offset_2 = M[offset + 2];
                                            var M_offset_3 = M[offset + 3];
                                            var M_offset_4 = M[offset + 4];
                                            var M_offset_5 = M[offset + 5];
                                            var M_offset_6 = M[offset + 6];
                                            var M_offset_7 = M[offset + 7];
                                            var M_offset_8 = M[offset + 8];
                                            var M_offset_9 = M[offset + 9];
                                            var M_offset_10 = M[offset + 10];
                                            var M_offset_11 = M[offset + 11];
                                            var M_offset_12 = M[offset + 12];
                                            var M_offset_13 = M[offset + 13];
                                            var M_offset_14 = M[offset + 14];
                                            var M_offset_15 = M[offset + 15];

                                            // Working varialbes
                                            var a = H[0];
                                            var b = H[1];
                                            var c = H[2];
                                            var d = H[3];

                                            // Computation
                                            a = FF(a, b, c, d, M_offset_0, 7, T[0]);
                                            d = FF(d, a, b, c, M_offset_1, 12, T[1]);
                                            c = FF(c, d, a, b, M_offset_2, 17, T[2]);
                                            b = FF(b, c, d, a, M_offset_3, 22, T[3]);
                                            a = FF(a, b, c, d, M_offset_4, 7, T[4]);
                                            d = FF(d, a, b, c, M_offset_5, 12, T[5]);
                                            c = FF(c, d, a, b, M_offset_6, 17, T[6]);
                                            b = FF(b, c, d, a, M_offset_7, 22, T[7]);
                                            a = FF(a, b, c, d, M_offset_8, 7, T[8]);
                                            d = FF(d, a, b, c, M_offset_9, 12, T[9]);
                                            c = FF(c, d, a, b, M_offset_10, 17, T[10]);
                                            b = FF(b, c, d, a, M_offset_11, 22, T[11]);
                                            a = FF(a, b, c, d, M_offset_12, 7, T[12]);
                                            d = FF(d, a, b, c, M_offset_13, 12, T[13]);
                                            c = FF(c, d, a, b, M_offset_14, 17, T[14]);
                                            b = FF(b, c, d, a, M_offset_15, 22, T[15]);

                                            a = GG(a, b, c, d, M_offset_1, 5, T[16]);
                                            d = GG(d, a, b, c, M_offset_6, 9, T[17]);
                                            c = GG(c, d, a, b, M_offset_11, 14, T[18]);
                                            b = GG(b, c, d, a, M_offset_0, 20, T[19]);
                                            a = GG(a, b, c, d, M_offset_5, 5, T[20]);
                                            d = GG(d, a, b, c, M_offset_10, 9, T[21]);
                                            c = GG(c, d, a, b, M_offset_15, 14, T[22]);
                                            b = GG(b, c, d, a, M_offset_4, 20, T[23]);
                                            a = GG(a, b, c, d, M_offset_9, 5, T[24]);
                                            d = GG(d, a, b, c, M_offset_14, 9, T[25]);
                                            c = GG(c, d, a, b, M_offset_3, 14, T[26]);
                                            b = GG(b, c, d, a, M_offset_8, 20, T[27]);
                                            a = GG(a, b, c, d, M_offset_13, 5, T[28]);
                                            d = GG(d, a, b, c, M_offset_2, 9, T[29]);
                                            c = GG(c, d, a, b, M_offset_7, 14, T[30]);
                                            b = GG(b, c, d, a, M_offset_12, 20, T[31]);

                                            a = HH(a, b, c, d, M_offset_5, 4, T[32]);
                                            d = HH(d, a, b, c, M_offset_8, 11, T[33]);
                                            c = HH(c, d, a, b, M_offset_11, 16, T[34]);
                                            b = HH(b, c, d, a, M_offset_14, 23, T[35]);
                                            a = HH(a, b, c, d, M_offset_1, 4, T[36]);
                                            d = HH(d, a, b, c, M_offset_4, 11, T[37]);
                                            c = HH(c, d, a, b, M_offset_7, 16, T[38]);
                                            b = HH(b, c, d, a, M_offset_10, 23, T[39]);
                                            a = HH(a, b, c, d, M_offset_13, 4, T[40]);
                                            d = HH(d, a, b, c, M_offset_0, 11, T[41]);
                                            c = HH(c, d, a, b, M_offset_3, 16, T[42]);
                                            b = HH(b, c, d, a, M_offset_6, 23, T[43]);
                                            a = HH(a, b, c, d, M_offset_9, 4, T[44]);
                                            d = HH(d, a, b, c, M_offset_12, 11, T[45]);
                                            c = HH(c, d, a, b, M_offset_15, 16, T[46]);
                                            b = HH(b, c, d, a, M_offset_2, 23, T[47]);

                                            a = II(a, b, c, d, M_offset_0, 6, T[48]);
                                            d = II(d, a, b, c, M_offset_7, 10, T[49]);
                                            c = II(c, d, a, b, M_offset_14, 15, T[50]);
                                            b = II(b, c, d, a, M_offset_5, 21, T[51]);
                                            a = II(a, b, c, d, M_offset_12, 6, T[52]);
                                            d = II(d, a, b, c, M_offset_3, 10, T[53]);
                                            c = II(c, d, a, b, M_offset_10, 15, T[54]);
                                            b = II(b, c, d, a, M_offset_1, 21, T[55]);
                                            a = II(a, b, c, d, M_offset_8, 6, T[56]);
                                            d = II(d, a, b, c, M_offset_15, 10, T[57]);
                                            c = II(c, d, a, b, M_offset_6, 15, T[58]);
                                            b = II(b, c, d, a, M_offset_13, 21, T[59]);
                                            a = II(a, b, c, d, M_offset_4, 6, T[60]);
                                            d = II(d, a, b, c, M_offset_11, 10, T[61]);
                                            c = II(c, d, a, b, M_offset_2, 15, T[62]);
                                            b = II(b, c, d, a, M_offset_9, 21, T[63]);

                                            // Intermediate hash value
                                            H[0] = (H[0] + a) | 0;
                                            H[1] = (H[1] + b) | 0;
                                            H[2] = (H[2] + c) | 0;
                                            H[3] = (H[3] + d) | 0;
                                        },

                                        _doFinalize: function () {
                                            // Shortcuts
                                            var data = this._data;
                                            var dataWords = data.words;

                                            var nBitsTotal = this._nDataBytes * 8;
                                            var nBitsLeft = data.sigBytes * 8;

                                            // Add padding
                                            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);

                                            var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);
                                            var nBitsTotalL = nBitsTotal;
                                            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = (
                                                (((nBitsTotalH << 8) | (nBitsTotalH >>> 24)) & 0x00ff00ff) |
                                                (((nBitsTotalH << 24) | (nBitsTotalH >>> 8)) & 0xff00ff00)
                                            );
                                            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
                                                (((nBitsTotalL << 8) | (nBitsTotalL >>> 24)) & 0x00ff00ff) |
                                                (((nBitsTotalL << 24) | (nBitsTotalL >>> 8)) & 0xff00ff00)
                                            );

                                            data.sigBytes = (dataWords.length + 1) * 4;

                                            // Hash final blocks
                                            this._process();

                                            // Shortcuts
                                            var hash = this._hash;
                                            var H = hash.words;

                                            // Swap endian
                                            for (var i = 0; i < 4; i++) {
                                                // Shortcut
                                                var H_i = H[i];

                                                H[i] = (((H_i << 8) | (H_i >>> 24)) & 0x00ff00ff) |
                                                    (((H_i << 24) | (H_i >>> 8)) & 0xff00ff00);
                                            }

                                            // Return final computed hash
                                            return hash;
                                        },

                                        clone: function () {
                                            var clone = Hasher.clone.call(this);
                                            clone._hash = this._hash.clone();

                                            return clone;
                                        }
                                    });

                                    function FF(a, b, c, d, x, s, t) {
                                        var n = a + ((b & c) | (~b & d)) + x + t;
                                        return ((n << s) | (n >>> (32 - s))) + b;
                                    }

                                    function GG(a, b, c, d, x, s, t) {
                                        var n = a + ((b & d) | (c & ~d)) + x + t;
                                        return ((n << s) | (n >>> (32 - s))) + b;
                                    }

                                    function HH(a, b, c, d, x, s, t) {
                                        var n = a + (b ^ c ^ d) + x + t;
                                        return ((n << s) | (n >>> (32 - s))) + b;
                                    }

                                    function II(a, b, c, d, x, s, t) {
                                        var n = a + (c ^ (b | ~d)) + x + t;
                                        return ((n << s) | (n >>> (32 - s))) + b;
                                    }

                                    /**
                                     * Shortcut function to the hasher's object interface.
                                     *
                                     * @param {WordArray|string} message The message to hash.
                                     *
                                     * @return {WordArray} The hash.
                                     *
                                     * @static
                                     *
                                     * @example
                                     *
                                     *     var hash = CryptoJS.MD5('message');
                                     *     var hash = CryptoJS.MD5(wordArray);
                                     */
                                    C.MD5 = Hasher._createHelper(MD5);

                                    /**
                                     * Shortcut function to the HMAC's object interface.
                                     *
                                     * @param {WordArray|string} message The message to hash.
                                     * @param {WordArray|string} key The secret key.
                                     *
                                     * @return {WordArray} The HMAC.
                                     *
                                     * @static
                                     *
                                     * @example
                                     *
                                     *     var hmac = CryptoJS.HmacMD5(message, key);
                                     */
                                    C.HmacMD5 = Hasher._createHmacHelper(MD5);
                                }(Math));


                                return CryptoJS.MD5;

                            }));
                        }, {"./core": 75}],
                        84: [function (require, module, exports) {
                            ;(function (root, factory, undef) {
                                if (typeof exports === "object") {
                                    // CommonJS
                                    module.exports = exports = factory(require("./core"), require("./cipher-core"));
                                }
                                else if (typeof define === "function" && define.amd) {
                                    // AMD
                                    define(["./core", "./cipher-core"], factory);
                                }
                                else {
                                    // Global (browser)
                                    factory(root.CryptoJS);
                                }
                            }(this, function (CryptoJS) {

                                /**
                                 * Cipher Feedback block mode.
                                 */
                                CryptoJS.mode.CFB = (function () {
                                    var CFB = CryptoJS.lib.BlockCipherMode.extend();

                                    CFB.Encryptor = CFB.extend({
                                        processBlock: function (words, offset) {
                                            // Shortcuts
                                            var cipher = this._cipher;
                                            var blockSize = cipher.blockSize;

                                            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);

                                            // Remember this block to use with next block
                                            this._prevBlock = words.slice(offset, offset + blockSize);
                                        }
                                    });

                                    CFB.Decryptor = CFB.extend({
                                        processBlock: function (words, offset) {
                                            // Shortcuts
                                            var cipher = this._cipher;
                                            var blockSize = cipher.blockSize;

                                            // Remember this block to use with next block
                                            var thisBlock = words.slice(offset, offset + blockSize);

                                            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);

                                            // This block becomes the previous block
                                            this._prevBlock = thisBlock;
                                        }
                                    });

                                    function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {
                                        // Shortcut
                                        var iv = this._iv;

                                        // Generate keystream
                                        if (iv) {
                                            var keystream = iv.slice(0);

                                            // Remove IV for subsequent blocks
                                            this._iv = undefined;
                                        } else {
                                            var keystream = this._prevBlock;
                                        }
                                        cipher.encryptBlock(keystream, 0);

                                        // Encrypt
                                        for (var i = 0; i < blockSize; i++) {
                                            words[offset + i] ^= keystream[i];
                                        }
                                    }

                                    return CFB;
                                }());


                                return CryptoJS.mode.CFB;

                            }));
                        }, {"./cipher-core": 74, "./core": 75}],
                        85: [function (require, module, exports) {
                            ;(function (root, factory, undef) {
                                if (typeof exports === "object") {
                                    // CommonJS
                                    module.exports = exports = factory(require("./core"), require("./cipher-core"));
                                }
                                else if (typeof define === "function" && define.amd) {
                                    // AMD
                                    define(["./core", "./cipher-core"], factory);
                                }
                                else {
                                    // Global (browser)
                                    factory(root.CryptoJS);
                                }
                            }(this, function (CryptoJS) {

                                /** @preserve
                                 * Counter block mode compatible with  Dr Brian Gladman fileenc.c
                                 * derived from CryptoJS.mode.CTR
                                 * Jan Hruby jhruby.web@gmail.com
                                 */
                                CryptoJS.mode.CTRGladman = (function () {
                                    var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();

                                    function incWord(word) {
                                        if (((word >> 24) & 0xff) === 0xff) { //overflow
                                            var b1 = (word >> 16) & 0xff;
                                            var b2 = (word >> 8) & 0xff;
                                            var b3 = word & 0xff;

                                            if (b1 === 0xff) // overflow b1
                                            {
                                                b1 = 0;
                                                if (b2 === 0xff) {
                                                    b2 = 0;
                                                    if (b3 === 0xff) {
                                                        b3 = 0;
                                                    }
                                                    else {
                                                        ++b3;
                                                    }
                                                }
                                                else {
                                                    ++b2;
                                                }
                                            }
                                            else {
                                                ++b1;
                                            }

                                            word = 0;
                                            word += (b1 << 16);
                                            word += (b2 << 8);
                                            word += b3;
                                        }
                                        else {
                                            word += (0x01 << 24);
                                        }
                                        return word;
                                    }

                                    function incCounter(counter) {
                                        if ((counter[0] = incWord(counter[0])) === 0) {
                                            // encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8
                                            counter[1] = incWord(counter[1]);
                                        }
                                        return counter;
                                    }

                                    var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({
                                        processBlock: function (words, offset) {
                                            // Shortcuts
                                            var cipher = this._cipher
                                            var blockSize = cipher.blockSize;
                                            var iv = this._iv;
                                            var counter = this._counter;

                                            // Generate keystream
                                            if (iv) {
                                                counter = this._counter = iv.slice(0);

                                                // Remove IV for subsequent blocks
                                                this._iv = undefined;
                                            }

                                            incCounter(counter);

                                            var keystream = counter.slice(0);
                                            cipher.encryptBlock(keystream, 0);

                                            // Encrypt
                                            for (var i = 0; i < blockSize; i++) {
                                                words[offset + i] ^= keystream[i];
                                            }
                                        }
                                    });

                                    CTRGladman.Decryptor = Encryptor;

                                    return CTRGladman;
                                }());


                                return CryptoJS.mode.CTRGladman;

                            }));
                        }, {"./cipher-core": 74, "./core": 75}],
                        86: [function (require, module, exports) {
                            ;(function (root, factory, undef) {
                                if (typeof exports === "object") {
                                    // CommonJS
                                    module.exports = exports = factory(require("./core"), require("./cipher-core"));
                                }
                                else if (typeof define === "function" && define.amd) {
                                    // AMD
                                    define(["./core", "./cipher-core"], factory);
                                }
                                else {
                                    // Global (browser)
                                    factory(root.CryptoJS);
                                }
                            }(this, function (CryptoJS) {

                                /**
                                 * Counter block mode.
                                 */
                                CryptoJS.mode.CTR = (function () {
                                    var CTR = CryptoJS.lib.BlockCipherMode.extend();

                                    var Encryptor = CTR.Encryptor = CTR.extend({
                                        processBlock: function (words, offset) {
                                            // Shortcuts
                                            var cipher = this._cipher
                                            var blockSize = cipher.blockSize;
                                            var iv = this._iv;
                                            var counter = this._counter;

                                            // Generate keystream
                                            if (iv) {
                                                counter = this._counter = iv.slice(0);

                                                // Remove IV for subsequent blocks
                                                this._iv = undefined;
                                            }
                                            var keystream = counter.slice(0);
                                            cipher.encryptBlock(keystream, 0);

                                            // Increment counter
                                            counter[blockSize - 1] = (counter[blockSize - 1] + 1) | 0

                                            // Encrypt
                                            for (var i = 0; i < blockSize; i++) {
                                                words[offset + i] ^= keystream[i];
                                            }
                                        }
                                    });

                                    CTR.Decryptor = Encryptor;

                                    return CTR;
                                }());


                                return CryptoJS.mode.CTR;

                            }));
                        }, {"./cipher-core": 74, "./core": 75}],
                        87: [function (require, module, exports) {
                            ;(function (root, factory, undef) {
                                if (typeof exports === "object") {
                                    // CommonJS
                                    module.exports = exports = factory(require("./core"), require("./cipher-core"));
                                }
                                else if (typeof define === "function" && define.amd) {
                                    // AMD
                                    define(["./core", "./cipher-core"], factory);
                                }
                                else {
                                    // Global (browser)
                                    factory(root.CryptoJS);
                                }
                            }(this, function (CryptoJS) {

                                /**
                                 * Electronic Codebook block mode.
                                 */
                                CryptoJS.mode.ECB = (function () {
                                    var ECB = CryptoJS.lib.BlockCipherMode.extend();

                                    ECB.Encryptor = ECB.extend({
                                        processBlock: function (words, offset) {
                                            this._cipher.encryptBlock(words, offset);
                                        }
                                    });

                                    ECB.Decryptor = ECB.extend({
                                        processBlock: function (words, offset) {
                                            this._cipher.decryptBlock(words, offset);
                                        }
                                    });

                                    return ECB;
                                }());


                                return CryptoJS.mode.ECB;

                            }));
                        }, {"./cipher-core": 74, "./core": 75}],
                        88: [function (require, module, exports) {
                            ;(function (root, factory, undef) {
                                if (typeof exports === "object") {
                                    // CommonJS
                                    module.exports = exports = factory(require("./core"), require("./cipher-core"));
                                }
                                else if (typeof define === "function" && define.amd) {
                                    // AMD
                                    define(["./core", "./cipher-core"], factory);
                                }
                                else {
                                    // Global (browser)
                                    factory(root.CryptoJS);
                                }
                            }(this, function (CryptoJS) {

                                /**
                                 * Output Feedback block mode.
                                 */
                                CryptoJS.mode.OFB = (function () {
                                    var OFB = CryptoJS.lib.BlockCipherMode.extend();

                                    var Encryptor = OFB.Encryptor = OFB.extend({
                                        processBlock: function (words, offset) {
                                            // Shortcuts
                                            var cipher = this._cipher
                                            var blockSize = cipher.blockSize;
                                            var iv = this._iv;
                                            var keystream = this._keystream;

                                            // Generate keystream
                                            if (iv) {
                                                keystream = this._keystream = iv.slice(0);

                                                // Remove IV for subsequent blocks
                                                this._iv = undefined;
                                            }
                                            cipher.encryptBlock(keystream, 0);

                                            // Encrypt
                                            for (var i = 0; i < blockSize; i++) {
                                                words[offset + i] ^= keystream[i];
                                            }
                                        }
                                    });

                                    OFB.Decryptor = Encryptor;

                                    return OFB;
                                }());


                                return CryptoJS.mode.OFB;

                            }));
                        }, {"./cipher-core": 74, "./core": 75}],
                        89: [function (require, module, exports) {
                            ;(function (root, factory, undef) {
                                if (typeof exports === "object") {
                                    // CommonJS
                                    module.exports = exports = factory(require("./core"), require("./cipher-core"));
                                }
                                else if (typeof define === "function" && define.amd) {
                                    // AMD
                                    define(["./core", "./cipher-core"], factory);
                                }
                                else {
                                    // Global (browser)
                                    factory(root.CryptoJS);
                                }
                            }(this, function (CryptoJS) {

                                /**
                                 * ANSI X.923 padding strategy.
                                 */
                                CryptoJS.pad.AnsiX923 = {
                                    pad: function (data, blockSize) {
                                        // Shortcuts
                                        var dataSigBytes = data.sigBytes;
                                        var blockSizeBytes = blockSize * 4;

                                        // Count padding bytes
                                        var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;

                                        // Compute last byte position
                                        var lastBytePos = dataSigBytes + nPaddingBytes - 1;

                                        // Pad
                                        data.clamp();
                                        data.words[lastBytePos >>> 2] |= nPaddingBytes << (24 - (lastBytePos % 4) * 8);
                                        data.sigBytes += nPaddingBytes;
                                    },

                                    unpad: function (data) {
                                        // Get number of padding bytes from last byte
                                        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;

                                        // Remove padding
                                        data.sigBytes -= nPaddingBytes;
                                    }
                                };


                                return CryptoJS.pad.Ansix923;

                            }));
                        }, {"./cipher-core": 74, "./core": 75}],
                        90: [function (require, module, exports) {
                            ;(function (root, factory, undef) {
                                if (typeof exports === "object") {
                                    // CommonJS
                                    module.exports = exports = factory(require("./core"), require("./cipher-core"));
                                }
                                else if (typeof define === "function" && define.amd) {
                                    // AMD
                                    define(["./core", "./cipher-core"], factory);
                                }
                                else {
                                    // Global (browser)
                                    factory(root.CryptoJS);
                                }
                            }(this, function (CryptoJS) {

                                /**
                                 * ISO 10126 padding strategy.
                                 */
                                CryptoJS.pad.Iso10126 = {
                                    pad: function (data, blockSize) {
                                        // Shortcut
                                        var blockSizeBytes = blockSize * 4;

                                        // Count padding bytes
                                        var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;

                                        // Pad
                                        data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).concat(CryptoJS.lib.WordArray.create([nPaddingBytes << 24], 1));
                                    },

                                    unpad: function (data) {
                                        // Get number of padding bytes from last byte
                                        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;

                                        // Remove padding
                                        data.sigBytes -= nPaddingBytes;
                                    }
                                };


                                return CryptoJS.pad.Iso10126;

                            }));
                        }, {"./cipher-core": 74, "./core": 75}],
                        91: [function (require, module, exports) {
                            ;(function (root, factory, undef) {
                                if (typeof exports === "object") {
                                    // CommonJS
                                    module.exports = exports = factory(require("./core"), require("./cipher-core"));
                                }
                                else if (typeof define === "function" && define.amd) {
                                    // AMD
                                    define(["./core", "./cipher-core"], factory);
                                }
                                else {
                                    // Global (browser)
                                    factory(root.CryptoJS);
                                }
                            }(this, function (CryptoJS) {

                                /**
                                 * ISO/IEC 9797-1 Padding Method 2.
                                 */
                                CryptoJS.pad.Iso97971 = {
                                    pad: function (data, blockSize) {
                                        // Add 0x80 byte
                                        data.concat(CryptoJS.lib.WordArray.create([0x80000000], 1));

                                        // Zero pad the rest
                                        CryptoJS.pad.ZeroPadding.pad(data, blockSize);
                                    },

                                    unpad: function (data) {
                                        // Remove zero padding
                                        CryptoJS.pad.ZeroPadding.unpad(data);

                                        // Remove one more byte -- the 0x80 byte
                                        data.sigBytes--;
                                    }
                                };


                                return CryptoJS.pad.Iso97971;

                            }));
                        }, {"./cipher-core": 74, "./core": 75}],
                        92: [function (require, module, exports) {
                            ;(function (root, factory, undef) {
                                if (typeof exports === "object") {
                                    // CommonJS
                                    module.exports = exports = factory(require("./core"), require("./cipher-core"));
                                }
                                else if (typeof define === "function" && define.amd) {
                                    // AMD
                                    define(["./core", "./cipher-core"], factory);
                                }
                                else {
                                    // Global (browser)
                                    factory(root.CryptoJS);
                                }
                            }(this, function (CryptoJS) {

                                /**
                                 * A noop padding strategy.
                                 */
                                CryptoJS.pad.NoPadding = {
                                    pad: function () {
                                    },

                                    unpad: function () {
                                    }
                                };


                                return CryptoJS.pad.NoPadding;

                            }));
                        }, {"./cipher-core": 74, "./core": 75}],
                        93: [function (require, module, exports) {
                            ;(function (root, factory, undef) {
                                if (typeof exports === "object") {
                                    // CommonJS
                                    module.exports = exports = factory(require("./core"), require("./cipher-core"));
                                }
                                else if (typeof define === "function" && define.amd) {
                                    // AMD
                                    define(["./core", "./cipher-core"], factory);
                                }
                                else {
                                    // Global (browser)
                                    factory(root.CryptoJS);
                                }
                            }(this, function (CryptoJS) {

                                /**
                                 * Zero padding strategy.
                                 */
                                CryptoJS.pad.ZeroPadding = {
                                    pad: function (data, blockSize) {
                                        // Shortcut
                                        var blockSizeBytes = blockSize * 4;

                                        // Pad
                                        data.clamp();
                                        data.sigBytes += blockSizeBytes - ((data.sigBytes % blockSizeBytes) || blockSizeBytes);
                                    },

                                    unpad: function (data) {
                                        // Shortcut
                                        var dataWords = data.words;

                                        // Unpad
                                        var i = data.sigBytes - 1;
                                        while (!((dataWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff)) {
                                            i--;
                                        }
                                        data.sigBytes = i + 1;
                                    }
                                };


                                return CryptoJS.pad.ZeroPadding;

                            }));
                        }, {"./cipher-core": 74, "./core": 75}],
                        94: [function (require, module, exports) {
                            ;(function (root, factory, undef) {
                                if (typeof exports === "object") {
                                    // CommonJS
                                    module.exports = exports = factory(require("./core"), require("./sha1"), require("./hmac"));
                                }
                                else if (typeof define === "function" && define.amd) {
                                    // AMD
                                    define(["./core", "./sha1", "./hmac"], factory);
                                }
                                else {
                                    // Global (browser)
                                    factory(root.CryptoJS);
                                }
                            }(this, function (CryptoJS) {

                                (function () {
                                    // Shortcuts
                                    var C = CryptoJS;
                                    var C_lib = C.lib;
                                    var Base = C_lib.Base;
                                    var WordArray = C_lib.WordArray;
                                    var C_algo = C.algo;
                                    var SHA1 = C_algo.SHA1;
                                    var HMAC = C_algo.HMAC;

                                    /**
                                     * Password-Based Key Derivation Function 2 algorithm.
                                     */
                                    var PBKDF2 = C_algo.PBKDF2 = Base.extend({
                                        /**
                                         * Configuration options.
                                         *
                                         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
                                         * @property {Hasher} hasher The hasher to use. Default: SHA1
                                         * @property {number} iterations The number of iterations to perform. Default: 1
                                         */
                                        cfg: Base.extend({
                                            keySize: 128 / 32,
                                            hasher: SHA1,
                                            iterations: 1
                                        }),

                                        /**
                                         * Initializes a newly created key derivation function.
                                         *
                                         * @param {Object} cfg (Optional) The configuration options to use for the derivation.
                                         *
                                         * @example
                                         *
                                         *     var kdf = CryptoJS.algo.PBKDF2.create();
                                         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });
                                         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });
                                         */
                                        init: function (cfg) {
                                            this.cfg = this.cfg.extend(cfg);
                                        },

                                        /**
                                         * Computes the Password-Based Key Derivation Function 2.
                                         *
                                         * @param {WordArray|string} password The password.
                                         * @param {WordArray|string} salt A salt.
                                         *
                                         * @return {WordArray} The derived key.
                                         *
                                         * @example
                                         *
                                         *     var key = kdf.compute(password, salt);
                                         */
                                        compute: function (password, salt) {
                                            // Shortcut
                                            var cfg = this.cfg;

                                            // Init HMAC
                                            var hmac = HMAC.create(cfg.hasher, password);

                                            // Initial values
                                            var derivedKey = WordArray.create();
                                            var blockIndex = WordArray.create([0x00000001]);

                                            // Shortcuts
                                            var derivedKeyWords = derivedKey.words;
                                            var blockIndexWords = blockIndex.words;
                                            var keySize = cfg.keySize;
                                            var iterations = cfg.iterations;

                                            // Generate key
                                            while (derivedKeyWords.length < keySize) {
                                                var block = hmac.update(salt).finalize(blockIndex);
                                                hmac.reset();

                                                // Shortcuts
                                                var blockWords = block.words;
                                                var blockWordsLength = blockWords.length;

                                                // Iterations
                                                var intermediate = block;
                                                for (var i = 1; i < iterations; i++) {
                                                    intermediate = hmac.finalize(intermediate);
                                                    hmac.reset();

                                                    // Shortcut
                                                    var intermediateWords = intermediate.words;

                                                    // XOR intermediate with block
                                                    for (var j = 0; j < blockWordsLength; j++) {
                                                        blockWords[j] ^= intermediateWords[j];
                                                    }
                                                }

                                                derivedKey.concat(block);
                                                blockIndexWords[0]++;
                                            }
                                            derivedKey.sigBytes = keySize * 4;

                                            return derivedKey;
                                        }
                                    });

                                    /**
                                     * Computes the Password-Based Key Derivation Function 2.
                                     *
                                     * @param {WordArray|string} password The password.
                                     * @param {WordArray|string} salt A salt.
                                     * @param {Object} cfg (Optional) The configuration options to use for this computation.
                                     *
                                     * @return {WordArray} The derived key.
                                     *
                                     * @static
                                     *
                                     * @example
                                     *
                                     *     var key = CryptoJS.PBKDF2(password, salt);
                                     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });
                                     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });
                                     */
                                    C.PBKDF2 = function (password, salt, cfg) {
                                        return PBKDF2.create(cfg).compute(password, salt);
                                    };
                                }());


                                return CryptoJS.PBKDF2;

                            }));
                        }, {"./core": 75, "./hmac": 80, "./sha1": 99}],
                        95: [function (require, module, exports) {
                            ;(function (root, factory, undef) {
                                if (typeof exports === "object") {
                                    // CommonJS
                                    module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
                                }
                                else if (typeof define === "function" && define.amd) {
                                    // AMD
                                    define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
                                }
                                else {
                                    // Global (browser)
                                    factory(root.CryptoJS);
                                }
                            }(this, function (CryptoJS) {

                                (function () {
                                    // Shortcuts
                                    var C = CryptoJS;
                                    var C_lib = C.lib;
                                    var StreamCipher = C_lib.StreamCipher;
                                    var C_algo = C.algo;

                                    // Reusable objects
                                    var S = [];
                                    var C_ = [];
                                    var G = [];

                                    /**
                                     * Rabbit stream cipher algorithm.
                                     *
                                     * This is a legacy version that neglected to convert the key to little-endian.
                                     * This error doesn't affect the cipher's security,
                                     * but it does affect its compatibility with other implementations.
                                     */
                                    var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({
                                        _doReset: function () {
                                            // Shortcuts
                                            var K = this._key.words;
                                            var iv = this.cfg.iv;

                                            // Generate initial state values
                                            var X = this._X = [
                                                K[0], (K[3] << 16) | (K[2] >>> 16),
                                                K[1], (K[0] << 16) | (K[3] >>> 16),
                                                K[2], (K[1] << 16) | (K[0] >>> 16),
                                                K[3], (K[2] << 16) | (K[1] >>> 16)
                                            ];

                                            // Generate initial counter values
                                            var C = this._C = [
                                                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),
                                                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),
                                                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),
                                                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)
                                            ];

                                            // Carry bit
                                            this._b = 0;

                                            // Iterate the system four times
                                            for (var i = 0; i < 4; i++) {
                                                nextState.call(this);
                                            }

                                            // Modify the counters
                                            for (var i = 0; i < 8; i++) {
                                                C[i] ^= X[(i + 4) & 7];
                                            }

                                            // IV setup
                                            if (iv) {
                                                // Shortcuts
                                                var IV = iv.words;
                                                var IV_0 = IV[0];
                                                var IV_1 = IV[1];

                                                // Generate four subvectors
                                                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);
                                                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);
                                                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);
                                                var i3 = (i2 << 16) | (i0 & 0x0000ffff);

                                                // Modify counter values
                                                C[0] ^= i0;
                                                C[1] ^= i1;
                                                C[2] ^= i2;
                                                C[3] ^= i3;
                                                C[4] ^= i0;
                                                C[5] ^= i1;
                                                C[6] ^= i2;
                                                C[7] ^= i3;

                                                // Iterate the system four times
                                                for (var i = 0; i < 4; i++) {
                                                    nextState.call(this);
                                                }
                                            }
                                        },

                                        _doProcessBlock: function (M, offset) {
                                            // Shortcut
                                            var X = this._X;

                                            // Iterate the system
                                            nextState.call(this);

                                            // Generate four keystream words
                                            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);
                                            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);
                                            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);
                                            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);

                                            for (var i = 0; i < 4; i++) {
                                                // Swap endian
                                                S[i] = (((S[i] << 8) | (S[i] >>> 24)) & 0x00ff00ff) |
                                                    (((S[i] << 24) | (S[i] >>> 8)) & 0xff00ff00);

                                                // Encrypt
                                                M[offset + i] ^= S[i];
                                            }
                                        },

                                        blockSize: 128 / 32,

                                        ivSize: 64 / 32
                                    });

                                    function nextState() {
                                        // Shortcuts
                                        var X = this._X;
                                        var C = this._C;

                                        // Save old counter values
                                        for (var i = 0; i < 8; i++) {
                                            C_[i] = C[i];
                                        }

                                        // Calculate new counter values
                                        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;
                                        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;
                                        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;
                                        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;
                                        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;
                                        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;
                                        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;
                                        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;
                                        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;

                                        // Calculate the g-values
                                        for (var i = 0; i < 8; i++) {
                                            var gx = X[i] + C[i];

                                            // Construct high and low argument for squaring
                                            var ga = gx & 0xffff;
                                            var gb = gx >>> 16;

                                            // Calculate high and low result of squaring
                                            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;
                                            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);

                                            // High XOR low
                                            G[i] = gh ^ gl;
                                        }

                                        // Calculate new state values
                                        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;
                                        X[1] = (G[1] + ((G[0] << 8) | (G[0] >>> 24)) + G[7]) | 0;
                                        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;
                                        X[3] = (G[3] + ((G[2] << 8) | (G[2] >>> 24)) + G[1]) | 0;
                                        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;
                                        X[5] = (G[5] + ((G[4] << 8) | (G[4] >>> 24)) + G[3]) | 0;
                                        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;
                                        X[7] = (G[7] + ((G[6] << 8) | (G[6] >>> 24)) + G[5]) | 0;
                                    }

                                    /**
                                     * Shortcut functions to the cipher's object interface.
                                     *
                                     * @example
                                     *
                                     *     var ciphertext = CryptoJS.RabbitLegacy.encrypt(message, key, cfg);
                                     *     var plaintext  = CryptoJS.RabbitLegacy.decrypt(ciphertext, key, cfg);
                                     */
                                    C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);
                                }());


                                return CryptoJS.RabbitLegacy;

                            }));
                        }, {"./cipher-core": 74, "./core": 75, "./enc-base64": 76, "./evpkdf": 78, "./md5": 83}],
                        96: [function (require, module, exports) {
                            ;(function (root, factory, undef) {
                                if (typeof exports === "object") {
                                    // CommonJS
                                    module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
                                }
                                else if (typeof define === "function" && define.amd) {
                                    // AMD
                                    define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
                                }
                                else {
                                    // Global (browser)
                                    factory(root.CryptoJS);
                                }
                            }(this, function (CryptoJS) {

                                (function () {
                                    // Shortcuts
                                    var C = CryptoJS;
                                    var C_lib = C.lib;
                                    var StreamCipher = C_lib.StreamCipher;
                                    var C_algo = C.algo;

                                    // Reusable objects
                                    var S = [];
                                    var C_ = [];
                                    var G = [];

                                    /**
                                     * Rabbit stream cipher algorithm
                                     */
                                    var Rabbit = C_algo.Rabbit = StreamCipher.extend({
                                        _doReset: function () {
                                            // Shortcuts
                                            var K = this._key.words;
                                            var iv = this.cfg.iv;

                                            // Swap endian
                                            for (var i = 0; i < 4; i++) {
                                                K[i] = (((K[i] << 8) | (K[i] >>> 24)) & 0x00ff00ff) |
                                                    (((K[i] << 24) | (K[i] >>> 8)) & 0xff00ff00);
                                            }

                                            // Generate initial state values
                                            var X = this._X = [
                                                K[0], (K[3] << 16) | (K[2] >>> 16),
                                                K[1], (K[0] << 16) | (K[3] >>> 16),
                                                K[2], (K[1] << 16) | (K[0] >>> 16),
                                                K[3], (K[2] << 16) | (K[1] >>> 16)
                                            ];

                                            // Generate initial counter values
                                            var C = this._C = [
                                                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),
                                                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),
                                                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),
                                                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)
                                            ];

                                            // Carry bit
                                            this._b = 0;

                                            // Iterate the system four times
                                            for (var i = 0; i < 4; i++) {
                                                nextState.call(this);
                                            }

                                            // Modify the counters
                                            for (var i = 0; i < 8; i++) {
                                                C[i] ^= X[(i + 4) & 7];
                                            }

                                            // IV setup
                                            if (iv) {
                                                // Shortcuts
                                                var IV = iv.words;
                                                var IV_0 = IV[0];
                                                var IV_1 = IV[1];

                                                // Generate four subvectors
                                                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);
                                                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);
                                                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);
                                                var i3 = (i2 << 16) | (i0 & 0x0000ffff);

                                                // Modify counter values
                                                C[0] ^= i0;
                                                C[1] ^= i1;
                                                C[2] ^= i2;
                                                C[3] ^= i3;
                                                C[4] ^= i0;
                                                C[5] ^= i1;
                                                C[6] ^= i2;
                                                C[7] ^= i3;

                                                // Iterate the system four times
                                                for (var i = 0; i < 4; i++) {
                                                    nextState.call(this);
                                                }
                                            }
                                        },

                                        _doProcessBlock: function (M, offset) {
                                            // Shortcut
                                            var X = this._X;

                                            // Iterate the system
                                            nextState.call(this);

                                            // Generate four keystream words
                                            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);
                                            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);
                                            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);
                                            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);

                                            for (var i = 0; i < 4; i++) {
                                                // Swap endian
                                                S[i] = (((S[i] << 8) | (S[i] >>> 24)) & 0x00ff00ff) |
                                                    (((S[i] << 24) | (S[i] >>> 8)) & 0xff00ff00);

                                                // Encrypt
                                                M[offset + i] ^= S[i];
                                            }
                                        },

                                        blockSize: 128 / 32,

                                        ivSize: 64 / 32
                                    });

                                    function nextState() {
                                        // Shortcuts
                                        var X = this._X;
                                        var C = this._C;

                                        // Save old counter values
                                        for (var i = 0; i < 8; i++) {
                                            C_[i] = C[i];
                                        }

                                        // Calculate new counter values
                                        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;
                                        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;
                                        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;
                                        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;
                                        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;
                                        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;
                                        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;
                                        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;
                                        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;

                                        // Calculate the g-values
                                        for (var i = 0; i < 8; i++) {
                                            var gx = X[i] + C[i];

                                            // Construct high and low argument for squaring
                                            var ga = gx & 0xffff;
                                            var gb = gx >>> 16;

                                            // Calculate high and low result of squaring
                                            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;
                                            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);

                                            // High XOR low
                                            G[i] = gh ^ gl;
                                        }

                                        // Calculate new state values
                                        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;
                                        X[1] = (G[1] + ((G[0] << 8) | (G[0] >>> 24)) + G[7]) | 0;
                                        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;
                                        X[3] = (G[3] + ((G[2] << 8) | (G[2] >>> 24)) + G[1]) | 0;
                                        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;
                                        X[5] = (G[5] + ((G[4] << 8) | (G[4] >>> 24)) + G[3]) | 0;
                                        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;
                                        X[7] = (G[7] + ((G[6] << 8) | (G[6] >>> 24)) + G[5]) | 0;
                                    }

                                    /**
                                     * Shortcut functions to the cipher's object interface.
                                     *
                                     * @example
                                     *
                                     *     var ciphertext = CryptoJS.Rabbit.encrypt(message, key, cfg);
                                     *     var plaintext  = CryptoJS.Rabbit.decrypt(ciphertext, key, cfg);
                                     */
                                    C.Rabbit = StreamCipher._createHelper(Rabbit);
                                }());


                                return CryptoJS.Rabbit;

                            }));
                        }, {"./cipher-core": 74, "./core": 75, "./enc-base64": 76, "./evpkdf": 78, "./md5": 83}],
                        97: [function (require, module, exports) {
                            ;(function (root, factory, undef) {
                                if (typeof exports === "object") {
                                    // CommonJS
                                    module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
                                }
                                else if (typeof define === "function" && define.amd) {
                                    // AMD
                                    define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
                                }
                                else {
                                    // Global (browser)
                                    factory(root.CryptoJS);
                                }
                            }(this, function (CryptoJS) {

                                (function () {
                                    // Shortcuts
                                    var C = CryptoJS;
                                    var C_lib = C.lib;
                                    var StreamCipher = C_lib.StreamCipher;
                                    var C_algo = C.algo;

                                    /**
                                     * RC4 stream cipher algorithm.
                                     */
                                    var RC4 = C_algo.RC4 = StreamCipher.extend({
                                        _doReset: function () {
                                            // Shortcuts
                                            var key = this._key;
                                            var keyWords = key.words;
                                            var keySigBytes = key.sigBytes;

                                            // Init sbox
                                            var S = this._S = [];
                                            for (var i = 0; i < 256; i++) {
                                                S[i] = i;
                                            }

                                            // Key setup
                                            for (var i = 0, j = 0; i < 256; i++) {
                                                var keyByteIndex = i % keySigBytes;
                                                var keyByte = (keyWords[keyByteIndex >>> 2] >>> (24 - (keyByteIndex % 4) * 8)) & 0xff;

                                                j = (j + S[i] + keyByte) % 256;

                                                // Swap
                                                var t = S[i];
                                                S[i] = S[j];
                                                S[j] = t;
                                            }

                                            // Counters
                                            this._i = this._j = 0;
                                        },

                                        _doProcessBlock: function (M, offset) {
                                            M[offset] ^= generateKeystreamWord.call(this);
                                        },

                                        keySize: 256 / 32,

                                        ivSize: 0
                                    });

                                    function generateKeystreamWord() {
                                        // Shortcuts
                                        var S = this._S;
                                        var i = this._i;
                                        var j = this._j;

                                        // Generate keystream word
                                        var keystreamWord = 0;
                                        for (var n = 0; n < 4; n++) {
                                            i = (i + 1) % 256;
                                            j = (j + S[i]) % 256;

                                            // Swap
                                            var t = S[i];
                                            S[i] = S[j];
                                            S[j] = t;

                                            keystreamWord |= S[(S[i] + S[j]) % 256] << (24 - n * 8);
                                        }

                                        // Update counters
                                        this._i = i;
                                        this._j = j;

                                        return keystreamWord;
                                    }

                                    /**
                                     * Shortcut functions to the cipher's object interface.
                                     *
                                     * @example
                                     *
                                     *     var ciphertext = CryptoJS.RC4.encrypt(message, key, cfg);
                                     *     var plaintext  = CryptoJS.RC4.decrypt(ciphertext, key, cfg);
                                     */
                                    C.RC4 = StreamCipher._createHelper(RC4);

                                    /**
                                     * Modified RC4 stream cipher algorithm.
                                     */
                                    var RC4Drop = C_algo.RC4Drop = RC4.extend({
                                        /**
                                         * Configuration options.
                                         *
                                         * @property {number} drop The number of keystream words to drop. Default 192
                                         */
                                        cfg: RC4.cfg.extend({
                                            drop: 192
                                        }),

                                        _doReset: function () {
                                            RC4._doReset.call(this);

                                            // Drop
                                            for (var i = this.cfg.drop; i > 0; i--) {
                                                generateKeystreamWord.call(this);
                                            }
                                        }
                                    });

                                    /**
                                     * Shortcut functions to the cipher's object interface.
                                     *
                                     * @example
                                     *
                                     *     var ciphertext = CryptoJS.RC4Drop.encrypt(message, key, cfg);
                                     *     var plaintext  = CryptoJS.RC4Drop.decrypt(ciphertext, key, cfg);
                                     */
                                    C.RC4Drop = StreamCipher._createHelper(RC4Drop);
                                }());


                                return CryptoJS.RC4;

                            }));
                        }, {"./cipher-core": 74, "./core": 75, "./enc-base64": 76, "./evpkdf": 78, "./md5": 83}],
                        98: [function (require, module, exports) {
                            ;(function (root, factory) {
                                if (typeof exports === "object") {
                                    // CommonJS
                                    module.exports = exports = factory(require("./core"));
                                }
                                else if (typeof define === "function" && define.amd) {
                                    // AMD
                                    define(["./core"], factory);
                                }
                                else {
                                    // Global (browser)
                                    factory(root.CryptoJS);
                                }
                            }(this, function (CryptoJS) {

                                /** @preserve
                                 (c) 2012 by Cédric Mesnil. All rights reserved.

                                 Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

                                 - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
                                 - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

                                 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                                 */

                                (function (Math) {
                                    // Shortcuts
                                    var C = CryptoJS;
                                    var C_lib = C.lib;
                                    var WordArray = C_lib.WordArray;
                                    var Hasher = C_lib.Hasher;
                                    var C_algo = C.algo;

                                    // Constants table
                                    var _zl = WordArray.create([
                                        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                                        7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
                                        3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
                                        1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
                                        4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13]);
                                    var _zr = WordArray.create([
                                        5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
                                        6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
                                        15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
                                        8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
                                        12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11]);
                                    var _sl = WordArray.create([
                                        11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
                                        7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
                                        11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
                                        11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
                                        9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6]);
                                    var _sr = WordArray.create([
                                        8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
                                        9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
                                        9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
                                        15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
                                        8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11]);

                                    var _hl = WordArray.create([0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]);
                                    var _hr = WordArray.create([0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]);

                                    /**
                                     * RIPEMD160 hash algorithm.
                                     */
                                    var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({
                                        _doReset: function () {
                                            this._hash = WordArray.create([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]);
                                        },

                                        _doProcessBlock: function (M, offset) {

                                            // Swap endian
                                            for (var i = 0; i < 16; i++) {
                                                // Shortcuts
                                                var offset_i = offset + i;
                                                var M_offset_i = M[offset_i];

                                                // Swap
                                                M[offset_i] = (
                                                    (((M_offset_i << 8) | (M_offset_i >>> 24)) & 0x00ff00ff) |
                                                    (((M_offset_i << 24) | (M_offset_i >>> 8)) & 0xff00ff00)
                                                );
                                            }
                                            // Shortcut
                                            var H = this._hash.words;
                                            var hl = _hl.words;
                                            var hr = _hr.words;
                                            var zl = _zl.words;
                                            var zr = _zr.words;
                                            var sl = _sl.words;
                                            var sr = _sr.words;

                                            // Working variables
                                            var al, bl, cl, dl, el;
                                            var ar, br, cr, dr, er;

                                            ar = al = H[0];
                                            br = bl = H[1];
                                            cr = cl = H[2];
                                            dr = dl = H[3];
                                            er = el = H[4];
                                            // Computation
                                            var t;
                                            for (var i = 0; i < 80; i += 1) {
                                                t = (al + M[offset + zl[i]]) | 0;
                                                if (i < 16) {
                                                    t += f1(bl, cl, dl) + hl[0];
                                                } else if (i < 32) {
                                                    t += f2(bl, cl, dl) + hl[1];
                                                } else if (i < 48) {
                                                    t += f3(bl, cl, dl) + hl[2];
                                                } else if (i < 64) {
                                                    t += f4(bl, cl, dl) + hl[3];
                                                } else {// if (i<80) {
                                                    t += f5(bl, cl, dl) + hl[4];
                                                }
                                                t = t | 0;
                                                t = rotl(t, sl[i]);
                                                t = (t + el) | 0;
                                                al = el;
                                                el = dl;
                                                dl = rotl(cl, 10);
                                                cl = bl;
                                                bl = t;

                                                t = (ar + M[offset + zr[i]]) | 0;
                                                if (i < 16) {
                                                    t += f5(br, cr, dr) + hr[0];
                                                } else if (i < 32) {
                                                    t += f4(br, cr, dr) + hr[1];
                                                } else if (i < 48) {
                                                    t += f3(br, cr, dr) + hr[2];
                                                } else if (i < 64) {
                                                    t += f2(br, cr, dr) + hr[3];
                                                } else {// if (i<80) {
                                                    t += f1(br, cr, dr) + hr[4];
                                                }
                                                t = t | 0;
                                                t = rotl(t, sr[i]);
                                                t = (t + er) | 0;
                                                ar = er;
                                                er = dr;
                                                dr = rotl(cr, 10);
                                                cr = br;
                                                br = t;
                                            }
                                            // Intermediate hash value
                                            t = (H[1] + cl + dr) | 0;
                                            H[1] = (H[2] + dl + er) | 0;
                                            H[2] = (H[3] + el + ar) | 0;
                                            H[3] = (H[4] + al + br) | 0;
                                            H[4] = (H[0] + bl + cr) | 0;
                                            H[0] = t;
                                        },

                                        _doFinalize: function () {
                                            // Shortcuts
                                            var data = this._data;
                                            var dataWords = data.words;

                                            var nBitsTotal = this._nDataBytes * 8;
                                            var nBitsLeft = data.sigBytes * 8;

                                            // Add padding
                                            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
                                            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
                                                (((nBitsTotal << 8) | (nBitsTotal >>> 24)) & 0x00ff00ff) |
                                                (((nBitsTotal << 24) | (nBitsTotal >>> 8)) & 0xff00ff00)
                                            );
                                            data.sigBytes = (dataWords.length + 1) * 4;

                                            // Hash final blocks
                                            this._process();

                                            // Shortcuts
                                            var hash = this._hash;
                                            var H = hash.words;

                                            // Swap endian
                                            for (var i = 0; i < 5; i++) {
                                                // Shortcut
                                                var H_i = H[i];

                                                // Swap
                                                H[i] = (((H_i << 8) | (H_i >>> 24)) & 0x00ff00ff) |
                                                    (((H_i << 24) | (H_i >>> 8)) & 0xff00ff00);
                                            }

                                            // Return final computed hash
                                            return hash;
                                        },

                                        clone: function () {
                                            var clone = Hasher.clone.call(this);
                                            clone._hash = this._hash.clone();

                                            return clone;
                                        }
                                    });


                                    function f1(x, y, z) {
                                        return ((x) ^ (y) ^ (z));

                                    }

                                    function f2(x, y, z) {
                                        return (((x) & (y)) | ((~x) & (z)));
                                    }

                                    function f3(x, y, z) {
                                        return (((x) | (~(y))) ^ (z));
                                    }

                                    function f4(x, y, z) {
                                        return (((x) & (z)) | ((y) & (~(z))));
                                    }

                                    function f5(x, y, z) {
                                        return ((x) ^ ((y) | (~(z))));

                                    }

                                    function rotl(x, n) {
                                        return (x << n) | (x >>> (32 - n));
                                    }


                                    /**
                                     * Shortcut function to the hasher's object interface.
                                     *
                                     * @param {WordArray|string} message The message to hash.
                                     *
                                     * @return {WordArray} The hash.
                                     *
                                     * @static
                                     *
                                     * @example
                                     *
                                     *     var hash = CryptoJS.RIPEMD160('message');
                                     *     var hash = CryptoJS.RIPEMD160(wordArray);
                                     */
                                    C.RIPEMD160 = Hasher._createHelper(RIPEMD160);

                                    /**
                                     * Shortcut function to the HMAC's object interface.
                                     *
                                     * @param {WordArray|string} message The message to hash.
                                     * @param {WordArray|string} key The secret key.
                                     *
                                     * @return {WordArray} The HMAC.
                                     *
                                     * @static
                                     *
                                     * @example
                                     *
                                     *     var hmac = CryptoJS.HmacRIPEMD160(message, key);
                                     */
                                    C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);
                                }(Math));


                                return CryptoJS.RIPEMD160;

                            }));
                        }, {"./core": 75}],
                        99: [function (require, module, exports) {
                            ;(function (root, factory) {
                                if (typeof exports === "object") {
                                    // CommonJS
                                    module.exports = exports = factory(require("./core"));
                                }
                                else if (typeof define === "function" && define.amd) {
                                    // AMD
                                    define(["./core"], factory);
                                }
                                else {
                                    // Global (browser)
                                    factory(root.CryptoJS);
                                }
                            }(this, function (CryptoJS) {

                                (function () {
                                    // Shortcuts
                                    var C = CryptoJS;
                                    var C_lib = C.lib;
                                    var WordArray = C_lib.WordArray;
                                    var Hasher = C_lib.Hasher;
                                    var C_algo = C.algo;

                                    // Reusable object
                                    var W = [];

                                    /**
                                     * SHA-1 hash algorithm.
                                     */
                                    var SHA1 = C_algo.SHA1 = Hasher.extend({
                                        _doReset: function () {
                                            this._hash = new WordArray.init([
                                                0x67452301, 0xefcdab89,
                                                0x98badcfe, 0x10325476,
                                                0xc3d2e1f0
                                            ]);
                                        },

                                        _doProcessBlock: function (M, offset) {
                                            // Shortcut
                                            var H = this._hash.words;

                                            // Working variables
                                            var a = H[0];
                                            var b = H[1];
                                            var c = H[2];
                                            var d = H[3];
                                            var e = H[4];

                                            // Computation
                                            for (var i = 0; i < 80; i++) {
                                                if (i < 16) {
                                                    W[i] = M[offset + i] | 0;
                                                } else {
                                                    var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
                                                    W[i] = (n << 1) | (n >>> 31);
                                                }

                                                var t = ((a << 5) | (a >>> 27)) + e + W[i];
                                                if (i < 20) {
                                                    t += ((b & c) | (~b & d)) + 0x5a827999;
                                                } else if (i < 40) {
                                                    t += (b ^ c ^ d) + 0x6ed9eba1;
                                                } else if (i < 60) {
                                                    t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;
                                                } else /* if (i < 80) */ {
                                                    t += (b ^ c ^ d) - 0x359d3e2a;
                                                }

                                                e = d;
                                                d = c;
                                                c = (b << 30) | (b >>> 2);
                                                b = a;
                                                a = t;
                                            }

                                            // Intermediate hash value
                                            H[0] = (H[0] + a) | 0;
                                            H[1] = (H[1] + b) | 0;
                                            H[2] = (H[2] + c) | 0;
                                            H[3] = (H[3] + d) | 0;
                                            H[4] = (H[4] + e) | 0;
                                        },

                                        _doFinalize: function () {
                                            // Shortcuts
                                            var data = this._data;
                                            var dataWords = data.words;

                                            var nBitsTotal = this._nDataBytes * 8;
                                            var nBitsLeft = data.sigBytes * 8;

                                            // Add padding
                                            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
                                            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
                                            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;
                                            data.sigBytes = dataWords.length * 4;

                                            // Hash final blocks
                                            this._process();

                                            // Return final computed hash
                                            return this._hash;
                                        },

                                        clone: function () {
                                            var clone = Hasher.clone.call(this);
                                            clone._hash = this._hash.clone();

                                            return clone;
                                        }
                                    });

                                    /**
                                     * Shortcut function to the hasher's object interface.
                                     *
                                     * @param {WordArray|string} message The message to hash.
                                     *
                                     * @return {WordArray} The hash.
                                     *
                                     * @static
                                     *
                                     * @example
                                     *
                                     *     var hash = CryptoJS.SHA1('message');
                                     *     var hash = CryptoJS.SHA1(wordArray);
                                     */
                                    C.SHA1 = Hasher._createHelper(SHA1);

                                    /**
                                     * Shortcut function to the HMAC's object interface.
                                     *
                                     * @param {WordArray|string} message The message to hash.
                                     * @param {WordArray|string} key The secret key.
                                     *
                                     * @return {WordArray} The HMAC.
                                     *
                                     * @static
                                     *
                                     * @example
                                     *
                                     *     var hmac = CryptoJS.HmacSHA1(message, key);
                                     */
                                    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);
                                }());


                                return CryptoJS.SHA1;

                            }));
                        }, {"./core": 75}],
                        100: [function (require, module, exports) {
                            ;(function (root, factory, undef) {
                                if (typeof exports === "object") {
                                    // CommonJS
                                    module.exports = exports = factory(require("./core"), require("./sha256"));
                                }
                                else if (typeof define === "function" && define.amd) {
                                    // AMD
                                    define(["./core", "./sha256"], factory);
                                }
                                else {
                                    // Global (browser)
                                    factory(root.CryptoJS);
                                }
                            }(this, function (CryptoJS) {

                                (function () {
                                    // Shortcuts
                                    var C = CryptoJS;
                                    var C_lib = C.lib;
                                    var WordArray = C_lib.WordArray;
                                    var C_algo = C.algo;
                                    var SHA256 = C_algo.SHA256;

                                    /**
                                     * SHA-224 hash algorithm.
                                     */
                                    var SHA224 = C_algo.SHA224 = SHA256.extend({
                                        _doReset: function () {
                                            this._hash = new WordArray.init([
                                                0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
                                                0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4
                                            ]);
                                        },

                                        _doFinalize: function () {
                                            var hash = SHA256._doFinalize.call(this);

                                            hash.sigBytes -= 4;

                                            return hash;
                                        }
                                    });

                                    /**
                                     * Shortcut function to the hasher's object interface.
                                     *
                                     * @param {WordArray|string} message The message to hash.
                                     *
                                     * @return {WordArray} The hash.
                                     *
                                     * @static
                                     *
                                     * @example
                                     *
                                     *     var hash = CryptoJS.SHA224('message');
                                     *     var hash = CryptoJS.SHA224(wordArray);
                                     */
                                    C.SHA224 = SHA256._createHelper(SHA224);

                                    /**
                                     * Shortcut function to the HMAC's object interface.
                                     *
                                     * @param {WordArray|string} message The message to hash.
                                     * @param {WordArray|string} key The secret key.
                                     *
                                     * @return {WordArray} The HMAC.
                                     *
                                     * @static
                                     *
                                     * @example
                                     *
                                     *     var hmac = CryptoJS.HmacSHA224(message, key);
                                     */
                                    C.HmacSHA224 = SHA256._createHmacHelper(SHA224);
                                }());


                                return CryptoJS.SHA224;

                            }));
                        }, {"./core": 75, "./sha256": 101}],
                        101: [function (require, module, exports) {
                            ;(function (root, factory) {
                                if (typeof exports === "object") {
                                    // CommonJS
                                    module.exports = exports = factory(require("./core"));
                                }
                                else if (typeof define === "function" && define.amd) {
                                    // AMD
                                    define(["./core"], factory);
                                }
                                else {
                                    // Global (browser)
                                    factory(root.CryptoJS);
                                }
                            }(this, function (CryptoJS) {

                                (function (Math) {
                                    // Shortcuts
                                    var C = CryptoJS;
                                    var C_lib = C.lib;
                                    var WordArray = C_lib.WordArray;
                                    var Hasher = C_lib.Hasher;
                                    var C_algo = C.algo;

                                    // Initialization and round constants tables
                                    var H = [];
                                    var K = [];

                                    // Compute constants
                                    (function () {
                                        function isPrime(n) {
                                            var sqrtN = Math.sqrt(n);
                                            for (var factor = 2; factor <= sqrtN; factor++) {
                                                if (!(n % factor)) {
                                                    return false;
                                                }
                                            }

                                            return true;
                                        }

                                        function getFractionalBits(n) {
                                            return ((n - (n | 0)) * 0x100000000) | 0;
                                        }

                                        var n = 2;
                                        var nPrime = 0;
                                        while (nPrime < 64) {
                                            if (isPrime(n)) {
                                                if (nPrime < 8) {
                                                    H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));
                                                }
                                                K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));

                                                nPrime++;
                                            }

                                            n++;
                                        }
                                    }());

                                    // Reusable object
                                    var W = [];

                                    /**
                                     * SHA-256 hash algorithm.
                                     */
                                    var SHA256 = C_algo.SHA256 = Hasher.extend({
                                        _doReset: function () {
                                            this._hash = new WordArray.init(H.slice(0));
                                        },

                                        _doProcessBlock: function (M, offset) {
                                            // Shortcut
                                            var H = this._hash.words;

                                            // Working variables
                                            var a = H[0];
                                            var b = H[1];
                                            var c = H[2];
                                            var d = H[3];
                                            var e = H[4];
                                            var f = H[5];
                                            var g = H[6];
                                            var h = H[7];

                                            // Computation
                                            for (var i = 0; i < 64; i++) {
                                                if (i < 16) {
                                                    W[i] = M[offset + i] | 0;
                                                } else {
                                                    var gamma0x = W[i - 15];
                                                    var gamma0 = ((gamma0x << 25) | (gamma0x >>> 7)) ^
                                                        ((gamma0x << 14) | (gamma0x >>> 18)) ^
                                                        (gamma0x >>> 3);

                                                    var gamma1x = W[i - 2];
                                                    var gamma1 = ((gamma1x << 15) | (gamma1x >>> 17)) ^
                                                        ((gamma1x << 13) | (gamma1x >>> 19)) ^
                                                        (gamma1x >>> 10);

                                                    W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
                                                }

                                                var ch = (e & f) ^ (~e & g);
                                                var maj = (a & b) ^ (a & c) ^ (b & c);

                                                var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));
                                                var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7) | (e >>> 25));

                                                var t1 = h + sigma1 + ch + K[i] + W[i];
                                                var t2 = sigma0 + maj;

                                                h = g;
                                                g = f;
                                                f = e;
                                                e = (d + t1) | 0;
                                                d = c;
                                                c = b;
                                                b = a;
                                                a = (t1 + t2) | 0;
                                            }

                                            // Intermediate hash value
                                            H[0] = (H[0] + a) | 0;
                                            H[1] = (H[1] + b) | 0;
                                            H[2] = (H[2] + c) | 0;
                                            H[3] = (H[3] + d) | 0;
                                            H[4] = (H[4] + e) | 0;
                                            H[5] = (H[5] + f) | 0;
                                            H[6] = (H[6] + g) | 0;
                                            H[7] = (H[7] + h) | 0;
                                        },

                                        _doFinalize: function () {
                                            // Shortcuts
                                            var data = this._data;
                                            var dataWords = data.words;

                                            var nBitsTotal = this._nDataBytes * 8;
                                            var nBitsLeft = data.sigBytes * 8;

                                            // Add padding
                                            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
                                            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
                                            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;
                                            data.sigBytes = dataWords.length * 4;

                                            // Hash final blocks
                                            this._process();

                                            // Return final computed hash
                                            return this._hash;
                                        },

                                        clone: function () {
                                            var clone = Hasher.clone.call(this);
                                            clone._hash = this._hash.clone();

                                            return clone;
                                        }
                                    });

                                    /**
                                     * Shortcut function to the hasher's object interface.
                                     *
                                     * @param {WordArray|string} message The message to hash.
                                     *
                                     * @return {WordArray} The hash.
                                     *
                                     * @static
                                     *
                                     * @example
                                     *
                                     *     var hash = CryptoJS.SHA256('message');
                                     *     var hash = CryptoJS.SHA256(wordArray);
                                     */
                                    C.SHA256 = Hasher._createHelper(SHA256);

                                    /**
                                     * Shortcut function to the HMAC's object interface.
                                     *
                                     * @param {WordArray|string} message The message to hash.
                                     * @param {WordArray|string} key The secret key.
                                     *
                                     * @return {WordArray} The HMAC.
                                     *
                                     * @static
                                     *
                                     * @example
                                     *
                                     *     var hmac = CryptoJS.HmacSHA256(message, key);
                                     */
                                    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
                                }(Math));


                                return CryptoJS.SHA256;

                            }));
                        }, {"./core": 75}],
                        102: [function (require, module, exports) {
                            ;(function (root, factory, undef) {
                                if (typeof exports === "object") {
                                    // CommonJS
                                    module.exports = exports = factory(require("./core"), require("./x64-core"));
                                }
                                else if (typeof define === "function" && define.amd) {
                                    // AMD
                                    define(["./core", "./x64-core"], factory);
                                }
                                else {
                                    // Global (browser)
                                    factory(root.CryptoJS);
                                }
                            }(this, function (CryptoJS) {

                                (function (Math) {
                                    // Shortcuts
                                    var C = CryptoJS;
                                    var C_lib = C.lib;
                                    var WordArray = C_lib.WordArray;
                                    var Hasher = C_lib.Hasher;
                                    var C_x64 = C.x64;
                                    var X64Word = C_x64.Word;
                                    var C_algo = C.algo;

                                    // Constants tables
                                    var RHO_OFFSETS = [];
                                    var PI_INDEXES = [];
                                    var ROUND_CONSTANTS = [];

                                    // Compute Constants
                                    (function () {
                                        // Compute rho offset constants
                                        var x = 1, y = 0;
                                        for (var t = 0; t < 24; t++) {
                                            RHO_OFFSETS[x + 5 * y] = ((t + 1) * (t + 2) / 2) % 64;

                                            var newX = y % 5;
                                            var newY = (2 * x + 3 * y) % 5;
                                            x = newX;
                                            y = newY;
                                        }

                                        // Compute pi index constants
                                        for (var x = 0; x < 5; x++) {
                                            for (var y = 0; y < 5; y++) {
                                                PI_INDEXES[x + 5 * y] = y + ((2 * x + 3 * y) % 5) * 5;
                                            }
                                        }

                                        // Compute round constants
                                        var LFSR = 0x01;
                                        for (var i = 0; i < 24; i++) {
                                            var roundConstantMsw = 0;
                                            var roundConstantLsw = 0;

                                            for (var j = 0; j < 7; j++) {
                                                if (LFSR & 0x01) {
                                                    var bitPosition = (1 << j) - 1;
                                                    if (bitPosition < 32) {
                                                        roundConstantLsw ^= 1 << bitPosition;
                                                    } else /* if (bitPosition >= 32) */ {
                                                        roundConstantMsw ^= 1 << (bitPosition - 32);
                                                    }
                                                }

                                                // Compute next LFSR
                                                if (LFSR & 0x80) {
                                                    // Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1
                                                    LFSR = (LFSR << 1) ^ 0x71;
                                                } else {
                                                    LFSR <<= 1;
                                                }
                                            }

                                            ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);
                                        }
                                    }());

                                    // Reusable objects for temporary values
                                    var T = [];
                                    (function () {
                                        for (var i = 0; i < 25; i++) {
                                            T[i] = X64Word.create();
                                        }
                                    }());

                                    /**
                                     * SHA-3 hash algorithm.
                                     */
                                    var SHA3 = C_algo.SHA3 = Hasher.extend({
                                        /**
                                         * Configuration options.
                                         *
                                         * @property {number} outputLength
                                         *   The desired number of bits in the output hash.
                                         *   Only values permitted are: 224, 256, 384, 512.
                                         *   Default: 512
                                         */
                                        cfg: Hasher.cfg.extend({
                                            outputLength: 512
                                        }),

                                        _doReset: function () {
                                            var state = this._state = []
                                            for (var i = 0; i < 25; i++) {
                                                state[i] = new X64Word.init();
                                            }

                                            this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
                                        },

                                        _doProcessBlock: function (M, offset) {
                                            // Shortcuts
                                            var state = this._state;
                                            var nBlockSizeLanes = this.blockSize / 2;

                                            // Absorb
                                            for (var i = 0; i < nBlockSizeLanes; i++) {
                                                // Shortcuts
                                                var M2i = M[offset + 2 * i];
                                                var M2i1 = M[offset + 2 * i + 1];

                                                // Swap endian
                                                M2i = (
                                                    (((M2i << 8) | (M2i >>> 24)) & 0x00ff00ff) |
                                                    (((M2i << 24) | (M2i >>> 8)) & 0xff00ff00)
                                                );
                                                M2i1 = (
                                                    (((M2i1 << 8) | (M2i1 >>> 24)) & 0x00ff00ff) |
                                                    (((M2i1 << 24) | (M2i1 >>> 8)) & 0xff00ff00)
                                                );

                                                // Absorb message into state
                                                var lane = state[i];
                                                lane.high ^= M2i1;
                                                lane.low ^= M2i;
                                            }

                                            // Rounds
                                            for (var round = 0; round < 24; round++) {
                                                // Theta
                                                for (var x = 0; x < 5; x++) {
                                                    // Mix column lanes
                                                    var tMsw = 0, tLsw = 0;
                                                    for (var y = 0; y < 5; y++) {
                                                        var lane = state[x + 5 * y];
                                                        tMsw ^= lane.high;
                                                        tLsw ^= lane.low;
                                                    }

                                                    // Temporary values
                                                    var Tx = T[x];
                                                    Tx.high = tMsw;
                                                    Tx.low = tLsw;
                                                }
                                                for (var x = 0; x < 5; x++) {
                                                    // Shortcuts
                                                    var Tx4 = T[(x + 4) % 5];
                                                    var Tx1 = T[(x + 1) % 5];
                                                    var Tx1Msw = Tx1.high;
                                                    var Tx1Lsw = Tx1.low;

                                                    // Mix surrounding columns
                                                    var tMsw = Tx4.high ^ ((Tx1Msw << 1) | (Tx1Lsw >>> 31));
                                                    var tLsw = Tx4.low ^ ((Tx1Lsw << 1) | (Tx1Msw >>> 31));
                                                    for (var y = 0; y < 5; y++) {
                                                        var lane = state[x + 5 * y];
                                                        lane.high ^= tMsw;
                                                        lane.low ^= tLsw;
                                                    }
                                                }

                                                // Rho Pi
                                                for (var laneIndex = 1; laneIndex < 25; laneIndex++) {
                                                    // Shortcuts
                                                    var lane = state[laneIndex];
                                                    var laneMsw = lane.high;
                                                    var laneLsw = lane.low;
                                                    var rhoOffset = RHO_OFFSETS[laneIndex];

                                                    // Rotate lanes
                                                    if (rhoOffset < 32) {
                                                        var tMsw = (laneMsw << rhoOffset) | (laneLsw >>> (32 - rhoOffset));
                                                        var tLsw = (laneLsw << rhoOffset) | (laneMsw >>> (32 - rhoOffset));
                                                    } else /* if (rhoOffset >= 32) */ {
                                                        var tMsw = (laneLsw << (rhoOffset - 32)) | (laneMsw >>> (64 - rhoOffset));
                                                        var tLsw = (laneMsw << (rhoOffset - 32)) | (laneLsw >>> (64 - rhoOffset));
                                                    }

                                                    // Transpose lanes
                                                    var TPiLane = T[PI_INDEXES[laneIndex]];
                                                    TPiLane.high = tMsw;
                                                    TPiLane.low = tLsw;
                                                }

                                                // Rho pi at x = y = 0
                                                var T0 = T[0];
                                                var state0 = state[0];
                                                T0.high = state0.high;
                                                T0.low = state0.low;

                                                // Chi
                                                for (var x = 0; x < 5; x++) {
                                                    for (var y = 0; y < 5; y++) {
                                                        // Shortcuts
                                                        var laneIndex = x + 5 * y;
                                                        var lane = state[laneIndex];
                                                        var TLane = T[laneIndex];
                                                        var Tx1Lane = T[((x + 1) % 5) + 5 * y];
                                                        var Tx2Lane = T[((x + 2) % 5) + 5 * y];

                                                        // Mix rows
                                                        lane.high = TLane.high ^ (~Tx1Lane.high & Tx2Lane.high);
                                                        lane.low = TLane.low ^ (~Tx1Lane.low & Tx2Lane.low);
                                                    }
                                                }

                                                // Iota
                                                var lane = state[0];
                                                var roundConstant = ROUND_CONSTANTS[round];
                                                lane.high ^= roundConstant.high;
                                                lane.low ^= roundConstant.low;
                                                ;
                                            }
                                        },

                                        _doFinalize: function () {
                                            // Shortcuts
                                            var data = this._data;
                                            var dataWords = data.words;
                                            var nBitsTotal = this._nDataBytes * 8;
                                            var nBitsLeft = data.sigBytes * 8;
                                            var blockSizeBits = this.blockSize * 32;

                                            // Add padding
                                            dataWords[nBitsLeft >>> 5] |= 0x1 << (24 - nBitsLeft % 32);
                                            dataWords[((Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits) >>> 5) - 1] |= 0x80;
                                            data.sigBytes = dataWords.length * 4;

                                            // Hash final blocks
                                            this._process();

                                            // Shortcuts
                                            var state = this._state;
                                            var outputLengthBytes = this.cfg.outputLength / 8;
                                            var outputLengthLanes = outputLengthBytes / 8;

                                            // Squeeze
                                            var hashWords = [];
                                            for (var i = 0; i < outputLengthLanes; i++) {
                                                // Shortcuts
                                                var lane = state[i];
                                                var laneMsw = lane.high;
                                                var laneLsw = lane.low;

                                                // Swap endian
                                                laneMsw = (
                                                    (((laneMsw << 8) | (laneMsw >>> 24)) & 0x00ff00ff) |
                                                    (((laneMsw << 24) | (laneMsw >>> 8)) & 0xff00ff00)
                                                );
                                                laneLsw = (
                                                    (((laneLsw << 8) | (laneLsw >>> 24)) & 0x00ff00ff) |
                                                    (((laneLsw << 24) | (laneLsw >>> 8)) & 0xff00ff00)
                                                );

                                                // Squeeze state to retrieve hash
                                                hashWords.push(laneLsw);
                                                hashWords.push(laneMsw);
                                            }

                                            // Return final computed hash
                                            return new WordArray.init(hashWords, outputLengthBytes);
                                        },

                                        clone: function () {
                                            var clone = Hasher.clone.call(this);

                                            var state = clone._state = this._state.slice(0);
                                            for (var i = 0; i < 25; i++) {
                                                state[i] = state[i].clone();
                                            }

                                            return clone;
                                        }
                                    });

                                    /**
                                     * Shortcut function to the hasher's object interface.
                                     *
                                     * @param {WordArray|string} message The message to hash.
                                     *
                                     * @return {WordArray} The hash.
                                     *
                                     * @static
                                     *
                                     * @example
                                     *
                                     *     var hash = CryptoJS.SHA3('message');
                                     *     var hash = CryptoJS.SHA3(wordArray);
                                     */
                                    C.SHA3 = Hasher._createHelper(SHA3);

                                    /**
                                     * Shortcut function to the HMAC's object interface.
                                     *
                                     * @param {WordArray|string} message The message to hash.
                                     * @param {WordArray|string} key The secret key.
                                     *
                                     * @return {WordArray} The HMAC.
                                     *
                                     * @static
                                     *
                                     * @example
                                     *
                                     *     var hmac = CryptoJS.HmacSHA3(message, key);
                                     */
                                    C.HmacSHA3 = Hasher._createHmacHelper(SHA3);
                                }(Math));


                                return CryptoJS.SHA3;

                            }));
                        }, {"./core": 75, "./x64-core": 106}],
                        103: [function (require, module, exports) {
                            ;(function (root, factory, undef) {
                                if (typeof exports === "object") {
                                    // CommonJS
                                    module.exports = exports = factory(require("./core"), require("./x64-core"), require("./sha512"));
                                }
                                else if (typeof define === "function" && define.amd) {
                                    // AMD
                                    define(["./core", "./x64-core", "./sha512"], factory);
                                }
                                else {
                                    // Global (browser)
                                    factory(root.CryptoJS);
                                }
                            }(this, function (CryptoJS) {

                                (function () {
                                    // Shortcuts
                                    var C = CryptoJS;
                                    var C_x64 = C.x64;
                                    var X64Word = C_x64.Word;
                                    var X64WordArray = C_x64.WordArray;
                                    var C_algo = C.algo;
                                    var SHA512 = C_algo.SHA512;

                                    /**
                                     * SHA-384 hash algorithm.
                                     */
                                    var SHA384 = C_algo.SHA384 = SHA512.extend({
                                        _doReset: function () {
                                            this._hash = new X64WordArray.init([
                                                new X64Word.init(0xcbbb9d5d, 0xc1059ed8), new X64Word.init(0x629a292a, 0x367cd507),
                                                new X64Word.init(0x9159015a, 0x3070dd17), new X64Word.init(0x152fecd8, 0xf70e5939),
                                                new X64Word.init(0x67332667, 0xffc00b31), new X64Word.init(0x8eb44a87, 0x68581511),
                                                new X64Word.init(0xdb0c2e0d, 0x64f98fa7), new X64Word.init(0x47b5481d, 0xbefa4fa4)
                                            ]);
                                        },

                                        _doFinalize: function () {
                                            var hash = SHA512._doFinalize.call(this);

                                            hash.sigBytes -= 16;

                                            return hash;
                                        }
                                    });

                                    /**
                                     * Shortcut function to the hasher's object interface.
                                     *
                                     * @param {WordArray|string} message The message to hash.
                                     *
                                     * @return {WordArray} The hash.
                                     *
                                     * @static
                                     *
                                     * @example
                                     *
                                     *     var hash = CryptoJS.SHA384('message');
                                     *     var hash = CryptoJS.SHA384(wordArray);
                                     */
                                    C.SHA384 = SHA512._createHelper(SHA384);

                                    /**
                                     * Shortcut function to the HMAC's object interface.
                                     *
                                     * @param {WordArray|string} message The message to hash.
                                     * @param {WordArray|string} key The secret key.
                                     *
                                     * @return {WordArray} The HMAC.
                                     *
                                     * @static
                                     *
                                     * @example
                                     *
                                     *     var hmac = CryptoJS.HmacSHA384(message, key);
                                     */
                                    C.HmacSHA384 = SHA512._createHmacHelper(SHA384);
                                }());


                                return CryptoJS.SHA384;

                            }));
                        }, {"./core": 75, "./sha512": 104, "./x64-core": 106}],
                        104: [function (require, module, exports) {
                            ;(function (root, factory, undef) {
                                if (typeof exports === "object") {
                                    // CommonJS
                                    module.exports = exports = factory(require("./core"), require("./x64-core"));
                                }
                                else if (typeof define === "function" && define.amd) {
                                    // AMD
                                    define(["./core", "./x64-core"], factory);
                                }
                                else {
                                    // Global (browser)
                                    factory(root.CryptoJS);
                                }
                            }(this, function (CryptoJS) {

                                (function () {
                                    // Shortcuts
                                    var C = CryptoJS;
                                    var C_lib = C.lib;
                                    var Hasher = C_lib.Hasher;
                                    var C_x64 = C.x64;
                                    var X64Word = C_x64.Word;
                                    var X64WordArray = C_x64.WordArray;
                                    var C_algo = C.algo;

                                    function X64Word_create() {
                                        return X64Word.create.apply(X64Word, arguments);
                                    }

                                    // Constants
                                    var K = [
                                        X64Word_create(0x428a2f98, 0xd728ae22), X64Word_create(0x71374491, 0x23ef65cd),
                                        X64Word_create(0xb5c0fbcf, 0xec4d3b2f), X64Word_create(0xe9b5dba5, 0x8189dbbc),
                                        X64Word_create(0x3956c25b, 0xf348b538), X64Word_create(0x59f111f1, 0xb605d019),
                                        X64Word_create(0x923f82a4, 0xaf194f9b), X64Word_create(0xab1c5ed5, 0xda6d8118),
                                        X64Word_create(0xd807aa98, 0xa3030242), X64Word_create(0x12835b01, 0x45706fbe),
                                        X64Word_create(0x243185be, 0x4ee4b28c), X64Word_create(0x550c7dc3, 0xd5ffb4e2),
                                        X64Word_create(0x72be5d74, 0xf27b896f), X64Word_create(0x80deb1fe, 0x3b1696b1),
                                        X64Word_create(0x9bdc06a7, 0x25c71235), X64Word_create(0xc19bf174, 0xcf692694),
                                        X64Word_create(0xe49b69c1, 0x9ef14ad2), X64Word_create(0xefbe4786, 0x384f25e3),
                                        X64Word_create(0x0fc19dc6, 0x8b8cd5b5), X64Word_create(0x240ca1cc, 0x77ac9c65),
                                        X64Word_create(0x2de92c6f, 0x592b0275), X64Word_create(0x4a7484aa, 0x6ea6e483),
                                        X64Word_create(0x5cb0a9dc, 0xbd41fbd4), X64Word_create(0x76f988da, 0x831153b5),
                                        X64Word_create(0x983e5152, 0xee66dfab), X64Word_create(0xa831c66d, 0x2db43210),
                                        X64Word_create(0xb00327c8, 0x98fb213f), X64Word_create(0xbf597fc7, 0xbeef0ee4),
                                        X64Word_create(0xc6e00bf3, 0x3da88fc2), X64Word_create(0xd5a79147, 0x930aa725),
                                        X64Word_create(0x06ca6351, 0xe003826f), X64Word_create(0x14292967, 0x0a0e6e70),
                                        X64Word_create(0x27b70a85, 0x46d22ffc), X64Word_create(0x2e1b2138, 0x5c26c926),
                                        X64Word_create(0x4d2c6dfc, 0x5ac42aed), X64Word_create(0x53380d13, 0x9d95b3df),
                                        X64Word_create(0x650a7354, 0x8baf63de), X64Word_create(0x766a0abb, 0x3c77b2a8),
                                        X64Word_create(0x81c2c92e, 0x47edaee6), X64Word_create(0x92722c85, 0x1482353b),
                                        X64Word_create(0xa2bfe8a1, 0x4cf10364), X64Word_create(0xa81a664b, 0xbc423001),
                                        X64Word_create(0xc24b8b70, 0xd0f89791), X64Word_create(0xc76c51a3, 0x0654be30),
                                        X64Word_create(0xd192e819, 0xd6ef5218), X64Word_create(0xd6990624, 0x5565a910),
                                        X64Word_create(0xf40e3585, 0x5771202a), X64Word_create(0x106aa070, 0x32bbd1b8),
                                        X64Word_create(0x19a4c116, 0xb8d2d0c8), X64Word_create(0x1e376c08, 0x5141ab53),
                                        X64Word_create(0x2748774c, 0xdf8eeb99), X64Word_create(0x34b0bcb5, 0xe19b48a8),
                                        X64Word_create(0x391c0cb3, 0xc5c95a63), X64Word_create(0x4ed8aa4a, 0xe3418acb),
                                        X64Word_create(0x5b9cca4f, 0x7763e373), X64Word_create(0x682e6ff3, 0xd6b2b8a3),
                                        X64Word_create(0x748f82ee, 0x5defb2fc), X64Word_create(0x78a5636f, 0x43172f60),
                                        X64Word_create(0x84c87814, 0xa1f0ab72), X64Word_create(0x8cc70208, 0x1a6439ec),
                                        X64Word_create(0x90befffa, 0x23631e28), X64Word_create(0xa4506ceb, 0xde82bde9),
                                        X64Word_create(0xbef9a3f7, 0xb2c67915), X64Word_create(0xc67178f2, 0xe372532b),
                                        X64Word_create(0xca273ece, 0xea26619c), X64Word_create(0xd186b8c7, 0x21c0c207),
                                        X64Word_create(0xeada7dd6, 0xcde0eb1e), X64Word_create(0xf57d4f7f, 0xee6ed178),
                                        X64Word_create(0x06f067aa, 0x72176fba), X64Word_create(0x0a637dc5, 0xa2c898a6),
                                        X64Word_create(0x113f9804, 0xbef90dae), X64Word_create(0x1b710b35, 0x131c471b),
                                        X64Word_create(0x28db77f5, 0x23047d84), X64Word_create(0x32caab7b, 0x40c72493),
                                        X64Word_create(0x3c9ebe0a, 0x15c9bebc), X64Word_create(0x431d67c4, 0x9c100d4c),
                                        X64Word_create(0x4cc5d4be, 0xcb3e42b6), X64Word_create(0x597f299c, 0xfc657e2a),
                                        X64Word_create(0x5fcb6fab, 0x3ad6faec), X64Word_create(0x6c44198c, 0x4a475817)
                                    ];

                                    // Reusable objects
                                    var W = [];
                                    (function () {
                                        for (var i = 0; i < 80; i++) {
                                            W[i] = X64Word_create();
                                        }
                                    }());

                                    /**
                                     * SHA-512 hash algorithm.
                                     */
                                    var SHA512 = C_algo.SHA512 = Hasher.extend({
                                        _doReset: function () {
                                            this._hash = new X64WordArray.init([
                                                new X64Word.init(0x6a09e667, 0xf3bcc908), new X64Word.init(0xbb67ae85, 0x84caa73b),
                                                new X64Word.init(0x3c6ef372, 0xfe94f82b), new X64Word.init(0xa54ff53a, 0x5f1d36f1),
                                                new X64Word.init(0x510e527f, 0xade682d1), new X64Word.init(0x9b05688c, 0x2b3e6c1f),
                                                new X64Word.init(0x1f83d9ab, 0xfb41bd6b), new X64Word.init(0x5be0cd19, 0x137e2179)
                                            ]);
                                        },

                                        _doProcessBlock: function (M, offset) {
                                            // Shortcuts
                                            var H = this._hash.words;

                                            var H0 = H[0];
                                            var H1 = H[1];
                                            var H2 = H[2];
                                            var H3 = H[3];
                                            var H4 = H[4];
                                            var H5 = H[5];
                                            var H6 = H[6];
                                            var H7 = H[7];

                                            var H0h = H0.high;
                                            var H0l = H0.low;
                                            var H1h = H1.high;
                                            var H1l = H1.low;
                                            var H2h = H2.high;
                                            var H2l = H2.low;
                                            var H3h = H3.high;
                                            var H3l = H3.low;
                                            var H4h = H4.high;
                                            var H4l = H4.low;
                                            var H5h = H5.high;
                                            var H5l = H5.low;
                                            var H6h = H6.high;
                                            var H6l = H6.low;
                                            var H7h = H7.high;
                                            var H7l = H7.low;

                                            // Working variables
                                            var ah = H0h;
                                            var al = H0l;
                                            var bh = H1h;
                                            var bl = H1l;
                                            var ch = H2h;
                                            var cl = H2l;
                                            var dh = H3h;
                                            var dl = H3l;
                                            var eh = H4h;
                                            var el = H4l;
                                            var fh = H5h;
                                            var fl = H5l;
                                            var gh = H6h;
                                            var gl = H6l;
                                            var hh = H7h;
                                            var hl = H7l;

                                            // Rounds
                                            for (var i = 0; i < 80; i++) {
                                                // Shortcut
                                                var Wi = W[i];

                                                // Extend message
                                                if (i < 16) {
                                                    var Wih = Wi.high = M[offset + i * 2] | 0;
                                                    var Wil = Wi.low = M[offset + i * 2 + 1] | 0;
                                                } else {
                                                    // Gamma0
                                                    var gamma0x = W[i - 15];
                                                    var gamma0xh = gamma0x.high;
                                                    var gamma0xl = gamma0x.low;
                                                    var gamma0h = ((gamma0xh >>> 1) | (gamma0xl << 31)) ^ ((gamma0xh >>> 8) | (gamma0xl << 24)) ^ (gamma0xh >>> 7);
                                                    var gamma0l = ((gamma0xl >>> 1) | (gamma0xh << 31)) ^ ((gamma0xl >>> 8) | (gamma0xh << 24)) ^ ((gamma0xl >>> 7) | (gamma0xh << 25));

                                                    // Gamma1
                                                    var gamma1x = W[i - 2];
                                                    var gamma1xh = gamma1x.high;
                                                    var gamma1xl = gamma1x.low;
                                                    var gamma1h = ((gamma1xh >>> 19) | (gamma1xl << 13)) ^ ((gamma1xh << 3) | (gamma1xl >>> 29)) ^ (gamma1xh >>> 6);
                                                    var gamma1l = ((gamma1xl >>> 19) | (gamma1xh << 13)) ^ ((gamma1xl << 3) | (gamma1xh >>> 29)) ^ ((gamma1xl >>> 6) | (gamma1xh << 26));

                                                    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
                                                    var Wi7 = W[i - 7];
                                                    var Wi7h = Wi7.high;
                                                    var Wi7l = Wi7.low;

                                                    var Wi16 = W[i - 16];
                                                    var Wi16h = Wi16.high;
                                                    var Wi16l = Wi16.low;

                                                    var Wil = gamma0l + Wi7l;
                                                    var Wih = gamma0h + Wi7h + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0);
                                                    var Wil = Wil + gamma1l;
                                                    var Wih = Wih + gamma1h + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0);
                                                    var Wil = Wil + Wi16l;
                                                    var Wih = Wih + Wi16h + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0);

                                                    Wi.high = Wih;
                                                    Wi.low = Wil;
                                                }

                                                var chh = (eh & fh) ^ (~eh & gh);
                                                var chl = (el & fl) ^ (~el & gl);
                                                var majh = (ah & bh) ^ (ah & ch) ^ (bh & ch);
                                                var majl = (al & bl) ^ (al & cl) ^ (bl & cl);

                                                var sigma0h = ((ah >>> 28) | (al << 4)) ^ ((ah << 30) | (al >>> 2)) ^ ((ah << 25) | (al >>> 7));
                                                var sigma0l = ((al >>> 28) | (ah << 4)) ^ ((al << 30) | (ah >>> 2)) ^ ((al << 25) | (ah >>> 7));
                                                var sigma1h = ((eh >>> 14) | (el << 18)) ^ ((eh >>> 18) | (el << 14)) ^ ((eh << 23) | (el >>> 9));
                                                var sigma1l = ((el >>> 14) | (eh << 18)) ^ ((el >>> 18) | (eh << 14)) ^ ((el << 23) | (eh >>> 9));

                                                // t1 = h + sigma1 + ch + K[i] + W[i]
                                                var Ki = K[i];
                                                var Kih = Ki.high;
                                                var Kil = Ki.low;

                                                var t1l = hl + sigma1l;
                                                var t1h = hh + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0);
                                                var t1l = t1l + chl;
                                                var t1h = t1h + chh + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0);
                                                var t1l = t1l + Kil;
                                                var t1h = t1h + Kih + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0);
                                                var t1l = t1l + Wil;
                                                var t1h = t1h + Wih + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0);

                                                // t2 = sigma0 + maj
                                                var t2l = sigma0l + majl;
                                                var t2h = sigma0h + majh + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0);

                                                // Update working variables
                                                hh = gh;
                                                hl = gl;
                                                gh = fh;
                                                gl = fl;
                                                fh = eh;
                                                fl = el;
                                                el = (dl + t1l) | 0;
                                                eh = (dh + t1h + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;
                                                dh = ch;
                                                dl = cl;
                                                ch = bh;
                                                cl = bl;
                                                bh = ah;
                                                bl = al;
                                                al = (t1l + t2l) | 0;
                                                ah = (t1h + t2h + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0;
                                            }

                                            // Intermediate hash value
                                            H0l = H0.low = (H0l + al);
                                            H0.high = (H0h + ah + ((H0l >>> 0) < (al >>> 0) ? 1 : 0));
                                            H1l = H1.low = (H1l + bl);
                                            H1.high = (H1h + bh + ((H1l >>> 0) < (bl >>> 0) ? 1 : 0));
                                            H2l = H2.low = (H2l + cl);
                                            H2.high = (H2h + ch + ((H2l >>> 0) < (cl >>> 0) ? 1 : 0));
                                            H3l = H3.low = (H3l + dl);
                                            H3.high = (H3h + dh + ((H3l >>> 0) < (dl >>> 0) ? 1 : 0));
                                            H4l = H4.low = (H4l + el);
                                            H4.high = (H4h + eh + ((H4l >>> 0) < (el >>> 0) ? 1 : 0));
                                            H5l = H5.low = (H5l + fl);
                                            H5.high = (H5h + fh + ((H5l >>> 0) < (fl >>> 0) ? 1 : 0));
                                            H6l = H6.low = (H6l + gl);
                                            H6.high = (H6h + gh + ((H6l >>> 0) < (gl >>> 0) ? 1 : 0));
                                            H7l = H7.low = (H7l + hl);
                                            H7.high = (H7h + hh + ((H7l >>> 0) < (hl >>> 0) ? 1 : 0));
                                        },

                                        _doFinalize: function () {
                                            // Shortcuts
                                            var data = this._data;
                                            var dataWords = data.words;

                                            var nBitsTotal = this._nDataBytes * 8;
                                            var nBitsLeft = data.sigBytes * 8;

                                            // Add padding
                                            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
                                            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 30] = Math.floor(nBitsTotal / 0x100000000);
                                            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 31] = nBitsTotal;
                                            data.sigBytes = dataWords.length * 4;

                                            // Hash final blocks
                                            this._process();

                                            // Convert hash to 32-bit word array before returning
                                            var hash = this._hash.toX32();

                                            // Return final computed hash
                                            return hash;
                                        },

                                        clone: function () {
                                            var clone = Hasher.clone.call(this);
                                            clone._hash = this._hash.clone();

                                            return clone;
                                        },

                                        blockSize: 1024 / 32
                                    });

                                    /**
                                     * Shortcut function to the hasher's object interface.
                                     *
                                     * @param {WordArray|string} message The message to hash.
                                     *
                                     * @return {WordArray} The hash.
                                     *
                                     * @static
                                     *
                                     * @example
                                     *
                                     *     var hash = CryptoJS.SHA512('message');
                                     *     var hash = CryptoJS.SHA512(wordArray);
                                     */
                                    C.SHA512 = Hasher._createHelper(SHA512);

                                    /**
                                     * Shortcut function to the HMAC's object interface.
                                     *
                                     * @param {WordArray|string} message The message to hash.
                                     * @param {WordArray|string} key The secret key.
                                     *
                                     * @return {WordArray} The HMAC.
                                     *
                                     * @static
                                     *
                                     * @example
                                     *
                                     *     var hmac = CryptoJS.HmacSHA512(message, key);
                                     */
                                    C.HmacSHA512 = Hasher._createHmacHelper(SHA512);
                                }());


                                return CryptoJS.SHA512;

                            }));
                        }, {"./core": 75, "./x64-core": 106}],
                        105: [function (require, module, exports) {
                            ;(function (root, factory, undef) {
                                if (typeof exports === "object") {
                                    // CommonJS
                                    module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
                                }
                                else if (typeof define === "function" && define.amd) {
                                    // AMD
                                    define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
                                }
                                else {
                                    // Global (browser)
                                    factory(root.CryptoJS);
                                }
                            }(this, function (CryptoJS) {

                                (function () {
                                    // Shortcuts
                                    var C = CryptoJS;
                                    var C_lib = C.lib;
                                    var WordArray = C_lib.WordArray;
                                    var BlockCipher = C_lib.BlockCipher;
                                    var C_algo = C.algo;

                                    // Permuted Choice 1 constants
                                    var PC1 = [
                                        57, 49, 41, 33, 25, 17, 9, 1,
                                        58, 50, 42, 34, 26, 18, 10, 2,
                                        59, 51, 43, 35, 27, 19, 11, 3,
                                        60, 52, 44, 36, 63, 55, 47, 39,
                                        31, 23, 15, 7, 62, 54, 46, 38,
                                        30, 22, 14, 6, 61, 53, 45, 37,
                                        29, 21, 13, 5, 28, 20, 12, 4
                                    ];

                                    // Permuted Choice 2 constants
                                    var PC2 = [
                                        14, 17, 11, 24, 1, 5,
                                        3, 28, 15, 6, 21, 10,
                                        23, 19, 12, 4, 26, 8,
                                        16, 7, 27, 20, 13, 2,
                                        41, 52, 31, 37, 47, 55,
                                        30, 40, 51, 45, 33, 48,
                                        44, 49, 39, 56, 34, 53,
                                        46, 42, 50, 36, 29, 32
                                    ];

                                    // Cumulative bit shift constants
                                    var BIT_SHIFTS = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];

                                    // SBOXes and round permutation constants
                                    var SBOX_P = [
                                        {
                                            0x0: 0x808200,
                                            0x10000000: 0x8000,
                                            0x20000000: 0x808002,
                                            0x30000000: 0x2,
                                            0x40000000: 0x200,
                                            0x50000000: 0x808202,
                                            0x60000000: 0x800202,
                                            0x70000000: 0x800000,
                                            0x80000000: 0x202,
                                            0x90000000: 0x800200,
                                            0xa0000000: 0x8200,
                                            0xb0000000: 0x808000,
                                            0xc0000000: 0x8002,
                                            0xd0000000: 0x800002,
                                            0xe0000000: 0x0,
                                            0xf0000000: 0x8202,
                                            0x8000000: 0x0,
                                            0x18000000: 0x808202,
                                            0x28000000: 0x8202,
                                            0x38000000: 0x8000,
                                            0x48000000: 0x808200,
                                            0x58000000: 0x200,
                                            0x68000000: 0x808002,
                                            0x78000000: 0x2,
                                            0x88000000: 0x800200,
                                            0x98000000: 0x8200,
                                            0xa8000000: 0x808000,
                                            0xb8000000: 0x800202,
                                            0xc8000000: 0x800002,
                                            0xd8000000: 0x8002,
                                            0xe8000000: 0x202,
                                            0xf8000000: 0x800000,
                                            0x1: 0x8000,
                                            0x10000001: 0x2,
                                            0x20000001: 0x808200,
                                            0x30000001: 0x800000,
                                            0x40000001: 0x808002,
                                            0x50000001: 0x8200,
                                            0x60000001: 0x200,
                                            0x70000001: 0x800202,
                                            0x80000001: 0x808202,
                                            0x90000001: 0x808000,
                                            0xa0000001: 0x800002,
                                            0xb0000001: 0x8202,
                                            0xc0000001: 0x202,
                                            0xd0000001: 0x800200,
                                            0xe0000001: 0x8002,
                                            0xf0000001: 0x0,
                                            0x8000001: 0x808202,
                                            0x18000001: 0x808000,
                                            0x28000001: 0x800000,
                                            0x38000001: 0x200,
                                            0x48000001: 0x8000,
                                            0x58000001: 0x800002,
                                            0x68000001: 0x2,
                                            0x78000001: 0x8202,
                                            0x88000001: 0x8002,
                                            0x98000001: 0x800202,
                                            0xa8000001: 0x202,
                                            0xb8000001: 0x808200,
                                            0xc8000001: 0x800200,
                                            0xd8000001: 0x0,
                                            0xe8000001: 0x8200,
                                            0xf8000001: 0x808002
                                        },
                                        {
                                            0x0: 0x40084010,
                                            0x1000000: 0x4000,
                                            0x2000000: 0x80000,
                                            0x3000000: 0x40080010,
                                            0x4000000: 0x40000010,
                                            0x5000000: 0x40084000,
                                            0x6000000: 0x40004000,
                                            0x7000000: 0x10,
                                            0x8000000: 0x84000,
                                            0x9000000: 0x40004010,
                                            0xa000000: 0x40000000,
                                            0xb000000: 0x84010,
                                            0xc000000: 0x80010,
                                            0xd000000: 0x0,
                                            0xe000000: 0x4010,
                                            0xf000000: 0x40080000,
                                            0x800000: 0x40004000,
                                            0x1800000: 0x84010,
                                            0x2800000: 0x10,
                                            0x3800000: 0x40004010,
                                            0x4800000: 0x40084010,
                                            0x5800000: 0x40000000,
                                            0x6800000: 0x80000,
                                            0x7800000: 0x40080010,
                                            0x8800000: 0x80010,
                                            0x9800000: 0x0,
                                            0xa800000: 0x4000,
                                            0xb800000: 0x40080000,
                                            0xc800000: 0x40000010,
                                            0xd800000: 0x84000,
                                            0xe800000: 0x40084000,
                                            0xf800000: 0x4010,
                                            0x10000000: 0x0,
                                            0x11000000: 0x40080010,
                                            0x12000000: 0x40004010,
                                            0x13000000: 0x40084000,
                                            0x14000000: 0x40080000,
                                            0x15000000: 0x10,
                                            0x16000000: 0x84010,
                                            0x17000000: 0x4000,
                                            0x18000000: 0x4010,
                                            0x19000000: 0x80000,
                                            0x1a000000: 0x80010,
                                            0x1b000000: 0x40000010,
                                            0x1c000000: 0x84000,
                                            0x1d000000: 0x40004000,
                                            0x1e000000: 0x40000000,
                                            0x1f000000: 0x40084010,
                                            0x10800000: 0x84010,
                                            0x11800000: 0x80000,
                                            0x12800000: 0x40080000,
                                            0x13800000: 0x4000,
                                            0x14800000: 0x40004000,
                                            0x15800000: 0x40084010,
                                            0x16800000: 0x10,
                                            0x17800000: 0x40000000,
                                            0x18800000: 0x40084000,
                                            0x19800000: 0x40000010,
                                            0x1a800000: 0x40004010,
                                            0x1b800000: 0x80010,
                                            0x1c800000: 0x0,
                                            0x1d800000: 0x4010,
                                            0x1e800000: 0x40080010,
                                            0x1f800000: 0x84000
                                        },
                                        {
                                            0x0: 0x104,
                                            0x100000: 0x0,
                                            0x200000: 0x4000100,
                                            0x300000: 0x10104,
                                            0x400000: 0x10004,
                                            0x500000: 0x4000004,
                                            0x600000: 0x4010104,
                                            0x700000: 0x4010000,
                                            0x800000: 0x4000000,
                                            0x900000: 0x4010100,
                                            0xa00000: 0x10100,
                                            0xb00000: 0x4010004,
                                            0xc00000: 0x4000104,
                                            0xd00000: 0x10000,
                                            0xe00000: 0x4,
                                            0xf00000: 0x100,
                                            0x80000: 0x4010100,
                                            0x180000: 0x4010004,
                                            0x280000: 0x0,
                                            0x380000: 0x4000100,
                                            0x480000: 0x4000004,
                                            0x580000: 0x10000,
                                            0x680000: 0x10004,
                                            0x780000: 0x104,
                                            0x880000: 0x4,
                                            0x980000: 0x100,
                                            0xa80000: 0x4010000,
                                            0xb80000: 0x10104,
                                            0xc80000: 0x10100,
                                            0xd80000: 0x4000104,
                                            0xe80000: 0x4010104,
                                            0xf80000: 0x4000000,
                                            0x1000000: 0x4010100,
                                            0x1100000: 0x10004,
                                            0x1200000: 0x10000,
                                            0x1300000: 0x4000100,
                                            0x1400000: 0x100,
                                            0x1500000: 0x4010104,
                                            0x1600000: 0x4000004,
                                            0x1700000: 0x0,
                                            0x1800000: 0x4000104,
                                            0x1900000: 0x4000000,
                                            0x1a00000: 0x4,
                                            0x1b00000: 0x10100,
                                            0x1c00000: 0x4010000,
                                            0x1d00000: 0x104,
                                            0x1e00000: 0x10104,
                                            0x1f00000: 0x4010004,
                                            0x1080000: 0x4000000,
                                            0x1180000: 0x104,
                                            0x1280000: 0x4010100,
                                            0x1380000: 0x0,
                                            0x1480000: 0x10004,
                                            0x1580000: 0x4000100,
                                            0x1680000: 0x100,
                                            0x1780000: 0x4010004,
                                            0x1880000: 0x10000,
                                            0x1980000: 0x4010104,
                                            0x1a80000: 0x10104,
                                            0x1b80000: 0x4000004,
                                            0x1c80000: 0x4000104,
                                            0x1d80000: 0x4010000,
                                            0x1e80000: 0x4,
                                            0x1f80000: 0x10100
                                        },
                                        {
                                            0x0: 0x80401000,
                                            0x10000: 0x80001040,
                                            0x20000: 0x401040,
                                            0x30000: 0x80400000,
                                            0x40000: 0x0,
                                            0x50000: 0x401000,
                                            0x60000: 0x80000040,
                                            0x70000: 0x400040,
                                            0x80000: 0x80000000,
                                            0x90000: 0x400000,
                                            0xa0000: 0x40,
                                            0xb0000: 0x80001000,
                                            0xc0000: 0x80400040,
                                            0xd0000: 0x1040,
                                            0xe0000: 0x1000,
                                            0xf0000: 0x80401040,
                                            0x8000: 0x80001040,
                                            0x18000: 0x40,
                                            0x28000: 0x80400040,
                                            0x38000: 0x80001000,
                                            0x48000: 0x401000,
                                            0x58000: 0x80401040,
                                            0x68000: 0x0,
                                            0x78000: 0x80400000,
                                            0x88000: 0x1000,
                                            0x98000: 0x80401000,
                                            0xa8000: 0x400000,
                                            0xb8000: 0x1040,
                                            0xc8000: 0x80000000,
                                            0xd8000: 0x400040,
                                            0xe8000: 0x401040,
                                            0xf8000: 0x80000040,
                                            0x100000: 0x400040,
                                            0x110000: 0x401000,
                                            0x120000: 0x80000040,
                                            0x130000: 0x0,
                                            0x140000: 0x1040,
                                            0x150000: 0x80400040,
                                            0x160000: 0x80401000,
                                            0x170000: 0x80001040,
                                            0x180000: 0x80401040,
                                            0x190000: 0x80000000,
                                            0x1a0000: 0x80400000,
                                            0x1b0000: 0x401040,
                                            0x1c0000: 0x80001000,
                                            0x1d0000: 0x400000,
                                            0x1e0000: 0x40,
                                            0x1f0000: 0x1000,
                                            0x108000: 0x80400000,
                                            0x118000: 0x80401040,
                                            0x128000: 0x0,
                                            0x138000: 0x401000,
                                            0x148000: 0x400040,
                                            0x158000: 0x80000000,
                                            0x168000: 0x80001040,
                                            0x178000: 0x40,
                                            0x188000: 0x80000040,
                                            0x198000: 0x1000,
                                            0x1a8000: 0x80001000,
                                            0x1b8000: 0x80400040,
                                            0x1c8000: 0x1040,
                                            0x1d8000: 0x80401000,
                                            0x1e8000: 0x400000,
                                            0x1f8000: 0x401040
                                        },
                                        {
                                            0x0: 0x80,
                                            0x1000: 0x1040000,
                                            0x2000: 0x40000,
                                            0x3000: 0x20000000,
                                            0x4000: 0x20040080,
                                            0x5000: 0x1000080,
                                            0x6000: 0x21000080,
                                            0x7000: 0x40080,
                                            0x8000: 0x1000000,
                                            0x9000: 0x20040000,
                                            0xa000: 0x20000080,
                                            0xb000: 0x21040080,
                                            0xc000: 0x21040000,
                                            0xd000: 0x0,
                                            0xe000: 0x1040080,
                                            0xf000: 0x21000000,
                                            0x800: 0x1040080,
                                            0x1800: 0x21000080,
                                            0x2800: 0x80,
                                            0x3800: 0x1040000,
                                            0x4800: 0x40000,
                                            0x5800: 0x20040080,
                                            0x6800: 0x21040000,
                                            0x7800: 0x20000000,
                                            0x8800: 0x20040000,
                                            0x9800: 0x0,
                                            0xa800: 0x21040080,
                                            0xb800: 0x1000080,
                                            0xc800: 0x20000080,
                                            0xd800: 0x21000000,
                                            0xe800: 0x1000000,
                                            0xf800: 0x40080,
                                            0x10000: 0x40000,
                                            0x11000: 0x80,
                                            0x12000: 0x20000000,
                                            0x13000: 0x21000080,
                                            0x14000: 0x1000080,
                                            0x15000: 0x21040000,
                                            0x16000: 0x20040080,
                                            0x17000: 0x1000000,
                                            0x18000: 0x21040080,
                                            0x19000: 0x21000000,
                                            0x1a000: 0x1040000,
                                            0x1b000: 0x20040000,
                                            0x1c000: 0x40080,
                                            0x1d000: 0x20000080,
                                            0x1e000: 0x0,
                                            0x1f000: 0x1040080,
                                            0x10800: 0x21000080,
                                            0x11800: 0x1000000,
                                            0x12800: 0x1040000,
                                            0x13800: 0x20040080,
                                            0x14800: 0x20000000,
                                            0x15800: 0x1040080,
                                            0x16800: 0x80,
                                            0x17800: 0x21040000,
                                            0x18800: 0x40080,
                                            0x19800: 0x21040080,
                                            0x1a800: 0x0,
                                            0x1b800: 0x21000000,
                                            0x1c800: 0x1000080,
                                            0x1d800: 0x40000,
                                            0x1e800: 0x20040000,
                                            0x1f800: 0x20000080
                                        },
                                        {
                                            0x0: 0x10000008,
                                            0x100: 0x2000,
                                            0x200: 0x10200000,
                                            0x300: 0x10202008,
                                            0x400: 0x10002000,
                                            0x500: 0x200000,
                                            0x600: 0x200008,
                                            0x700: 0x10000000,
                                            0x800: 0x0,
                                            0x900: 0x10002008,
                                            0xa00: 0x202000,
                                            0xb00: 0x8,
                                            0xc00: 0x10200008,
                                            0xd00: 0x202008,
                                            0xe00: 0x2008,
                                            0xf00: 0x10202000,
                                            0x80: 0x10200000,
                                            0x180: 0x10202008,
                                            0x280: 0x8,
                                            0x380: 0x200000,
                                            0x480: 0x202008,
                                            0x580: 0x10000008,
                                            0x680: 0x10002000,
                                            0x780: 0x2008,
                                            0x880: 0x200008,
                                            0x980: 0x2000,
                                            0xa80: 0x10002008,
                                            0xb80: 0x10200008,
                                            0xc80: 0x0,
                                            0xd80: 0x10202000,
                                            0xe80: 0x202000,
                                            0xf80: 0x10000000,
                                            0x1000: 0x10002000,
                                            0x1100: 0x10200008,
                                            0x1200: 0x10202008,
                                            0x1300: 0x2008,
                                            0x1400: 0x200000,
                                            0x1500: 0x10000000,
                                            0x1600: 0x10000008,
                                            0x1700: 0x202000,
                                            0x1800: 0x202008,
                                            0x1900: 0x0,
                                            0x1a00: 0x8,
                                            0x1b00: 0x10200000,
                                            0x1c00: 0x2000,
                                            0x1d00: 0x10002008,
                                            0x1e00: 0x10202000,
                                            0x1f00: 0x200008,
                                            0x1080: 0x8,
                                            0x1180: 0x202000,
                                            0x1280: 0x200000,
                                            0x1380: 0x10000008,
                                            0x1480: 0x10002000,
                                            0x1580: 0x2008,
                                            0x1680: 0x10202008,
                                            0x1780: 0x10200000,
                                            0x1880: 0x10202000,
                                            0x1980: 0x10200008,
                                            0x1a80: 0x2000,
                                            0x1b80: 0x202008,
                                            0x1c80: 0x200008,
                                            0x1d80: 0x0,
                                            0x1e80: 0x10000000,
                                            0x1f80: 0x10002008
                                        },
                                        {
                                            0x0: 0x100000,
                                            0x10: 0x2000401,
                                            0x20: 0x400,
                                            0x30: 0x100401,
                                            0x40: 0x2100401,
                                            0x50: 0x0,
                                            0x60: 0x1,
                                            0x70: 0x2100001,
                                            0x80: 0x2000400,
                                            0x90: 0x100001,
                                            0xa0: 0x2000001,
                                            0xb0: 0x2100400,
                                            0xc0: 0x2100000,
                                            0xd0: 0x401,
                                            0xe0: 0x100400,
                                            0xf0: 0x2000000,
                                            0x8: 0x2100001,
                                            0x18: 0x0,
                                            0x28: 0x2000401,
                                            0x38: 0x2100400,
                                            0x48: 0x100000,
                                            0x58: 0x2000001,
                                            0x68: 0x2000000,
                                            0x78: 0x401,
                                            0x88: 0x100401,
                                            0x98: 0x2000400,
                                            0xa8: 0x2100000,
                                            0xb8: 0x100001,
                                            0xc8: 0x400,
                                            0xd8: 0x2100401,
                                            0xe8: 0x1,
                                            0xf8: 0x100400,
                                            0x100: 0x2000000,
                                            0x110: 0x100000,
                                            0x120: 0x2000401,
                                            0x130: 0x2100001,
                                            0x140: 0x100001,
                                            0x150: 0x2000400,
                                            0x160: 0x2100400,
                                            0x170: 0x100401,
                                            0x180: 0x401,
                                            0x190: 0x2100401,
                                            0x1a0: 0x100400,
                                            0x1b0: 0x1,
                                            0x1c0: 0x0,
                                            0x1d0: 0x2100000,
                                            0x1e0: 0x2000001,
                                            0x1f0: 0x400,
                                            0x108: 0x100400,
                                            0x118: 0x2000401,
                                            0x128: 0x2100001,
                                            0x138: 0x1,
                                            0x148: 0x2000000,
                                            0x158: 0x100000,
                                            0x168: 0x401,
                                            0x178: 0x2100400,
                                            0x188: 0x2000001,
                                            0x198: 0x2100000,
                                            0x1a8: 0x0,
                                            0x1b8: 0x2100401,
                                            0x1c8: 0x100401,
                                            0x1d8: 0x400,
                                            0x1e8: 0x2000400,
                                            0x1f8: 0x100001
                                        },
                                        {
                                            0x0: 0x8000820,
                                            0x1: 0x20000,
                                            0x2: 0x8000000,
                                            0x3: 0x20,
                                            0x4: 0x20020,
                                            0x5: 0x8020820,
                                            0x6: 0x8020800,
                                            0x7: 0x800,
                                            0x8: 0x8020000,
                                            0x9: 0x8000800,
                                            0xa: 0x20800,
                                            0xb: 0x8020020,
                                            0xc: 0x820,
                                            0xd: 0x0,
                                            0xe: 0x8000020,
                                            0xf: 0x20820,
                                            0x80000000: 0x800,
                                            0x80000001: 0x8020820,
                                            0x80000002: 0x8000820,
                                            0x80000003: 0x8000000,
                                            0x80000004: 0x8020000,
                                            0x80000005: 0x20800,
                                            0x80000006: 0x20820,
                                            0x80000007: 0x20,
                                            0x80000008: 0x8000020,
                                            0x80000009: 0x820,
                                            0x8000000a: 0x20020,
                                            0x8000000b: 0x8020800,
                                            0x8000000c: 0x0,
                                            0x8000000d: 0x8020020,
                                            0x8000000e: 0x8000800,
                                            0x8000000f: 0x20000,
                                            0x10: 0x20820,
                                            0x11: 0x8020800,
                                            0x12: 0x20,
                                            0x13: 0x800,
                                            0x14: 0x8000800,
                                            0x15: 0x8000020,
                                            0x16: 0x8020020,
                                            0x17: 0x20000,
                                            0x18: 0x0,
                                            0x19: 0x20020,
                                            0x1a: 0x8020000,
                                            0x1b: 0x8000820,
                                            0x1c: 0x8020820,
                                            0x1d: 0x20800,
                                            0x1e: 0x820,
                                            0x1f: 0x8000000,
                                            0x80000010: 0x20000,
                                            0x80000011: 0x800,
                                            0x80000012: 0x8020020,
                                            0x80000013: 0x20820,
                                            0x80000014: 0x20,
                                            0x80000015: 0x8020000,
                                            0x80000016: 0x8000000,
                                            0x80000017: 0x8000820,
                                            0x80000018: 0x8020820,
                                            0x80000019: 0x8000020,
                                            0x8000001a: 0x8000800,
                                            0x8000001b: 0x0,
                                            0x8000001c: 0x20800,
                                            0x8000001d: 0x820,
                                            0x8000001e: 0x20020,
                                            0x8000001f: 0x8020800
                                        }
                                    ];

                                    // Masks that select the SBOX input
                                    var SBOX_MASK = [
                                        0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000,
                                        0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f
                                    ];

                                    /**
                                     * DES block cipher algorithm.
                                     */
                                    var DES = C_algo.DES = BlockCipher.extend({
                                        _doReset: function () {
                                            // Shortcuts
                                            var key = this._key;
                                            var keyWords = key.words;

                                            // Select 56 bits according to PC1
                                            var keyBits = [];
                                            for (var i = 0; i < 56; i++) {
                                                var keyBitPos = PC1[i] - 1;
                                                keyBits[i] = (keyWords[keyBitPos >>> 5] >>> (31 - keyBitPos % 32)) & 1;
                                            }

                                            // Assemble 16 subkeys
                                            var subKeys = this._subKeys = [];
                                            for (var nSubKey = 0; nSubKey < 16; nSubKey++) {
                                                // Create subkey
                                                var subKey = subKeys[nSubKey] = [];

                                                // Shortcut
                                                var bitShift = BIT_SHIFTS[nSubKey];

                                                // Select 48 bits according to PC2
                                                for (var i = 0; i < 24; i++) {
                                                    // Select from the left 28 key bits
                                                    subKey[(i / 6) | 0] |= keyBits[((PC2[i] - 1) + bitShift) % 28] << (31 - i % 6);

                                                    // Select from the right 28 key bits
                                                    subKey[4 + ((i / 6) | 0)] |= keyBits[28 + (((PC2[i + 24] - 1) + bitShift) % 28)] << (31 - i % 6);
                                                }

                                                // Since each subkey is applied to an expanded 32-bit input,
                                                // the subkey can be broken into 8 values scaled to 32-bits,
                                                // which allows the key to be used without expansion
                                                subKey[0] = (subKey[0] << 1) | (subKey[0] >>> 31);
                                                for (var i = 1; i < 7; i++) {
                                                    subKey[i] = subKey[i] >>> ((i - 1) * 4 + 3);
                                                }
                                                subKey[7] = (subKey[7] << 5) | (subKey[7] >>> 27);
                                            }

                                            // Compute inverse subkeys
                                            var invSubKeys = this._invSubKeys = [];
                                            for (var i = 0; i < 16; i++) {
                                                invSubKeys[i] = subKeys[15 - i];
                                            }
                                        },

                                        encryptBlock: function (M, offset) {
                                            this._doCryptBlock(M, offset, this._subKeys);
                                        },

                                        decryptBlock: function (M, offset) {
                                            this._doCryptBlock(M, offset, this._invSubKeys);
                                        },

                                        _doCryptBlock: function (M, offset, subKeys) {
                                            // Get input
                                            this._lBlock = M[offset];
                                            this._rBlock = M[offset + 1];

                                            // Initial permutation
                                            exchangeLR.call(this, 4, 0x0f0f0f0f);
                                            exchangeLR.call(this, 16, 0x0000ffff);
                                            exchangeRL.call(this, 2, 0x33333333);
                                            exchangeRL.call(this, 8, 0x00ff00ff);
                                            exchangeLR.call(this, 1, 0x55555555);

                                            // Rounds
                                            for (var round = 0; round < 16; round++) {
                                                // Shortcuts
                                                var subKey = subKeys[round];
                                                var lBlock = this._lBlock;
                                                var rBlock = this._rBlock;

                                                // Feistel function
                                                var f = 0;
                                                for (var i = 0; i < 8; i++) {
                                                    f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];
                                                }
                                                this._lBlock = rBlock;
                                                this._rBlock = lBlock ^ f;
                                            }

                                            // Undo swap from last round
                                            var t = this._lBlock;
                                            this._lBlock = this._rBlock;
                                            this._rBlock = t;

                                            // Final permutation
                                            exchangeLR.call(this, 1, 0x55555555);
                                            exchangeRL.call(this, 8, 0x00ff00ff);
                                            exchangeRL.call(this, 2, 0x33333333);
                                            exchangeLR.call(this, 16, 0x0000ffff);
                                            exchangeLR.call(this, 4, 0x0f0f0f0f);

                                            // Set output
                                            M[offset] = this._lBlock;
                                            M[offset + 1] = this._rBlock;
                                        },

                                        keySize: 64 / 32,

                                        ivSize: 64 / 32,

                                        blockSize: 64 / 32
                                    });

                                    // Swap bits across the left and right words
                                    function exchangeLR(offset, mask) {
                                        var t = ((this._lBlock >>> offset) ^ this._rBlock) & mask;
                                        this._rBlock ^= t;
                                        this._lBlock ^= t << offset;
                                    }

                                    function exchangeRL(offset, mask) {
                                        var t = ((this._rBlock >>> offset) ^ this._lBlock) & mask;
                                        this._lBlock ^= t;
                                        this._rBlock ^= t << offset;
                                    }

                                    /**
                                     * Shortcut functions to the cipher's object interface.
                                     *
                                     * @example
                                     *
                                     *     var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);
                                     *     var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);
                                     */
                                    C.DES = BlockCipher._createHelper(DES);

                                    /**
                                     * Triple-DES block cipher algorithm.
                                     */
                                    var TripleDES = C_algo.TripleDES = BlockCipher.extend({
                                        _doReset: function () {
                                            // Shortcuts
                                            var key = this._key;
                                            var keyWords = key.words;

                                            // Create DES instances
                                            this._des1 = DES.createEncryptor(WordArray.create(keyWords.slice(0, 2)));
                                            this._des2 = DES.createEncryptor(WordArray.create(keyWords.slice(2, 4)));
                                            this._des3 = DES.createEncryptor(WordArray.create(keyWords.slice(4, 6)));
                                        },

                                        encryptBlock: function (M, offset) {
                                            this._des1.encryptBlock(M, offset);
                                            this._des2.decryptBlock(M, offset);
                                            this._des3.encryptBlock(M, offset);
                                        },

                                        decryptBlock: function (M, offset) {
                                            this._des3.decryptBlock(M, offset);
                                            this._des2.encryptBlock(M, offset);
                                            this._des1.decryptBlock(M, offset);
                                        },

                                        keySize: 192 / 32,

                                        ivSize: 64 / 32,

                                        blockSize: 64 / 32
                                    });

                                    /**
                                     * Shortcut functions to the cipher's object interface.
                                     *
                                     * @example
                                     *
                                     *     var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);
                                     *     var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);
                                     */
                                    C.TripleDES = BlockCipher._createHelper(TripleDES);
                                }());


                                return CryptoJS.TripleDES;

                            }));
                        }, {"./cipher-core": 74, "./core": 75, "./enc-base64": 76, "./evpkdf": 78, "./md5": 83}],
                        106: [function (require, module, exports) {
                            ;(function (root, factory) {
                                if (typeof exports === "object") {
                                    // CommonJS
                                    module.exports = exports = factory(require("./core"));
                                }
                                else if (typeof define === "function" && define.amd) {
                                    // AMD
                                    define(["./core"], factory);
                                }
                                else {
                                    // Global (browser)
                                    factory(root.CryptoJS);
                                }
                            }(this, function (CryptoJS) {

                                (function (undefined) {
                                    // Shortcuts
                                    var C = CryptoJS;
                                    var C_lib = C.lib;
                                    var Base = C_lib.Base;
                                    var X32WordArray = C_lib.WordArray;

                                    /**
                                     * x64 namespace.
                                     */
                                    var C_x64 = C.x64 = {};

                                    /**
                                     * A 64-bit word.
                                     */
                                    var X64Word = C_x64.Word = Base.extend({
                                        /**
                                         * Initializes a newly created 64-bit word.
                                         *
                                         * @param {number} high The high 32 bits.
                                         * @param {number} low The low 32 bits.
                                         *
                                         * @example
                                         *
                                         *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);
                                         */
                                        init: function (high, low) {
                                            this.high = high;
                                            this.low = low;
                                        }

                                        /**
                                         * Bitwise NOTs this word.
                                         *
                                         * @return {X64Word} A new x64-Word object after negating.
                                         *
                                         * @example
                                         *
                                         *     var negated = x64Word.not();
                                         */
                                        // not: function () {
                                        // var high = ~this.high;
                                        // var low = ~this.low;

                                        // return X64Word.create(high, low);
                                        // },

                                        /**
                                         * Bitwise ANDs this word with the passed word.
                                         *
                                         * @param {X64Word} word The x64-Word to AND with this word.
                                         *
                                         * @return {X64Word} A new x64-Word object after ANDing.
                                         *
                                         * @example
                                         *
                                         *     var anded = x64Word.and(anotherX64Word);
                                         */
                                        // and: function (word) {
                                        // var high = this.high & word.high;
                                        // var low = this.low & word.low;

                                        // return X64Word.create(high, low);
                                        // },

                                        /**
                                         * Bitwise ORs this word with the passed word.
                                         *
                                         * @param {X64Word} word The x64-Word to OR with this word.
                                         *
                                         * @return {X64Word} A new x64-Word object after ORing.
                                         *
                                         * @example
                                         *
                                         *     var ored = x64Word.or(anotherX64Word);
                                         */
                                        // or: function (word) {
                                        // var high = this.high | word.high;
                                        // var low = this.low | word.low;

                                        // return X64Word.create(high, low);
                                        // },

                                        /**
                                         * Bitwise XORs this word with the passed word.
                                         *
                                         * @param {X64Word} word The x64-Word to XOR with this word.
                                         *
                                         * @return {X64Word} A new x64-Word object after XORing.
                                         *
                                         * @example
                                         *
                                         *     var xored = x64Word.xor(anotherX64Word);
                                         */
                                        // xor: function (word) {
                                        // var high = this.high ^ word.high;
                                        // var low = this.low ^ word.low;

                                        // return X64Word.create(high, low);
                                        // },

                                        /**
                                         * Shifts this word n bits to the left.
                                         *
                                         * @param {number} n The number of bits to shift.
                                         *
                                         * @return {X64Word} A new x64-Word object after shifting.
                                         *
                                         * @example
                                         *
                                         *     var shifted = x64Word.shiftL(25);
                                         */
                                        // shiftL: function (n) {
                                        // if (n < 32) {
                                        // var high = (this.high << n) | (this.low >>> (32 - n));
                                        // var low = this.low << n;
                                        // } else {
                                        // var high = this.low << (n - 32);
                                        // var low = 0;
                                        // }

                                        // return X64Word.create(high, low);
                                        // },

                                        /**
                                         * Shifts this word n bits to the right.
                                         *
                                         * @param {number} n The number of bits to shift.
                                         *
                                         * @return {X64Word} A new x64-Word object after shifting.
                                         *
                                         * @example
                                         *
                                         *     var shifted = x64Word.shiftR(7);
                                         */
                                        // shiftR: function (n) {
                                        // if (n < 32) {
                                        // var low = (this.low >>> n) | (this.high << (32 - n));
                                        // var high = this.high >>> n;
                                        // } else {
                                        // var low = this.high >>> (n - 32);
                                        // var high = 0;
                                        // }

                                        // return X64Word.create(high, low);
                                        // },

                                        /**
                                         * Rotates this word n bits to the left.
                                         *
                                         * @param {number} n The number of bits to rotate.
                                         *
                                         * @return {X64Word} A new x64-Word object after rotating.
                                         *
                                         * @example
                                         *
                                         *     var rotated = x64Word.rotL(25);
                                         */
                                        // rotL: function (n) {
                                        // return this.shiftL(n).or(this.shiftR(64 - n));
                                        // },

                                        /**
                                         * Rotates this word n bits to the right.
                                         *
                                         * @param {number} n The number of bits to rotate.
                                         *
                                         * @return {X64Word} A new x64-Word object after rotating.
                                         *
                                         * @example
                                         *
                                         *     var rotated = x64Word.rotR(7);
                                         */
                                        // rotR: function (n) {
                                        // return this.shiftR(n).or(this.shiftL(64 - n));
                                        // },

                                        /**
                                         * Adds this word with the passed word.
                                         *
                                         * @param {X64Word} word The x64-Word to add with this word.
                                         *
                                         * @return {X64Word} A new x64-Word object after adding.
                                         *
                                         * @example
                                         *
                                         *     var added = x64Word.add(anotherX64Word);
                                         */
                                        // add: function (word) {
                                        // var low = (this.low + word.low) | 0;
                                        // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;
                                        // var high = (this.high + word.high + carry) | 0;

                                        // return X64Word.create(high, low);
                                        // }
                                    });

                                    /**
                                     * An array of 64-bit words.
                                     *
                                     * @property {Array} words The array of CryptoJS.x64.Word objects.
                                     * @property {number} sigBytes The number of significant bytes in this word array.
                                     */
                                    var X64WordArray = C_x64.WordArray = Base.extend({
                                        /**
                                         * Initializes a newly created word array.
                                         *
                                         * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.
                                         * @param {number} sigBytes (Optional) The number of significant bytes in the words.
                                         *
                                         * @example
                                         *
                                         *     var wordArray = CryptoJS.x64.WordArray.create();
                                         *
                                         *     var wordArray = CryptoJS.x64.WordArray.create([
                                         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
                                         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
                                         *     ]);
                                         *
                                         *     var wordArray = CryptoJS.x64.WordArray.create([
                                         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
                                         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
                                         *     ], 10);
                                         */
                                        init: function (words, sigBytes) {
                                            words = this.words = words || [];

                                            if (sigBytes != undefined) {
                                                this.sigBytes = sigBytes;
                                            } else {
                                                this.sigBytes = words.length * 8;
                                            }
                                        },

                                        /**
                                         * Converts this 64-bit word array to a 32-bit word array.
                                         *
                                         * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.
                                         *
                                         * @example
                                         *
                                         *     var x32WordArray = x64WordArray.toX32();
                                         */
                                        toX32: function () {
                                            // Shortcuts
                                            var x64Words = this.words;
                                            var x64WordsLength = x64Words.length;

                                            // Convert
                                            var x32Words = [];
                                            for (var i = 0; i < x64WordsLength; i++) {
                                                var x64Word = x64Words[i];
                                                x32Words.push(x64Word.high);
                                                x32Words.push(x64Word.low);
                                            }

                                            return X32WordArray.create(x32Words, this.sigBytes);
                                        },

                                        /**
                                         * Creates a copy of this word array.
                                         *
                                         * @return {X64WordArray} The clone.
                                         *
                                         * @example
                                         *
                                         *     var clone = x64WordArray.clone();
                                         */
                                        clone: function () {
                                            var clone = Base.clone.call(this);

                                            // Clone "words" array
                                            var words = clone.words = this.words.slice(0);

                                            // Clone each X64Word object
                                            var wordsLength = words.length;
                                            for (var i = 0; i < wordsLength; i++) {
                                                words[i] = words[i].clone();
                                            }

                                            return clone;
                                        }
                                    });
                                }());


                                return CryptoJS;

                            }));
                        }, {"./core": 75}],
                        107: [function (require, module, exports) {
                            'use strict';

                            exports.utils = require('./des/utils');
                            exports.Cipher = require('./des/cipher');
                            exports.DES = require('./des/des');
                            exports.CBC = require('./des/cbc');
                            exports.EDE = require('./des/ede');

                        }, {
                            "./des/cbc": 108,
                            "./des/cipher": 109,
                            "./des/des": 110,
                            "./des/ede": 111,
                            "./des/utils": 112
                        }],
                        108: [function (require, module, exports) {
                            'use strict';

                            var assert = require('minimalistic-assert');
                            var inherits = require('inherits');

                            var proto = {};

                            function CBCState(iv) {
                                assert.equal(iv.length, 8, 'Invalid IV length');

                                this.iv = new Array(8);
                                for (var i = 0; i < this.iv.length; i++)
                                    this.iv[i] = iv[i];
                            }

                            function instantiate(Base) {
                                function CBC(options) {
                                    Base.call(this, options);
                                    this._cbcInit();
                                }

                                inherits(CBC, Base);

                                var keys = Object.keys(proto);
                                for (var i = 0; i < keys.length; i++) {
                                    var key = keys[i];
                                    CBC.prototype[key] = proto[key];
                                }

                                CBC.create = function create(options) {
                                    return new CBC(options);
                                };

                                return CBC;
                            }

                            exports.instantiate = instantiate;

                            proto._cbcInit = function _cbcInit() {
                                var state = new CBCState(this.options.iv);
                                this._cbcState = state;
                            };

                            proto._update = function _update(inp, inOff, out, outOff) {
                                var state = this._cbcState;
                                var superProto = this.constructor.super_.prototype;

                                var iv = state.iv;
                                if (this.type === 'encrypt') {
                                    for (var i = 0; i < this.blockSize; i++)
                                        iv[i] ^= inp[inOff + i];

                                    superProto._update.call(this, iv, 0, out, outOff);

                                    for (var i = 0; i < this.blockSize; i++)
                                        iv[i] = out[outOff + i];
                                } else {
                                    superProto._update.call(this, inp, inOff, out, outOff);

                                    for (var i = 0; i < this.blockSize; i++)
                                        out[outOff + i] ^= iv[i];

                                    for (var i = 0; i < this.blockSize; i++)
                                        iv[i] = inp[inOff + i];
                                }
                            };

                        }, {"inherits": 150, "minimalistic-assert": 155}],
                        109: [function (require, module, exports) {
                            'use strict';

                            var assert = require('minimalistic-assert');

                            function Cipher(options) {
                                this.options = options;

                                this.type = this.options.type;
                                this.blockSize = 8;
                                this._init();

                                this.buffer = new Array(this.blockSize);
                                this.bufferOff = 0;
                            }

                            module.exports = Cipher;

                            Cipher.prototype._init = function _init() {
                                // Might be overrided
                            };

                            Cipher.prototype.update = function update(data) {
                                if (data.length === 0)
                                    return [];

                                if (this.type === 'decrypt')
                                    return this._updateDecrypt(data);
                                else
                                    return this._updateEncrypt(data);
                            };

                            Cipher.prototype._buffer = function _buffer(data, off) {
                                // Append data to buffer
                                var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
                                for (var i = 0; i < min; i++)
                                    this.buffer[this.bufferOff + i] = data[off + i];
                                this.bufferOff += min;

                                // Shift next
                                return min;
                            };

                            Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
                                this._update(this.buffer, 0, out, off);
                                this.bufferOff = 0;
                                return this.blockSize;
                            };

                            Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
                                var inputOff = 0;
                                var outputOff = 0;

                                var count = ((this.bufferOff + data.length) / this.blockSize) | 0;
                                var out = new Array(count * this.blockSize);

                                if (this.bufferOff !== 0) {
                                    inputOff += this._buffer(data, inputOff);

                                    if (this.bufferOff === this.buffer.length)
                                        outputOff += this._flushBuffer(out, outputOff);
                                }

                                // Write blocks
                                var max = data.length - ((data.length - inputOff) % this.blockSize);
                                for (; inputOff < max; inputOff += this.blockSize) {
                                    this._update(data, inputOff, out, outputOff);
                                    outputOff += this.blockSize;
                                }

                                // Queue rest
                                for (; inputOff < data.length; inputOff++, this.bufferOff++)
                                    this.buffer[this.bufferOff] = data[inputOff];

                                return out;
                            };

                            Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
                                var inputOff = 0;
                                var outputOff = 0;

                                var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
                                var out = new Array(count * this.blockSize);

                                // TODO(indutny): optimize it, this is far from optimal
                                for (; count > 0; count--) {
                                    inputOff += this._buffer(data, inputOff);
                                    outputOff += this._flushBuffer(out, outputOff);
                                }

                                // Buffer rest of the input
                                inputOff += this._buffer(data, inputOff);

                                return out;
                            };

                            Cipher.prototype.final = function final(buffer) {
                                var first;
                                if (buffer)
                                    first = this.update(buffer);

                                var last;
                                if (this.type === 'encrypt')
                                    last = this._finalEncrypt();
                                else
                                    last = this._finalDecrypt();

                                if (first)
                                    return first.concat(last);
                                else
                                    return last;
                            };

                            Cipher.prototype._pad = function _pad(buffer, off) {
                                if (off === 0)
                                    return false;

                                while (off < buffer.length)
                                    buffer[off++] = 0;

                                return true;
                            };

                            Cipher.prototype._finalEncrypt = function _finalEncrypt() {
                                if (!this._pad(this.buffer, this.bufferOff))
                                    return [];

                                var out = new Array(this.blockSize);
                                this._update(this.buffer, 0, out, 0);
                                return out;
                            };

                            Cipher.prototype._unpad = function _unpad(buffer) {
                                return buffer;
                            };

                            Cipher.prototype._finalDecrypt = function _finalDecrypt() {
                                assert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
                                var out = new Array(this.blockSize);
                                this._flushBuffer(out, 0);

                                return this._unpad(out);
                            };

                        }, {"minimalistic-assert": 155}],
                        110: [function (require, module, exports) {
                            'use strict';

                            var assert = require('minimalistic-assert');
                            var inherits = require('inherits');

                            var des = require('../des');
                            var utils = des.utils;
                            var Cipher = des.Cipher;

                            function DESState() {
                                this.tmp = new Array(2);
                                this.keys = null;
                            }

                            function DES(options) {
                                Cipher.call(this, options);

                                var state = new DESState();
                                this._desState = state;

                                this.deriveKeys(state, options.key);
                            }

                            inherits(DES, Cipher);
                            module.exports = DES;

                            DES.create = function create(options) {
                                return new DES(options);
                            };

                            var shiftTable = [
                                1, 1, 2, 2, 2, 2, 2, 2,
                                1, 2, 2, 2, 2, 2, 2, 1
                            ];

                            DES.prototype.deriveKeys = function deriveKeys(state, key) {
                                state.keys = new Array(16 * 2);

                                assert.equal(key.length, this.blockSize, 'Invalid key length');

                                var kL = utils.readUInt32BE(key, 0);
                                var kR = utils.readUInt32BE(key, 4);

                                utils.pc1(kL, kR, state.tmp, 0);
                                kL = state.tmp[0];
                                kR = state.tmp[1];
                                for (var i = 0; i < state.keys.length; i += 2) {
                                    var shift = shiftTable[i >>> 1];
                                    kL = utils.r28shl(kL, shift);
                                    kR = utils.r28shl(kR, shift);
                                    utils.pc2(kL, kR, state.keys, i);
                                }
                            };

                            DES.prototype._update = function _update(inp, inOff, out, outOff) {
                                var state = this._desState;

                                var l = utils.readUInt32BE(inp, inOff);
                                var r = utils.readUInt32BE(inp, inOff + 4);

                                // Initial Permutation
                                utils.ip(l, r, state.tmp, 0);
                                l = state.tmp[0];
                                r = state.tmp[1];

                                if (this.type === 'encrypt')
                                    this._encrypt(state, l, r, state.tmp, 0);
                                else
                                    this._decrypt(state, l, r, state.tmp, 0);

                                l = state.tmp[0];
                                r = state.tmp[1];

                                utils.writeUInt32BE(out, l, outOff);
                                utils.writeUInt32BE(out, r, outOff + 4);
                            };

                            DES.prototype._pad = function _pad(buffer, off) {
                                var value = buffer.length - off;
                                for (var i = off; i < buffer.length; i++)
                                    buffer[i] = value;

                                return true;
                            };

                            DES.prototype._unpad = function _unpad(buffer) {
                                var pad = buffer[buffer.length - 1];
                                for (var i = buffer.length - pad; i < buffer.length; i++)
                                    assert.equal(buffer[i], pad);

                                return buffer.slice(0, buffer.length - pad);
                            };

                            DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
                                var l = lStart;
                                var r = rStart;

                                // Apply f() x16 times
                                for (var i = 0; i < state.keys.length; i += 2) {
                                    var keyL = state.keys[i];
                                    var keyR = state.keys[i + 1];

                                    // f(r, k)
                                    utils.expand(r, state.tmp, 0);

                                    keyL ^= state.tmp[0];
                                    keyR ^= state.tmp[1];
                                    var s = utils.substitute(keyL, keyR);
                                    var f = utils.permute(s);

                                    var t = r;
                                    r = (l ^ f) >>> 0;
                                    l = t;
                                }

                                // Reverse Initial Permutation
                                utils.rip(r, l, out, off);
                            };

                            DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
                                var l = rStart;
                                var r = lStart;

                                // Apply f() x16 times
                                for (var i = state.keys.length - 2; i >= 0; i -= 2) {
                                    var keyL = state.keys[i];
                                    var keyR = state.keys[i + 1];

                                    // f(r, k)
                                    utils.expand(l, state.tmp, 0);

                                    keyL ^= state.tmp[0];
                                    keyR ^= state.tmp[1];
                                    var s = utils.substitute(keyL, keyR);
                                    var f = utils.permute(s);

                                    var t = l;
                                    l = (r ^ f) >>> 0;
                                    r = t;
                                }

                                // Reverse Initial Permutation
                                utils.rip(l, r, out, off);
                            };

                        }, {"../des": 107, "inherits": 150, "minimalistic-assert": 155}],
                        111: [function (require, module, exports) {
                            'use strict';

                            var assert = require('minimalistic-assert');
                            var inherits = require('inherits');

                            var des = require('../des');
                            var Cipher = des.Cipher;
                            var DES = des.DES;

                            function EDEState(type, key) {
                                assert.equal(key.length, 24, 'Invalid key length');

                                var k1 = key.slice(0, 8);
                                var k2 = key.slice(8, 16);
                                var k3 = key.slice(16, 24);

                                if (type === 'encrypt') {
                                    this.ciphers = [
                                        DES.create({type: 'encrypt', key: k1}),
                                        DES.create({type: 'decrypt', key: k2}),
                                        DES.create({type: 'encrypt', key: k3})
                                    ];
                                } else {
                                    this.ciphers = [
                                        DES.create({type: 'decrypt', key: k3}),
                                        DES.create({type: 'encrypt', key: k2}),
                                        DES.create({type: 'decrypt', key: k1})
                                    ];
                                }
                            }

                            function EDE(options) {
                                Cipher.call(this, options);

                                var state = new EDEState(this.type, this.options.key);
                                this._edeState = state;
                            }

                            inherits(EDE, Cipher);

                            module.exports = EDE;

                            EDE.create = function create(options) {
                                return new EDE(options);
                            };

                            EDE.prototype._update = function _update(inp, inOff, out, outOff) {
                                var state = this._edeState;

                                state.ciphers[0]._update(inp, inOff, out, outOff);
                                state.ciphers[1]._update(out, outOff, out, outOff);
                                state.ciphers[2]._update(out, outOff, out, outOff);
                            };

                            EDE.prototype._pad = DES.prototype._pad;
                            EDE.prototype._unpad = DES.prototype._unpad;

                        }, {"../des": 107, "inherits": 150, "minimalistic-assert": 155}],
                        112: [function (require, module, exports) {
                            'use strict';

                            exports.readUInt32BE = function readUInt32BE(bytes, off) {
                                var res = (bytes[0 + off] << 24) |
                                    (bytes[1 + off] << 16) |
                                    (bytes[2 + off] << 8) |
                                    bytes[3 + off];
                                return res >>> 0;
                            };

                            exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
                                bytes[0 + off] = value >>> 24;
                                bytes[1 + off] = (value >>> 16) & 0xff;
                                bytes[2 + off] = (value >>> 8) & 0xff;
                                bytes[3 + off] = value & 0xff;
                            };

                            exports.ip = function ip(inL, inR, out, off) {
                                var outL = 0;
                                var outR = 0;

                                for (var i = 6; i >= 0; i -= 2) {
                                    for (var j = 0; j <= 24; j += 8) {
                                        outL <<= 1;
                                        outL |= (inR >>> (j + i)) & 1;
                                    }
                                    for (var j = 0; j <= 24; j += 8) {
                                        outL <<= 1;
                                        outL |= (inL >>> (j + i)) & 1;
                                    }
                                }

                                for (var i = 6; i >= 0; i -= 2) {
                                    for (var j = 1; j <= 25; j += 8) {
                                        outR <<= 1;
                                        outR |= (inR >>> (j + i)) & 1;
                                    }
                                    for (var j = 1; j <= 25; j += 8) {
                                        outR <<= 1;
                                        outR |= (inL >>> (j + i)) & 1;
                                    }
                                }

                                out[off + 0] = outL >>> 0;
                                out[off + 1] = outR >>> 0;
                            };

                            exports.rip = function rip(inL, inR, out, off) {
                                var outL = 0;
                                var outR = 0;

                                for (var i = 0; i < 4; i++) {
                                    for (var j = 24; j >= 0; j -= 8) {
                                        outL <<= 1;
                                        outL |= (inR >>> (j + i)) & 1;
                                        outL <<= 1;
                                        outL |= (inL >>> (j + i)) & 1;
                                    }
                                }
                                for (var i = 4; i < 8; i++) {
                                    for (var j = 24; j >= 0; j -= 8) {
                                        outR <<= 1;
                                        outR |= (inR >>> (j + i)) & 1;
                                        outR <<= 1;
                                        outR |= (inL >>> (j + i)) & 1;
                                    }
                                }

                                out[off + 0] = outL >>> 0;
                                out[off + 1] = outR >>> 0;
                            };

                            exports.pc1 = function pc1(inL, inR, out, off) {
                                var outL = 0;
                                var outR = 0;

                                // 7, 15, 23, 31, 39, 47, 55, 63
                                // 6, 14, 22, 30, 39, 47, 55, 63
                                // 5, 13, 21, 29, 39, 47, 55, 63
                                // 4, 12, 20, 28
                                for (var i = 7; i >= 5; i--) {
                                    for (var j = 0; j <= 24; j += 8) {
                                        outL <<= 1;
                                        outL |= (inR >> (j + i)) & 1;
                                    }
                                    for (var j = 0; j <= 24; j += 8) {
                                        outL <<= 1;
                                        outL |= (inL >> (j + i)) & 1;
                                    }
                                }
                                for (var j = 0; j <= 24; j += 8) {
                                    outL <<= 1;
                                    outL |= (inR >> (j + i)) & 1;
                                }

                                // 1, 9, 17, 25, 33, 41, 49, 57
                                // 2, 10, 18, 26, 34, 42, 50, 58
                                // 3, 11, 19, 27, 35, 43, 51, 59
                                // 36, 44, 52, 60
                                for (var i = 1; i <= 3; i++) {
                                    for (var j = 0; j <= 24; j += 8) {
                                        outR <<= 1;
                                        outR |= (inR >> (j + i)) & 1;
                                    }
                                    for (var j = 0; j <= 24; j += 8) {
                                        outR <<= 1;
                                        outR |= (inL >> (j + i)) & 1;
                                    }
                                }
                                for (var j = 0; j <= 24; j += 8) {
                                    outR <<= 1;
                                    outR |= (inL >> (j + i)) & 1;
                                }

                                out[off + 0] = outL >>> 0;
                                out[off + 1] = outR >>> 0;
                            };

                            exports.r28shl = function r28shl(num, shift) {
                                return ((num << shift) & 0xfffffff) | (num >>> (28 - shift));
                            };

                            var pc2table = [
                                // inL => outL
                                14, 11, 17, 4, 27, 23, 25, 0,
                                13, 22, 7, 18, 5, 9, 16, 24,
                                2, 20, 12, 21, 1, 8, 15, 26,

                                // inR => outR
                                15, 4, 25, 19, 9, 1, 26, 16,
                                5, 11, 23, 8, 12, 7, 17, 0,
                                22, 3, 10, 14, 6, 20, 27, 24
                            ];

                            exports.pc2 = function pc2(inL, inR, out, off) {
                                var outL = 0;
                                var outR = 0;

                                var len = pc2table.length >>> 1;
                                for (var i = 0; i < len; i++) {
                                    outL <<= 1;
                                    outL |= (inL >>> pc2table[i]) & 0x1;
                                }
                                for (var i = len; i < pc2table.length; i++) {
                                    outR <<= 1;
                                    outR |= (inR >>> pc2table[i]) & 0x1;
                                }

                                out[off + 0] = outL >>> 0;
                                out[off + 1] = outR >>> 0;
                            };

                            exports.expand = function expand(r, out, off) {
                                var outL = 0;
                                var outR = 0;

                                outL = ((r & 1) << 5) | (r >>> 27);
                                for (var i = 23; i >= 15; i -= 4) {
                                    outL <<= 6;
                                    outL |= (r >>> i) & 0x3f;
                                }
                                for (var i = 11; i >= 3; i -= 4) {
                                    outR |= (r >>> i) & 0x3f;
                                    outR <<= 6;
                                }
                                outR |= ((r & 0x1f) << 1) | (r >>> 31);

                                out[off + 0] = outL >>> 0;
                                out[off + 1] = outR >>> 0;
                            };

                            var sTable = [
                                14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1,
                                3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8,
                                4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7,
                                15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13,

                                15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14,
                                9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5,
                                0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2,
                                5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9,

                                10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10,
                                1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1,
                                13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7,
                                11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12,

                                7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3,
                                1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9,
                                10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8,
                                15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14,

                                2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1,
                                8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6,
                                4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13,
                                15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3,

                                12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5,
                                0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8,
                                9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10,
                                7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13,

                                4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10,
                                3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6,
                                1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7,
                                10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12,

                                13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4,
                                10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2,
                                7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13,
                                0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11
                            ];

                            exports.substitute = function substitute(inL, inR) {
                                var out = 0;
                                for (var i = 0; i < 4; i++) {
                                    var b = (inL >>> (18 - i * 6)) & 0x3f;
                                    var sb = sTable[i * 0x40 + b];

                                    out <<= 4;
                                    out |= sb;
                                }
                                for (var i = 0; i < 4; i++) {
                                    var b = (inR >>> (18 - i * 6)) & 0x3f;
                                    var sb = sTable[4 * 0x40 + i * 0x40 + b];

                                    out <<= 4;
                                    out |= sb;
                                }
                                return out >>> 0;
                            };

                            var permuteTable = [
                                16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22,
                                30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7
                            ];

                            exports.permute = function permute(num) {
                                var out = 0;
                                for (var i = 0; i < permuteTable.length; i++) {
                                    out <<= 1;
                                    out |= (num >>> permuteTable[i]) & 0x1;
                                }
                                return out >>> 0;
                            };

                            exports.padSplit = function padSplit(num, size, group) {
                                var str = num.toString(2);
                                while (str.length < size)
                                    str = '0' + str;

                                var out = [];
                                for (var i = 0; i < size; i += group)
                                    out.push(str.slice(i, i + group));
                                return out.join(' ');
                            };

                        }, {}],
                        113: [function (require, module, exports) {
                            (function (Buffer) {
                                var generatePrime = require('./lib/generatePrime')
                                var primes = require('./lib/primes.json')

                                var DH = require('./lib/dh')

                                function getDiffieHellman(mod) {
                                    var prime = new Buffer(primes[mod].prime, 'hex')
                                    var gen = new Buffer(primes[mod].gen, 'hex')

                                    return new DH(prime, gen)
                                }

                                var ENCODINGS = {
                                    'binary': true, 'hex': true, 'base64': true
                                }

                                function createDiffieHellman(prime, enc, generator, genc) {
                                    if (Buffer.isBuffer(enc) || ENCODINGS[enc] === undefined) {
                                        return createDiffieHellman(prime, 'binary', enc, generator)
                                    }

                                    enc = enc || 'binary'
                                    genc = genc || 'binary'
                                    generator = generator || new Buffer([2])

                                    if (!Buffer.isBuffer(generator)) {
                                        generator = new Buffer(generator, genc)
                                    }

                                    if (typeof prime === 'number') {
                                        return new DH(generatePrime(prime, generator), generator, true)
                                    }

                                    if (!Buffer.isBuffer(prime)) {
                                        prime = new Buffer(prime, enc)
                                    }

                                    return new DH(prime, generator, true)
                                }

                                exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman
                                exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman

                            }).call(this, require("buffer").Buffer)
                        }, {"./lib/dh": 114, "./lib/generatePrime": 115, "./lib/primes.json": 116, "buffer": 64}],
                        114: [function (require, module, exports) {
                            (function (Buffer) {
                                var BN = require('bn.js');
                                var MillerRabin = require('miller-rabin');
                                var millerRabin = new MillerRabin();
                                var TWENTYFOUR = new BN(24);
                                var ELEVEN = new BN(11);
                                var TEN = new BN(10);
                                var THREE = new BN(3);
                                var SEVEN = new BN(7);
                                var primes = require('./generatePrime');
                                var randomBytes = require('randombytes');
                                module.exports = DH;

                                function setPublicKey(pub, enc) {
                                    enc = enc || 'utf8';
                                    if (!Buffer.isBuffer(pub)) {
                                        pub = new Buffer(pub, enc);
                                    }
                                    this._pub = new BN(pub);
                                    return this;
                                }

                                function setPrivateKey(priv, enc) {
                                    enc = enc || 'utf8';
                                    if (!Buffer.isBuffer(priv)) {
                                        priv = new Buffer(priv, enc);
                                    }
                                    this._priv = new BN(priv);
                                    return this;
                                }

                                var primeCache = {};

                                function checkPrime(prime, generator) {
                                    var gen = generator.toString('hex');
                                    var hex = [gen, prime.toString(16)].join('_');
                                    if (hex in primeCache) {
                                        return primeCache[hex];
                                    }
                                    var error = 0;

                                    if (prime.isEven() ||
                                        !primes.simpleSieve ||
                                        !primes.fermatTest(prime) ||
                                        !millerRabin.test(prime)) {
                                        //not a prime so +1
                                        error += 1;

                                        if (gen === '02' || gen === '05') {
                                            // we'd be able to check the generator
                                            // it would fail so +8
                                            error += 8;
                                        } else {
                                            //we wouldn't be able to test the generator
                                            // so +4
                                            error += 4;
                                        }
                                        primeCache[hex] = error;
                                        return error;
                                    }
                                    if (!millerRabin.test(prime.shrn(1))) {
                                        //not a safe prime
                                        error += 2;
                                    }
                                    var rem;
                                    switch (gen) {
                                        case '02':
                                            if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
                                                // unsuidable generator
                                                error += 8;
                                            }
                                            break;
                                        case '05':
                                            rem = prime.mod(TEN);
                                            if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
                                                // prime mod 10 needs to equal 3 or 7
                                                error += 8;
                                            }
                                            break;
                                        default:
                                            error += 4;
                                    }
                                    primeCache[hex] = error;
                                    return error;
                                }

                                function DH(prime, generator, malleable) {
                                    this.setGenerator(generator);
                                    this.__prime = new BN(prime);
                                    this._prime = BN.mont(this.__prime);
                                    this._primeLen = prime.length;
                                    this._pub = undefined;
                                    this._priv = undefined;
                                    this._primeCode = undefined;
                                    if (malleable) {
                                        this.setPublicKey = setPublicKey;
                                        this.setPrivateKey = setPrivateKey;
                                    } else {
                                        this._primeCode = 8;
                                    }
                                }

                                Object.defineProperty(DH.prototype, 'verifyError', {
                                    enumerable: true,
                                    get: function () {
                                        if (typeof this._primeCode !== 'number') {
                                            this._primeCode = checkPrime(this.__prime, this.__gen);
                                        }
                                        return this._primeCode;
                                    }
                                });
                                DH.prototype.generateKeys = function () {
                                    if (!this._priv) {
                                        this._priv = new BN(randomBytes(this._primeLen));
                                    }
                                    this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
                                    return this.getPublicKey();
                                };

                                DH.prototype.computeSecret = function (other) {
                                    other = new BN(other);
                                    other = other.toRed(this._prime);
                                    var secret = other.redPow(this._priv).fromRed();
                                    var out = new Buffer(secret.toArray());
                                    var prime = this.getPrime();
                                    if (out.length < prime.length) {
                                        var front = new Buffer(prime.length - out.length);
                                        front.fill(0);
                                        out = Buffer.concat([front, out]);
                                    }
                                    return out;
                                };

                                DH.prototype.getPublicKey = function getPublicKey(enc) {
                                    return formatReturnValue(this._pub, enc);
                                };

                                DH.prototype.getPrivateKey = function getPrivateKey(enc) {
                                    return formatReturnValue(this._priv, enc);
                                };

                                DH.prototype.getPrime = function (enc) {
                                    return formatReturnValue(this.__prime, enc);
                                };

                                DH.prototype.getGenerator = function (enc) {
                                    return formatReturnValue(this._gen, enc);
                                };

                                DH.prototype.setGenerator = function (gen, enc) {
                                    enc = enc || 'utf8';
                                    if (!Buffer.isBuffer(gen)) {
                                        gen = new Buffer(gen, enc);
                                    }
                                    this.__gen = gen;
                                    this._gen = new BN(gen);
                                    return this;
                                };

                                function formatReturnValue(bn, enc) {
                                    var buf = new Buffer(bn.toArray());
                                    if (!enc) {
                                        return buf;
                                    } else {
                                        return buf.toString(enc);
                                    }
                                }

                            }).call(this, require("buffer").Buffer)
                        }, {
                            "./generatePrime": 115,
                            "bn.js": 33,
                            "buffer": 64,
                            "miller-rabin": 154,
                            "randombytes": 175
                        }],
                        115: [function (require, module, exports) {
                            var randomBytes = require('randombytes');
                            module.exports = findPrime;
                            findPrime.simpleSieve = simpleSieve;
                            findPrime.fermatTest = fermatTest;
                            var BN = require('bn.js');
                            var TWENTYFOUR = new BN(24);
                            var MillerRabin = require('miller-rabin');
                            var millerRabin = new MillerRabin();
                            var ONE = new BN(1);
                            var TWO = new BN(2);
                            var FIVE = new BN(5);
                            var SIXTEEN = new BN(16);
                            var EIGHT = new BN(8);
                            var TEN = new BN(10);
                            var THREE = new BN(3);
                            var SEVEN = new BN(7);
                            var ELEVEN = new BN(11);
                            var FOUR = new BN(4);
                            var TWELVE = new BN(12);
                            var primes = null;

                            function _getPrimes() {
                                if (primes !== null)
                                    return primes;

                                var limit = 0x100000;
                                var res = [];
                                res[0] = 2;
                                for (var i = 1, k = 3; k < limit; k += 2) {
                                    var sqrt = Math.ceil(Math.sqrt(k));
                                    for (var j = 0; j < i && res[j] <= sqrt; j++)
                                        if (k % res[j] === 0)
                                            break;

                                    if (i !== j && res[j] <= sqrt)
                                        continue;

                                    res[i++] = k;
                                }
                                primes = res;
                                return res;
                            }

                            function simpleSieve(p) {
                                var primes = _getPrimes();

                                for (var i = 0; i < primes.length; i++)
                                    if (p.modn(primes[i]) === 0) {
                                        if (p.cmpn(primes[i]) === 0) {
                                            return true;
                                        } else {
                                            return false;
                                        }
                                    }

                                return true;
                            }

                            function fermatTest(p) {
                                var red = BN.mont(p);
                                return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
                            }

                            function findPrime(bits, gen) {
                                if (bits < 16) {
                                    // this is what openssl does
                                    if (gen === 2 || gen === 5) {
                                        return new BN([0x8c, 0x7b]);
                                    } else {
                                        return new BN([0x8c, 0x27]);
                                    }
                                }
                                gen = new BN(gen);

                                var num, n2;

                                while (true) {
                                    num = new BN(randomBytes(Math.ceil(bits / 8)));
                                    while (num.bitLength() > bits) {
                                        num.ishrn(1);
                                    }
                                    if (num.isEven()) {
                                        num.iadd(ONE);
                                    }
                                    if (!num.testn(1)) {
                                        num.iadd(TWO);
                                    }
                                    if (!gen.cmp(TWO)) {
                                        while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {
                                            num.iadd(FOUR);
                                        }
                                    } else if (!gen.cmp(FIVE)) {
                                        while (num.mod(TEN).cmp(THREE)) {
                                            num.iadd(FOUR);
                                        }
                                    }
                                    n2 = num.shrn(1);
                                    if (simpleSieve(n2) && simpleSieve(num) &&
                                        fermatTest(n2) && fermatTest(num) &&
                                        millerRabin.test(n2) && millerRabin.test(num)) {
                                        return num;
                                    }
                                }

                            }

                        }, {"bn.js": 33, "miller-rabin": 154, "randombytes": 175}],
                        116: [function (require, module, exports) {
                            module.exports = {
                                "modp1": {
                                    "gen": "02",
                                    "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
                                },
                                "modp2": {
                                    "gen": "02",
                                    "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
                                },
                                "modp5": {
                                    "gen": "02",
                                    "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
                                },
                                "modp14": {
                                    "gen": "02",
                                    "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
                                },
                                "modp15": {
                                    "gen": "02",
                                    "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
                                },
                                "modp16": {
                                    "gen": "02",
                                    "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
                                },
                                "modp17": {
                                    "gen": "02",
                                    "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
                                },
                                "modp18": {
                                    "gen": "02",
                                    "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
                                }
                            }
                        }, {}],
                        117: [function (require, module, exports) {
                            'use strict';

                            var elliptic = exports;

                            elliptic.version = require('../package.json').version;
                            elliptic.utils = require('./elliptic/utils');
                            elliptic.rand = require('brorand');
                            elliptic.curve = require('./elliptic/curve');
                            elliptic.curves = require('./elliptic/curves');

// Protocols
                            elliptic.ec = require('./elliptic/ec');
                            elliptic.eddsa = require('./elliptic/eddsa');

                        }, {
                            "../package.json": 132,
                            "./elliptic/curve": 120,
                            "./elliptic/curves": 123,
                            "./elliptic/ec": 124,
                            "./elliptic/eddsa": 127,
                            "./elliptic/utils": 131,
                            "brorand": 34
                        }],
                        118: [function (require, module, exports) {
                            'use strict';

                            var BN = require('bn.js');
                            var elliptic = require('../../elliptic');
                            var utils = elliptic.utils;
                            var getNAF = utils.getNAF;
                            var getJSF = utils.getJSF;
                            var assert = utils.assert;

                            function BaseCurve(type, conf) {
                                this.type = type;
                                this.p = new BN(conf.p, 16);

                                // Use Montgomery, when there is no fast reduction for the prime
                                this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);

                                // Useful for many curves
                                this.zero = new BN(0).toRed(this.red);
                                this.one = new BN(1).toRed(this.red);
                                this.two = new BN(2).toRed(this.red);

                                // Curve configuration, optional
                                this.n = conf.n && new BN(conf.n, 16);
                                this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

                                // Temporary arrays
                                this._wnafT1 = new Array(4);
                                this._wnafT2 = new Array(4);
                                this._wnafT3 = new Array(4);
                                this._wnafT4 = new Array(4);

                                // Generalized Greg Maxwell's trick
                                var adjustCount = this.n && this.p.div(this.n);
                                if (!adjustCount || adjustCount.cmpn(100) > 0) {
                                    this.redN = null;
                                } else {
                                    this._maxwellTrick = true;
                                    this.redN = this.n.toRed(this.red);
                                }
                            }

                            module.exports = BaseCurve;

                            BaseCurve.prototype.point = function point() {
                                throw new Error('Not implemented');
                            };

                            BaseCurve.prototype.validate = function validate() {
                                throw new Error('Not implemented');
                            };

                            BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
                                assert(p.precomputed);
                                var doubles = p._getDoubles();

                                var naf = getNAF(k, 1);
                                var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
                                I /= 3;

                                // Translate into more windowed form
                                var repr = [];
                                for (var j = 0; j < naf.length; j += doubles.step) {
                                    var nafW = 0;
                                    for (var k = j + doubles.step - 1; k >= j; k--)
                                        nafW = (nafW << 1) + naf[k];
                                    repr.push(nafW);
                                }

                                var a = this.jpoint(null, null, null);
                                var b = this.jpoint(null, null, null);
                                for (var i = I; i > 0; i--) {
                                    for (var j = 0; j < repr.length; j++) {
                                        var nafW = repr[j];
                                        if (nafW === i)
                                            b = b.mixedAdd(doubles.points[j]);
                                        else if (nafW === -i)
                                            b = b.mixedAdd(doubles.points[j].neg());
                                    }
                                    a = a.add(b);
                                }
                                return a.toP();
                            };

                            BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
                                var w = 4;

                                // Precompute window
                                var nafPoints = p._getNAFPoints(w);
                                w = nafPoints.wnd;
                                var wnd = nafPoints.points;

                                // Get NAF form
                                var naf = getNAF(k, w);

                                // Add `this`*(N+1) for every w-NAF index
                                var acc = this.jpoint(null, null, null);
                                for (var i = naf.length - 1; i >= 0; i--) {
                                    // Count zeroes
                                    for (var k = 0; i >= 0 && naf[i] === 0; i--)
                                        k++;
                                    if (i >= 0)
                                        k++;
                                    acc = acc.dblp(k);

                                    if (i < 0)
                                        break;
                                    var z = naf[i];
                                    assert(z !== 0);
                                    if (p.type === 'affine') {
                                        // J +- P
                                        if (z > 0)
                                            acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
                                        else
                                            acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
                                    } else {
                                        // J +- J
                                        if (z > 0)
                                            acc = acc.add(wnd[(z - 1) >> 1]);
                                        else
                                            acc = acc.add(wnd[(-z - 1) >> 1].neg());
                                    }
                                }
                                return p.type === 'affine' ? acc.toP() : acc;
                            };

                            BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
                                                                                   points,
                                                                                   coeffs,
                                                                                   len,
                                                                                   jacobianResult) {
                                var wndWidth = this._wnafT1;
                                var wnd = this._wnafT2;
                                var naf = this._wnafT3;

                                // Fill all arrays
                                var max = 0;
                                for (var i = 0; i < len; i++) {
                                    var p = points[i];
                                    var nafPoints = p._getNAFPoints(defW);
                                    wndWidth[i] = nafPoints.wnd;
                                    wnd[i] = nafPoints.points;
                                }

                                // Comb small window NAFs
                                for (var i = len - 1; i >= 1; i -= 2) {
                                    var a = i - 1;
                                    var b = i;
                                    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
                                        naf[a] = getNAF(coeffs[a], wndWidth[a]);
                                        naf[b] = getNAF(coeffs[b], wndWidth[b]);
                                        max = Math.max(naf[a].length, max);
                                        max = Math.max(naf[b].length, max);
                                        continue;
                                    }

                                    var comb = [
                                        points[a], /* 1 */
                                        null, /* 3 */
                                        null, /* 5 */
                                        points[b] /* 7 */
                                    ];

                                    // Try to avoid Projective points, if possible
                                    if (points[a].y.cmp(points[b].y) === 0) {
                                        comb[1] = points[a].add(points[b]);
                                        comb[2] = points[a].toJ().mixedAdd(points[b].neg());
                                    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
                                        comb[1] = points[a].toJ().mixedAdd(points[b]);
                                        comb[2] = points[a].add(points[b].neg());
                                    } else {
                                        comb[1] = points[a].toJ().mixedAdd(points[b]);
                                        comb[2] = points[a].toJ().mixedAdd(points[b].neg());
                                    }

                                    var index = [
                                        -3, /* -1 -1 */
                                        -1, /* -1 0 */
                                        -5, /* -1 1 */
                                        -7, /* 0 -1 */
                                        0, /* 0 0 */
                                        7, /* 0 1 */
                                        5, /* 1 -1 */
                                        1, /* 1 0 */
                                        3  /* 1 1 */
                                    ];

                                    var jsf = getJSF(coeffs[a], coeffs[b]);
                                    max = Math.max(jsf[0].length, max);
                                    naf[a] = new Array(max);
                                    naf[b] = new Array(max);
                                    for (var j = 0; j < max; j++) {
                                        var ja = jsf[0][j] | 0;
                                        var jb = jsf[1][j] | 0;

                                        naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
                                        naf[b][j] = 0;
                                        wnd[a] = comb;
                                    }
                                }

                                var acc = this.jpoint(null, null, null);
                                var tmp = this._wnafT4;
                                for (var i = max; i >= 0; i--) {
                                    var k = 0;

                                    while (i >= 0) {
                                        var zero = true;
                                        for (var j = 0; j < len; j++) {
                                            tmp[j] = naf[j][i] | 0;
                                            if (tmp[j] !== 0)
                                                zero = false;
                                        }
                                        if (!zero)
                                            break;
                                        k++;
                                        i--;
                                    }
                                    if (i >= 0)
                                        k++;
                                    acc = acc.dblp(k);
                                    if (i < 0)
                                        break;

                                    for (var j = 0; j < len; j++) {
                                        var z = tmp[j];
                                        var p;
                                        if (z === 0)
                                            continue;
                                        else if (z > 0)
                                            p = wnd[j][(z - 1) >> 1];
                                        else if (z < 0)
                                            p = wnd[j][(-z - 1) >> 1].neg();

                                        if (p.type === 'affine')
                                            acc = acc.mixedAdd(p);
                                        else
                                            acc = acc.add(p);
                                    }
                                }
                                // Zeroify references
                                for (var i = 0; i < len; i++)
                                    wnd[i] = null;

                                if (jacobianResult)
                                    return acc;
                                else
                                    return acc.toP();
                            };

                            function BasePoint(curve, type) {
                                this.curve = curve;
                                this.type = type;
                                this.precomputed = null;
                            }

                            BaseCurve.BasePoint = BasePoint;

                            BasePoint.prototype.eq = function eq(/*other*/) {
                                throw new Error('Not implemented');
                            };

                            BasePoint.prototype.validate = function validate() {
                                return this.curve.validate(this);
                            };

                            BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
                                bytes = utils.toArray(bytes, enc);

                                var len = this.p.byteLength();

                                // uncompressed, hybrid-odd, hybrid-even
                                if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
                                    bytes.length - 1 === 2 * len) {
                                    if (bytes[0] === 0x06)
                                        assert(bytes[bytes.length - 1] % 2 === 0);
                                    else if (bytes[0] === 0x07)
                                        assert(bytes[bytes.length - 1] % 2 === 1);

                                    var res = this.point(bytes.slice(1, 1 + len),
                                        bytes.slice(1 + len, 1 + 2 * len));

                                    return res;
                                } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
                                    bytes.length - 1 === len) {
                                    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
                                }
                                throw new Error('Unknown point format');
                            };

                            BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
                                return this.encode(enc, true);
                            };

                            BasePoint.prototype._encode = function _encode(compact) {
                                var len = this.curve.p.byteLength();
                                var x = this.getX().toArray('be', len);

                                if (compact)
                                    return [this.getY().isEven() ? 0x02 : 0x03].concat(x);

                                return [0x04].concat(x, this.getY().toArray('be', len));
                            };

                            BasePoint.prototype.encode = function encode(enc, compact) {
                                return utils.encode(this._encode(compact), enc);
                            };

                            BasePoint.prototype.precompute = function precompute(power) {
                                if (this.precomputed)
                                    return this;

                                var precomputed = {
                                    doubles: null,
                                    naf: null,
                                    beta: null
                                };
                                precomputed.naf = this._getNAFPoints(8);
                                precomputed.doubles = this._getDoubles(4, power);
                                precomputed.beta = this._getBeta();
                                this.precomputed = precomputed;

                                return this;
                            };

                            BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
                                if (!this.precomputed)
                                    return false;

                                var doubles = this.precomputed.doubles;
                                if (!doubles)
                                    return false;

                                return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
                            };

                            BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
                                if (this.precomputed && this.precomputed.doubles)
                                    return this.precomputed.doubles;

                                var doubles = [this];
                                var acc = this;
                                for (var i = 0; i < power; i += step) {
                                    for (var j = 0; j < step; j++)
                                        acc = acc.dbl();
                                    doubles.push(acc);
                                }
                                return {
                                    step: step,
                                    points: doubles
                                };
                            };

                            BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
                                if (this.precomputed && this.precomputed.naf)
                                    return this.precomputed.naf;

                                var res = [this];
                                var max = (1 << wnd) - 1;
                                var dbl = max === 1 ? null : this.dbl();
                                for (var i = 1; i < max; i++)
                                    res[i] = res[i - 1].add(dbl);
                                return {
                                    wnd: wnd,
                                    points: res
                                };
                            };

                            BasePoint.prototype._getBeta = function _getBeta() {
                                return null;
                            };

                            BasePoint.prototype.dblp = function dblp(k) {
                                var r = this;
                                for (var i = 0; i < k; i++)
                                    r = r.dbl();
                                return r;
                            };

                        }, {"../../elliptic": 117, "bn.js": 33}],
                        119: [function (require, module, exports) {
                            'use strict';

                            var curve = require('../curve');
                            var elliptic = require('../../elliptic');
                            var BN = require('bn.js');
                            var inherits = require('inherits');
                            var Base = curve.base;

                            var assert = elliptic.utils.assert;

                            function EdwardsCurve(conf) {
                                // NOTE: Important as we are creating point in Base.call()
                                this.twisted = (conf.a | 0) !== 1;
                                this.mOneA = this.twisted && (conf.a | 0) === -1;
                                this.extended = this.mOneA;

                                Base.call(this, 'edwards', conf);

                                this.a = new BN(conf.a, 16).umod(this.red.m);
                                this.a = this.a.toRed(this.red);
                                this.c = new BN(conf.c, 16).toRed(this.red);
                                this.c2 = this.c.redSqr();
                                this.d = new BN(conf.d, 16).toRed(this.red);
                                this.dd = this.d.redAdd(this.d);

                                assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
                                this.oneC = (conf.c | 0) === 1;
                            }

                            inherits(EdwardsCurve, Base);
                            module.exports = EdwardsCurve;

                            EdwardsCurve.prototype._mulA = function _mulA(num) {
                                if (this.mOneA)
                                    return num.redNeg();
                                else
                                    return this.a.redMul(num);
                            };

                            EdwardsCurve.prototype._mulC = function _mulC(num) {
                                if (this.oneC)
                                    return num;
                                else
                                    return this.c.redMul(num);
                            };

// Just for compatibility with Short curve
                            EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
                                return this.point(x, y, z, t);
                            };

                            EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
                                x = new BN(x, 16);
                                if (!x.red)
                                    x = x.toRed(this.red);

                                var x2 = x.redSqr();
                                var rhs = this.c2.redSub(this.a.redMul(x2));
                                var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

                                var y2 = rhs.redMul(lhs.redInvm());
                                var y = y2.redSqrt();
                                if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
                                    throw new Error('invalid point');

                                var isOdd = y.fromRed().isOdd();
                                if (odd && !isOdd || !odd && isOdd)
                                    y = y.redNeg();

                                return this.point(x, y);
                            };

                            EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
                                y = new BN(y, 16);
                                if (!y.red)
                                    y = y.toRed(this.red);

                                // x^2 = (y^2 - 1) / (d y^2 + 1)
                                var y2 = y.redSqr();
                                var lhs = y2.redSub(this.one);
                                var rhs = y2.redMul(this.d).redAdd(this.one);
                                var x2 = lhs.redMul(rhs.redInvm());

                                if (x2.cmp(this.zero) === 0) {
                                    if (odd)
                                        throw new Error('invalid point');
                                    else
                                        return this.point(this.zero, y);
                                }

                                var x = x2.redSqrt();
                                if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
                                    throw new Error('invalid point');

                                if (x.isOdd() !== odd)
                                    x = x.redNeg();

                                return this.point(x, y);
                            };

                            EdwardsCurve.prototype.validate = function validate(point) {
                                if (point.isInfinity())
                                    return true;

                                // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
                                point.normalize();

                                var x2 = point.x.redSqr();
                                var y2 = point.y.redSqr();
                                var lhs = x2.redMul(this.a).redAdd(y2);
                                var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

                                return lhs.cmp(rhs) === 0;
                            };

                            function Point(curve, x, y, z, t) {
                                Base.BasePoint.call(this, curve, 'projective');
                                if (x === null && y === null && z === null) {
                                    this.x = this.curve.zero;
                                    this.y = this.curve.one;
                                    this.z = this.curve.one;
                                    this.t = this.curve.zero;
                                    this.zOne = true;
                                } else {
                                    this.x = new BN(x, 16);
                                    this.y = new BN(y, 16);
                                    this.z = z ? new BN(z, 16) : this.curve.one;
                                    this.t = t && new BN(t, 16);
                                    if (!this.x.red)
                                        this.x = this.x.toRed(this.curve.red);
                                    if (!this.y.red)
                                        this.y = this.y.toRed(this.curve.red);
                                    if (!this.z.red)
                                        this.z = this.z.toRed(this.curve.red);
                                    if (this.t && !this.t.red)
                                        this.t = this.t.toRed(this.curve.red);
                                    this.zOne = this.z === this.curve.one;

                                    // Use extended coordinates
                                    if (this.curve.extended && !this.t) {
                                        this.t = this.x.redMul(this.y);
                                        if (!this.zOne)
                                            this.t = this.t.redMul(this.z.redInvm());
                                    }
                                }
                            }

                            inherits(Point, Base.BasePoint);

                            EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
                                return Point.fromJSON(this, obj);
                            };

                            EdwardsCurve.prototype.point = function point(x, y, z, t) {
                                return new Point(this, x, y, z, t);
                            };

                            Point.fromJSON = function fromJSON(curve, obj) {
                                return new Point(curve, obj[0], obj[1], obj[2]);
                            };

                            Point.prototype.inspect = function inspect() {
                                if (this.isInfinity())
                                    return '<EC Point Infinity>';
                                return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
                                    ' y: ' + this.y.fromRed().toString(16, 2) +
                                    ' z: ' + this.z.fromRed().toString(16, 2) + '>';
                            };

                            Point.prototype.isInfinity = function isInfinity() {
                                // XXX This code assumes that zero is always zero in red
                                return this.x.cmpn(0) === 0 &&
                                    this.y.cmp(this.z) === 0;
                            };

                            Point.prototype._extDbl = function _extDbl() {
                                // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
                                //     #doubling-dbl-2008-hwcd
                                // 4M + 4S

                                // A = X1^2
                                var a = this.x.redSqr();
                                // B = Y1^2
                                var b = this.y.redSqr();
                                // C = 2 * Z1^2
                                var c = this.z.redSqr();
                                c = c.redIAdd(c);
                                // D = a * A
                                var d = this.curve._mulA(a);
                                // E = (X1 + Y1)^2 - A - B
                                var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
                                // G = D + B
                                var g = d.redAdd(b);
                                // F = G - C
                                var f = g.redSub(c);
                                // H = D - B
                                var h = d.redSub(b);
                                // X3 = E * F
                                var nx = e.redMul(f);
                                // Y3 = G * H
                                var ny = g.redMul(h);
                                // T3 = E * H
                                var nt = e.redMul(h);
                                // Z3 = F * G
                                var nz = f.redMul(g);
                                return this.curve.point(nx, ny, nz, nt);
                            };

                            Point.prototype._projDbl = function _projDbl() {
                                // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
                                //     #doubling-dbl-2008-bbjlp
                                //     #doubling-dbl-2007-bl
                                // and others
                                // Generally 3M + 4S or 2M + 4S

                                // B = (X1 + Y1)^2
                                var b = this.x.redAdd(this.y).redSqr();
                                // C = X1^2
                                var c = this.x.redSqr();
                                // D = Y1^2
                                var d = this.y.redSqr();

                                var nx;
                                var ny;
                                var nz;
                                if (this.curve.twisted) {
                                    // E = a * C
                                    var e = this.curve._mulA(c);
                                    // F = E + D
                                    var f = e.redAdd(d);
                                    if (this.zOne) {
                                        // X3 = (B - C - D) * (F - 2)
                                        nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
                                        // Y3 = F * (E - D)
                                        ny = f.redMul(e.redSub(d));
                                        // Z3 = F^2 - 2 * F
                                        nz = f.redSqr().redSub(f).redSub(f);
                                    } else {
                                        // H = Z1^2
                                        var h = this.z.redSqr();
                                        // J = F - 2 * H
                                        var j = f.redSub(h).redISub(h);
                                        // X3 = (B-C-D)*J
                                        nx = b.redSub(c).redISub(d).redMul(j);
                                        // Y3 = F * (E - D)
                                        ny = f.redMul(e.redSub(d));
                                        // Z3 = F * J
                                        nz = f.redMul(j);
                                    }
                                } else {
                                    // E = C + D
                                    var e = c.redAdd(d);
                                    // H = (c * Z1)^2
                                    var h = this.curve._mulC(this.c.redMul(this.z)).redSqr();
                                    // J = E - 2 * H
                                    var j = e.redSub(h).redSub(h);
                                    // X3 = c * (B - E) * J
                                    nx = this.curve._mulC(b.redISub(e)).redMul(j);
                                    // Y3 = c * E * (C - D)
                                    ny = this.curve._mulC(e).redMul(c.redISub(d));
                                    // Z3 = E * J
                                    nz = e.redMul(j);
                                }
                                return this.curve.point(nx, ny, nz);
                            };

                            Point.prototype.dbl = function dbl() {
                                if (this.isInfinity())
                                    return this;

                                // Double in extended coordinates
                                if (this.curve.extended)
                                    return this._extDbl();
                                else
                                    return this._projDbl();
                            };

                            Point.prototype._extAdd = function _extAdd(p) {
                                // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
                                //     #addition-add-2008-hwcd-3
                                // 8M

                                // A = (Y1 - X1) * (Y2 - X2)
                                var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
                                // B = (Y1 + X1) * (Y2 + X2)
                                var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
                                // C = T1 * k * T2
                                var c = this.t.redMul(this.curve.dd).redMul(p.t);
                                // D = Z1 * 2 * Z2
                                var d = this.z.redMul(p.z.redAdd(p.z));
                                // E = B - A
                                var e = b.redSub(a);
                                // F = D - C
                                var f = d.redSub(c);
                                // G = D + C
                                var g = d.redAdd(c);
                                // H = B + A
                                var h = b.redAdd(a);
                                // X3 = E * F
                                var nx = e.redMul(f);
                                // Y3 = G * H
                                var ny = g.redMul(h);
                                // T3 = E * H
                                var nt = e.redMul(h);
                                // Z3 = F * G
                                var nz = f.redMul(g);
                                return this.curve.point(nx, ny, nz, nt);
                            };

                            Point.prototype._projAdd = function _projAdd(p) {
                                // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
                                //     #addition-add-2008-bbjlp
                                //     #addition-add-2007-bl
                                // 10M + 1S

                                // A = Z1 * Z2
                                var a = this.z.redMul(p.z);
                                // B = A^2
                                var b = a.redSqr();
                                // C = X1 * X2
                                var c = this.x.redMul(p.x);
                                // D = Y1 * Y2
                                var d = this.y.redMul(p.y);
                                // E = d * C * D
                                var e = this.curve.d.redMul(c).redMul(d);
                                // F = B - E
                                var f = b.redSub(e);
                                // G = B + E
                                var g = b.redAdd(e);
                                // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
                                var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
                                var nx = a.redMul(f).redMul(tmp);
                                var ny;
                                var nz;
                                if (this.curve.twisted) {
                                    // Y3 = A * G * (D - a * C)
                                    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
                                    // Z3 = F * G
                                    nz = f.redMul(g);
                                } else {
                                    // Y3 = A * G * (D - C)
                                    ny = a.redMul(g).redMul(d.redSub(c));
                                    // Z3 = c * F * G
                                    nz = this.curve._mulC(f).redMul(g);
                                }
                                return this.curve.point(nx, ny, nz);
                            };

                            Point.prototype.add = function add(p) {
                                if (this.isInfinity())
                                    return p;
                                if (p.isInfinity())
                                    return this;

                                if (this.curve.extended)
                                    return this._extAdd(p);
                                else
                                    return this._projAdd(p);
                            };

                            Point.prototype.mul = function mul(k) {
                                if (this._hasDoubles(k))
                                    return this.curve._fixedNafMul(this, k);
                                else
                                    return this.curve._wnafMul(this, k);
                            };

                            Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
                                return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, false);
                            };

                            Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
                                return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, true);
                            };

                            Point.prototype.normalize = function normalize() {
                                if (this.zOne)
                                    return this;

                                // Normalize coordinates
                                var zi = this.z.redInvm();
                                this.x = this.x.redMul(zi);
                                this.y = this.y.redMul(zi);
                                if (this.t)
                                    this.t = this.t.redMul(zi);
                                this.z = this.curve.one;
                                this.zOne = true;
                                return this;
                            };

                            Point.prototype.neg = function neg() {
                                return this.curve.point(this.x.redNeg(),
                                    this.y,
                                    this.z,
                                    this.t && this.t.redNeg());
                            };

                            Point.prototype.getX = function getX() {
                                this.normalize();
                                return this.x.fromRed();
                            };

                            Point.prototype.getY = function getY() {
                                this.normalize();
                                return this.y.fromRed();
                            };

                            Point.prototype.eq = function eq(other) {
                                return this === other ||
                                    this.getX().cmp(other.getX()) === 0 &&
                                    this.getY().cmp(other.getY()) === 0;
                            };

                            Point.prototype.eqXToP = function eqXToP(x) {
                                var rx = x.toRed(this.curve.red).redMul(this.z);
                                if (this.x.cmp(rx) === 0)
                                    return true;

                                var xc = x.clone();
                                var t = this.curve.redN.redMul(this.z);
                                for (; ;) {
                                    xc.iadd(this.curve.n);
                                    if (xc.cmp(this.curve.p) >= 0)
                                        return false;

                                    rx.redIAdd(t);
                                    if (this.x.cmp(rx) === 0)
                                        return true;
                                }
                                return false;
                            };

// Compatibility with BaseCurve
                            Point.prototype.toP = Point.prototype.normalize;
                            Point.prototype.mixedAdd = Point.prototype.add;

                        }, {"../../elliptic": 117, "../curve": 120, "bn.js": 33, "inherits": 150}],
                        120: [function (require, module, exports) {
                            'use strict';

                            var curve = exports;

                            curve.base = require('./base');
                            curve.short = require('./short');
                            curve.mont = require('./mont');
                            curve.edwards = require('./edwards');

                        }, {"./base": 118, "./edwards": 119, "./mont": 121, "./short": 122}],
                        121: [function (require, module, exports) {
                            'use strict';

                            var curve = require('../curve');
                            var BN = require('bn.js');
                            var inherits = require('inherits');
                            var Base = curve.base;

                            var elliptic = require('../../elliptic');
                            var utils = elliptic.utils;

                            function MontCurve(conf) {
                                Base.call(this, 'mont', conf);

                                this.a = new BN(conf.a, 16).toRed(this.red);
                                this.b = new BN(conf.b, 16).toRed(this.red);
                                this.i4 = new BN(4).toRed(this.red).redInvm();
                                this.two = new BN(2).toRed(this.red);
                                this.a24 = this.i4.redMul(this.a.redAdd(this.two));
                            }

                            inherits(MontCurve, Base);
                            module.exports = MontCurve;

                            MontCurve.prototype.validate = function validate(point) {
                                var x = point.normalize().x;
                                var x2 = x.redSqr();
                                var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
                                var y = rhs.redSqrt();

                                return y.redSqr().cmp(rhs) === 0;
                            };

                            function Point(curve, x, z) {
                                Base.BasePoint.call(this, curve, 'projective');
                                if (x === null && z === null) {
                                    this.x = this.curve.one;
                                    this.z = this.curve.zero;
                                } else {
                                    this.x = new BN(x, 16);
                                    this.z = new BN(z, 16);
                                    if (!this.x.red)
                                        this.x = this.x.toRed(this.curve.red);
                                    if (!this.z.red)
                                        this.z = this.z.toRed(this.curve.red);
                                }
                            }

                            inherits(Point, Base.BasePoint);

                            MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
                                return this.point(utils.toArray(bytes, enc), 1);
                            };

                            MontCurve.prototype.point = function point(x, z) {
                                return new Point(this, x, z);
                            };

                            MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
                                return Point.fromJSON(this, obj);
                            };

                            Point.prototype.precompute = function precompute() {
                                // No-op
                            };

                            Point.prototype._encode = function _encode() {
                                return this.getX().toArray('be', this.curve.p.byteLength());
                            };

                            Point.fromJSON = function fromJSON(curve, obj) {
                                return new Point(curve, obj[0], obj[1] || curve.one);
                            };

                            Point.prototype.inspect = function inspect() {
                                if (this.isInfinity())
                                    return '<EC Point Infinity>';
                                return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
                                    ' z: ' + this.z.fromRed().toString(16, 2) + '>';
                            };

                            Point.prototype.isInfinity = function isInfinity() {
                                // XXX This code assumes that zero is always zero in red
                                return this.z.cmpn(0) === 0;
                            };

                            Point.prototype.dbl = function dbl() {
                                // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
                                // 2M + 2S + 4A

                                // A = X1 + Z1
                                var a = this.x.redAdd(this.z);
                                // AA = A^2
                                var aa = a.redSqr();
                                // B = X1 - Z1
                                var b = this.x.redSub(this.z);
                                // BB = B^2
                                var bb = b.redSqr();
                                // C = AA - BB
                                var c = aa.redSub(bb);
                                // X3 = AA * BB
                                var nx = aa.redMul(bb);
                                // Z3 = C * (BB + A24 * C)
                                var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
                                return this.curve.point(nx, nz);
                            };

                            Point.prototype.add = function add() {
                                throw new Error('Not supported on Montgomery curve');
                            };

                            Point.prototype.diffAdd = function diffAdd(p, diff) {
                                // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
                                // 4M + 2S + 6A

                                // A = X2 + Z2
                                var a = this.x.redAdd(this.z);
                                // B = X2 - Z2
                                var b = this.x.redSub(this.z);
                                // C = X3 + Z3
                                var c = p.x.redAdd(p.z);
                                // D = X3 - Z3
                                var d = p.x.redSub(p.z);
                                // DA = D * A
                                var da = d.redMul(a);
                                // CB = C * B
                                var cb = c.redMul(b);
                                // X5 = Z1 * (DA + CB)^2
                                var nx = diff.z.redMul(da.redAdd(cb).redSqr());
                                // Z5 = X1 * (DA - CB)^2
                                var nz = diff.x.redMul(da.redISub(cb).redSqr());
                                return this.curve.point(nx, nz);
                            };

                            Point.prototype.mul = function mul(k) {
                                var t = k.clone();
                                var a = this; // (N / 2) * Q + Q
                                var b = this.curve.point(null, null); // (N / 2) * Q
                                var c = this; // Q

                                for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
                                    bits.push(t.andln(1));

                                for (var i = bits.length - 1; i >= 0; i--) {
                                    if (bits[i] === 0) {
                                        // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
                                        a = a.diffAdd(b, c);
                                        // N * Q = 2 * ((N / 2) * Q + Q))
                                        b = b.dbl();
                                    } else {
                                        // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
                                        b = a.diffAdd(b, c);
                                        // N * Q + Q = 2 * ((N / 2) * Q + Q)
                                        a = a.dbl();
                                    }
                                }
                                return b;
                            };

                            Point.prototype.mulAdd = function mulAdd() {
                                throw new Error('Not supported on Montgomery curve');
                            };

                            Point.prototype.jumlAdd = function jumlAdd() {
                                throw new Error('Not supported on Montgomery curve');
                            };

                            Point.prototype.eq = function eq(other) {
                                return this.getX().cmp(other.getX()) === 0;
                            };

                            Point.prototype.normalize = function normalize() {
                                this.x = this.x.redMul(this.z.redInvm());
                                this.z = this.curve.one;
                                return this;
                            };

                            Point.prototype.getX = function getX() {
                                // Normalize coordinates
                                this.normalize();

                                return this.x.fromRed();
                            };

                        }, {"../../elliptic": 117, "../curve": 120, "bn.js": 33, "inherits": 150}],
                        122: [function (require, module, exports) {
                            'use strict';

                            var curve = require('../curve');
                            var elliptic = require('../../elliptic');
                            var BN = require('bn.js');
                            var inherits = require('inherits');
                            var Base = curve.base;

                            var assert = elliptic.utils.assert;

                            function ShortCurve(conf) {
                                Base.call(this, 'short', conf);

                                this.a = new BN(conf.a, 16).toRed(this.red);
                                this.b = new BN(conf.b, 16).toRed(this.red);
                                this.tinv = this.two.redInvm();

                                this.zeroA = this.a.fromRed().cmpn(0) === 0;
                                this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

                                // If the curve is endomorphic, precalculate beta and lambda
                                this.endo = this._getEndomorphism(conf);
                                this._endoWnafT1 = new Array(4);
                                this._endoWnafT2 = new Array(4);
                            }

                            inherits(ShortCurve, Base);
                            module.exports = ShortCurve;

                            ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
                                // No efficient endomorphism
                                if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
                                    return;

                                // Compute beta and lambda, that lambda * P = (beta * Px; Py)
                                var beta;
                                var lambda;
                                if (conf.beta) {
                                    beta = new BN(conf.beta, 16).toRed(this.red);
                                } else {
                                    var betas = this._getEndoRoots(this.p);
                                    // Choose the smallest beta
                                    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
                                    beta = beta.toRed(this.red);
                                }
                                if (conf.lambda) {
                                    lambda = new BN(conf.lambda, 16);
                                } else {
                                    // Choose the lambda that is matching selected beta
                                    var lambdas = this._getEndoRoots(this.n);
                                    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
                                        lambda = lambdas[0];
                                    } else {
                                        lambda = lambdas[1];
                                        assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
                                    }
                                }

                                // Get basis vectors, used for balanced length-two representation
                                var basis;
                                if (conf.basis) {
                                    basis = conf.basis.map(function (vec) {
                                        return {
                                            a: new BN(vec.a, 16),
                                            b: new BN(vec.b, 16)
                                        };
                                    });
                                } else {
                                    basis = this._getEndoBasis(lambda);
                                }

                                return {
                                    beta: beta,
                                    lambda: lambda,
                                    basis: basis
                                };
                            };

                            ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
                                // Find roots of for x^2 + x + 1 in F
                                // Root = (-1 +- Sqrt(-3)) / 2
                                //
                                var red = num === this.p ? this.red : BN.mont(num);
                                var tinv = new BN(2).toRed(red).redInvm();
                                var ntinv = tinv.redNeg();

                                var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);

                                var l1 = ntinv.redAdd(s).fromRed();
                                var l2 = ntinv.redSub(s).fromRed();
                                return [l1, l2];
                            };

                            ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
                                // aprxSqrt >= sqrt(this.n)
                                var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

                                // 3.74
                                // Run EGCD, until r(L + 1) < aprxSqrt
                                var u = lambda;
                                var v = this.n.clone();
                                var x1 = new BN(1);
                                var y1 = new BN(0);
                                var x2 = new BN(0);
                                var y2 = new BN(1);

                                // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
                                var a0;
                                var b0;
                                // First vector
                                var a1;
                                var b1;
                                // Second vector
                                var a2;
                                var b2;

                                var prevR;
                                var i = 0;
                                var r;
                                var x;
                                while (u.cmpn(0) !== 0) {
                                    var q = v.div(u);
                                    r = v.sub(q.mul(u));
                                    x = x2.sub(q.mul(x1));
                                    var y = y2.sub(q.mul(y1));

                                    if (!a1 && r.cmp(aprxSqrt) < 0) {
                                        a0 = prevR.neg();
                                        b0 = x1;
                                        a1 = r.neg();
                                        b1 = x;
                                    } else if (a1 && ++i === 2) {
                                        break;
                                    }
                                    prevR = r;

                                    v = u;
                                    u = r;
                                    x2 = x1;
                                    x1 = x;
                                    y2 = y1;
                                    y1 = y;
                                }
                                a2 = r.neg();
                                b2 = x;

                                var len1 = a1.sqr().add(b1.sqr());
                                var len2 = a2.sqr().add(b2.sqr());
                                if (len2.cmp(len1) >= 0) {
                                    a2 = a0;
                                    b2 = b0;
                                }

                                // Normalize signs
                                if (a1.negative) {
                                    a1 = a1.neg();
                                    b1 = b1.neg();
                                }
                                if (a2.negative) {
                                    a2 = a2.neg();
                                    b2 = b2.neg();
                                }

                                return [
                                    {a: a1, b: b1},
                                    {a: a2, b: b2}
                                ];
                            };

                            ShortCurve.prototype._endoSplit = function _endoSplit(k) {
                                var basis = this.endo.basis;
                                var v1 = basis[0];
                                var v2 = basis[1];

                                var c1 = v2.b.mul(k).divRound(this.n);
                                var c2 = v1.b.neg().mul(k).divRound(this.n);

                                var p1 = c1.mul(v1.a);
                                var p2 = c2.mul(v2.a);
                                var q1 = c1.mul(v1.b);
                                var q2 = c2.mul(v2.b);

                                // Calculate answer
                                var k1 = k.sub(p1).sub(p2);
                                var k2 = q1.add(q2).neg();
                                return {k1: k1, k2: k2};
                            };

                            ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
                                x = new BN(x, 16);
                                if (!x.red)
                                    x = x.toRed(this.red);

                                var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
                                var y = y2.redSqrt();
                                if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
                                    throw new Error('invalid point');

                                // XXX Is there any way to tell if the number is odd without converting it
                                // to non-red form?
                                var isOdd = y.fromRed().isOdd();
                                if (odd && !isOdd || !odd && isOdd)
                                    y = y.redNeg();

                                return this.point(x, y);
                            };

                            ShortCurve.prototype.validate = function validate(point) {
                                if (point.inf)
                                    return true;

                                var x = point.x;
                                var y = point.y;

                                var ax = this.a.redMul(x);
                                var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
                                return y.redSqr().redISub(rhs).cmpn(0) === 0;
                            };

                            ShortCurve.prototype._endoWnafMulAdd =
                                function _endoWnafMulAdd(points, coeffs, jacobianResult) {
                                    var npoints = this._endoWnafT1;
                                    var ncoeffs = this._endoWnafT2;
                                    for (var i = 0; i < points.length; i++) {
                                        var split = this._endoSplit(coeffs[i]);
                                        var p = points[i];
                                        var beta = p._getBeta();

                                        if (split.k1.negative) {
                                            split.k1.ineg();
                                            p = p.neg(true);
                                        }
                                        if (split.k2.negative) {
                                            split.k2.ineg();
                                            beta = beta.neg(true);
                                        }

                                        npoints[i * 2] = p;
                                        npoints[i * 2 + 1] = beta;
                                        ncoeffs[i * 2] = split.k1;
                                        ncoeffs[i * 2 + 1] = split.k2;
                                    }
                                    var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

                                    // Clean-up references to points and coefficients
                                    for (var j = 0; j < i * 2; j++) {
                                        npoints[j] = null;
                                        ncoeffs[j] = null;
                                    }
                                    return res;
                                };

                            function Point(curve, x, y, isRed) {
                                Base.BasePoint.call(this, curve, 'affine');
                                if (x === null && y === null) {
                                    this.x = null;
                                    this.y = null;
                                    this.inf = true;
                                } else {
                                    this.x = new BN(x, 16);
                                    this.y = new BN(y, 16);
                                    // Force redgomery representation when loading from JSON
                                    if (isRed) {
                                        this.x.forceRed(this.curve.red);
                                        this.y.forceRed(this.curve.red);
                                    }
                                    if (!this.x.red)
                                        this.x = this.x.toRed(this.curve.red);
                                    if (!this.y.red)
                                        this.y = this.y.toRed(this.curve.red);
                                    this.inf = false;
                                }
                            }

                            inherits(Point, Base.BasePoint);

                            ShortCurve.prototype.point = function point(x, y, isRed) {
                                return new Point(this, x, y, isRed);
                            };

                            ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
                                return Point.fromJSON(this, obj, red);
                            };

                            Point.prototype._getBeta = function _getBeta() {
                                if (!this.curve.endo)
                                    return;

                                var pre = this.precomputed;
                                if (pre && pre.beta)
                                    return pre.beta;

                                var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
                                if (pre) {
                                    var curve = this.curve;
                                    var endoMul = function (p) {
                                        return curve.point(p.x.redMul(curve.endo.beta), p.y);
                                    };
                                    pre.beta = beta;
                                    beta.precomputed = {
                                        beta: null,
                                        naf: pre.naf && {
                                            wnd: pre.naf.wnd,
                                            points: pre.naf.points.map(endoMul)
                                        },
                                        doubles: pre.doubles && {
                                            step: pre.doubles.step,
                                            points: pre.doubles.points.map(endoMul)
                                        }
                                    };
                                }
                                return beta;
                            };

                            Point.prototype.toJSON = function toJSON() {
                                if (!this.precomputed)
                                    return [this.x, this.y];

                                return [this.x, this.y, this.precomputed && {
                                    doubles: this.precomputed.doubles && {
                                        step: this.precomputed.doubles.step,
                                        points: this.precomputed.doubles.points.slice(1)
                                    },
                                    naf: this.precomputed.naf && {
                                        wnd: this.precomputed.naf.wnd,
                                        points: this.precomputed.naf.points.slice(1)
                                    }
                                }];
                            };

                            Point.fromJSON = function fromJSON(curve, obj, red) {
                                if (typeof obj === 'string')
                                    obj = JSON.parse(obj);
                                var res = curve.point(obj[0], obj[1], red);
                                if (!obj[2])
                                    return res;

                                function obj2point(obj) {
                                    return curve.point(obj[0], obj[1], red);
                                }

                                var pre = obj[2];
                                res.precomputed = {
                                    beta: null,
                                    doubles: pre.doubles && {
                                        step: pre.doubles.step,
                                        points: [res].concat(pre.doubles.points.map(obj2point))
                                    },
                                    naf: pre.naf && {
                                        wnd: pre.naf.wnd,
                                        points: [res].concat(pre.naf.points.map(obj2point))
                                    }
                                };
                                return res;
                            };

                            Point.prototype.inspect = function inspect() {
                                if (this.isInfinity())
                                    return '<EC Point Infinity>';
                                return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
                                    ' y: ' + this.y.fromRed().toString(16, 2) + '>';
                            };

                            Point.prototype.isInfinity = function isInfinity() {
                                return this.inf;
                            };

                            Point.prototype.add = function add(p) {
                                // O + P = P
                                if (this.inf)
                                    return p;

                                // P + O = P
                                if (p.inf)
                                    return this;

                                // P + P = 2P
                                if (this.eq(p))
                                    return this.dbl();

                                // P + (-P) = O
                                if (this.neg().eq(p))
                                    return this.curve.point(null, null);

                                // P + Q = O
                                if (this.x.cmp(p.x) === 0)
                                    return this.curve.point(null, null);

                                var c = this.y.redSub(p.y);
                                if (c.cmpn(0) !== 0)
                                    c = c.redMul(this.x.redSub(p.x).redInvm());
                                var nx = c.redSqr().redISub(this.x).redISub(p.x);
                                var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
                                return this.curve.point(nx, ny);
                            };

                            Point.prototype.dbl = function dbl() {
                                if (this.inf)
                                    return this;

                                // 2P = O
                                var ys1 = this.y.redAdd(this.y);
                                if (ys1.cmpn(0) === 0)
                                    return this.curve.point(null, null);

                                var a = this.curve.a;

                                var x2 = this.x.redSqr();
                                var dyinv = ys1.redInvm();
                                var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

                                var nx = c.redSqr().redISub(this.x.redAdd(this.x));
                                var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
                                return this.curve.point(nx, ny);
                            };

                            Point.prototype.getX = function getX() {
                                return this.x.fromRed();
                            };

                            Point.prototype.getY = function getY() {
                                return this.y.fromRed();
                            };

                            Point.prototype.mul = function mul(k) {
                                k = new BN(k, 16);

                                if (this._hasDoubles(k))
                                    return this.curve._fixedNafMul(this, k);
                                else if (this.curve.endo)
                                    return this.curve._endoWnafMulAdd([this], [k]);
                                else
                                    return this.curve._wnafMul(this, k);
                            };

                            Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
                                var points = [this, p2];
                                var coeffs = [k1, k2];
                                if (this.curve.endo)
                                    return this.curve._endoWnafMulAdd(points, coeffs);
                                else
                                    return this.curve._wnafMulAdd(1, points, coeffs, 2);
                            };

                            Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
                                var points = [this, p2];
                                var coeffs = [k1, k2];
                                if (this.curve.endo)
                                    return this.curve._endoWnafMulAdd(points, coeffs, true);
                                else
                                    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
                            };

                            Point.prototype.eq = function eq(p) {
                                return this === p ||
                                    this.inf === p.inf &&
                                    (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
                            };

                            Point.prototype.neg = function neg(_precompute) {
                                if (this.inf)
                                    return this;

                                var res = this.curve.point(this.x, this.y.redNeg());
                                if (_precompute && this.precomputed) {
                                    var pre = this.precomputed;
                                    var negate = function (p) {
                                        return p.neg();
                                    };
                                    res.precomputed = {
                                        naf: pre.naf && {
                                            wnd: pre.naf.wnd,
                                            points: pre.naf.points.map(negate)
                                        },
                                        doubles: pre.doubles && {
                                            step: pre.doubles.step,
                                            points: pre.doubles.points.map(negate)
                                        }
                                    };
                                }
                                return res;
                            };

                            Point.prototype.toJ = function toJ() {
                                if (this.inf)
                                    return this.curve.jpoint(null, null, null);

                                var res = this.curve.jpoint(this.x, this.y, this.curve.one);
                                return res;
                            };

                            function JPoint(curve, x, y, z) {
                                Base.BasePoint.call(this, curve, 'jacobian');
                                if (x === null && y === null && z === null) {
                                    this.x = this.curve.one;
                                    this.y = this.curve.one;
                                    this.z = new BN(0);
                                } else {
                                    this.x = new BN(x, 16);
                                    this.y = new BN(y, 16);
                                    this.z = new BN(z, 16);
                                }
                                if (!this.x.red)
                                    this.x = this.x.toRed(this.curve.red);
                                if (!this.y.red)
                                    this.y = this.y.toRed(this.curve.red);
                                if (!this.z.red)
                                    this.z = this.z.toRed(this.curve.red);

                                this.zOne = this.z === this.curve.one;
                            }

                            inherits(JPoint, Base.BasePoint);

                            ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
                                return new JPoint(this, x, y, z);
                            };

                            JPoint.prototype.toP = function toP() {
                                if (this.isInfinity())
                                    return this.curve.point(null, null);

                                var zinv = this.z.redInvm();
                                var zinv2 = zinv.redSqr();
                                var ax = this.x.redMul(zinv2);
                                var ay = this.y.redMul(zinv2).redMul(zinv);

                                return this.curve.point(ax, ay);
                            };

                            JPoint.prototype.neg = function neg() {
                                return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
                            };

                            JPoint.prototype.add = function add(p) {
                                // O + P = P
                                if (this.isInfinity())
                                    return p;

                                // P + O = P
                                if (p.isInfinity())
                                    return this;

                                // 12M + 4S + 7A
                                var pz2 = p.z.redSqr();
                                var z2 = this.z.redSqr();
                                var u1 = this.x.redMul(pz2);
                                var u2 = p.x.redMul(z2);
                                var s1 = this.y.redMul(pz2.redMul(p.z));
                                var s2 = p.y.redMul(z2.redMul(this.z));

                                var h = u1.redSub(u2);
                                var r = s1.redSub(s2);
                                if (h.cmpn(0) === 0) {
                                    if (r.cmpn(0) !== 0)
                                        return this.curve.jpoint(null, null, null);
                                    else
                                        return this.dbl();
                                }

                                var h2 = h.redSqr();
                                var h3 = h2.redMul(h);
                                var v = u1.redMul(h2);

                                var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
                                var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
                                var nz = this.z.redMul(p.z).redMul(h);

                                return this.curve.jpoint(nx, ny, nz);
                            };

                            JPoint.prototype.mixedAdd = function mixedAdd(p) {
                                // O + P = P
                                if (this.isInfinity())
                                    return p.toJ();

                                // P + O = P
                                if (p.isInfinity())
                                    return this;

                                // 8M + 3S + 7A
                                var z2 = this.z.redSqr();
                                var u1 = this.x;
                                var u2 = p.x.redMul(z2);
                                var s1 = this.y;
                                var s2 = p.y.redMul(z2).redMul(this.z);

                                var h = u1.redSub(u2);
                                var r = s1.redSub(s2);
                                if (h.cmpn(0) === 0) {
                                    if (r.cmpn(0) !== 0)
                                        return this.curve.jpoint(null, null, null);
                                    else
                                        return this.dbl();
                                }

                                var h2 = h.redSqr();
                                var h3 = h2.redMul(h);
                                var v = u1.redMul(h2);

                                var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
                                var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
                                var nz = this.z.redMul(h);

                                return this.curve.jpoint(nx, ny, nz);
                            };

                            JPoint.prototype.dblp = function dblp(pow) {
                                if (pow === 0)
                                    return this;
                                if (this.isInfinity())
                                    return this;
                                if (!pow)
                                    return this.dbl();

                                if (this.curve.zeroA || this.curve.threeA) {
                                    var r = this;
                                    for (var i = 0; i < pow; i++)
                                        r = r.dbl();
                                    return r;
                                }

                                // 1M + 2S + 1A + N * (4S + 5M + 8A)
                                // N = 1 => 6M + 6S + 9A
                                var a = this.curve.a;
                                var tinv = this.curve.tinv;

                                var jx = this.x;
                                var jy = this.y;
                                var jz = this.z;
                                var jz4 = jz.redSqr().redSqr();

                                // Reuse results
                                var jyd = jy.redAdd(jy);
                                for (var i = 0; i < pow; i++) {
                                    var jx2 = jx.redSqr();
                                    var jyd2 = jyd.redSqr();
                                    var jyd4 = jyd2.redSqr();
                                    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

                                    var t1 = jx.redMul(jyd2);
                                    var nx = c.redSqr().redISub(t1.redAdd(t1));
                                    var t2 = t1.redISub(nx);
                                    var dny = c.redMul(t2);
                                    dny = dny.redIAdd(dny).redISub(jyd4);
                                    var nz = jyd.redMul(jz);
                                    if (i + 1 < pow)
                                        jz4 = jz4.redMul(jyd4);

                                    jx = nx;
                                    jz = nz;
                                    jyd = dny;
                                }

                                return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
                            };

                            JPoint.prototype.dbl = function dbl() {
                                if (this.isInfinity())
                                    return this;

                                if (this.curve.zeroA)
                                    return this._zeroDbl();
                                else if (this.curve.threeA)
                                    return this._threeDbl();
                                else
                                    return this._dbl();
                            };

                            JPoint.prototype._zeroDbl = function _zeroDbl() {
                                var nx;
                                var ny;
                                var nz;
                                // Z = 1
                                if (this.zOne) {
                                    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
                                    //     #doubling-mdbl-2007-bl
                                    // 1M + 5S + 14A

                                    // XX = X1^2
                                    var xx = this.x.redSqr();
                                    // YY = Y1^2
                                    var yy = this.y.redSqr();
                                    // YYYY = YY^2
                                    var yyyy = yy.redSqr();
                                    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
                                    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
                                    s = s.redIAdd(s);
                                    // M = 3 * XX + a; a = 0
                                    var m = xx.redAdd(xx).redIAdd(xx);
                                    // T = M ^ 2 - 2*S
                                    var t = m.redSqr().redISub(s).redISub(s);

                                    // 8 * YYYY
                                    var yyyy8 = yyyy.redIAdd(yyyy);
                                    yyyy8 = yyyy8.redIAdd(yyyy8);
                                    yyyy8 = yyyy8.redIAdd(yyyy8);

                                    // X3 = T
                                    nx = t;
                                    // Y3 = M * (S - T) - 8 * YYYY
                                    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
                                    // Z3 = 2*Y1
                                    nz = this.y.redAdd(this.y);
                                } else {
                                    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
                                    //     #doubling-dbl-2009-l
                                    // 2M + 5S + 13A

                                    // A = X1^2
                                    var a = this.x.redSqr();
                                    // B = Y1^2
                                    var b = this.y.redSqr();
                                    // C = B^2
                                    var c = b.redSqr();
                                    // D = 2 * ((X1 + B)^2 - A - C)
                                    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
                                    d = d.redIAdd(d);
                                    // E = 3 * A
                                    var e = a.redAdd(a).redIAdd(a);
                                    // F = E^2
                                    var f = e.redSqr();

                                    // 8 * C
                                    var c8 = c.redIAdd(c);
                                    c8 = c8.redIAdd(c8);
                                    c8 = c8.redIAdd(c8);

                                    // X3 = F - 2 * D
                                    nx = f.redISub(d).redISub(d);
                                    // Y3 = E * (D - X3) - 8 * C
                                    ny = e.redMul(d.redISub(nx)).redISub(c8);
                                    // Z3 = 2 * Y1 * Z1
                                    nz = this.y.redMul(this.z);
                                    nz = nz.redIAdd(nz);
                                }

                                return this.curve.jpoint(nx, ny, nz);
                            };

                            JPoint.prototype._threeDbl = function _threeDbl() {
                                var nx;
                                var ny;
                                var nz;
                                // Z = 1
                                if (this.zOne) {
                                    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
                                    //     #doubling-mdbl-2007-bl
                                    // 1M + 5S + 15A

                                    // XX = X1^2
                                    var xx = this.x.redSqr();
                                    // YY = Y1^2
                                    var yy = this.y.redSqr();
                                    // YYYY = YY^2
                                    var yyyy = yy.redSqr();
                                    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
                                    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
                                    s = s.redIAdd(s);
                                    // M = 3 * XX + a
                                    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
                                    // T = M^2 - 2 * S
                                    var t = m.redSqr().redISub(s).redISub(s);
                                    // X3 = T
                                    nx = t;
                                    // Y3 = M * (S - T) - 8 * YYYY
                                    var yyyy8 = yyyy.redIAdd(yyyy);
                                    yyyy8 = yyyy8.redIAdd(yyyy8);
                                    yyyy8 = yyyy8.redIAdd(yyyy8);
                                    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
                                    // Z3 = 2 * Y1
                                    nz = this.y.redAdd(this.y);
                                } else {
                                    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
                                    // 3M + 5S

                                    // delta = Z1^2
                                    var delta = this.z.redSqr();
                                    // gamma = Y1^2
                                    var gamma = this.y.redSqr();
                                    // beta = X1 * gamma
                                    var beta = this.x.redMul(gamma);
                                    // alpha = 3 * (X1 - delta) * (X1 + delta)
                                    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
                                    alpha = alpha.redAdd(alpha).redIAdd(alpha);
                                    // X3 = alpha^2 - 8 * beta
                                    var beta4 = beta.redIAdd(beta);
                                    beta4 = beta4.redIAdd(beta4);
                                    var beta8 = beta4.redAdd(beta4);
                                    nx = alpha.redSqr().redISub(beta8);
                                    // Z3 = (Y1 + Z1)^2 - gamma - delta
                                    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
                                    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
                                    var ggamma8 = gamma.redSqr();
                                    ggamma8 = ggamma8.redIAdd(ggamma8);
                                    ggamma8 = ggamma8.redIAdd(ggamma8);
                                    ggamma8 = ggamma8.redIAdd(ggamma8);
                                    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
                                }

                                return this.curve.jpoint(nx, ny, nz);
                            };

                            JPoint.prototype._dbl = function _dbl() {
                                var a = this.curve.a;

                                // 4M + 6S + 10A
                                var jx = this.x;
                                var jy = this.y;
                                var jz = this.z;
                                var jz4 = jz.redSqr().redSqr();

                                var jx2 = jx.redSqr();
                                var jy2 = jy.redSqr();

                                var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

                                var jxd4 = jx.redAdd(jx);
                                jxd4 = jxd4.redIAdd(jxd4);
                                var t1 = jxd4.redMul(jy2);
                                var nx = c.redSqr().redISub(t1.redAdd(t1));
                                var t2 = t1.redISub(nx);

                                var jyd8 = jy2.redSqr();
                                jyd8 = jyd8.redIAdd(jyd8);
                                jyd8 = jyd8.redIAdd(jyd8);
                                jyd8 = jyd8.redIAdd(jyd8);
                                var ny = c.redMul(t2).redISub(jyd8);
                                var nz = jy.redAdd(jy).redMul(jz);

                                return this.curve.jpoint(nx, ny, nz);
                            };

                            JPoint.prototype.trpl = function trpl() {
                                if (!this.curve.zeroA)
                                    return this.dbl().add(this);

                                // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
                                // 5M + 10S + ...

                                // XX = X1^2
                                var xx = this.x.redSqr();
                                // YY = Y1^2
                                var yy = this.y.redSqr();
                                // ZZ = Z1^2
                                var zz = this.z.redSqr();
                                // YYYY = YY^2
                                var yyyy = yy.redSqr();
                                // M = 3 * XX + a * ZZ2; a = 0
                                var m = xx.redAdd(xx).redIAdd(xx);
                                // MM = M^2
                                var mm = m.redSqr();
                                // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
                                var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
                                e = e.redIAdd(e);
                                e = e.redAdd(e).redIAdd(e);
                                e = e.redISub(mm);
                                // EE = E^2
                                var ee = e.redSqr();
                                // T = 16*YYYY
                                var t = yyyy.redIAdd(yyyy);
                                t = t.redIAdd(t);
                                t = t.redIAdd(t);
                                t = t.redIAdd(t);
                                // U = (M + E)^2 - MM - EE - T
                                var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
                                // X3 = 4 * (X1 * EE - 4 * YY * U)
                                var yyu4 = yy.redMul(u);
                                yyu4 = yyu4.redIAdd(yyu4);
                                yyu4 = yyu4.redIAdd(yyu4);
                                var nx = this.x.redMul(ee).redISub(yyu4);
                                nx = nx.redIAdd(nx);
                                nx = nx.redIAdd(nx);
                                // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
                                var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
                                ny = ny.redIAdd(ny);
                                ny = ny.redIAdd(ny);
                                ny = ny.redIAdd(ny);
                                // Z3 = (Z1 + E)^2 - ZZ - EE
                                var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

                                return this.curve.jpoint(nx, ny, nz);
                            };

                            JPoint.prototype.mul = function mul(k, kbase) {
                                k = new BN(k, kbase);

                                return this.curve._wnafMul(this, k);
                            };

                            JPoint.prototype.eq = function eq(p) {
                                if (p.type === 'affine')
                                    return this.eq(p.toJ());

                                if (this === p)
                                    return true;

                                // x1 * z2^2 == x2 * z1^2
                                var z2 = this.z.redSqr();
                                var pz2 = p.z.redSqr();
                                if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
                                    return false;

                                // y1 * z2^3 == y2 * z1^3
                                var z3 = z2.redMul(this.z);
                                var pz3 = pz2.redMul(p.z);
                                return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
                            };

                            JPoint.prototype.eqXToP = function eqXToP(x) {
                                var zs = this.z.redSqr();
                                var rx = x.toRed(this.curve.red).redMul(zs);
                                if (this.x.cmp(rx) === 0)
                                    return true;

                                var xc = x.clone();
                                var t = this.curve.redN.redMul(zs);
                                for (; ;) {
                                    xc.iadd(this.curve.n);
                                    if (xc.cmp(this.curve.p) >= 0)
                                        return false;

                                    rx.redIAdd(t);
                                    if (this.x.cmp(rx) === 0)
                                        return true;
                                }
                                return false;
                            };

                            JPoint.prototype.inspect = function inspect() {
                                if (this.isInfinity())
                                    return '<EC JPoint Infinity>';
                                return '<EC JPoint x: ' + this.x.toString(16, 2) +
                                    ' y: ' + this.y.toString(16, 2) +
                                    ' z: ' + this.z.toString(16, 2) + '>';
                            };

                            JPoint.prototype.isInfinity = function isInfinity() {
                                // XXX This code assumes that zero is always zero in red
                                return this.z.cmpn(0) === 0;
                            };

                        }, {"../../elliptic": 117, "../curve": 120, "bn.js": 33, "inherits": 150}],
                        123: [function (require, module, exports) {
                            'use strict';

                            var curves = exports;

                            var hash = require('hash.js');
                            var elliptic = require('../elliptic');

                            var assert = elliptic.utils.assert;

                            function PresetCurve(options) {
                                if (options.type === 'short')
                                    this.curve = new elliptic.curve.short(options);
                                else if (options.type === 'edwards')
                                    this.curve = new elliptic.curve.edwards(options);
                                else
                                    this.curve = new elliptic.curve.mont(options);
                                this.g = this.curve.g;
                                this.n = this.curve.n;
                                this.hash = options.hash;

                                assert(this.g.validate(), 'Invalid curve');
                                assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
                            }

                            curves.PresetCurve = PresetCurve;

                            function defineCurve(name, options) {
                                Object.defineProperty(curves, name, {
                                    configurable: true,
                                    enumerable: true,
                                    get: function () {
                                        var curve = new PresetCurve(options);
                                        Object.defineProperty(curves, name, {
                                            configurable: true,
                                            enumerable: true,
                                            value: curve
                                        });
                                        return curve;
                                    }
                                });
                            }

                            defineCurve('p192', {
                                type: 'short',
                                prime: 'p192',
                                p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
                                a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
                                b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
                                n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
                                hash: hash.sha256,
                                gRed: false,
                                g: [
                                    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
                                    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'
                                ]
                            });

                            defineCurve('p224', {
                                type: 'short',
                                prime: 'p224',
                                p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
                                a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
                                b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
                                n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
                                hash: hash.sha256,
                                gRed: false,
                                g: [
                                    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
                                    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'
                                ]
                            });

                            defineCurve('p256', {
                                type: 'short',
                                prime: null,
                                p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
                                a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
                                b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
                                n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
                                hash: hash.sha256,
                                gRed: false,
                                g: [
                                    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
                                    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'
                                ]
                            });

                            defineCurve('p384', {
                                type: 'short',
                                prime: null,
                                p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
                                'fffffffe ffffffff 00000000 00000000 ffffffff',
                                a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
                                'fffffffe ffffffff 00000000 00000000 fffffffc',
                                b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
                                '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
                                n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
                                'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
                                hash: hash.sha384,
                                gRed: false,
                                g: [
                                    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
                                    '5502f25d bf55296c 3a545e38 72760ab7',
                                    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
                                    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f'
                                ]
                            });

                            defineCurve('p521', {
                                type: 'short',
                                prime: null,
                                p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
                                'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
                                'ffffffff ffffffff ffffffff ffffffff ffffffff',
                                a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
                                'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
                                'ffffffff ffffffff ffffffff ffffffff fffffffc',
                                b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
                                '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
                                '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
                                n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
                                'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
                                'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
                                hash: hash.sha512,
                                gRed: false,
                                g: [
                                    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
                                    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
                                    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
                                    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
                                    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
                                    '3fad0761 353c7086 a272c240 88be9476 9fd16650'
                                ]
                            });

                            defineCurve('curve25519', {
                                type: 'mont',
                                prime: 'p25519',
                                p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
                                a: '76d06',
                                b: '1',
                                n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
                                hash: hash.sha256,
                                gRed: false,
                                g: [
                                    '9'
                                ]
                            });

                            defineCurve('ed25519', {
                                type: 'edwards',
                                prime: 'p25519',
                                p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
                                a: '-1',
                                c: '1',
                                // -121665 * (121666^(-1)) (mod P)
                                d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
                                n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
                                hash: hash.sha256,
                                gRed: false,
                                g: [
                                    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

                                    // 4/5
                                    '6666666666666666666666666666666666666666666666666666666666666658'
                                ]
                            });

                            var pre;
                            try {
                                pre = require('./precomputed/secp256k1');
                            } catch (e) {
                                pre = undefined;
                            }

                            defineCurve('secp256k1', {
                                type: 'short',
                                prime: 'k256',
                                p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
                                a: '0',
                                b: '7',
                                n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
                                h: '1',
                                hash: hash.sha256,

                                // Precomputed endomorphism
                                beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
                                lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
                                basis: [
                                    {
                                        a: '3086d221a7d46bcde86c90e49284eb15',
                                        b: '-e4437ed6010e88286f547fa90abfe4c3'
                                    },
                                    {
                                        a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
                                        b: '3086d221a7d46bcde86c90e49284eb15'
                                    }
                                ],

                                gRed: false,
                                g: [
                                    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
                                    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
                                    pre
                                ]
                            });

                        }, {"../elliptic": 117, "./precomputed/secp256k1": 130, "hash.js": 136}],
                        124: [function (require, module, exports) {
                            'use strict';

                            var BN = require('bn.js');
                            var HmacDRBG = require('hmac-drbg');
                            var elliptic = require('../../elliptic');
                            var utils = elliptic.utils;
                            var assert = utils.assert;

                            var KeyPair = require('./key');
                            var Signature = require('./signature');

                            function EC(options) {
                                if (!(this instanceof EC))
                                    return new EC(options);

                                // Shortcut `elliptic.ec(curve-name)`
                                if (typeof options === 'string') {
                                    assert(elliptic.curves.hasOwnProperty(options), 'Unknown curve ' + options);

                                    options = elliptic.curves[options];
                                }

                                // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
                                if (options instanceof elliptic.curves.PresetCurve)
                                    options = {curve: options};

                                this.curve = options.curve.curve;
                                this.n = this.curve.n;
                                this.nh = this.n.ushrn(1);
                                this.g = this.curve.g;

                                // Point on curve
                                this.g = options.curve.g;
                                this.g.precompute(options.curve.n.bitLength() + 1);

                                // Hash for function for DRBG
                                this.hash = options.hash || options.curve.hash;
                            }

                            module.exports = EC;

                            EC.prototype.keyPair = function keyPair(options) {
                                return new KeyPair(this, options);
                            };

                            EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
                                return KeyPair.fromPrivate(this, priv, enc);
                            };

                            EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
                                return KeyPair.fromPublic(this, pub, enc);
                            };

                            EC.prototype.genKeyPair = function genKeyPair(options) {
                                if (!options)
                                    options = {};

                                // Instantiate Hmac_DRBG
                                var drbg = new HmacDRBG({
                                    hash: this.hash,
                                    pers: options.pers,
                                    persEnc: options.persEnc || 'utf8',
                                    entropy: options.entropy || elliptic.rand(this.hash.hmacStrength),
                                    entropyEnc: options.entropy && options.entropyEnc || 'utf8',
                                    nonce: this.n.toArray()
                                });

                                var bytes = this.n.byteLength();
                                var ns2 = this.n.sub(new BN(2));
                                do {
                                    var priv = new BN(drbg.generate(bytes));
                                    if (priv.cmp(ns2) > 0)
                                        continue;

                                    priv.iaddn(1);
                                    return this.keyFromPrivate(priv);
                                } while (true);
                            };

                            EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
                                var delta = msg.byteLength() * 8 - this.n.bitLength();
                                if (delta > 0)
                                    msg = msg.ushrn(delta);
                                if (!truncOnly && msg.cmp(this.n) >= 0)
                                    return msg.sub(this.n);
                                else
                                    return msg;
                            };

                            EC.prototype.sign = function sign(msg, key, enc, options) {
                                if (typeof enc === 'object') {
                                    options = enc;
                                    enc = null;
                                }
                                if (!options)
                                    options = {};

                                key = this.keyFromPrivate(key, enc);
                                msg = this._truncateToN(new BN(msg, 16));

                                // Zero-extend key to provide enough entropy
                                var bytes = this.n.byteLength();
                                var bkey = key.getPrivate().toArray('be', bytes);

                                // Zero-extend nonce to have the same byte size as N
                                var nonce = msg.toArray('be', bytes);

                                // Instantiate Hmac_DRBG
                                var drbg = new HmacDRBG({
                                    hash: this.hash,
                                    entropy: bkey,
                                    nonce: nonce,
                                    pers: options.pers,
                                    persEnc: options.persEnc || 'utf8'
                                });

                                // Number of bytes to generate
                                var ns1 = this.n.sub(new BN(1));

                                for (var iter = 0; true; iter++) {
                                    var k = options.k ?
                                        options.k(iter) :
                                        new BN(drbg.generate(this.n.byteLength()));
                                    k = this._truncateToN(k, true);
                                    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
                                        continue;

                                    var kp = this.g.mul(k);
                                    if (kp.isInfinity())
                                        continue;

                                    var kpX = kp.getX();
                                    var r = kpX.umod(this.n);
                                    if (r.cmpn(0) === 0)
                                        continue;

                                    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
                                    s = s.umod(this.n);
                                    if (s.cmpn(0) === 0)
                                        continue;

                                    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                                        (kpX.cmp(r) !== 0 ? 2 : 0);

                                    // Use complement of `s`, if it is > `n / 2`
                                    if (options.canonical && s.cmp(this.nh) > 0) {
                                        s = this.n.sub(s);
                                        recoveryParam ^= 1;
                                    }

                                    return new Signature({r: r, s: s, recoveryParam: recoveryParam});
                                }
                            };

                            EC.prototype.verify = function verify(msg, signature, key, enc) {
                                msg = this._truncateToN(new BN(msg, 16));
                                key = this.keyFromPublic(key, enc);
                                signature = new Signature(signature, 'hex');

                                // Perform primitive values validation
                                var r = signature.r;
                                var s = signature.s;
                                if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
                                    return false;
                                if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
                                    return false;

                                // Validate signature
                                var sinv = s.invm(this.n);
                                var u1 = sinv.mul(msg).umod(this.n);
                                var u2 = sinv.mul(r).umod(this.n);

                                if (!this.curve._maxwellTrick) {
                                    var p = this.g.mulAdd(u1, key.getPublic(), u2);
                                    if (p.isInfinity())
                                        return false;

                                    return p.getX().umod(this.n).cmp(r) === 0;
                                }

                                // NOTE: Greg Maxwell's trick, inspired by:
                                // https://git.io/vad3K

                                var p = this.g.jmulAdd(u1, key.getPublic(), u2);
                                if (p.isInfinity())
                                    return false;

                                // Compare `p.x` of Jacobian point with `r`,
                                // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
                                // inverse of `p.z^2`
                                return p.eqXToP(r);
                            };

                            EC.prototype.recoverPubKey = function (msg, signature, j, enc) {
                                assert((3 & j) === j, 'The recovery param is more than two bits');
                                signature = new Signature(signature, enc);

                                var n = this.n;
                                var e = new BN(msg);
                                var r = signature.r;
                                var s = signature.s;

                                // A set LSB signifies that the y-coordinate is odd
                                var isYOdd = j & 1;
                                var isSecondKey = j >> 1;
                                if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
                                    throw new Error('Unable to find sencond key candinate');

                                // 1.1. Let x = r + jn.
                                if (isSecondKey)
                                    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
                                else
                                    r = this.curve.pointFromX(r, isYOdd);

                                var rInv = signature.r.invm(n);
                                var s1 = n.sub(e).mul(rInv).umod(n);
                                var s2 = s.mul(rInv).umod(n);

                                // 1.6.1 Compute Q = r^-1 (sR -  eG)
                                //               Q = r^-1 (sR + -eG)
                                return this.g.mulAdd(s1, r, s2);
                            };

                            EC.prototype.getKeyRecoveryParam = function (e, signature, Q, enc) {
                                signature = new Signature(signature, enc);
                                if (signature.recoveryParam !== null)
                                    return signature.recoveryParam;

                                for (var i = 0; i < 4; i++) {
                                    var Qprime;
                                    try {
                                        Qprime = this.recoverPubKey(e, signature, i);
                                    } catch (e) {
                                        continue;
                                    }

                                    if (Qprime.eq(Q))
                                        return i;
                                }
                                throw new Error('Unable to find valid recovery factor');
                            };

                        }, {"../../elliptic": 117, "./key": 125, "./signature": 126, "bn.js": 33, "hmac-drbg": 148}],
                        125: [function (require, module, exports) {
                            'use strict';

                            var BN = require('bn.js');
                            var elliptic = require('../../elliptic');
                            var utils = elliptic.utils;
                            var assert = utils.assert;

                            function KeyPair(ec, options) {
                                this.ec = ec;
                                this.priv = null;
                                this.pub = null;

                                // KeyPair(ec, { priv: ..., pub: ... })
                                if (options.priv)
                                    this._importPrivate(options.priv, options.privEnc);
                                if (options.pub)
                                    this._importPublic(options.pub, options.pubEnc);
                            }

                            module.exports = KeyPair;

                            KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
                                if (pub instanceof KeyPair)
                                    return pub;

                                return new KeyPair(ec, {
                                    pub: pub,
                                    pubEnc: enc
                                });
                            };

                            KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
                                if (priv instanceof KeyPair)
                                    return priv;

                                return new KeyPair(ec, {
                                    priv: priv,
                                    privEnc: enc
                                });
                            };

                            KeyPair.prototype.validate = function validate() {
                                var pub = this.getPublic();

                                if (pub.isInfinity())
                                    return {result: false, reason: 'Invalid public key'};
                                if (!pub.validate())
                                    return {result: false, reason: 'Public key is not a point'};
                                if (!pub.mul(this.ec.curve.n).isInfinity())
                                    return {result: false, reason: 'Public key * N != O'};

                                return {result: true, reason: null};
                            };

                            KeyPair.prototype.getPublic = function getPublic(compact, enc) {
                                // compact is optional argument
                                if (typeof compact === 'string') {
                                    enc = compact;
                                    compact = null;
                                }

                                if (!this.pub)
                                    this.pub = this.ec.g.mul(this.priv);

                                if (!enc)
                                    return this.pub;

                                return this.pub.encode(enc, compact);
                            };

                            KeyPair.prototype.getPrivate = function getPrivate(enc) {
                                if (enc === 'hex')
                                    return this.priv.toString(16, 2);
                                else
                                    return this.priv;
                            };

                            KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
                                this.priv = new BN(key, enc || 16);

                                // Ensure that the priv won't be bigger than n, otherwise we may fail
                                // in fixed multiplication method
                                this.priv = this.priv.umod(this.ec.curve.n);
                            };

                            KeyPair.prototype._importPublic = function _importPublic(key, enc) {
                                if (key.x || key.y) {
                                    // Montgomery points only have an `x` coordinate.
                                    // Weierstrass/Edwards points on the other hand have both `x` and
                                    // `y` coordinates.
                                    if (this.ec.curve.type === 'mont') {
                                        assert(key.x, 'Need x coordinate');
                                    } else if (this.ec.curve.type === 'short' ||
                                        this.ec.curve.type === 'edwards') {
                                        assert(key.x && key.y, 'Need both x and y coordinate');
                                    }
                                    this.pub = this.ec.curve.point(key.x, key.y);
                                    return;
                                }
                                this.pub = this.ec.curve.decodePoint(key, enc);
                            };

// ECDH
                            KeyPair.prototype.derive = function derive(pub) {
                                return pub.mul(this.priv).getX();
                            };

// ECDSA
                            KeyPair.prototype.sign = function sign(msg, enc, options) {
                                return this.ec.sign(msg, this, enc, options);
                            };

                            KeyPair.prototype.verify = function verify(msg, signature) {
                                return this.ec.verify(msg, signature, this);
                            };

                            KeyPair.prototype.inspect = function inspect() {
                                return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
                                    ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
                            };

                        }, {"../../elliptic": 117, "bn.js": 33}],
                        126: [function (require, module, exports) {
                            'use strict';

                            var BN = require('bn.js');

                            var elliptic = require('../../elliptic');
                            var utils = elliptic.utils;
                            var assert = utils.assert;

                            function Signature(options, enc) {
                                if (options instanceof Signature)
                                    return options;

                                if (this._importDER(options, enc))
                                    return;

                                assert(options.r && options.s, 'Signature without r or s');
                                this.r = new BN(options.r, 16);
                                this.s = new BN(options.s, 16);
                                if (options.recoveryParam === undefined)
                                    this.recoveryParam = null;
                                else
                                    this.recoveryParam = options.recoveryParam;
                            }

                            module.exports = Signature;

                            function Position() {
                                this.place = 0;
                            }

                            function getLength(buf, p) {
                                var initial = buf[p.place++];
                                if (!(initial & 0x80)) {
                                    return initial;
                                }
                                var octetLen = initial & 0xf;
                                var val = 0;
                                for (var i = 0, off = p.place; i < octetLen; i++, off++) {
                                    val <<= 8;
                                    val |= buf[off];
                                }
                                p.place = off;
                                return val;
                            }

                            function rmPadding(buf) {
                                var i = 0;
                                var len = buf.length - 1;
                                while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
                                    i++;
                                }
                                if (i === 0) {
                                    return buf;
                                }
                                return buf.slice(i);
                            }

                            Signature.prototype._importDER = function _importDER(data, enc) {
                                data = utils.toArray(data, enc);
                                var p = new Position();
                                if (data[p.place++] !== 0x30) {
                                    return false;
                                }
                                var len = getLength(data, p);
                                if ((len + p.place) !== data.length) {
                                    return false;
                                }
                                if (data[p.place++] !== 0x02) {
                                    return false;
                                }
                                var rlen = getLength(data, p);
                                var r = data.slice(p.place, rlen + p.place);
                                p.place += rlen;
                                if (data[p.place++] !== 0x02) {
                                    return false;
                                }
                                var slen = getLength(data, p);
                                if (data.length !== slen + p.place) {
                                    return false;
                                }
                                var s = data.slice(p.place, slen + p.place);
                                if (r[0] === 0 && (r[1] & 0x80)) {
                                    r = r.slice(1);
                                }
                                if (s[0] === 0 && (s[1] & 0x80)) {
                                    s = s.slice(1);
                                }

                                this.r = new BN(r);
                                this.s = new BN(s);
                                this.recoveryParam = null;

                                return true;
                            };

                            function constructLength(arr, len) {
                                if (len < 0x80) {
                                    arr.push(len);
                                    return;
                                }
                                var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
                                arr.push(octets | 0x80);
                                while (--octets) {
                                    arr.push((len >>> (octets << 3)) & 0xff);
                                }
                                arr.push(len);
                            }

                            Signature.prototype.toDER = function toDER(enc) {
                                var r = this.r.toArray();
                                var s = this.s.toArray();

                                // Pad values
                                if (r[0] & 0x80)
                                    r = [0].concat(r);
                                // Pad values
                                if (s[0] & 0x80)
                                    s = [0].concat(s);

                                r = rmPadding(r);
                                s = rmPadding(s);

                                while (!s[0] && !(s[1] & 0x80)) {
                                    s = s.slice(1);
                                }
                                var arr = [0x02];
                                constructLength(arr, r.length);
                                arr = arr.concat(r);
                                arr.push(0x02);
                                constructLength(arr, s.length);
                                var backHalf = arr.concat(s);
                                var res = [0x30];
                                constructLength(res, backHalf.length);
                                res = res.concat(backHalf);
                                return utils.encode(res, enc);
                            };

                        }, {"../../elliptic": 117, "bn.js": 33}],
                        127: [function (require, module, exports) {
                            'use strict';

                            var hash = require('hash.js');
                            var elliptic = require('../../elliptic');
                            var utils = elliptic.utils;
                            var assert = utils.assert;
                            var parseBytes = utils.parseBytes;
                            var KeyPair = require('./key');
                            var Signature = require('./signature');

                            function EDDSA(curve) {
                                assert(curve === 'ed25519', 'only tested with ed25519 so far');

                                if (!(this instanceof EDDSA))
                                    return new EDDSA(curve);

                                var curve = elliptic.curves[curve].curve;
                                this.curve = curve;
                                this.g = curve.g;
                                this.g.precompute(curve.n.bitLength() + 1);

                                this.pointClass = curve.point().constructor;
                                this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
                                this.hash = hash.sha512;
                            }

                            module.exports = EDDSA;

                            /**
                             * @param {Array|String} message - message bytes
                             * @param {Array|String|KeyPair} secret - secret bytes or a keypair
                             * @returns {Signature} - signature
                             */
                            EDDSA.prototype.sign = function sign(message, secret) {
                                message = parseBytes(message);
                                var key = this.keyFromSecret(secret);
                                var r = this.hashInt(key.messagePrefix(), message);
                                var R = this.g.mul(r);
                                var Rencoded = this.encodePoint(R);
                                var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
                                    .mul(key.priv());
                                var S = r.add(s_).umod(this.curve.n);
                                return this.makeSignature({R: R, S: S, Rencoded: Rencoded});
                            };

                            /**
                             * @param {Array} message - message bytes
                             * @param {Array|String|Signature} sig - sig bytes
                             * @param {Array|String|Point|KeyPair} pub - public key
                             * @returns {Boolean} - true if public key matches sig of message
                             */
                            EDDSA.prototype.verify = function verify(message, sig, pub) {
                                message = parseBytes(message);
                                sig = this.makeSignature(sig);
                                var key = this.keyFromPublic(pub);
                                var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
                                var SG = this.g.mul(sig.S());
                                var RplusAh = sig.R().add(key.pub().mul(h));
                                return RplusAh.eq(SG);
                            };

                            EDDSA.prototype.hashInt = function hashInt() {
                                var hash = this.hash();
                                for (var i = 0; i < arguments.length; i++)
                                    hash.update(arguments[i]);
                                return utils.intFromLE(hash.digest()).umod(this.curve.n);
                            };

                            EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
                                return KeyPair.fromPublic(this, pub);
                            };

                            EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
                                return KeyPair.fromSecret(this, secret);
                            };

                            EDDSA.prototype.makeSignature = function makeSignature(sig) {
                                if (sig instanceof Signature)
                                    return sig;
                                return new Signature(this, sig);
                            };

                            /**
                             * * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
                             *
                             * EDDSA defines methods for encoding and decoding points and integers. These are
                             * helper convenience methods, that pass along to utility functions implied
                             * parameters.
                             *
                             */
                            EDDSA.prototype.encodePoint = function encodePoint(point) {
                                var enc = point.getY().toArray('le', this.encodingLength);
                                enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
                                return enc;
                            };

                            EDDSA.prototype.decodePoint = function decodePoint(bytes) {
                                bytes = utils.parseBytes(bytes);

                                var lastIx = bytes.length - 1;
                                var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
                                var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

                                var y = utils.intFromLE(normed);
                                return this.curve.pointFromY(y, xIsOdd);
                            };

                            EDDSA.prototype.encodeInt = function encodeInt(num) {
                                return num.toArray('le', this.encodingLength);
                            };

                            EDDSA.prototype.decodeInt = function decodeInt(bytes) {
                                return utils.intFromLE(bytes);
                            };

                            EDDSA.prototype.isPoint = function isPoint(val) {
                                return val instanceof this.pointClass;
                            };

                        }, {"../../elliptic": 117, "./key": 128, "./signature": 129, "hash.js": 136}],
                        128: [function (require, module, exports) {
                            'use strict';

                            var elliptic = require('../../elliptic');
                            var utils = elliptic.utils;
                            var assert = utils.assert;
                            var parseBytes = utils.parseBytes;
                            var cachedProperty = utils.cachedProperty;

                            /**
                             * @param {EDDSA} eddsa - instance
                             * @param {Object} params - public/private key parameters
                             *
                             * @param {Array<Byte>} [params.secret] - secret seed bytes
                             * @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
                             * @param {Array<Byte>} [params.pub] - public key point encoded as bytes
                             *
                             */
                            function KeyPair(eddsa, params) {
                                this.eddsa = eddsa;
                                this._secret = parseBytes(params.secret);
                                if (eddsa.isPoint(params.pub))
                                    this._pub = params.pub;
                                else
                                    this._pubBytes = parseBytes(params.pub);
                            }

                            KeyPair.fromPublic = function fromPublic(eddsa, pub) {
                                if (pub instanceof KeyPair)
                                    return pub;
                                return new KeyPair(eddsa, {pub: pub});
                            };

                            KeyPair.fromSecret = function fromSecret(eddsa, secret) {
                                if (secret instanceof KeyPair)
                                    return secret;
                                return new KeyPair(eddsa, {secret: secret});
                            };

                            KeyPair.prototype.secret = function secret() {
                                return this._secret;
                            };

                            cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
                                return this.eddsa.encodePoint(this.pub());
                            });

                            cachedProperty(KeyPair, 'pub', function pub() {
                                if (this._pubBytes)
                                    return this.eddsa.decodePoint(this._pubBytes);
                                return this.eddsa.g.mul(this.priv());
                            });

                            cachedProperty(KeyPair, 'privBytes', function privBytes() {
                                var eddsa = this.eddsa;
                                var hash = this.hash();
                                var lastIx = eddsa.encodingLength - 1;

                                var a = hash.slice(0, eddsa.encodingLength);
                                a[0] &= 248;
                                a[lastIx] &= 127;
                                a[lastIx] |= 64;

                                return a;
                            });

                            cachedProperty(KeyPair, 'priv', function priv() {
                                return this.eddsa.decodeInt(this.privBytes());
                            });

                            cachedProperty(KeyPair, 'hash', function hash() {
                                return this.eddsa.hash().update(this.secret()).digest();
                            });

                            cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
                                return this.hash().slice(this.eddsa.encodingLength);
                            });

                            KeyPair.prototype.sign = function sign(message) {
                                assert(this._secret, 'KeyPair can only verify');
                                return this.eddsa.sign(message, this);
                            };

                            KeyPair.prototype.verify = function verify(message, sig) {
                                return this.eddsa.verify(message, sig, this);
                            };

                            KeyPair.prototype.getSecret = function getSecret(enc) {
                                assert(this._secret, 'KeyPair is public only');
                                return utils.encode(this.secret(), enc);
                            };

                            KeyPair.prototype.getPublic = function getPublic(enc) {
                                return utils.encode(this.pubBytes(), enc);
                            };

                            module.exports = KeyPair;

                        }, {"../../elliptic": 117}],
                        129: [function (require, module, exports) {
                            'use strict';

                            var BN = require('bn.js');
                            var elliptic = require('../../elliptic');
                            var utils = elliptic.utils;
                            var assert = utils.assert;
                            var cachedProperty = utils.cachedProperty;
                            var parseBytes = utils.parseBytes;

                            /**
                             * @param {EDDSA} eddsa - eddsa instance
                             * @param {Array<Bytes>|Object} sig -
                             * @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
                             * @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
                             * @param {Array<Bytes>} [sig.Rencoded] - R point encoded
                             * @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
                             */
                            function Signature(eddsa, sig) {
                                this.eddsa = eddsa;

                                if (typeof sig !== 'object')
                                    sig = parseBytes(sig);

                                if (Array.isArray(sig)) {
                                    sig = {
                                        R: sig.slice(0, eddsa.encodingLength),
                                        S: sig.slice(eddsa.encodingLength)
                                    };
                                }

                                assert(sig.R && sig.S, 'Signature without R or S');

                                if (eddsa.isPoint(sig.R))
                                    this._R = sig.R;
                                if (sig.S instanceof BN)
                                    this._S = sig.S;

                                this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
                                this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
                            }

                            cachedProperty(Signature, 'S', function S() {
                                return this.eddsa.decodeInt(this.Sencoded());
                            });

                            cachedProperty(Signature, 'R', function R() {
                                return this.eddsa.decodePoint(this.Rencoded());
                            });

                            cachedProperty(Signature, 'Rencoded', function Rencoded() {
                                return this.eddsa.encodePoint(this.R());
                            });

                            cachedProperty(Signature, 'Sencoded', function Sencoded() {
                                return this.eddsa.encodeInt(this.S());
                            });

                            Signature.prototype.toBytes = function toBytes() {
                                return this.Rencoded().concat(this.Sencoded());
                            };

                            Signature.prototype.toHex = function toHex() {
                                return utils.encode(this.toBytes(), 'hex').toUpperCase();
                            };

                            module.exports = Signature;

                        }, {"../../elliptic": 117, "bn.js": 33}],
                        130: [function (require, module, exports) {
                            module.exports = {
                                doubles: {
                                    step: 4,
                                    points: [
                                        [
                                            'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
                                            'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'
                                        ],
                                        [
                                            '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
                                            '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'
                                        ],
                                        [
                                            '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
                                            'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'
                                        ],
                                        [
                                            '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
                                            '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'
                                        ],
                                        [
                                            '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
                                            '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'
                                        ],
                                        [
                                            '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
                                            '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'
                                        ],
                                        [
                                            'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
                                            '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'
                                        ],
                                        [
                                            '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
                                            'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'
                                        ],
                                        [
                                            'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
                                            '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'
                                        ],
                                        [
                                            'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
                                            'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'
                                        ],
                                        [
                                            'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
                                            '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'
                                        ],
                                        [
                                            '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
                                            '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'
                                        ],
                                        [
                                            '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
                                            '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'
                                        ],
                                        [
                                            '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
                                            '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'
                                        ],
                                        [
                                            '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
                                            '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'
                                        ],
                                        [
                                            '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
                                            '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'
                                        ],
                                        [
                                            '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
                                            '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'
                                        ],
                                        [
                                            '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
                                            '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'
                                        ],
                                        [
                                            '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
                                            'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'
                                        ],
                                        [
                                            'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
                                            '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'
                                        ],
                                        [
                                            'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
                                            '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'
                                        ],
                                        [
                                            '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
                                            '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'
                                        ],
                                        [
                                            '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
                                            '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'
                                        ],
                                        [
                                            'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
                                            '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'
                                        ],
                                        [
                                            '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
                                            'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'
                                        ],
                                        [
                                            'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
                                            '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'
                                        ],
                                        [
                                            'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
                                            'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'
                                        ],
                                        [
                                            'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
                                            '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'
                                        ],
                                        [
                                            'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
                                            'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'
                                        ],
                                        [
                                            'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
                                            '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'
                                        ],
                                        [
                                            '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
                                            'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'
                                        ],
                                        [
                                            '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
                                            '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'
                                        ],
                                        [
                                            'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
                                            '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'
                                        ],
                                        [
                                            '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
                                            'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'
                                        ],
                                        [
                                            'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
                                            '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'
                                        ],
                                        [
                                            'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
                                            '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'
                                        ],
                                        [
                                            'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
                                            'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'
                                        ],
                                        [
                                            '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
                                            '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'
                                        ],
                                        [
                                            '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
                                            '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'
                                        ],
                                        [
                                            '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
                                            'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'
                                        ],
                                        [
                                            '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
                                            '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'
                                        ],
                                        [
                                            'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
                                            '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'
                                        ],
                                        [
                                            '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
                                            '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'
                                        ],
                                        [
                                            '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
                                            'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'
                                        ],
                                        [
                                            '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
                                            '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'
                                        ],
                                        [
                                            'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
                                            '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'
                                        ],
                                        [
                                            '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
                                            'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'
                                        ],
                                        [
                                            'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
                                            'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'
                                        ],
                                        [
                                            'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
                                            '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'
                                        ],
                                        [
                                            '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
                                            'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'
                                        ],
                                        [
                                            '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
                                            'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'
                                        ],
                                        [
                                            'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
                                            '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'
                                        ],
                                        [
                                            'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
                                            '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'
                                        ],
                                        [
                                            'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
                                            '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'
                                        ],
                                        [
                                            '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
                                            'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'
                                        ],
                                        [
                                            '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
                                            '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'
                                        ],
                                        [
                                            'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
                                            'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'
                                        ],
                                        [
                                            '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
                                            'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'
                                        ],
                                        [
                                            '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
                                            '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'
                                        ],
                                        [
                                            '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
                                            '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'
                                        ],
                                        [
                                            'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
                                            'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'
                                        ],
                                        [
                                            '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
                                            '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'
                                        ],
                                        [
                                            '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
                                            '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'
                                        ],
                                        [
                                            'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
                                            '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'
                                        ],
                                        [
                                            'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
                                            'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'
                                        ]
                                    ]
                                },
                                naf: {
                                    wnd: 7,
                                    points: [
                                        [
                                            'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
                                            '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'
                                        ],
                                        [
                                            '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
                                            'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'
                                        ],
                                        [
                                            '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
                                            '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'
                                        ],
                                        [
                                            'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
                                            'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'
                                        ],
                                        [
                                            '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
                                            'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'
                                        ],
                                        [
                                            'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
                                            'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'
                                        ],
                                        [
                                            'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
                                            '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'
                                        ],
                                        [
                                            'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
                                            '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'
                                        ],
                                        [
                                            '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
                                            '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'
                                        ],
                                        [
                                            '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
                                            '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'
                                        ],
                                        [
                                            '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
                                            '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'
                                        ],
                                        [
                                            '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
                                            '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'
                                        ],
                                        [
                                            'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
                                            'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'
                                        ],
                                        [
                                            'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
                                            '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'
                                        ],
                                        [
                                            '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
                                            'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'
                                        ],
                                        [
                                            '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
                                            'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'
                                        ],
                                        [
                                            '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
                                            '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'
                                        ],
                                        [
                                            '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
                                            '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'
                                        ],
                                        [
                                            '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
                                            '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'
                                        ],
                                        [
                                            '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
                                            'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'
                                        ],
                                        [
                                            'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
                                            'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'
                                        ],
                                        [
                                            '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
                                            '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'
                                        ],
                                        [
                                            '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
                                            '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'
                                        ],
                                        [
                                            'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
                                            'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'
                                        ],
                                        [
                                            '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
                                            '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'
                                        ],
                                        [
                                            'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
                                            'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'
                                        ],
                                        [
                                            'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
                                            'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'
                                        ],
                                        [
                                            '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
                                            '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'
                                        ],
                                        [
                                            '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
                                            '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'
                                        ],
                                        [
                                            '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
                                            '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'
                                        ],
                                        [
                                            'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
                                            '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'
                                        ],
                                        [
                                            '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
                                            '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'
                                        ],
                                        [
                                            'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
                                            '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'
                                        ],
                                        [
                                            '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
                                            'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'
                                        ],
                                        [
                                            '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
                                            'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'
                                        ],
                                        [
                                            'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
                                            'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'
                                        ],
                                        [
                                            '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
                                            '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'
                                        ],
                                        [
                                            '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
                                            'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'
                                        ],
                                        [
                                            'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
                                            'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'
                                        ],
                                        [
                                            '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
                                            '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'
                                        ],
                                        [
                                            '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
                                            'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'
                                        ],
                                        [
                                            '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
                                            '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'
                                        ],
                                        [
                                            '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
                                            'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'
                                        ],
                                        [
                                            'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
                                            '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'
                                        ],
                                        [
                                            '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
                                            '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'
                                        ],
                                        [
                                            '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
                                            'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'
                                        ],
                                        [
                                            '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
                                            'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'
                                        ],
                                        [
                                            'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
                                            'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'
                                        ],
                                        [
                                            'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
                                            'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'
                                        ],
                                        [
                                            '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
                                            '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'
                                        ],
                                        [
                                            '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
                                            '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'
                                        ],
                                        [
                                            'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
                                            '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'
                                        ],
                                        [
                                            'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
                                            'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'
                                        ],
                                        [
                                            '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
                                            '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'
                                        ],
                                        [
                                            '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
                                            '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'
                                        ],
                                        [
                                            'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
                                            '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'
                                        ],
                                        [
                                            '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
                                            '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'
                                        ],
                                        [
                                            'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
                                            'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'
                                        ],
                                        [
                                            '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
                                            'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'
                                        ],
                                        [
                                            '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
                                            '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'
                                        ],
                                        [
                                            'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
                                            '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'
                                        ],
                                        [
                                            'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
                                            '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'
                                        ],
                                        [
                                            '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
                                            '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'
                                        ],
                                        [
                                            '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
                                            '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'
                                        ],
                                        [
                                            '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
                                            'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'
                                        ],
                                        [
                                            '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
                                            'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'
                                        ],
                                        [
                                            '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
                                            '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'
                                        ],
                                        [
                                            '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
                                            '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'
                                        ],
                                        [
                                            '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
                                            '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'
                                        ],
                                        [
                                            '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
                                            'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'
                                        ],
                                        [
                                            'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
                                            'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'
                                        ],
                                        [
                                            '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
                                            'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'
                                        ],
                                        [
                                            'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
                                            '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'
                                        ],
                                        [
                                            'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
                                            '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'
                                        ],
                                        [
                                            'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
                                            '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'
                                        ],
                                        [
                                            'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
                                            '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'
                                        ],
                                        [
                                            '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
                                            'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'
                                        ],
                                        [
                                            '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
                                            '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'
                                        ],
                                        [
                                            '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
                                            'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'
                                        ],
                                        [
                                            'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
                                            'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'
                                        ],
                                        [
                                            'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
                                            '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'
                                        ],
                                        [
                                            'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
                                            'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'
                                        ],
                                        [
                                            'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
                                            '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'
                                        ],
                                        [
                                            '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
                                            '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'
                                        ],
                                        [
                                            'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
                                            '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'
                                        ],
                                        [
                                            'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
                                            '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'
                                        ],
                                        [
                                            '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
                                            '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'
                                        ],
                                        [
                                            '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
                                            'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'
                                        ],
                                        [
                                            'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
                                            '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'
                                        ],
                                        [
                                            'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
                                            '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'
                                        ],
                                        [
                                            'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
                                            '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'
                                        ],
                                        [
                                            '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
                                            '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'
                                        ],
                                        [
                                            'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
                                            'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'
                                        ],
                                        [
                                            '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
                                            'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'
                                        ],
                                        [
                                            'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
                                            'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'
                                        ],
                                        [
                                            'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
                                            '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'
                                        ],
                                        [
                                            '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
                                            'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'
                                        ],
                                        [
                                            'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
                                            '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'
                                        ],
                                        [
                                            'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
                                            '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'
                                        ],
                                        [
                                            'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
                                            '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'
                                        ],
                                        [
                                            '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
                                            'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'
                                        ],
                                        [
                                            '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
                                            'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'
                                        ],
                                        [
                                            'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
                                            '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'
                                        ],
                                        [
                                            '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
                                            'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'
                                        ],
                                        [
                                            '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
                                            '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'
                                        ],
                                        [
                                            '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
                                            'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'
                                        ],
                                        [
                                            'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
                                            'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'
                                        ],
                                        [
                                            '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
                                            'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'
                                        ],
                                        [
                                            '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
                                            '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'
                                        ],
                                        [
                                            '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
                                            'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'
                                        ],
                                        [
                                            '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
                                            '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'
                                        ],
                                        [
                                            'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
                                            'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'
                                        ],
                                        [
                                            '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
                                            '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'
                                        ],
                                        [
                                            'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
                                            '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'
                                        ],
                                        [
                                            '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
                                            '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'
                                        ],
                                        [
                                            'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
                                            'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'
                                        ],
                                        [
                                            'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
                                            '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'
                                        ],
                                        [
                                            'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
                                            'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'
                                        ],
                                        [
                                            '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
                                            'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'
                                        ],
                                        [
                                            '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
                                            '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'
                                        ],
                                        [
                                            '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
                                            'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'
                                        ],
                                        [
                                            '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
                                            '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'
                                        ],
                                        [
                                            '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
                                            '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'
                                        ],
                                        [
                                            '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
                                            'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'
                                        ],
                                        [
                                            '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
                                            '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'
                                        ],
                                        [
                                            '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
                                            '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'
                                        ],
                                        [
                                            '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
                                            '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'
                                        ]
                                    ]
                                }
                            };

                        }, {}],
                        131: [function (require, module, exports) {
                            'use strict';

                            var utils = exports;
                            var BN = require('bn.js');
                            var minAssert = require('minimalistic-assert');
                            var minUtils = require('minimalistic-crypto-utils');

                            utils.assert = minAssert;
                            utils.toArray = minUtils.toArray;
                            utils.zero2 = minUtils.zero2;
                            utils.toHex = minUtils.toHex;
                            utils.encode = minUtils.encode;

// Represent num in a w-NAF form
                            function getNAF(num, w) {
                                var naf = [];
                                var ws = 1 << (w + 1);
                                var k = num.clone();
                                while (k.cmpn(1) >= 0) {
                                    var z;
                                    if (k.isOdd()) {
                                        var mod = k.andln(ws - 1);
                                        if (mod > (ws >> 1) - 1)
                                            z = (ws >> 1) - mod;
                                        else
                                            z = mod;
                                        k.isubn(z);
                                    } else {
                                        z = 0;
                                    }
                                    naf.push(z);

                                    // Optimization, shift by word if possible
                                    var shift = (k.cmpn(0) !== 0 && k.andln(ws - 1) === 0) ? (w + 1) : 1;
                                    for (var i = 1; i < shift; i++)
                                        naf.push(0);
                                    k.iushrn(shift);
                                }

                                return naf;
                            }

                            utils.getNAF = getNAF;

// Represent k1, k2 in a Joint Sparse Form
                            function getJSF(k1, k2) {
                                var jsf = [
                                    [],
                                    []
                                ];

                                k1 = k1.clone();
                                k2 = k2.clone();
                                var d1 = 0;
                                var d2 = 0;
                                while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {

                                    // First phase
                                    var m14 = (k1.andln(3) + d1) & 3;
                                    var m24 = (k2.andln(3) + d2) & 3;
                                    if (m14 === 3)
                                        m14 = -1;
                                    if (m24 === 3)
                                        m24 = -1;
                                    var u1;
                                    if ((m14 & 1) === 0) {
                                        u1 = 0;
                                    } else {
                                        var m8 = (k1.andln(7) + d1) & 7;
                                        if ((m8 === 3 || m8 === 5) && m24 === 2)
                                            u1 = -m14;
                                        else
                                            u1 = m14;
                                    }
                                    jsf[0].push(u1);

                                    var u2;
                                    if ((m24 & 1) === 0) {
                                        u2 = 0;
                                    } else {
                                        var m8 = (k2.andln(7) + d2) & 7;
                                        if ((m8 === 3 || m8 === 5) && m14 === 2)
                                            u2 = -m24;
                                        else
                                            u2 = m24;
                                    }
                                    jsf[1].push(u2);

                                    // Second phase
                                    if (2 * d1 === u1 + 1)
                                        d1 = 1 - d1;
                                    if (2 * d2 === u2 + 1)
                                        d2 = 1 - d2;
                                    k1.iushrn(1);
                                    k2.iushrn(1);
                                }

                                return jsf;
                            }

                            utils.getJSF = getJSF;

                            function cachedProperty(obj, name, computer) {
                                var key = '_' + name;
                                obj.prototype[name] = function cachedProperty() {
                                    return this[key] !== undefined ? this[key] :
                                        this[key] = computer.call(this);
                                };
                            }

                            utils.cachedProperty = cachedProperty;

                            function parseBytes(bytes) {
                                return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
                                    bytes;
                            }

                            utils.parseBytes = parseBytes;

                            function intFromLE(bytes) {
                                return new BN(bytes, 'hex', 'le');
                            }

                            utils.intFromLE = intFromLE;


                        }, {"bn.js": 33, "minimalistic-assert": 155, "minimalistic-crypto-utils": 156}],
                        132: [function (require, module, exports) {
                            module.exports = {
                                "_args": [
                                    [
                                        "elliptic@6.4.0",
                                        "/home/phil/Waves/waves-signature-generator"
                                    ]
                                ],
                                "_development": true,
                                "_from": "elliptic@6.4.0",
                                "_id": "elliptic@6.4.0",
                                "_inBundle": false,
                                "_integrity": "sha1-ysmvh2LIWDYYcAPI3+GT5eLq5d8=",
                                "_location": "/elliptic",
                                "_phantomChildren": {},
                                "_requested": {
                                    "type": "version",
                                    "registry": true,
                                    "raw": "elliptic@6.4.0",
                                    "name": "elliptic",
                                    "escapedName": "elliptic",
                                    "rawSpec": "6.4.0",
                                    "saveSpec": null,
                                    "fetchSpec": "6.4.0"
                                },
                                "_requiredBy": [
                                    "/browserify-sign",
                                    "/create-ecdh"
                                ],
                                "_resolved": "https://registry.npmjs.org/elliptic/-/elliptic-6.4.0.tgz",
                                "_spec": "6.4.0",
                                "_where": "/home/phil/Waves/waves-signature-generator",
                                "author": {
                                    "name": "Fedor Indutny",
                                    "email": "fedor@indutny.com"
                                },
                                "bugs": {
                                    "url": "https://github.com/indutny/elliptic/issues"
                                },
                                "dependencies": {
                                    "bn.js": "^4.4.0",
                                    "brorand": "^1.0.1",
                                    "hash.js": "^1.0.0",
                                    "hmac-drbg": "^1.0.0",
                                    "inherits": "^2.0.1",
                                    "minimalistic-assert": "^1.0.0",
                                    "minimalistic-crypto-utils": "^1.0.0"
                                },
                                "description": "EC cryptography",
                                "devDependencies": {
                                    "brfs": "^1.4.3",
                                    "coveralls": "^2.11.3",
                                    "grunt": "^0.4.5",
                                    "grunt-browserify": "^5.0.0",
                                    "grunt-cli": "^1.2.0",
                                    "grunt-contrib-connect": "^1.0.0",
                                    "grunt-contrib-copy": "^1.0.0",
                                    "grunt-contrib-uglify": "^1.0.1",
                                    "grunt-mocha-istanbul": "^3.0.1",
                                    "grunt-saucelabs": "^8.6.2",
                                    "istanbul": "^0.4.2",
                                    "jscs": "^2.9.0",
                                    "jshint": "^2.6.0",
                                    "mocha": "^2.1.0"
                                },
                                "files": [
                                    "lib"
                                ],
                                "homepage": "https://github.com/indutny/elliptic",
                                "keywords": [
                                    "EC",
                                    "Elliptic",
                                    "curve",
                                    "Cryptography"
                                ],
                                "license": "MIT",
                                "main": "lib/elliptic.js",
                                "name": "elliptic",
                                "repository": {
                                    "type": "git",
                                    "url": "git+ssh://git@github.com/indutny/elliptic.git"
                                },
                                "scripts": {
                                    "jscs": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
                                    "jshint": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
                                    "lint": "npm run jscs && npm run jshint",
                                    "test": "npm run lint && npm run unit",
                                    "unit": "istanbul test _mocha --reporter=spec test/index.js",
                                    "version": "grunt dist && git add dist/"
                                },
                                "version": "6.4.0"
                            }

                        }, {}],
                        133: [function (require, module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

                            var objectCreate = Object.create || objectCreatePolyfill
                            var objectKeys = Object.keys || objectKeysPolyfill
                            var bind = Function.prototype.bind || functionBindPolyfill

                            function EventEmitter() {
                                if (!this._events || !Object.prototype.hasOwnProperty.call(this, '_events')) {
                                    this._events = objectCreate(null);
                                    this._eventsCount = 0;
                                }

                                this._maxListeners = this._maxListeners || undefined;
                            }

                            module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
                            EventEmitter.EventEmitter = EventEmitter;

                            EventEmitter.prototype._events = undefined;
                            EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
                            var defaultMaxListeners = 10;

                            var hasDefineProperty;
                            try {
                                var o = {};
                                if (Object.defineProperty) Object.defineProperty(o, 'x', {value: 0});
                                hasDefineProperty = o.x === 0;
                            } catch (err) {
                                hasDefineProperty = false
                            }
                            if (hasDefineProperty) {
                                Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
                                    enumerable: true,
                                    get: function () {
                                        return defaultMaxListeners;
                                    },
                                    set: function (arg) {
                                        // check whether the input is a positive number (whose value is zero or
                                        // greater and not a NaN).
                                        if (typeof arg !== 'number' || arg < 0 || arg !== arg)
                                            throw new TypeError('"defaultMaxListeners" must be a positive number');
                                        defaultMaxListeners = arg;
                                    }
                                });
                            } else {
                                EventEmitter.defaultMaxListeners = defaultMaxListeners;
                            }

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
                            EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
                                if (typeof n !== 'number' || n < 0 || isNaN(n))
                                    throw new TypeError('"n" argument must be a positive number');
                                this._maxListeners = n;
                                return this;
                            };

                            function $getMaxListeners(that) {
                                if (that._maxListeners === undefined)
                                    return EventEmitter.defaultMaxListeners;
                                return that._maxListeners;
                            }

                            EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
                                return $getMaxListeners(this);
                            };

// These standalone emit* functions are used to optimize calling of event
// handlers for fast cases because emit() itself often has a variable number of
// arguments and can be deoptimized because of that. These functions always have
// the same number of arguments and thus do not get deoptimized, so the code
// inside them can execute faster.
                            function emitNone(handler, isFn, self) {
                                if (isFn)
                                    handler.call(self);
                                else {
                                    var len = handler.length;
                                    var listeners = arrayClone(handler, len);
                                    for (var i = 0; i < len; ++i)
                                        listeners[i].call(self);
                                }
                            }

                            function emitOne(handler, isFn, self, arg1) {
                                if (isFn)
                                    handler.call(self, arg1);
                                else {
                                    var len = handler.length;
                                    var listeners = arrayClone(handler, len);
                                    for (var i = 0; i < len; ++i)
                                        listeners[i].call(self, arg1);
                                }
                            }

                            function emitTwo(handler, isFn, self, arg1, arg2) {
                                if (isFn)
                                    handler.call(self, arg1, arg2);
                                else {
                                    var len = handler.length;
                                    var listeners = arrayClone(handler, len);
                                    for (var i = 0; i < len; ++i)
                                        listeners[i].call(self, arg1, arg2);
                                }
                            }

                            function emitThree(handler, isFn, self, arg1, arg2, arg3) {
                                if (isFn)
                                    handler.call(self, arg1, arg2, arg3);
                                else {
                                    var len = handler.length;
                                    var listeners = arrayClone(handler, len);
                                    for (var i = 0; i < len; ++i)
                                        listeners[i].call(self, arg1, arg2, arg3);
                                }
                            }

                            function emitMany(handler, isFn, self, args) {
                                if (isFn)
                                    handler.apply(self, args);
                                else {
                                    var len = handler.length;
                                    var listeners = arrayClone(handler, len);
                                    for (var i = 0; i < len; ++i)
                                        listeners[i].apply(self, args);
                                }
                            }

                            EventEmitter.prototype.emit = function emit(type) {
                                var er, handler, len, args, i, events;
                                var doError = (type === 'error');

                                events = this._events;
                                if (events)
                                    doError = (doError && events.error == null);
                                else if (!doError)
                                    return false;

                                // If there is no 'error' event listener then throw.
                                if (doError) {
                                    if (arguments.length > 1)
                                        er = arguments[1];
                                    if (er instanceof Error) {
                                        throw er; // Unhandled 'error' event
                                    } else {
                                        // At least give some kind of context to the user
                                        var err = new Error('Unhandled "error" event. (' + er + ')');
                                        err.context = er;
                                        throw err;
                                    }
                                    return false;
                                }

                                handler = events[type];

                                if (!handler)
                                    return false;

                                var isFn = typeof handler === 'function';
                                len = arguments.length;
                                switch (len) {
                                    // fast cases
                                    case 1:
                                        emitNone(handler, isFn, this);
                                        break;
                                    case 2:
                                        emitOne(handler, isFn, this, arguments[1]);
                                        break;
                                    case 3:
                                        emitTwo(handler, isFn, this, arguments[1], arguments[2]);
                                        break;
                                    case 4:
                                        emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
                                        break;
                                    // slower
                                    default:
                                        args = new Array(len - 1);
                                        for (i = 1; i < len; i++)
                                            args[i - 1] = arguments[i];
                                        emitMany(handler, isFn, this, args);
                                }

                                return true;
                            };

                            function _addListener(target, type, listener, prepend) {
                                var m;
                                var events;
                                var existing;

                                if (typeof listener !== 'function')
                                    throw new TypeError('"listener" argument must be a function');

                                events = target._events;
                                if (!events) {
                                    events = target._events = objectCreate(null);
                                    target._eventsCount = 0;
                                } else {
                                    // To avoid recursion in the case that type === "newListener"! Before
                                    // adding it to the listeners, first emit "newListener".
                                    if (events.newListener) {
                                        target.emit('newListener', type,
                                            listener.listener ? listener.listener : listener);

                                        // Re-assign `events` because a newListener handler could have caused the
                                        // this._events to be assigned to a new object
                                        events = target._events;
                                    }
                                    existing = events[type];
                                }

                                if (!existing) {
                                    // Optimize the case of one listener. Don't need the extra array object.
                                    existing = events[type] = listener;
                                    ++target._eventsCount;
                                } else {
                                    if (typeof existing === 'function') {
                                        // Adding the second element, need to change to array.
                                        existing = events[type] =
                                            prepend ? [listener, existing] : [existing, listener];
                                    } else {
                                        // If we've already got an array, just append.
                                        if (prepend) {
                                            existing.unshift(listener);
                                        } else {
                                            existing.push(listener);
                                        }
                                    }

                                    // Check for listener leak
                                    if (!existing.warned) {
                                        m = $getMaxListeners(target);
                                        if (m && m > 0 && existing.length > m) {
                                            existing.warned = true;
                                            var w = new Error('Possible EventEmitter memory leak detected. ' +
                                                existing.length + ' "' + String(type) + '" listeners ' +
                                                'added. Use emitter.setMaxListeners() to ' +
                                                'increase limit.');
                                            w.name = 'MaxListenersExceededWarning';
                                            w.emitter = target;
                                            w.type = type;
                                            w.count = existing.length;
                                            if (typeof console === 'object' && console.warn) {
                                                console.warn('%s: %s', w.name, w.message);
                                            }
                                        }
                                    }
                                }

                                return target;
                            }

                            EventEmitter.prototype.addListener = function addListener(type, listener) {
                                return _addListener(this, type, listener, false);
                            };

                            EventEmitter.prototype.on = EventEmitter.prototype.addListener;

                            EventEmitter.prototype.prependListener =
                                function prependListener(type, listener) {
                                    return _addListener(this, type, listener, true);
                                };

                            function onceWrapper() {
                                if (!this.fired) {
                                    this.target.removeListener(this.type, this.wrapFn);
                                    this.fired = true;
                                    switch (arguments.length) {
                                        case 0:
                                            return this.listener.call(this.target);
                                        case 1:
                                            return this.listener.call(this.target, arguments[0]);
                                        case 2:
                                            return this.listener.call(this.target, arguments[0], arguments[1]);
                                        case 3:
                                            return this.listener.call(this.target, arguments[0], arguments[1],
                                                arguments[2]);
                                        default:
                                            var args = new Array(arguments.length);
                                            for (var i = 0; i < args.length; ++i)
                                                args[i] = arguments[i];
                                            this.listener.apply(this.target, args);
                                    }
                                }
                            }

                            function _onceWrap(target, type, listener) {
                                var state = {
                                    fired: false,
                                    wrapFn: undefined,
                                    target: target,
                                    type: type,
                                    listener: listener
                                };
                                var wrapped = bind.call(onceWrapper, state);
                                wrapped.listener = listener;
                                state.wrapFn = wrapped;
                                return wrapped;
                            }

                            EventEmitter.prototype.once = function once(type, listener) {
                                if (typeof listener !== 'function')
                                    throw new TypeError('"listener" argument must be a function');
                                this.on(type, _onceWrap(this, type, listener));
                                return this;
                            };

                            EventEmitter.prototype.prependOnceListener =
                                function prependOnceListener(type, listener) {
                                    if (typeof listener !== 'function')
                                        throw new TypeError('"listener" argument must be a function');
                                    this.prependListener(type, _onceWrap(this, type, listener));
                                    return this;
                                };

// Emits a 'removeListener' event if and only if the listener was removed.
                            EventEmitter.prototype.removeListener =
                                function removeListener(type, listener) {
                                    var list, events, position, i, originalListener;

                                    if (typeof listener !== 'function')
                                        throw new TypeError('"listener" argument must be a function');

                                    events = this._events;
                                    if (!events)
                                        return this;

                                    list = events[type];
                                    if (!list)
                                        return this;

                                    if (list === listener || list.listener === listener) {
                                        if (--this._eventsCount === 0)
                                            this._events = objectCreate(null);
                                        else {
                                            delete events[type];
                                            if (events.removeListener)
                                                this.emit('removeListener', type, list.listener || listener);
                                        }
                                    } else if (typeof list !== 'function') {
                                        position = -1;

                                        for (i = list.length - 1; i >= 0; i--) {
                                            if (list[i] === listener || list[i].listener === listener) {
                                                originalListener = list[i].listener;
                                                position = i;
                                                break;
                                            }
                                        }

                                        if (position < 0)
                                            return this;

                                        if (position === 0)
                                            list.shift();
                                        else
                                            spliceOne(list, position);

                                        if (list.length === 1)
                                            events[type] = list[0];

                                        if (events.removeListener)
                                            this.emit('removeListener', type, originalListener || listener);
                                    }

                                    return this;
                                };

                            EventEmitter.prototype.removeAllListeners =
                                function removeAllListeners(type) {
                                    var listeners, events, i;

                                    events = this._events;
                                    if (!events)
                                        return this;

                                    // not listening for removeListener, no need to emit
                                    if (!events.removeListener) {
                                        if (arguments.length === 0) {
                                            this._events = objectCreate(null);
                                            this._eventsCount = 0;
                                        } else if (events[type]) {
                                            if (--this._eventsCount === 0)
                                                this._events = objectCreate(null);
                                            else
                                                delete events[type];
                                        }
                                        return this;
                                    }

                                    // emit removeListener for all listeners on all events
                                    if (arguments.length === 0) {
                                        var keys = objectKeys(events);
                                        var key;
                                        for (i = 0; i < keys.length; ++i) {
                                            key = keys[i];
                                            if (key === 'removeListener') continue;
                                            this.removeAllListeners(key);
                                        }
                                        this.removeAllListeners('removeListener');
                                        this._events = objectCreate(null);
                                        this._eventsCount = 0;
                                        return this;
                                    }

                                    listeners = events[type];

                                    if (typeof listeners === 'function') {
                                        this.removeListener(type, listeners);
                                    } else if (listeners) {
                                        // LIFO order
                                        for (i = listeners.length - 1; i >= 0; i--) {
                                            this.removeListener(type, listeners[i]);
                                        }
                                    }

                                    return this;
                                };

                            function _listeners(target, type, unwrap) {
                                var events = target._events;

                                if (!events)
                                    return [];

                                var evlistener = events[type];
                                if (!evlistener)
                                    return [];

                                if (typeof evlistener === 'function')
                                    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

                                return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
                            }

                            EventEmitter.prototype.listeners = function listeners(type) {
                                return _listeners(this, type, true);
                            };

                            EventEmitter.prototype.rawListeners = function rawListeners(type) {
                                return _listeners(this, type, false);
                            };

                            EventEmitter.listenerCount = function (emitter, type) {
                                if (typeof emitter.listenerCount === 'function') {
                                    return emitter.listenerCount(type);
                                } else {
                                    return listenerCount.call(emitter, type);
                                }
                            };

                            EventEmitter.prototype.listenerCount = listenerCount;

                            function listenerCount(type) {
                                var events = this._events;

                                if (events) {
                                    var evlistener = events[type];

                                    if (typeof evlistener === 'function') {
                                        return 1;
                                    } else if (evlistener) {
                                        return evlistener.length;
                                    }
                                }

                                return 0;
                            }

                            EventEmitter.prototype.eventNames = function eventNames() {
                                return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
                            };

// About 1.5x faster than the two-arg version of Array#splice().
                            function spliceOne(list, index) {
                                for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
                                    list[i] = list[k];
                                list.pop();
                            }

                            function arrayClone(arr, n) {
                                var copy = new Array(n);
                                for (var i = 0; i < n; ++i)
                                    copy[i] = arr[i];
                                return copy;
                            }

                            function unwrapListeners(arr) {
                                var ret = new Array(arr.length);
                                for (var i = 0; i < ret.length; ++i) {
                                    ret[i] = arr[i].listener || arr[i];
                                }
                                return ret;
                            }

                            function objectCreatePolyfill(proto) {
                                var F = function () {
                                };
                                F.prototype = proto;
                                return new F;
                            }

                            function objectKeysPolyfill(obj) {
                                var keys = [];
                                for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k)) {
                                    keys.push(k);
                                }
                                return k;
                            }

                            function functionBindPolyfill(context) {
                                var fn = this;
                                return function () {
                                    return fn.apply(context, arguments);
                                };
                            }

                        }, {}],
                        134: [function (require, module, exports) {
                            var Buffer = require('safe-buffer').Buffer
                            var MD5 = require('md5.js')

                            /* eslint-disable camelcase */
                            function EVP_BytesToKey(password, salt, keyBits, ivLen) {
                                if (!Buffer.isBuffer(password)) password = Buffer.from(password, 'binary')
                                if (salt) {
                                    if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, 'binary')
                                    if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length')
                                }

                                var keyLen = keyBits / 8
                                var key = Buffer.alloc(keyLen)
                                var iv = Buffer.alloc(ivLen || 0)
                                var tmp = Buffer.alloc(0)

                                while (keyLen > 0 || ivLen > 0) {
                                    var hash = new MD5()
                                    hash.update(tmp)
                                    hash.update(password)
                                    if (salt) hash.update(salt)
                                    tmp = hash.digest()

                                    var used = 0

                                    if (keyLen > 0) {
                                        var keyStart = key.length - keyLen
                                        used = Math.min(keyLen, tmp.length)
                                        tmp.copy(key, keyStart, 0, used)
                                        keyLen -= used
                                    }

                                    if (used < tmp.length && ivLen > 0) {
                                        var ivStart = iv.length - ivLen
                                        var length = Math.min(ivLen, tmp.length - used)
                                        tmp.copy(iv, ivStart, used, used + length)
                                        ivLen -= length
                                    }
                                }

                                tmp.fill(0)
                                return {key: key, iv: iv}
                            }

                            module.exports = EVP_BytesToKey

                        }, {"md5.js": 153, "safe-buffer": 191}],
                        135: [function (require, module, exports) {
                            'use strict'
                            var Buffer = require('safe-buffer').Buffer
                            var Transform = require('stream').Transform
                            var inherits = require('inherits')

                            function throwIfNotStringOrBuffer(val, prefix) {
                                if (!Buffer.isBuffer(val) && typeof val !== 'string') {
                                    throw new TypeError(prefix + ' must be a string or a buffer')
                                }
                            }

                            function HashBase(blockSize) {
                                Transform.call(this)

                                this._block = Buffer.allocUnsafe(blockSize)
                                this._blockSize = blockSize
                                this._blockOffset = 0
                                this._length = [0, 0, 0, 0]

                                this._finalized = false
                            }

                            inherits(HashBase, Transform)

                            HashBase.prototype._transform = function (chunk, encoding, callback) {
                                var error = null
                                try {
                                    this.update(chunk, encoding)
                                } catch (err) {
                                    error = err
                                }

                                callback(error)
                            }

                            HashBase.prototype._flush = function (callback) {
                                var error = null
                                try {
                                    this.push(this.digest())
                                } catch (err) {
                                    error = err
                                }

                                callback(error)
                            }

                            HashBase.prototype.update = function (data, encoding) {
                                throwIfNotStringOrBuffer(data, 'Data')
                                if (this._finalized) throw new Error('Digest already called')
                                if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)

                                // consume data
                                var block = this._block
                                var offset = 0
                                while (this._blockOffset + data.length - offset >= this._blockSize) {
                                    for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++]
                                    this._update()
                                    this._blockOffset = 0
                                }
                                while (offset < data.length) block[this._blockOffset++] = data[offset++]

                                // update length
                                for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
                                    this._length[j] += carry
                                    carry = (this._length[j] / 0x0100000000) | 0
                                    if (carry > 0) this._length[j] -= 0x0100000000 * carry
                                }

                                return this
                            }

                            HashBase.prototype._update = function () {
                                throw new Error('_update is not implemented')
                            }

                            HashBase.prototype.digest = function (encoding) {
                                if (this._finalized) throw new Error('Digest already called')
                                this._finalized = true

                                var digest = this._digest()
                                if (encoding !== undefined) digest = digest.toString(encoding)

                                // reset state
                                this._block.fill(0)
                                this._blockOffset = 0
                                for (var i = 0; i < 4; ++i) this._length[i] = 0

                                return digest
                            }

                            HashBase.prototype._digest = function () {
                                throw new Error('_digest is not implemented')
                            }

                            module.exports = HashBase

                        }, {"inherits": 150, "safe-buffer": 191, "stream": 200}],
                        136: [function (require, module, exports) {
                            var hash = exports;

                            hash.utils = require('./hash/utils');
                            hash.common = require('./hash/common');
                            hash.sha = require('./hash/sha');
                            hash.ripemd = require('./hash/ripemd');
                            hash.hmac = require('./hash/hmac');

// Proxy hash functions to the main object
                            hash.sha1 = hash.sha.sha1;
                            hash.sha256 = hash.sha.sha256;
                            hash.sha224 = hash.sha.sha224;
                            hash.sha384 = hash.sha.sha384;
                            hash.sha512 = hash.sha.sha512;
                            hash.ripemd160 = hash.ripemd.ripemd160;

                        }, {
                            "./hash/common": 137,
                            "./hash/hmac": 138,
                            "./hash/ripemd": 139,
                            "./hash/sha": 140,
                            "./hash/utils": 147
                        }],
                        137: [function (require, module, exports) {
                            'use strict';

                            var utils = require('./utils');
                            var assert = require('minimalistic-assert');

                            function BlockHash() {
                                this.pending = null;
                                this.pendingTotal = 0;
                                this.blockSize = this.constructor.blockSize;
                                this.outSize = this.constructor.outSize;
                                this.hmacStrength = this.constructor.hmacStrength;
                                this.padLength = this.constructor.padLength / 8;
                                this.endian = 'big';

                                this._delta8 = this.blockSize / 8;
                                this._delta32 = this.blockSize / 32;
                            }

                            exports.BlockHash = BlockHash;

                            BlockHash.prototype.update = function update(msg, enc) {
                                // Convert message to array, pad it, and join into 32bit blocks
                                msg = utils.toArray(msg, enc);
                                if (!this.pending)
                                    this.pending = msg;
                                else
                                    this.pending = this.pending.concat(msg);
                                this.pendingTotal += msg.length;

                                // Enough data, try updating
                                if (this.pending.length >= this._delta8) {
                                    msg = this.pending;

                                    // Process pending data in blocks
                                    var r = msg.length % this._delta8;
                                    this.pending = msg.slice(msg.length - r, msg.length);
                                    if (this.pending.length === 0)
                                        this.pending = null;

                                    msg = utils.join32(msg, 0, msg.length - r, this.endian);
                                    for (var i = 0; i < msg.length; i += this._delta32)
                                        this._update(msg, i, i + this._delta32);
                                }

                                return this;
                            };

                            BlockHash.prototype.digest = function digest(enc) {
                                this.update(this._pad());
                                assert(this.pending === null);

                                return this._digest(enc);
                            };

                            BlockHash.prototype._pad = function pad() {
                                var len = this.pendingTotal;
                                var bytes = this._delta8;
                                var k = bytes - ((len + this.padLength) % bytes);
                                var res = new Array(k + this.padLength);
                                res[0] = 0x80;
                                for (var i = 1; i < k; i++)
                                    res[i] = 0;

                                // Append length
                                len <<= 3;
                                if (this.endian === 'big') {
                                    for (var t = 8; t < this.padLength; t++)
                                        res[i++] = 0;

                                    res[i++] = 0;
                                    res[i++] = 0;
                                    res[i++] = 0;
                                    res[i++] = 0;
                                    res[i++] = (len >>> 24) & 0xff;
                                    res[i++] = (len >>> 16) & 0xff;
                                    res[i++] = (len >>> 8) & 0xff;
                                    res[i++] = len & 0xff;
                                } else {
                                    res[i++] = len & 0xff;
                                    res[i++] = (len >>> 8) & 0xff;
                                    res[i++] = (len >>> 16) & 0xff;
                                    res[i++] = (len >>> 24) & 0xff;
                                    res[i++] = 0;
                                    res[i++] = 0;
                                    res[i++] = 0;
                                    res[i++] = 0;

                                    for (t = 8; t < this.padLength; t++)
                                        res[i++] = 0;
                                }

                                return res;
                            };

                        }, {"./utils": 147, "minimalistic-assert": 155}],
                        138: [function (require, module, exports) {
                            'use strict';

                            var utils = require('./utils');
                            var assert = require('minimalistic-assert');

                            function Hmac(hash, key, enc) {
                                if (!(this instanceof Hmac))
                                    return new Hmac(hash, key, enc);
                                this.Hash = hash;
                                this.blockSize = hash.blockSize / 8;
                                this.outSize = hash.outSize / 8;
                                this.inner = null;
                                this.outer = null;

                                this._init(utils.toArray(key, enc));
                            }

                            module.exports = Hmac;

                            Hmac.prototype._init = function init(key) {
                                // Shorten key, if needed
                                if (key.length > this.blockSize)
                                    key = new this.Hash().update(key).digest();
                                assert(key.length <= this.blockSize);

                                // Add padding to key
                                for (var i = key.length; i < this.blockSize; i++)
                                    key.push(0);

                                for (i = 0; i < key.length; i++)
                                    key[i] ^= 0x36;
                                this.inner = new this.Hash().update(key);

                                // 0x36 ^ 0x5c = 0x6a
                                for (i = 0; i < key.length; i++)
                                    key[i] ^= 0x6a;
                                this.outer = new this.Hash().update(key);
                            };

                            Hmac.prototype.update = function update(msg, enc) {
                                this.inner.update(msg, enc);
                                return this;
                            };

                            Hmac.prototype.digest = function digest(enc) {
                                this.outer.update(this.inner.digest());
                                return this.outer.digest(enc);
                            };

                        }, {"./utils": 147, "minimalistic-assert": 155}],
                        139: [function (require, module, exports) {
                            'use strict';

                            var utils = require('./utils');
                            var common = require('./common');

                            var rotl32 = utils.rotl32;
                            var sum32 = utils.sum32;
                            var sum32_3 = utils.sum32_3;
                            var sum32_4 = utils.sum32_4;
                            var BlockHash = common.BlockHash;

                            function RIPEMD160() {
                                if (!(this instanceof RIPEMD160))
                                    return new RIPEMD160();

                                BlockHash.call(this);

                                this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];
                                this.endian = 'little';
                            }

                            utils.inherits(RIPEMD160, BlockHash);
                            exports.ripemd160 = RIPEMD160;

                            RIPEMD160.blockSize = 512;
                            RIPEMD160.outSize = 160;
                            RIPEMD160.hmacStrength = 192;
                            RIPEMD160.padLength = 64;

                            RIPEMD160.prototype._update = function update(msg, start) {
                                var A = this.h[0];
                                var B = this.h[1];
                                var C = this.h[2];
                                var D = this.h[3];
                                var E = this.h[4];
                                var Ah = A;
                                var Bh = B;
                                var Ch = C;
                                var Dh = D;
                                var Eh = E;
                                for (var j = 0; j < 80; j++) {
                                    var T = sum32(
                                        rotl32(
                                            sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
                                            s[j]),
                                        E);
                                    A = E;
                                    E = D;
                                    D = rotl32(C, 10);
                                    C = B;
                                    B = T;
                                    T = sum32(
                                        rotl32(
                                            sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
                                            sh[j]),
                                        Eh);
                                    Ah = Eh;
                                    Eh = Dh;
                                    Dh = rotl32(Ch, 10);
                                    Ch = Bh;
                                    Bh = T;
                                }
                                T = sum32_3(this.h[1], C, Dh);
                                this.h[1] = sum32_3(this.h[2], D, Eh);
                                this.h[2] = sum32_3(this.h[3], E, Ah);
                                this.h[3] = sum32_3(this.h[4], A, Bh);
                                this.h[4] = sum32_3(this.h[0], B, Ch);
                                this.h[0] = T;
                            };

                            RIPEMD160.prototype._digest = function digest(enc) {
                                if (enc === 'hex')
                                    return utils.toHex32(this.h, 'little');
                                else
                                    return utils.split32(this.h, 'little');
                            };

                            function f(j, x, y, z) {
                                if (j <= 15)
                                    return x ^ y ^ z;
                                else if (j <= 31)
                                    return (x & y) | ((~x) & z);
                                else if (j <= 47)
                                    return (x | (~y)) ^ z;
                                else if (j <= 63)
                                    return (x & z) | (y & (~z));
                                else
                                    return x ^ (y | (~z));
                            }

                            function K(j) {
                                if (j <= 15)
                                    return 0x00000000;
                                else if (j <= 31)
                                    return 0x5a827999;
                                else if (j <= 47)
                                    return 0x6ed9eba1;
                                else if (j <= 63)
                                    return 0x8f1bbcdc;
                                else
                                    return 0xa953fd4e;
                            }

                            function Kh(j) {
                                if (j <= 15)
                                    return 0x50a28be6;
                                else if (j <= 31)
                                    return 0x5c4dd124;
                                else if (j <= 47)
                                    return 0x6d703ef3;
                                else if (j <= 63)
                                    return 0x7a6d76e9;
                                else
                                    return 0x00000000;
                            }

                            var r = [
                                0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                                7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
                                3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
                                1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
                                4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
                            ];

                            var rh = [
                                5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
                                6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
                                15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
                                8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
                                12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
                            ];

                            var s = [
                                11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
                                7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
                                11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
                                11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
                                9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
                            ];

                            var sh = [
                                8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
                                9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
                                9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
                                15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
                                8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
                            ];

                        }, {"./common": 137, "./utils": 147}],
                        140: [function (require, module, exports) {
                            'use strict';

                            exports.sha1 = require('./sha/1');
                            exports.sha224 = require('./sha/224');
                            exports.sha256 = require('./sha/256');
                            exports.sha384 = require('./sha/384');
                            exports.sha512 = require('./sha/512');

                        }, {"./sha/1": 141, "./sha/224": 142, "./sha/256": 143, "./sha/384": 144, "./sha/512": 145}],
                        141: [function (require, module, exports) {
                            'use strict';

                            var utils = require('../utils');
                            var common = require('../common');
                            var shaCommon = require('./common');

                            var rotl32 = utils.rotl32;
                            var sum32 = utils.sum32;
                            var sum32_5 = utils.sum32_5;
                            var ft_1 = shaCommon.ft_1;
                            var BlockHash = common.BlockHash;

                            var sha1_K = [
                                0x5A827999, 0x6ED9EBA1,
                                0x8F1BBCDC, 0xCA62C1D6
                            ];

                            function SHA1() {
                                if (!(this instanceof SHA1))
                                    return new SHA1();

                                BlockHash.call(this);
                                this.h = [
                                    0x67452301, 0xefcdab89, 0x98badcfe,
                                    0x10325476, 0xc3d2e1f0];
                                this.W = new Array(80);
                            }

                            utils.inherits(SHA1, BlockHash);
                            module.exports = SHA1;

                            SHA1.blockSize = 512;
                            SHA1.outSize = 160;
                            SHA1.hmacStrength = 80;
                            SHA1.padLength = 64;

                            SHA1.prototype._update = function _update(msg, start) {
                                var W = this.W;

                                for (var i = 0; i < 16; i++)
                                    W[i] = msg[start + i];

                                for (; i < W.length; i++)
                                    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

                                var a = this.h[0];
                                var b = this.h[1];
                                var c = this.h[2];
                                var d = this.h[3];
                                var e = this.h[4];

                                for (i = 0; i < W.length; i++) {
                                    var s = ~~(i / 20);
                                    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
                                    e = d;
                                    d = c;
                                    c = rotl32(b, 30);
                                    b = a;
                                    a = t;
                                }

                                this.h[0] = sum32(this.h[0], a);
                                this.h[1] = sum32(this.h[1], b);
                                this.h[2] = sum32(this.h[2], c);
                                this.h[3] = sum32(this.h[3], d);
                                this.h[4] = sum32(this.h[4], e);
                            };

                            SHA1.prototype._digest = function digest(enc) {
                                if (enc === 'hex')
                                    return utils.toHex32(this.h, 'big');
                                else
                                    return utils.split32(this.h, 'big');
                            };

                        }, {"../common": 137, "../utils": 147, "./common": 146}],
                        142: [function (require, module, exports) {
                            'use strict';

                            var utils = require('../utils');
                            var SHA256 = require('./256');

                            function SHA224() {
                                if (!(this instanceof SHA224))
                                    return new SHA224();

                                SHA256.call(this);
                                this.h = [
                                    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
                                    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4];
                            }

                            utils.inherits(SHA224, SHA256);
                            module.exports = SHA224;

                            SHA224.blockSize = 512;
                            SHA224.outSize = 224;
                            SHA224.hmacStrength = 192;
                            SHA224.padLength = 64;

                            SHA224.prototype._digest = function digest(enc) {
                                // Just truncate output
                                if (enc === 'hex')
                                    return utils.toHex32(this.h.slice(0, 7), 'big');
                                else
                                    return utils.split32(this.h.slice(0, 7), 'big');
                            };


                        }, {"../utils": 147, "./256": 143}],
                        143: [function (require, module, exports) {
                            'use strict';

                            var utils = require('../utils');
                            var common = require('../common');
                            var shaCommon = require('./common');
                            var assert = require('minimalistic-assert');

                            var sum32 = utils.sum32;
                            var sum32_4 = utils.sum32_4;
                            var sum32_5 = utils.sum32_5;
                            var ch32 = shaCommon.ch32;
                            var maj32 = shaCommon.maj32;
                            var s0_256 = shaCommon.s0_256;
                            var s1_256 = shaCommon.s1_256;
                            var g0_256 = shaCommon.g0_256;
                            var g1_256 = shaCommon.g1_256;

                            var BlockHash = common.BlockHash;

                            var sha256_K = [
                                0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
                                0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
                                0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
                                0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
                                0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
                                0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
                                0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
                                0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
                                0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
                                0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
                                0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
                                0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
                                0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
                                0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
                                0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
                                0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
                            ];

                            function SHA256() {
                                if (!(this instanceof SHA256))
                                    return new SHA256();

                                BlockHash.call(this);
                                this.h = [
                                    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
                                    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
                                ];
                                this.k = sha256_K;
                                this.W = new Array(64);
                            }

                            utils.inherits(SHA256, BlockHash);
                            module.exports = SHA256;

                            SHA256.blockSize = 512;
                            SHA256.outSize = 256;
                            SHA256.hmacStrength = 192;
                            SHA256.padLength = 64;

                            SHA256.prototype._update = function _update(msg, start) {
                                var W = this.W;

                                for (var i = 0; i < 16; i++)
                                    W[i] = msg[start + i];
                                for (; i < W.length; i++)
                                    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

                                var a = this.h[0];
                                var b = this.h[1];
                                var c = this.h[2];
                                var d = this.h[3];
                                var e = this.h[4];
                                var f = this.h[5];
                                var g = this.h[6];
                                var h = this.h[7];

                                assert(this.k.length === W.length);
                                for (i = 0; i < W.length; i++) {
                                    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
                                    var T2 = sum32(s0_256(a), maj32(a, b, c));
                                    h = g;
                                    g = f;
                                    f = e;
                                    e = sum32(d, T1);
                                    d = c;
                                    c = b;
                                    b = a;
                                    a = sum32(T1, T2);
                                }

                                this.h[0] = sum32(this.h[0], a);
                                this.h[1] = sum32(this.h[1], b);
                                this.h[2] = sum32(this.h[2], c);
                                this.h[3] = sum32(this.h[3], d);
                                this.h[4] = sum32(this.h[4], e);
                                this.h[5] = sum32(this.h[5], f);
                                this.h[6] = sum32(this.h[6], g);
                                this.h[7] = sum32(this.h[7], h);
                            };

                            SHA256.prototype._digest = function digest(enc) {
                                if (enc === 'hex')
                                    return utils.toHex32(this.h, 'big');
                                else
                                    return utils.split32(this.h, 'big');
                            };

                        }, {"../common": 137, "../utils": 147, "./common": 146, "minimalistic-assert": 155}],
                        144: [function (require, module, exports) {
                            'use strict';

                            var utils = require('../utils');

                            var SHA512 = require('./512');

                            function SHA384() {
                                if (!(this instanceof SHA384))
                                    return new SHA384();

                                SHA512.call(this);
                                this.h = [
                                    0xcbbb9d5d, 0xc1059ed8,
                                    0x629a292a, 0x367cd507,
                                    0x9159015a, 0x3070dd17,
                                    0x152fecd8, 0xf70e5939,
                                    0x67332667, 0xffc00b31,
                                    0x8eb44a87, 0x68581511,
                                    0xdb0c2e0d, 0x64f98fa7,
                                    0x47b5481d, 0xbefa4fa4];
                            }

                            utils.inherits(SHA384, SHA512);
                            module.exports = SHA384;

                            SHA384.blockSize = 1024;
                            SHA384.outSize = 384;
                            SHA384.hmacStrength = 192;
                            SHA384.padLength = 128;

                            SHA384.prototype._digest = function digest(enc) {
                                if (enc === 'hex')
                                    return utils.toHex32(this.h.slice(0, 12), 'big');
                                else
                                    return utils.split32(this.h.slice(0, 12), 'big');
                            };

                        }, {"../utils": 147, "./512": 145}],
                        145: [function (require, module, exports) {
                            'use strict';

                            var utils = require('../utils');
                            var common = require('../common');
                            var assert = require('minimalistic-assert');

                            var rotr64_hi = utils.rotr64_hi;
                            var rotr64_lo = utils.rotr64_lo;
                            var shr64_hi = utils.shr64_hi;
                            var shr64_lo = utils.shr64_lo;
                            var sum64 = utils.sum64;
                            var sum64_hi = utils.sum64_hi;
                            var sum64_lo = utils.sum64_lo;
                            var sum64_4_hi = utils.sum64_4_hi;
                            var sum64_4_lo = utils.sum64_4_lo;
                            var sum64_5_hi = utils.sum64_5_hi;
                            var sum64_5_lo = utils.sum64_5_lo;

                            var BlockHash = common.BlockHash;

                            var sha512_K = [
                                0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
                                0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
                                0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
                                0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
                                0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
                                0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
                                0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
                                0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
                                0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
                                0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
                                0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
                                0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
                                0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
                                0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
                                0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
                                0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
                                0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
                                0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
                                0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
                                0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
                                0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
                                0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
                                0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
                                0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
                                0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
                                0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
                                0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
                                0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
                                0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
                                0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
                                0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
                                0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
                                0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
                                0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
                                0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
                                0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
                                0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
                                0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
                                0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
                                0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
                            ];

                            function SHA512() {
                                if (!(this instanceof SHA512))
                                    return new SHA512();

                                BlockHash.call(this);
                                this.h = [
                                    0x6a09e667, 0xf3bcc908,
                                    0xbb67ae85, 0x84caa73b,
                                    0x3c6ef372, 0xfe94f82b,
                                    0xa54ff53a, 0x5f1d36f1,
                                    0x510e527f, 0xade682d1,
                                    0x9b05688c, 0x2b3e6c1f,
                                    0x1f83d9ab, 0xfb41bd6b,
                                    0x5be0cd19, 0x137e2179];
                                this.k = sha512_K;
                                this.W = new Array(160);
                            }

                            utils.inherits(SHA512, BlockHash);
                            module.exports = SHA512;

                            SHA512.blockSize = 1024;
                            SHA512.outSize = 512;
                            SHA512.hmacStrength = 192;
                            SHA512.padLength = 128;

                            SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
                                var W = this.W;

                                // 32 x 32bit words
                                for (var i = 0; i < 32; i++)
                                    W[i] = msg[start + i];
                                for (; i < W.length; i += 2) {
                                    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
                                    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
                                    var c1_hi = W[i - 14];  // i - 7
                                    var c1_lo = W[i - 13];
                                    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
                                    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
                                    var c3_hi = W[i - 32];  // i - 16
                                    var c3_lo = W[i - 31];

                                    W[i] = sum64_4_hi(
                                        c0_hi, c0_lo,
                                        c1_hi, c1_lo,
                                        c2_hi, c2_lo,
                                        c3_hi, c3_lo);
                                    W[i + 1] = sum64_4_lo(
                                        c0_hi, c0_lo,
                                        c1_hi, c1_lo,
                                        c2_hi, c2_lo,
                                        c3_hi, c3_lo);
                                }
                            };

                            SHA512.prototype._update = function _update(msg, start) {
                                this._prepareBlock(msg, start);

                                var W = this.W;

                                var ah = this.h[0];
                                var al = this.h[1];
                                var bh = this.h[2];
                                var bl = this.h[3];
                                var ch = this.h[4];
                                var cl = this.h[5];
                                var dh = this.h[6];
                                var dl = this.h[7];
                                var eh = this.h[8];
                                var el = this.h[9];
                                var fh = this.h[10];
                                var fl = this.h[11];
                                var gh = this.h[12];
                                var gl = this.h[13];
                                var hh = this.h[14];
                                var hl = this.h[15];

                                assert(this.k.length === W.length);
                                for (var i = 0; i < W.length; i += 2) {
                                    var c0_hi = hh;
                                    var c0_lo = hl;
                                    var c1_hi = s1_512_hi(eh, el);
                                    var c1_lo = s1_512_lo(eh, el);
                                    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
                                    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
                                    var c3_hi = this.k[i];
                                    var c3_lo = this.k[i + 1];
                                    var c4_hi = W[i];
                                    var c4_lo = W[i + 1];

                                    var T1_hi = sum64_5_hi(
                                        c0_hi, c0_lo,
                                        c1_hi, c1_lo,
                                        c2_hi, c2_lo,
                                        c3_hi, c3_lo,
                                        c4_hi, c4_lo);
                                    var T1_lo = sum64_5_lo(
                                        c0_hi, c0_lo,
                                        c1_hi, c1_lo,
                                        c2_hi, c2_lo,
                                        c3_hi, c3_lo,
                                        c4_hi, c4_lo);

                                    c0_hi = s0_512_hi(ah, al);
                                    c0_lo = s0_512_lo(ah, al);
                                    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
                                    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

                                    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
                                    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

                                    hh = gh;
                                    hl = gl;

                                    gh = fh;
                                    gl = fl;

                                    fh = eh;
                                    fl = el;

                                    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
                                    el = sum64_lo(dl, dl, T1_hi, T1_lo);

                                    dh = ch;
                                    dl = cl;

                                    ch = bh;
                                    cl = bl;

                                    bh = ah;
                                    bl = al;

                                    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
                                    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
                                }

                                sum64(this.h, 0, ah, al);
                                sum64(this.h, 2, bh, bl);
                                sum64(this.h, 4, ch, cl);
                                sum64(this.h, 6, dh, dl);
                                sum64(this.h, 8, eh, el);
                                sum64(this.h, 10, fh, fl);
                                sum64(this.h, 12, gh, gl);
                                sum64(this.h, 14, hh, hl);
                            };

                            SHA512.prototype._digest = function digest(enc) {
                                if (enc === 'hex')
                                    return utils.toHex32(this.h, 'big');
                                else
                                    return utils.split32(this.h, 'big');
                            };

                            function ch64_hi(xh, xl, yh, yl, zh) {
                                var r = (xh & yh) ^ ((~xh) & zh);
                                if (r < 0)
                                    r += 0x100000000;
                                return r;
                            }

                            function ch64_lo(xh, xl, yh, yl, zh, zl) {
                                var r = (xl & yl) ^ ((~xl) & zl);
                                if (r < 0)
                                    r += 0x100000000;
                                return r;
                            }

                            function maj64_hi(xh, xl, yh, yl, zh) {
                                var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
                                if (r < 0)
                                    r += 0x100000000;
                                return r;
                            }

                            function maj64_lo(xh, xl, yh, yl, zh, zl) {
                                var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
                                if (r < 0)
                                    r += 0x100000000;
                                return r;
                            }

                            function s0_512_hi(xh, xl) {
                                var c0_hi = rotr64_hi(xh, xl, 28);
                                var c1_hi = rotr64_hi(xl, xh, 2);  // 34
                                var c2_hi = rotr64_hi(xl, xh, 7);  // 39

                                var r = c0_hi ^ c1_hi ^ c2_hi;
                                if (r < 0)
                                    r += 0x100000000;
                                return r;
                            }

                            function s0_512_lo(xh, xl) {
                                var c0_lo = rotr64_lo(xh, xl, 28);
                                var c1_lo = rotr64_lo(xl, xh, 2);  // 34
                                var c2_lo = rotr64_lo(xl, xh, 7);  // 39

                                var r = c0_lo ^ c1_lo ^ c2_lo;
                                if (r < 0)
                                    r += 0x100000000;
                                return r;
                            }

                            function s1_512_hi(xh, xl) {
                                var c0_hi = rotr64_hi(xh, xl, 14);
                                var c1_hi = rotr64_hi(xh, xl, 18);
                                var c2_hi = rotr64_hi(xl, xh, 9);  // 41

                                var r = c0_hi ^ c1_hi ^ c2_hi;
                                if (r < 0)
                                    r += 0x100000000;
                                return r;
                            }

                            function s1_512_lo(xh, xl) {
                                var c0_lo = rotr64_lo(xh, xl, 14);
                                var c1_lo = rotr64_lo(xh, xl, 18);
                                var c2_lo = rotr64_lo(xl, xh, 9);  // 41

                                var r = c0_lo ^ c1_lo ^ c2_lo;
                                if (r < 0)
                                    r += 0x100000000;
                                return r;
                            }

                            function g0_512_hi(xh, xl) {
                                var c0_hi = rotr64_hi(xh, xl, 1);
                                var c1_hi = rotr64_hi(xh, xl, 8);
                                var c2_hi = shr64_hi(xh, xl, 7);

                                var r = c0_hi ^ c1_hi ^ c2_hi;
                                if (r < 0)
                                    r += 0x100000000;
                                return r;
                            }

                            function g0_512_lo(xh, xl) {
                                var c0_lo = rotr64_lo(xh, xl, 1);
                                var c1_lo = rotr64_lo(xh, xl, 8);
                                var c2_lo = shr64_lo(xh, xl, 7);

                                var r = c0_lo ^ c1_lo ^ c2_lo;
                                if (r < 0)
                                    r += 0x100000000;
                                return r;
                            }

                            function g1_512_hi(xh, xl) {
                                var c0_hi = rotr64_hi(xh, xl, 19);
                                var c1_hi = rotr64_hi(xl, xh, 29);  // 61
                                var c2_hi = shr64_hi(xh, xl, 6);

                                var r = c0_hi ^ c1_hi ^ c2_hi;
                                if (r < 0)
                                    r += 0x100000000;
                                return r;
                            }

                            function g1_512_lo(xh, xl) {
                                var c0_lo = rotr64_lo(xh, xl, 19);
                                var c1_lo = rotr64_lo(xl, xh, 29);  // 61
                                var c2_lo = shr64_lo(xh, xl, 6);

                                var r = c0_lo ^ c1_lo ^ c2_lo;
                                if (r < 0)
                                    r += 0x100000000;
                                return r;
                            }

                        }, {"../common": 137, "../utils": 147, "minimalistic-assert": 155}],
                        146: [function (require, module, exports) {
                            'use strict';

                            var utils = require('../utils');
                            var rotr32 = utils.rotr32;

                            function ft_1(s, x, y, z) {
                                if (s === 0)
                                    return ch32(x, y, z);
                                if (s === 1 || s === 3)
                                    return p32(x, y, z);
                                if (s === 2)
                                    return maj32(x, y, z);
                            }

                            exports.ft_1 = ft_1;

                            function ch32(x, y, z) {
                                return (x & y) ^ ((~x) & z);
                            }

                            exports.ch32 = ch32;

                            function maj32(x, y, z) {
                                return (x & y) ^ (x & z) ^ (y & z);
                            }

                            exports.maj32 = maj32;

                            function p32(x, y, z) {
                                return x ^ y ^ z;
                            }

                            exports.p32 = p32;

                            function s0_256(x) {
                                return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
                            }

                            exports.s0_256 = s0_256;

                            function s1_256(x) {
                                return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
                            }

                            exports.s1_256 = s1_256;

                            function g0_256(x) {
                                return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
                            }

                            exports.g0_256 = g0_256;

                            function g1_256(x) {
                                return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
                            }

                            exports.g1_256 = g1_256;

                        }, {"../utils": 147}],
                        147: [function (require, module, exports) {
                            'use strict';

                            var assert = require('minimalistic-assert');
                            var inherits = require('inherits');

                            exports.inherits = inherits;

                            function toArray(msg, enc) {
                                if (Array.isArray(msg))
                                    return msg.slice();
                                if (!msg)
                                    return [];
                                var res = [];
                                if (typeof msg === 'string') {
                                    if (!enc) {
                                        for (var i = 0; i < msg.length; i++) {
                                            var c = msg.charCodeAt(i);
                                            var hi = c >> 8;
                                            var lo = c & 0xff;
                                            if (hi)
                                                res.push(hi, lo);
                                            else
                                                res.push(lo);
                                        }
                                    } else if (enc === 'hex') {
                                        msg = msg.replace(/[^a-z0-9]+/ig, '');
                                        if (msg.length % 2 !== 0)
                                            msg = '0' + msg;
                                        for (i = 0; i < msg.length; i += 2)
                                            res.push(parseInt(msg[i] + msg[i + 1], 16));
                                    }
                                } else {
                                    for (i = 0; i < msg.length; i++)
                                        res[i] = msg[i] | 0;
                                }
                                return res;
                            }

                            exports.toArray = toArray;

                            function toHex(msg) {
                                var res = '';
                                for (var i = 0; i < msg.length; i++)
                                    res += zero2(msg[i].toString(16));
                                return res;
                            }

                            exports.toHex = toHex;

                            function htonl(w) {
                                var res = (w >>> 24) |
                                    ((w >>> 8) & 0xff00) |
                                    ((w << 8) & 0xff0000) |
                                    ((w & 0xff) << 24);
                                return res >>> 0;
                            }

                            exports.htonl = htonl;

                            function toHex32(msg, endian) {
                                var res = '';
                                for (var i = 0; i < msg.length; i++) {
                                    var w = msg[i];
                                    if (endian === 'little')
                                        w = htonl(w);
                                    res += zero8(w.toString(16));
                                }
                                return res;
                            }

                            exports.toHex32 = toHex32;

                            function zero2(word) {
                                if (word.length === 1)
                                    return '0' + word;
                                else
                                    return word;
                            }

                            exports.zero2 = zero2;

                            function zero8(word) {
                                if (word.length === 7)
                                    return '0' + word;
                                else if (word.length === 6)
                                    return '00' + word;
                                else if (word.length === 5)
                                    return '000' + word;
                                else if (word.length === 4)
                                    return '0000' + word;
                                else if (word.length === 3)
                                    return '00000' + word;
                                else if (word.length === 2)
                                    return '000000' + word;
                                else if (word.length === 1)
                                    return '0000000' + word;
                                else
                                    return word;
                            }

                            exports.zero8 = zero8;

                            function join32(msg, start, end, endian) {
                                var len = end - start;
                                assert(len % 4 === 0);
                                var res = new Array(len / 4);
                                for (var i = 0, k = start; i < res.length; i++, k += 4) {
                                    var w;
                                    if (endian === 'big')
                                        w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
                                    else
                                        w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
                                    res[i] = w >>> 0;
                                }
                                return res;
                            }

                            exports.join32 = join32;

                            function split32(msg, endian) {
                                var res = new Array(msg.length * 4);
                                for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
                                    var m = msg[i];
                                    if (endian === 'big') {
                                        res[k] = m >>> 24;
                                        res[k + 1] = (m >>> 16) & 0xff;
                                        res[k + 2] = (m >>> 8) & 0xff;
                                        res[k + 3] = m & 0xff;
                                    } else {
                                        res[k + 3] = m >>> 24;
                                        res[k + 2] = (m >>> 16) & 0xff;
                                        res[k + 1] = (m >>> 8) & 0xff;
                                        res[k] = m & 0xff;
                                    }
                                }
                                return res;
                            }

                            exports.split32 = split32;

                            function rotr32(w, b) {
                                return (w >>> b) | (w << (32 - b));
                            }

                            exports.rotr32 = rotr32;

                            function rotl32(w, b) {
                                return (w << b) | (w >>> (32 - b));
                            }

                            exports.rotl32 = rotl32;

                            function sum32(a, b) {
                                return (a + b) >>> 0;
                            }

                            exports.sum32 = sum32;

                            function sum32_3(a, b, c) {
                                return (a + b + c) >>> 0;
                            }

                            exports.sum32_3 = sum32_3;

                            function sum32_4(a, b, c, d) {
                                return (a + b + c + d) >>> 0;
                            }

                            exports.sum32_4 = sum32_4;

                            function sum32_5(a, b, c, d, e) {
                                return (a + b + c + d + e) >>> 0;
                            }

                            exports.sum32_5 = sum32_5;

                            function sum64(buf, pos, ah, al) {
                                var bh = buf[pos];
                                var bl = buf[pos + 1];

                                var lo = (al + bl) >>> 0;
                                var hi = (lo < al ? 1 : 0) + ah + bh;
                                buf[pos] = hi >>> 0;
                                buf[pos + 1] = lo;
                            }

                            exports.sum64 = sum64;

                            function sum64_hi(ah, al, bh, bl) {
                                var lo = (al + bl) >>> 0;
                                var hi = (lo < al ? 1 : 0) + ah + bh;
                                return hi >>> 0;
                            }

                            exports.sum64_hi = sum64_hi;

                            function sum64_lo(ah, al, bh, bl) {
                                var lo = al + bl;
                                return lo >>> 0;
                            }

                            exports.sum64_lo = sum64_lo;

                            function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
                                var carry = 0;
                                var lo = al;
                                lo = (lo + bl) >>> 0;
                                carry += lo < al ? 1 : 0;
                                lo = (lo + cl) >>> 0;
                                carry += lo < cl ? 1 : 0;
                                lo = (lo + dl) >>> 0;
                                carry += lo < dl ? 1 : 0;

                                var hi = ah + bh + ch + dh + carry;
                                return hi >>> 0;
                            }

                            exports.sum64_4_hi = sum64_4_hi;

                            function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
                                var lo = al + bl + cl + dl;
                                return lo >>> 0;
                            }

                            exports.sum64_4_lo = sum64_4_lo;

                            function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
                                var carry = 0;
                                var lo = al;
                                lo = (lo + bl) >>> 0;
                                carry += lo < al ? 1 : 0;
                                lo = (lo + cl) >>> 0;
                                carry += lo < cl ? 1 : 0;
                                lo = (lo + dl) >>> 0;
                                carry += lo < dl ? 1 : 0;
                                lo = (lo + el) >>> 0;
                                carry += lo < el ? 1 : 0;

                                var hi = ah + bh + ch + dh + eh + carry;
                                return hi >>> 0;
                            }

                            exports.sum64_5_hi = sum64_5_hi;

                            function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
                                var lo = al + bl + cl + dl + el;

                                return lo >>> 0;
                            }

                            exports.sum64_5_lo = sum64_5_lo;

                            function rotr64_hi(ah, al, num) {
                                var r = (al << (32 - num)) | (ah >>> num);
                                return r >>> 0;
                            }

                            exports.rotr64_hi = rotr64_hi;

                            function rotr64_lo(ah, al, num) {
                                var r = (ah << (32 - num)) | (al >>> num);
                                return r >>> 0;
                            }

                            exports.rotr64_lo = rotr64_lo;

                            function shr64_hi(ah, al, num) {
                                return ah >>> num;
                            }

                            exports.shr64_hi = shr64_hi;

                            function shr64_lo(ah, al, num) {
                                var r = (ah << (32 - num)) | (al >>> num);
                                return r >>> 0;
                            }

                            exports.shr64_lo = shr64_lo;

                        }, {"inherits": 150, "minimalistic-assert": 155}],
                        148: [function (require, module, exports) {
                            'use strict';

                            var hash = require('hash.js');
                            var utils = require('minimalistic-crypto-utils');
                            var assert = require('minimalistic-assert');

                            function HmacDRBG(options) {
                                if (!(this instanceof HmacDRBG))
                                    return new HmacDRBG(options);
                                this.hash = options.hash;
                                this.predResist = !!options.predResist;

                                this.outLen = this.hash.outSize;
                                this.minEntropy = options.minEntropy || this.hash.hmacStrength;

                                this._reseed = null;
                                this.reseedInterval = null;
                                this.K = null;
                                this.V = null;

                                var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');
                                var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');
                                var pers = utils.toArray(options.pers, options.persEnc || 'hex');
                                assert(entropy.length >= (this.minEntropy / 8),
                                    'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
                                this._init(entropy, nonce, pers);
                            }

                            module.exports = HmacDRBG;

                            HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
                                var seed = entropy.concat(nonce).concat(pers);

                                this.K = new Array(this.outLen / 8);
                                this.V = new Array(this.outLen / 8);
                                for (var i = 0; i < this.V.length; i++) {
                                    this.K[i] = 0x00;
                                    this.V[i] = 0x01;
                                }

                                this._update(seed);
                                this._reseed = 1;
                                this.reseedInterval = 0x1000000000000;  // 2^48
                            };

                            HmacDRBG.prototype._hmac = function hmac() {
                                return new hash.hmac(this.hash, this.K);
                            };

                            HmacDRBG.prototype._update = function update(seed) {
                                var kmac = this._hmac()
                                    .update(this.V)
                                    .update([0x00]);
                                if (seed)
                                    kmac = kmac.update(seed);
                                this.K = kmac.digest();
                                this.V = this._hmac().update(this.V).digest();
                                if (!seed)
                                    return;

                                this.K = this._hmac()
                                    .update(this.V)
                                    .update([0x01])
                                    .update(seed)
                                    .digest();
                                this.V = this._hmac().update(this.V).digest();
                            };

                            HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
                                // Optional entropy enc
                                if (typeof entropyEnc !== 'string') {
                                    addEnc = add;
                                    add = entropyEnc;
                                    entropyEnc = null;
                                }

                                entropy = utils.toArray(entropy, entropyEnc);
                                add = utils.toArray(add, addEnc);

                                assert(entropy.length >= (this.minEntropy / 8),
                                    'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

                                this._update(entropy.concat(add || []));
                                this._reseed = 1;
                            };

                            HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
                                if (this._reseed > this.reseedInterval)
                                    throw new Error('Reseed is required');

                                // Optional encoding
                                if (typeof enc !== 'string') {
                                    addEnc = add;
                                    add = enc;
                                    enc = null;
                                }

                                // Optional additional data
                                if (add) {
                                    add = utils.toArray(add, addEnc || 'hex');
                                    this._update(add);
                                }

                                var temp = [];
                                while (temp.length < len) {
                                    this.V = this._hmac().update(this.V).digest();
                                    temp = temp.concat(this.V);
                                }

                                var res = temp.slice(0, len);
                                this._update(add);
                                this._reseed++;
                                return utils.encode(res, enc);
                            };

                        }, {"hash.js": 136, "minimalistic-assert": 155, "minimalistic-crypto-utils": 156}],
                        149: [function (require, module, exports) {
                            exports.read = function (buffer, offset, isLE, mLen, nBytes) {
                                var e, m
                                var eLen = (nBytes * 8) - mLen - 1
                                var eMax = (1 << eLen) - 1
                                var eBias = eMax >> 1
                                var nBits = -7
                                var i = isLE ? (nBytes - 1) : 0
                                var d = isLE ? -1 : 1
                                var s = buffer[offset + i]

                                i += d

                                e = s & ((1 << (-nBits)) - 1)
                                s >>= (-nBits)
                                nBits += eLen
                                for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {
                                }

                                m = e & ((1 << (-nBits)) - 1)
                                e >>= (-nBits)
                                nBits += mLen
                                for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {
                                }

                                if (e === 0) {
                                    e = 1 - eBias
                                } else if (e === eMax) {
                                    return m ? NaN : ((s ? -1 : 1) * Infinity)
                                } else {
                                    m = m + Math.pow(2, mLen)
                                    e = e - eBias
                                }
                                return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
                            }

                            exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
                                var e, m, c
                                var eLen = (nBytes * 8) - mLen - 1
                                var eMax = (1 << eLen) - 1
                                var eBias = eMax >> 1
                                var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
                                var i = isLE ? 0 : (nBytes - 1)
                                var d = isLE ? 1 : -1
                                var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

                                value = Math.abs(value)

                                if (isNaN(value) || value === Infinity) {
                                    m = isNaN(value) ? 1 : 0
                                    e = eMax
                                } else {
                                    e = Math.floor(Math.log(value) / Math.LN2)
                                    if (value * (c = Math.pow(2, -e)) < 1) {
                                        e--
                                        c *= 2
                                    }
                                    if (e + eBias >= 1) {
                                        value += rt / c
                                    } else {
                                        value += rt * Math.pow(2, 1 - eBias)
                                    }
                                    if (value * c >= 2) {
                                        e++
                                        c /= 2
                                    }

                                    if (e + eBias >= eMax) {
                                        m = 0
                                        e = eMax
                                    } else if (e + eBias >= 1) {
                                        m = ((value * c) - 1) * Math.pow(2, mLen)
                                        e = e + eBias
                                    } else {
                                        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
                                        e = 0
                                    }
                                }

                                for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {
                                }

                                e = (e << mLen) | m
                                eLen += mLen
                                for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {
                                }

                                buffer[offset + i - d] |= s * 128
                            }

                        }, {}],
                        150: [function (require, module, exports) {
                            if (typeof Object.create === 'function') {
                                // implementation from standard node.js 'util' module
                                module.exports = function inherits(ctor, superCtor) {
                                    ctor.super_ = superCtor
                                    ctor.prototype = Object.create(superCtor.prototype, {
                                        constructor: {
                                            value: ctor,
                                            enumerable: false,
                                            writable: true,
                                            configurable: true
                                        }
                                    });
                                };
                            } else {
                                // old school shim for old browsers
                                module.exports = function inherits(ctor, superCtor) {
                                    ctor.super_ = superCtor
                                    var TempCtor = function () {
                                    }
                                    TempCtor.prototype = superCtor.prototype
                                    ctor.prototype = new TempCtor()
                                    ctor.prototype.constructor = ctor
                                }
                            }

                        }, {}],
                        151: [function (require, module, exports) {
                            /*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
                            module.exports = function (obj) {
                                return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
                            }

                            function isBuffer(obj) {
                                return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
                            }

// For Node v0.10 support. Remove this eventually.
                            function isSlowBuffer(obj) {
                                return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
                            }

                        }, {}],
                        152: [function (require, module, exports) {
                            var toString = {}.toString;

                            module.exports = Array.isArray || function (arr) {
                                return toString.call(arr) == '[object Array]';
                            };

                        }, {}],
                        153: [function (require, module, exports) {
                            (function (Buffer) {
                                'use strict'
                                var inherits = require('inherits')
                                var HashBase = require('hash-base')

                                var ARRAY16 = new Array(16)

                                function MD5() {
                                    HashBase.call(this, 64)

                                    // state
                                    this._a = 0x67452301
                                    this._b = 0xefcdab89
                                    this._c = 0x98badcfe
                                    this._d = 0x10325476
                                }

                                inherits(MD5, HashBase)

                                MD5.prototype._update = function () {
                                    var M = ARRAY16
                                    for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4)

                                    var a = this._a
                                    var b = this._b
                                    var c = this._c
                                    var d = this._d

                                    a = fnF(a, b, c, d, M[0], 0xd76aa478, 7)
                                    d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12)
                                    c = fnF(c, d, a, b, M[2], 0x242070db, 17)
                                    b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22)
                                    a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7)
                                    d = fnF(d, a, b, c, M[5], 0x4787c62a, 12)
                                    c = fnF(c, d, a, b, M[6], 0xa8304613, 17)
                                    b = fnF(b, c, d, a, M[7], 0xfd469501, 22)
                                    a = fnF(a, b, c, d, M[8], 0x698098d8, 7)
                                    d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12)
                                    c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17)
                                    b = fnF(b, c, d, a, M[11], 0x895cd7be, 22)
                                    a = fnF(a, b, c, d, M[12], 0x6b901122, 7)
                                    d = fnF(d, a, b, c, M[13], 0xfd987193, 12)
                                    c = fnF(c, d, a, b, M[14], 0xa679438e, 17)
                                    b = fnF(b, c, d, a, M[15], 0x49b40821, 22)

                                    a = fnG(a, b, c, d, M[1], 0xf61e2562, 5)
                                    d = fnG(d, a, b, c, M[6], 0xc040b340, 9)
                                    c = fnG(c, d, a, b, M[11], 0x265e5a51, 14)
                                    b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20)
                                    a = fnG(a, b, c, d, M[5], 0xd62f105d, 5)
                                    d = fnG(d, a, b, c, M[10], 0x02441453, 9)
                                    c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14)
                                    b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20)
                                    a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5)
                                    d = fnG(d, a, b, c, M[14], 0xc33707d6, 9)
                                    c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14)
                                    b = fnG(b, c, d, a, M[8], 0x455a14ed, 20)
                                    a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5)
                                    d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9)
                                    c = fnG(c, d, a, b, M[7], 0x676f02d9, 14)
                                    b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20)

                                    a = fnH(a, b, c, d, M[5], 0xfffa3942, 4)
                                    d = fnH(d, a, b, c, M[8], 0x8771f681, 11)
                                    c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16)
                                    b = fnH(b, c, d, a, M[14], 0xfde5380c, 23)
                                    a = fnH(a, b, c, d, M[1], 0xa4beea44, 4)
                                    d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11)
                                    c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16)
                                    b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23)
                                    a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4)
                                    d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11)
                                    c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16)
                                    b = fnH(b, c, d, a, M[6], 0x04881d05, 23)
                                    a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4)
                                    d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11)
                                    c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16)
                                    b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23)

                                    a = fnI(a, b, c, d, M[0], 0xf4292244, 6)
                                    d = fnI(d, a, b, c, M[7], 0x432aff97, 10)
                                    c = fnI(c, d, a, b, M[14], 0xab9423a7, 15)
                                    b = fnI(b, c, d, a, M[5], 0xfc93a039, 21)
                                    a = fnI(a, b, c, d, M[12], 0x655b59c3, 6)
                                    d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10)
                                    c = fnI(c, d, a, b, M[10], 0xffeff47d, 15)
                                    b = fnI(b, c, d, a, M[1], 0x85845dd1, 21)
                                    a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6)
                                    d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10)
                                    c = fnI(c, d, a, b, M[6], 0xa3014314, 15)
                                    b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21)
                                    a = fnI(a, b, c, d, M[4], 0xf7537e82, 6)
                                    d = fnI(d, a, b, c, M[11], 0xbd3af235, 10)
                                    c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15)
                                    b = fnI(b, c, d, a, M[9], 0xeb86d391, 21)

                                    this._a = (this._a + a) | 0
                                    this._b = (this._b + b) | 0
                                    this._c = (this._c + c) | 0
                                    this._d = (this._d + d) | 0
                                }

                                MD5.prototype._digest = function () {
                                    // create padding and handle blocks
                                    this._block[this._blockOffset++] = 0x80
                                    if (this._blockOffset > 56) {
                                        this._block.fill(0, this._blockOffset, 64)
                                        this._update()
                                        this._blockOffset = 0
                                    }

                                    this._block.fill(0, this._blockOffset, 56)
                                    this._block.writeUInt32LE(this._length[0], 56)
                                    this._block.writeUInt32LE(this._length[1], 60)
                                    this._update()

                                    // produce result
                                    var buffer = new Buffer(16)
                                    buffer.writeInt32LE(this._a, 0)
                                    buffer.writeInt32LE(this._b, 4)
                                    buffer.writeInt32LE(this._c, 8)
                                    buffer.writeInt32LE(this._d, 12)
                                    return buffer
                                }

                                function rotl(x, n) {
                                    return (x << n) | (x >>> (32 - n))
                                }

                                function fnF(a, b, c, d, m, k, s) {
                                    return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + b) | 0
                                }

                                function fnG(a, b, c, d, m, k, s) {
                                    return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + b) | 0
                                }

                                function fnH(a, b, c, d, m, k, s) {
                                    return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + b) | 0
                                }

                                function fnI(a, b, c, d, m, k, s) {
                                    return (rotl((a + ((c ^ (b | (~d)))) + m + k) | 0, s) + b) | 0
                                }

                                module.exports = MD5

                            }).call(this, require("buffer").Buffer)
                        }, {"buffer": 64, "hash-base": 135, "inherits": 150}],
                        154: [function (require, module, exports) {
                            var bn = require('bn.js');
                            var brorand = require('brorand');

                            function MillerRabin(rand) {
                                this.rand = rand || new brorand.Rand();
                            }

                            module.exports = MillerRabin;

                            MillerRabin.create = function create(rand) {
                                return new MillerRabin(rand);
                            };

                            MillerRabin.prototype._randbelow = function _randbelow(n) {
                                var len = n.bitLength();
                                var min_bytes = Math.ceil(len / 8);

                                // Generage random bytes until a number less than n is found.
                                // This ensures that 0..n-1 have an equal probability of being selected.
                                do
                                    var a = new bn(this.rand.generate(min_bytes));
                                while (a.cmp(n) >= 0);

                                return a;
                            };

                            MillerRabin.prototype._randrange = function _randrange(start, stop) {
                                // Generate a random number greater than or equal to start and less than stop.
                                var size = stop.sub(start);
                                return start.add(this._randbelow(size));
                            };

                            MillerRabin.prototype.test = function test(n, k, cb) {
                                var len = n.bitLength();
                                var red = bn.mont(n);
                                var rone = new bn(1).toRed(red);

                                if (!k)
                                    k = Math.max(1, (len / 48) | 0);

                                // Find d and s, (n - 1) = (2 ^ s) * d;
                                var n1 = n.subn(1);
                                for (var s = 0; !n1.testn(s); s++) {
                                }
                                var d = n.shrn(s);

                                var rn1 = n1.toRed(red);

                                var prime = true;
                                for (; k > 0; k--) {
                                    var a = this._randrange(new bn(2), n1);
                                    if (cb)
                                        cb(a);

                                    var x = a.toRed(red).redPow(d);
                                    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
                                        continue;

                                    for (var i = 1; i < s; i++) {
                                        x = x.redSqr();

                                        if (x.cmp(rone) === 0)
                                            return false;
                                        if (x.cmp(rn1) === 0)
                                            break;
                                    }

                                    if (i === s)
                                        return false;
                                }

                                return prime;
                            };

                            MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
                                var len = n.bitLength();
                                var red = bn.mont(n);
                                var rone = new bn(1).toRed(red);

                                if (!k)
                                    k = Math.max(1, (len / 48) | 0);

                                // Find d and s, (n - 1) = (2 ^ s) * d;
                                var n1 = n.subn(1);
                                for (var s = 0; !n1.testn(s); s++) {
                                }
                                var d = n.shrn(s);

                                var rn1 = n1.toRed(red);

                                for (; k > 0; k--) {
                                    var a = this._randrange(new bn(2), n1);

                                    var g = n.gcd(a);
                                    if (g.cmpn(1) !== 0)
                                        return g;

                                    var x = a.toRed(red).redPow(d);
                                    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
                                        continue;

                                    for (var i = 1; i < s; i++) {
                                        x = x.redSqr();

                                        if (x.cmp(rone) === 0)
                                            return x.fromRed().subn(1).gcd(n);
                                        if (x.cmp(rn1) === 0)
                                            break;
                                    }

                                    if (i === s) {
                                        x = x.redSqr();
                                        return x.fromRed().subn(1).gcd(n);
                                    }
                                }

                                return false;
                            };

                        }, {"bn.js": 33, "brorand": 34}],
                        155: [function (require, module, exports) {
                            module.exports = assert;

                            function assert(val, msg) {
                                if (!val)
                                    throw new Error(msg || 'Assertion failed');
                            }

                            assert.equal = function assertEqual(l, r, msg) {
                                if (l != r)
                                    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
                            };

                        }, {}],
                        156: [function (require, module, exports) {
                            'use strict';

                            var utils = exports;

                            function toArray(msg, enc) {
                                if (Array.isArray(msg))
                                    return msg.slice();
                                if (!msg)
                                    return [];
                                var res = [];
                                if (typeof msg !== 'string') {
                                    for (var i = 0; i < msg.length; i++)
                                        res[i] = msg[i] | 0;
                                    return res;
                                }
                                if (enc === 'hex') {
                                    msg = msg.replace(/[^a-z0-9]+/ig, '');
                                    if (msg.length % 2 !== 0)
                                        msg = '0' + msg;
                                    for (var i = 0; i < msg.length; i += 2)
                                        res.push(parseInt(msg[i] + msg[i + 1], 16));
                                } else {
                                    for (var i = 0; i < msg.length; i++) {
                                        var c = msg.charCodeAt(i);
                                        var hi = c >> 8;
                                        var lo = c & 0xff;
                                        if (hi)
                                            res.push(hi, lo);
                                        else
                                            res.push(lo);
                                    }
                                }
                                return res;
                            }

                            utils.toArray = toArray;

                            function zero2(word) {
                                if (word.length === 1)
                                    return '0' + word;
                                else
                                    return word;
                            }

                            utils.zero2 = zero2;

                            function toHex(msg) {
                                var res = '';
                                for (var i = 0; i < msg.length; i++)
                                    res += zero2(msg[i].toString(16));
                                return res;
                            }

                            utils.toHex = toHex;

                            utils.encode = function encode(arr, enc) {
                                if (enc === 'hex')
                                    return toHex(arr);
                                else
                                    return arr;
                            };

                        }, {}],
                        157: [function (require, module, exports) {
                            module.exports = {
                                "2.16.840.1.101.3.4.1.1": "aes-128-ecb",
                                "2.16.840.1.101.3.4.1.2": "aes-128-cbc",
                                "2.16.840.1.101.3.4.1.3": "aes-128-ofb",
                                "2.16.840.1.101.3.4.1.4": "aes-128-cfb",
                                "2.16.840.1.101.3.4.1.21": "aes-192-ecb",
                                "2.16.840.1.101.3.4.1.22": "aes-192-cbc",
                                "2.16.840.1.101.3.4.1.23": "aes-192-ofb",
                                "2.16.840.1.101.3.4.1.24": "aes-192-cfb",
                                "2.16.840.1.101.3.4.1.41": "aes-256-ecb",
                                "2.16.840.1.101.3.4.1.42": "aes-256-cbc",
                                "2.16.840.1.101.3.4.1.43": "aes-256-ofb",
                                "2.16.840.1.101.3.4.1.44": "aes-256-cfb"
                            }
                        }, {}],
                        158: [function (require, module, exports) {
// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
// Fedor, you are amazing.
                            'use strict'

                            var asn1 = require('asn1.js')

                            exports.certificate = require('./certificate')

                            var RSAPrivateKey = asn1.define('RSAPrivateKey', function () {
                                this.seq().obj(
                                    this.key('version').int(),
                                    this.key('modulus').int(),
                                    this.key('publicExponent').int(),
                                    this.key('privateExponent').int(),
                                    this.key('prime1').int(),
                                    this.key('prime2').int(),
                                    this.key('exponent1').int(),
                                    this.key('exponent2').int(),
                                    this.key('coefficient').int()
                                )
                            })
                            exports.RSAPrivateKey = RSAPrivateKey

                            var RSAPublicKey = asn1.define('RSAPublicKey', function () {
                                this.seq().obj(
                                    this.key('modulus').int(),
                                    this.key('publicExponent').int()
                                )
                            })
                            exports.RSAPublicKey = RSAPublicKey

                            var PublicKey = asn1.define('SubjectPublicKeyInfo', function () {
                                this.seq().obj(
                                    this.key('algorithm').use(AlgorithmIdentifier),
                                    this.key('subjectPublicKey').bitstr()
                                )
                            })
                            exports.PublicKey = PublicKey

                            var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function () {
                                this.seq().obj(
                                    this.key('algorithm').objid(),
                                    this.key('none').null_().optional(),
                                    this.key('curve').objid().optional(),
                                    this.key('params').seq().obj(
                                        this.key('p').int(),
                                        this.key('q').int(),
                                        this.key('g').int()
                                    ).optional()
                                )
                            })

                            var PrivateKeyInfo = asn1.define('PrivateKeyInfo', function () {
                                this.seq().obj(
                                    this.key('version').int(),
                                    this.key('algorithm').use(AlgorithmIdentifier),
                                    this.key('subjectPrivateKey').octstr()
                                )
                            })
                            exports.PrivateKey = PrivateKeyInfo
                            var EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function () {
                                this.seq().obj(
                                    this.key('algorithm').seq().obj(
                                        this.key('id').objid(),
                                        this.key('decrypt').seq().obj(
                                            this.key('kde').seq().obj(
                                                this.key('id').objid(),
                                                this.key('kdeparams').seq().obj(
                                                    this.key('salt').octstr(),
                                                    this.key('iters').int()
                                                )
                                            ),
                                            this.key('cipher').seq().obj(
                                                this.key('algo').objid(),
                                                this.key('iv').octstr()
                                            )
                                        )
                                    ),
                                    this.key('subjectPrivateKey').octstr()
                                )
                            })

                            exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo

                            var DSAPrivateKey = asn1.define('DSAPrivateKey', function () {
                                this.seq().obj(
                                    this.key('version').int(),
                                    this.key('p').int(),
                                    this.key('q').int(),
                                    this.key('g').int(),
                                    this.key('pub_key').int(),
                                    this.key('priv_key').int()
                                )
                            })
                            exports.DSAPrivateKey = DSAPrivateKey

                            exports.DSAparam = asn1.define('DSAparam', function () {
                                this.int()
                            })

                            var ECPrivateKey = asn1.define('ECPrivateKey', function () {
                                this.seq().obj(
                                    this.key('version').int(),
                                    this.key('privateKey').octstr(),
                                    this.key('parameters').optional().explicit(0).use(ECParameters),
                                    this.key('publicKey').optional().explicit(1).bitstr()
                                )
                            })
                            exports.ECPrivateKey = ECPrivateKey

                            var ECParameters = asn1.define('ECParameters', function () {
                                this.choice({
                                    namedCurve: this.objid()
                                })
                            })

                            exports.signature = asn1.define('signature', function () {
                                this.seq().obj(
                                    this.key('r').int(),
                                    this.key('s').int()
                                )
                            })

                        }, {"./certificate": 159, "asn1.js": 17}],
                        159: [function (require, module, exports) {
// from https://github.com/Rantanen/node-dtls/blob/25a7dc861bda38cfeac93a723500eea4f0ac2e86/Certificate.js
// thanks to @Rantanen

                            'use strict'

                            var asn = require('asn1.js')

                            var Time = asn.define('Time', function () {
                                this.choice({
                                    utcTime: this.utctime(),
                                    generalTime: this.gentime()
                                })
                            })

                            var AttributeTypeValue = asn.define('AttributeTypeValue', function () {
                                this.seq().obj(
                                    this.key('type').objid(),
                                    this.key('value').any()
                                )
                            })

                            var AlgorithmIdentifier = asn.define('AlgorithmIdentifier', function () {
                                this.seq().obj(
                                    this.key('algorithm').objid(),
                                    this.key('parameters').optional()
                                )
                            })

                            var SubjectPublicKeyInfo = asn.define('SubjectPublicKeyInfo', function () {
                                this.seq().obj(
                                    this.key('algorithm').use(AlgorithmIdentifier),
                                    this.key('subjectPublicKey').bitstr()
                                )
                            })

                            var RelativeDistinguishedName = asn.define('RelativeDistinguishedName', function () {
                                this.setof(AttributeTypeValue)
                            })

                            var RDNSequence = asn.define('RDNSequence', function () {
                                this.seqof(RelativeDistinguishedName)
                            })

                            var Name = asn.define('Name', function () {
                                this.choice({
                                    rdnSequence: this.use(RDNSequence)
                                })
                            })

                            var Validity = asn.define('Validity', function () {
                                this.seq().obj(
                                    this.key('notBefore').use(Time),
                                    this.key('notAfter').use(Time)
                                )
                            })

                            var Extension = asn.define('Extension', function () {
                                this.seq().obj(
                                    this.key('extnID').objid(),
                                    this.key('critical').bool().def(false),
                                    this.key('extnValue').octstr()
                                )
                            })

                            var TBSCertificate = asn.define('TBSCertificate', function () {
                                this.seq().obj(
                                    this.key('version').explicit(0).int(),
                                    this.key('serialNumber').int(),
                                    this.key('signature').use(AlgorithmIdentifier),
                                    this.key('issuer').use(Name),
                                    this.key('validity').use(Validity),
                                    this.key('subject').use(Name),
                                    this.key('subjectPublicKeyInfo').use(SubjectPublicKeyInfo),
                                    this.key('issuerUniqueID').implicit(1).bitstr().optional(),
                                    this.key('subjectUniqueID').implicit(2).bitstr().optional(),
                                    this.key('extensions').explicit(3).seqof(Extension).optional()
                                )
                            })

                            var X509Certificate = asn.define('X509Certificate', function () {
                                this.seq().obj(
                                    this.key('tbsCertificate').use(TBSCertificate),
                                    this.key('signatureAlgorithm').use(AlgorithmIdentifier),
                                    this.key('signatureValue').bitstr()
                                )
                            })

                            module.exports = X509Certificate

                        }, {"asn1.js": 17}],
                        160: [function (require, module, exports) {
                            (function (Buffer) {
// adapted from https://github.com/apatil/pemstrip
                                var findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r\+\/\=]+)[\n\r]+/m
                                var startRegex = /^-----BEGIN ((?:.* KEY)|CERTIFICATE)-----/m
                                var fullRegex = /^-----BEGIN ((?:.* KEY)|CERTIFICATE)-----([0-9A-z\n\r\+\/\=]+)-----END \1-----$/m
                                var evp = require('evp_bytestokey')
                                var ciphers = require('browserify-aes')
                                module.exports = function (okey, password) {
                                    var key = okey.toString()
                                    var match = key.match(findProc)
                                    var decrypted
                                    if (!match) {
                                        var match2 = key.match(fullRegex)
                                        decrypted = new Buffer(match2[2].replace(/[\r\n]/g, ''), 'base64')
                                    } else {
                                        var suite = 'aes' + match[1]
                                        var iv = new Buffer(match[2], 'hex')
                                        var cipherText = new Buffer(match[3].replace(/[\r\n]/g, ''), 'base64')
                                        var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key
                                        var out = []
                                        var cipher = ciphers.createDecipheriv(suite, cipherKey, iv)
                                        out.push(cipher.update(cipherText))
                                        out.push(cipher.final())
                                        decrypted = Buffer.concat(out)
                                    }
                                    var tag = key.match(startRegex)[1]
                                    return {
                                        tag: tag,
                                        data: decrypted
                                    }
                                }

                            }).call(this, require("buffer").Buffer)
                        }, {"browserify-aes": 38, "buffer": 64, "evp_bytestokey": 134}],
                        161: [function (require, module, exports) {
                            (function (Buffer) {
                                var asn1 = require('./asn1')
                                var aesid = require('./aesid.json')
                                var fixProc = require('./fixProc')
                                var ciphers = require('browserify-aes')
                                var compat = require('pbkdf2')
                                module.exports = parseKeys

                                function parseKeys(buffer) {
                                    var password
                                    if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {
                                        password = buffer.passphrase
                                        buffer = buffer.key
                                    }
                                    if (typeof buffer === 'string') {
                                        buffer = new Buffer(buffer)
                                    }

                                    var stripped = fixProc(buffer, password)

                                    var type = stripped.tag
                                    var data = stripped.data
                                    var subtype, ndata
                                    switch (type) {
                                        case 'CERTIFICATE':
                                            ndata = asn1.certificate.decode(data, 'der').tbsCertificate.subjectPublicKeyInfo
                                        // falls through
                                        case 'PUBLIC KEY':
                                            if (!ndata) {
                                                ndata = asn1.PublicKey.decode(data, 'der')
                                            }
                                            subtype = ndata.algorithm.algorithm.join('.')
                                            switch (subtype) {
                                                case '1.2.840.113549.1.1.1':
                                                    return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der')
                                                case '1.2.840.10045.2.1':
                                                    ndata.subjectPrivateKey = ndata.subjectPublicKey
                                                    return {
                                                        type: 'ec',
                                                        data: ndata
                                                    }
                                                case '1.2.840.10040.4.1':
                                                    ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der')
                                                    return {
                                                        type: 'dsa',
                                                        data: ndata.algorithm.params
                                                    }
                                                default:
                                                    throw new Error('unknown key id ' + subtype)
                                            }
                                            throw new Error('unknown key type ' + type)
                                        case 'ENCRYPTED PRIVATE KEY':
                                            data = asn1.EncryptedPrivateKey.decode(data, 'der')
                                            data = decrypt(data, password)
                                        // falls through
                                        case 'PRIVATE KEY':
                                            ndata = asn1.PrivateKey.decode(data, 'der')
                                            subtype = ndata.algorithm.algorithm.join('.')
                                            switch (subtype) {
                                                case '1.2.840.113549.1.1.1':
                                                    return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der')
                                                case '1.2.840.10045.2.1':
                                                    return {
                                                        curve: ndata.algorithm.curve,
                                                        privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
                                                    }
                                                case '1.2.840.10040.4.1':
                                                    ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der')
                                                    return {
                                                        type: 'dsa',
                                                        params: ndata.algorithm.params
                                                    }
                                                default:
                                                    throw new Error('unknown key id ' + subtype)
                                            }
                                            throw new Error('unknown key type ' + type)
                                        case 'RSA PUBLIC KEY':
                                            return asn1.RSAPublicKey.decode(data, 'der')
                                        case 'RSA PRIVATE KEY':
                                            return asn1.RSAPrivateKey.decode(data, 'der')
                                        case 'DSA PRIVATE KEY':
                                            return {
                                                type: 'dsa',
                                                params: asn1.DSAPrivateKey.decode(data, 'der')
                                            }
                                        case 'EC PRIVATE KEY':
                                            data = asn1.ECPrivateKey.decode(data, 'der')
                                            return {
                                                curve: data.parameters.value,
                                                privateKey: data.privateKey
                                            }
                                        default:
                                            throw new Error('unknown key type ' + type)
                                    }
                                }

                                parseKeys.signature = asn1.signature

                                function decrypt(data, password) {
                                    var salt = data.algorithm.decrypt.kde.kdeparams.salt
                                    var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10)
                                    var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')]
                                    var iv = data.algorithm.decrypt.cipher.iv
                                    var cipherText = data.subjectPrivateKey
                                    var keylen = parseInt(algo.split('-')[1], 10) / 8
                                    var key = compat.pbkdf2Sync(password, salt, iters, keylen)
                                    var cipher = ciphers.createDecipheriv(algo, key, iv)
                                    var out = []
                                    out.push(cipher.update(cipherText))
                                    out.push(cipher.final())
                                    return Buffer.concat(out)
                                }

                            }).call(this, require("buffer").Buffer)
                        }, {
                            "./aesid.json": 157,
                            "./asn1": 158,
                            "./fixProc": 160,
                            "browserify-aes": 38,
                            "buffer": 64,
                            "pbkdf2": 162
                        }],
                        162: [function (require, module, exports) {
                            exports.pbkdf2 = require('./lib/async')
                            exports.pbkdf2Sync = require('./lib/sync')

                        }, {"./lib/async": 163, "./lib/sync": 166}],
                        163: [function (require, module, exports) {
                            (function (process, global) {
                                var checkParameters = require('./precondition')
                                var defaultEncoding = require('./default-encoding')
                                var sync = require('./sync')
                                var Buffer = require('safe-buffer').Buffer

                                var ZERO_BUF
                                var subtle = global.crypto && global.crypto.subtle
                                var toBrowser = {
                                    'sha': 'SHA-1',
                                    'sha-1': 'SHA-1',
                                    'sha1': 'SHA-1',
                                    'sha256': 'SHA-256',
                                    'sha-256': 'SHA-256',
                                    'sha384': 'SHA-384',
                                    'sha-384': 'SHA-384',
                                    'sha-512': 'SHA-512',
                                    'sha512': 'SHA-512'
                                }
                                var checks = []

                                function checkNative(algo) {
                                    if (global.process && !global.process.browser) {
                                        return Promise.resolve(false)
                                    }
                                    if (!subtle || !subtle.importKey || !subtle.deriveBits) {
                                        return Promise.resolve(false)
                                    }
                                    if (checks[algo] !== undefined) {
                                        return checks[algo]
                                    }
                                    ZERO_BUF = ZERO_BUF || Buffer.alloc(8)
                                    var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo)
                                        .then(function () {
                                            return true
                                        }).catch(function () {
                                            return false
                                        })
                                    checks[algo] = prom
                                    return prom
                                }

                                function browserPbkdf2(password, salt, iterations, length, algo) {
                                    return subtle.importKey(
                                        'raw', password, {name: 'PBKDF2'}, false, ['deriveBits']
                                    ).then(function (key) {
                                        return subtle.deriveBits({
                                            name: 'PBKDF2',
                                            salt: salt,
                                            iterations: iterations,
                                            hash: {
                                                name: algo
                                            }
                                        }, key, length << 3)
                                    }).then(function (res) {
                                        return Buffer.from(res)
                                    })
                                }

                                function resolvePromise(promise, callback) {
                                    promise.then(function (out) {
                                        process.nextTick(function () {
                                            callback(null, out)
                                        })
                                    }, function (e) {
                                        process.nextTick(function () {
                                            callback(e)
                                        })
                                    })
                                }

                                module.exports = function (password, salt, iterations, keylen, digest, callback) {
                                    if (typeof digest === 'function') {
                                        callback = digest
                                        digest = undefined
                                    }

                                    digest = digest || 'sha1'
                                    var algo = toBrowser[digest.toLowerCase()]

                                    if (!algo || typeof global.Promise !== 'function') {
                                        return process.nextTick(function () {
                                            var out
                                            try {
                                                out = sync(password, salt, iterations, keylen, digest)
                                            } catch (e) {
                                                return callback(e)
                                            }
                                            callback(null, out)
                                        })
                                    }

                                    checkParameters(password, salt, iterations, keylen)
                                    if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2')
                                    if (!Buffer.isBuffer(password)) password = Buffer.from(password, defaultEncoding)
                                    if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, defaultEncoding)

                                    resolvePromise(checkNative(algo).then(function (resp) {
                                        if (resp) return browserPbkdf2(password, salt, iterations, keylen, algo)

                                        return sync(password, salt, iterations, keylen, digest)
                                    }), callback)
                                }

                            }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
                        }, {
                            "./default-encoding": 164,
                            "./precondition": 165,
                            "./sync": 166,
                            "_process": 168,
                            "safe-buffer": 191
                        }],
                        164: [function (require, module, exports) {
                            (function (process) {
                                var defaultEncoding
                                /* istanbul ignore next */
                                if (process.browser) {
                                    defaultEncoding = 'utf-8'
                                } else {
                                    var pVersionMajor = parseInt(process.version.split('.')[0].slice(1), 10)

                                    defaultEncoding = pVersionMajor >= 6 ? 'utf-8' : 'binary'
                                }
                                module.exports = defaultEncoding

                            }).call(this, require('_process'))
                        }, {"_process": 168}],
                        165: [function (require, module, exports) {
                            (function (Buffer) {
                                var MAX_ALLOC = Math.pow(2, 30) - 1 // default in iojs

                                function checkBuffer(buf, name) {
                                    if (typeof buf !== 'string' && !Buffer.isBuffer(buf)) {
                                        throw new TypeError(name + ' must be a buffer or string')
                                    }
                                }

                                module.exports = function (password, salt, iterations, keylen) {
                                    checkBuffer(password, 'Password')
                                    checkBuffer(salt, 'Salt')

                                    if (typeof iterations !== 'number') {
                                        throw new TypeError('Iterations not a number')
                                    }

                                    if (iterations < 0) {
                                        throw new TypeError('Bad iterations')
                                    }

                                    if (typeof keylen !== 'number') {
                                        throw new TypeError('Key length not a number')
                                    }

                                    if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) { /* eslint no-self-compare: 0 */
                                        throw new TypeError('Bad key length')
                                    }
                                }

                            }).call(this, {"isBuffer": require("../../is-buffer/index.js")})
                        }, {"../../is-buffer/index.js": 151}],
                        166: [function (require, module, exports) {
                            var md5 = require('create-hash/md5')
                            var rmd160 = require('ripemd160')
                            var sha = require('sha.js')

                            var checkParameters = require('./precondition')
                            var defaultEncoding = require('./default-encoding')
                            var Buffer = require('safe-buffer').Buffer
                            var ZEROS = Buffer.alloc(128)
                            var sizes = {
                                md5: 16,
                                sha1: 20,
                                sha224: 28,
                                sha256: 32,
                                sha384: 48,
                                sha512: 64,
                                rmd160: 20,
                                ripemd160: 20
                            }

                            function Hmac(alg, key, saltLen) {
                                var hash = getDigest(alg)
                                var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

                                if (key.length > blocksize) {
                                    key = hash(key)
                                } else if (key.length < blocksize) {
                                    key = Buffer.concat([key, ZEROS], blocksize)
                                }

                                var ipad = Buffer.allocUnsafe(blocksize + sizes[alg])
                                var opad = Buffer.allocUnsafe(blocksize + sizes[alg])
                                for (var i = 0; i < blocksize; i++) {
                                    ipad[i] = key[i] ^ 0x36
                                    opad[i] = key[i] ^ 0x5C
                                }

                                var ipad1 = Buffer.allocUnsafe(blocksize + saltLen + 4)
                                ipad.copy(ipad1, 0, 0, blocksize)
                                this.ipad1 = ipad1
                                this.ipad2 = ipad
                                this.opad = opad
                                this.alg = alg
                                this.blocksize = blocksize
                                this.hash = hash
                                this.size = sizes[alg]
                            }

                            Hmac.prototype.run = function (data, ipad) {
                                data.copy(ipad, this.blocksize)
                                var h = this.hash(ipad)
                                h.copy(this.opad, this.blocksize)
                                return this.hash(this.opad)
                            }

                            function getDigest(alg) {
                                function shaFunc(data) {
                                    return sha(alg).update(data).digest()
                                }

                                if (alg === 'rmd160' || alg === 'ripemd160') return rmd160
                                if (alg === 'md5') return md5
                                return shaFunc
                            }

                            function pbkdf2(password, salt, iterations, keylen, digest) {
                                checkParameters(password, salt, iterations, keylen)

                                if (!Buffer.isBuffer(password)) password = Buffer.from(password, defaultEncoding)
                                if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, defaultEncoding)

                                digest = digest || 'sha1'

                                var hmac = new Hmac(digest, password, salt.length)

                                var DK = Buffer.allocUnsafe(keylen)
                                var block1 = Buffer.allocUnsafe(salt.length + 4)
                                salt.copy(block1, 0, 0, salt.length)

                                var destPos = 0
                                var hLen = sizes[digest]
                                var l = Math.ceil(keylen / hLen)

                                for (var i = 1; i <= l; i++) {
                                    block1.writeUInt32BE(i, salt.length)

                                    var T = hmac.run(block1, hmac.ipad1)
                                    var U = T

                                    for (var j = 1; j < iterations; j++) {
                                        U = hmac.run(U, hmac.ipad2)
                                        for (var k = 0; k < hLen; k++) T[k] ^= U[k]
                                    }

                                    T.copy(DK, destPos)
                                    destPos += hLen
                                }

                                return DK
                            }

                            module.exports = pbkdf2

                        }, {
                            "./default-encoding": 164,
                            "./precondition": 165,
                            "create-hash/md5": 69,
                            "ripemd160": 190,
                            "safe-buffer": 191,
                            "sha.js": 193
                        }],
                        167: [function (require, module, exports) {
                            (function (process) {
                                'use strict';

                                if (!process.version ||
                                    process.version.indexOf('v0.') === 0 ||
                                    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
                                    module.exports = {nextTick: nextTick};
                                } else {
                                    module.exports = process
                                }

                                function nextTick(fn, arg1, arg2, arg3) {
                                    if (typeof fn !== 'function') {
                                        throw new TypeError('"callback" argument must be a function');
                                    }
                                    var len = arguments.length;
                                    var args, i;
                                    switch (len) {
                                        case 0:
                                        case 1:
                                            return process.nextTick(fn);
                                        case 2:
                                            return process.nextTick(function afterTickOne() {
                                                fn.call(null, arg1);
                                            });
                                        case 3:
                                            return process.nextTick(function afterTickTwo() {
                                                fn.call(null, arg1, arg2);
                                            });
                                        case 4:
                                            return process.nextTick(function afterTickThree() {
                                                fn.call(null, arg1, arg2, arg3);
                                            });
                                        default:
                                            args = new Array(len - 1);
                                            i = 0;
                                            while (i < args.length) {
                                                args[i++] = arguments[i];
                                            }
                                            return process.nextTick(function afterTick() {
                                                fn.apply(null, args);
                                            });
                                    }
                                }


                            }).call(this, require('_process'))
                        }, {"_process": 168}],
                        168: [function (require, module, exports) {
// shim for using process in browser
                            var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

                            var cachedSetTimeout;
                            var cachedClearTimeout;

                            function defaultSetTimout() {
                                throw new Error('setTimeout has not been defined');
                            }

                            function defaultClearTimeout() {
                                throw new Error('clearTimeout has not been defined');
                            }

                            (function () {
                                try {
                                    if (typeof setTimeout === 'function') {
                                        cachedSetTimeout = setTimeout;
                                    } else {
                                        cachedSetTimeout = defaultSetTimout;
                                    }
                                } catch (e) {
                                    cachedSetTimeout = defaultSetTimout;
                                }
                                try {
                                    if (typeof clearTimeout === 'function') {
                                        cachedClearTimeout = clearTimeout;
                                    } else {
                                        cachedClearTimeout = defaultClearTimeout;
                                    }
                                } catch (e) {
                                    cachedClearTimeout = defaultClearTimeout;
                                }
                            }())

                            function runTimeout(fun) {
                                if (cachedSetTimeout === setTimeout) {
                                    //normal enviroments in sane situations
                                    return setTimeout(fun, 0);
                                }
                                // if setTimeout wasn't available but was latter defined
                                if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
                                    cachedSetTimeout = setTimeout;
                                    return setTimeout(fun, 0);
                                }
                                try {
                                    // when when somebody has screwed with setTimeout but no I.E. maddness
                                    return cachedSetTimeout(fun, 0);
                                } catch (e) {
                                    try {
                                        // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                                        return cachedSetTimeout.call(null, fun, 0);
                                    } catch (e) {
                                        // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                                        return cachedSetTimeout.call(this, fun, 0);
                                    }
                                }


                            }

                            function runClearTimeout(marker) {
                                if (cachedClearTimeout === clearTimeout) {
                                    //normal enviroments in sane situations
                                    return clearTimeout(marker);
                                }
                                // if clearTimeout wasn't available but was latter defined
                                if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
                                    cachedClearTimeout = clearTimeout;
                                    return clearTimeout(marker);
                                }
                                try {
                                    // when when somebody has screwed with setTimeout but no I.E. maddness
                                    return cachedClearTimeout(marker);
                                } catch (e) {
                                    try {
                                        // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                                        return cachedClearTimeout.call(null, marker);
                                    } catch (e) {
                                        // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                                        // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                                        return cachedClearTimeout.call(this, marker);
                                    }
                                }


                            }

                            var queue = [];
                            var draining = false;
                            var currentQueue;
                            var queueIndex = -1;

                            function cleanUpNextTick() {
                                if (!draining || !currentQueue) {
                                    return;
                                }
                                draining = false;
                                if (currentQueue.length) {
                                    queue = currentQueue.concat(queue);
                                } else {
                                    queueIndex = -1;
                                }
                                if (queue.length) {
                                    drainQueue();
                                }
                            }

                            function drainQueue() {
                                if (draining) {
                                    return;
                                }
                                var timeout = runTimeout(cleanUpNextTick);
                                draining = true;

                                var len = queue.length;
                                while (len) {
                                    currentQueue = queue;
                                    queue = [];
                                    while (++queueIndex < len) {
                                        if (currentQueue) {
                                            currentQueue[queueIndex].run();
                                        }
                                    }
                                    queueIndex = -1;
                                    len = queue.length;
                                }
                                currentQueue = null;
                                draining = false;
                                runClearTimeout(timeout);
                            }

                            process.nextTick = function (fun) {
                                var args = new Array(arguments.length - 1);
                                if (arguments.length > 1) {
                                    for (var i = 1; i < arguments.length; i++) {
                                        args[i - 1] = arguments[i];
                                    }
                                }
                                queue.push(new Item(fun, args));
                                if (queue.length === 1 && !draining) {
                                    runTimeout(drainQueue);
                                }
                            };

// v8 likes predictible objects
                            function Item(fun, array) {
                                this.fun = fun;
                                this.array = array;
                            }

                            Item.prototype.run = function () {
                                this.fun.apply(null, this.array);
                            };
                            process.title = 'browser';
                            process.browser = true;
                            process.env = {};
                            process.argv = [];
                            process.version = ''; // empty string to avoid regexp issues
                            process.versions = {};

                            function noop() {
                            }

                            process.on = noop;
                            process.addListener = noop;
                            process.once = noop;
                            process.off = noop;
                            process.removeListener = noop;
                            process.removeAllListeners = noop;
                            process.emit = noop;
                            process.prependListener = noop;
                            process.prependOnceListener = noop;

                            process.listeners = function (name) {
                                return []
                            }

                            process.binding = function (name) {
                                throw new Error('process.binding is not supported');
                            };

                            process.cwd = function () {
                                return '/'
                            };
                            process.chdir = function (dir) {
                                throw new Error('process.chdir is not supported');
                            };
                            process.umask = function () {
                                return 0;
                            };

                        }, {}],
                        169: [function (require, module, exports) {
                            exports.publicEncrypt = require('./publicEncrypt');
                            exports.privateDecrypt = require('./privateDecrypt');

                            exports.privateEncrypt = function privateEncrypt(key, buf) {
                                return exports.publicEncrypt(key, buf, true);
                            };

                            exports.publicDecrypt = function publicDecrypt(key, buf) {
                                return exports.privateDecrypt(key, buf, true);
                            };
                        }, {"./privateDecrypt": 171, "./publicEncrypt": 172}],
                        170: [function (require, module, exports) {
                            (function (Buffer) {
                                var createHash = require('create-hash');
                                module.exports = function (seed, len) {
                                    var t = new Buffer('');
                                    var i = 0, c;
                                    while (t.length < len) {
                                        c = i2ops(i++);
                                        t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()]);
                                    }
                                    return t.slice(0, len);
                                };

                                function i2ops(c) {
                                    var out = new Buffer(4);
                                    out.writeUInt32BE(c, 0);
                                    return out;
                                }
                            }).call(this, require("buffer").Buffer)
                        }, {"buffer": 64, "create-hash": 68}],
                        171: [function (require, module, exports) {
                            (function (Buffer) {
                                var parseKeys = require('parse-asn1');
                                var mgf = require('./mgf');
                                var xor = require('./xor');
                                var bn = require('bn.js');
                                var crt = require('browserify-rsa');
                                var createHash = require('create-hash');
                                var withPublic = require('./withPublic');
                                module.exports = function privateDecrypt(private_key, enc, reverse) {
                                    var padding;
                                    if (private_key.padding) {
                                        padding = private_key.padding;
                                    } else if (reverse) {
                                        padding = 1;
                                    } else {
                                        padding = 4;
                                    }

                                    var key = parseKeys(private_key);
                                    var k = key.modulus.byteLength();
                                    if (enc.length > k || new bn(enc).cmp(key.modulus) >= 0) {
                                        throw new Error('decryption error');
                                    }
                                    var msg;
                                    if (reverse) {
                                        msg = withPublic(new bn(enc), key);
                                    } else {
                                        msg = crt(enc, key);
                                    }
                                    var zBuffer = new Buffer(k - msg.length);
                                    zBuffer.fill(0);
                                    msg = Buffer.concat([zBuffer, msg], k);
                                    if (padding === 4) {
                                        return oaep(key, msg);
                                    } else if (padding === 1) {
                                        return pkcs1(key, msg, reverse);
                                    } else if (padding === 3) {
                                        return msg;
                                    } else {
                                        throw new Error('unknown padding');
                                    }
                                };

                                function oaep(key, msg) {
                                    var n = key.modulus;
                                    var k = key.modulus.byteLength();
                                    var mLen = msg.length;
                                    var iHash = createHash('sha1').update(new Buffer('')).digest();
                                    var hLen = iHash.length;
                                    var hLen2 = 2 * hLen;
                                    if (msg[0] !== 0) {
                                        throw new Error('decryption error');
                                    }
                                    var maskedSeed = msg.slice(1, hLen + 1);
                                    var maskedDb = msg.slice(hLen + 1);
                                    var seed = xor(maskedSeed, mgf(maskedDb, hLen));
                                    var db = xor(maskedDb, mgf(seed, k - hLen - 1));
                                    if (compare(iHash, db.slice(0, hLen))) {
                                        throw new Error('decryption error');
                                    }
                                    var i = hLen;
                                    while (db[i] === 0) {
                                        i++;
                                    }
                                    if (db[i++] !== 1) {
                                        throw new Error('decryption error');
                                    }
                                    return db.slice(i);
                                }

                                function pkcs1(key, msg, reverse) {
                                    var p1 = msg.slice(0, 2);
                                    var i = 2;
                                    var status = 0;
                                    while (msg[i++] !== 0) {
                                        if (i >= msg.length) {
                                            status++;
                                            break;
                                        }
                                    }
                                    var ps = msg.slice(2, i - 1);
                                    var p2 = msg.slice(i - 1, i);

                                    if ((p1.toString('hex') !== '0002' && !reverse) || (p1.toString('hex') !== '0001' && reverse)) {
                                        status++;
                                    }
                                    if (ps.length < 8) {
                                        status++;
                                    }
                                    if (status) {
                                        throw new Error('decryption error');
                                    }
                                    return msg.slice(i);
                                }

                                function compare(a, b) {
                                    a = new Buffer(a);
                                    b = new Buffer(b);
                                    var dif = 0;
                                    var len = a.length;
                                    if (a.length !== b.length) {
                                        dif++;
                                        len = Math.min(a.length, b.length);
                                    }
                                    var i = -1;
                                    while (++i < len) {
                                        dif += (a[i] ^ b[i]);
                                    }
                                    return dif;
                                }
                            }).call(this, require("buffer").Buffer)
                        }, {
                            "./mgf": 170,
                            "./withPublic": 173,
                            "./xor": 174,
                            "bn.js": 33,
                            "browserify-rsa": 56,
                            "buffer": 64,
                            "create-hash": 68,
                            "parse-asn1": 161
                        }],
                        172: [function (require, module, exports) {
                            (function (Buffer) {
                                var parseKeys = require('parse-asn1');
                                var randomBytes = require('randombytes');
                                var createHash = require('create-hash');
                                var mgf = require('./mgf');
                                var xor = require('./xor');
                                var bn = require('bn.js');
                                var withPublic = require('./withPublic');
                                var crt = require('browserify-rsa');

                                var constants = {
                                    RSA_PKCS1_OAEP_PADDING: 4,
                                    RSA_PKCS1_PADDIN: 1,
                                    RSA_NO_PADDING: 3
                                };

                                module.exports = function publicEncrypt(public_key, msg, reverse) {
                                    var padding;
                                    if (public_key.padding) {
                                        padding = public_key.padding;
                                    } else if (reverse) {
                                        padding = 1;
                                    } else {
                                        padding = 4;
                                    }
                                    var key = parseKeys(public_key);
                                    var paddedMsg;
                                    if (padding === 4) {
                                        paddedMsg = oaep(key, msg);
                                    } else if (padding === 1) {
                                        paddedMsg = pkcs1(key, msg, reverse);
                                    } else if (padding === 3) {
                                        paddedMsg = new bn(msg);
                                        if (paddedMsg.cmp(key.modulus) >= 0) {
                                            throw new Error('data too long for modulus');
                                        }
                                    } else {
                                        throw new Error('unknown padding');
                                    }
                                    if (reverse) {
                                        return crt(paddedMsg, key);
                                    } else {
                                        return withPublic(paddedMsg, key);
                                    }
                                };

                                function oaep(key, msg) {
                                    var k = key.modulus.byteLength();
                                    var mLen = msg.length;
                                    var iHash = createHash('sha1').update(new Buffer('')).digest();
                                    var hLen = iHash.length;
                                    var hLen2 = 2 * hLen;
                                    if (mLen > k - hLen2 - 2) {
                                        throw new Error('message too long');
                                    }
                                    var ps = new Buffer(k - mLen - hLen2 - 2);
                                    ps.fill(0);
                                    var dblen = k - hLen - 1;
                                    var seed = randomBytes(hLen);
                                    var maskedDb = xor(Buffer.concat([iHash, ps, new Buffer([1]), msg], dblen), mgf(seed, dblen));
                                    var maskedSeed = xor(seed, mgf(maskedDb, hLen));
                                    return new bn(Buffer.concat([new Buffer([0]), maskedSeed, maskedDb], k));
                                }

                                function pkcs1(key, msg, reverse) {
                                    var mLen = msg.length;
                                    var k = key.modulus.byteLength();
                                    if (mLen > k - 11) {
                                        throw new Error('message too long');
                                    }
                                    var ps;
                                    if (reverse) {
                                        ps = new Buffer(k - mLen - 3);
                                        ps.fill(0xff);
                                    } else {
                                        ps = nonZero(k - mLen - 3);
                                    }
                                    return new bn(Buffer.concat([new Buffer([0, reverse ? 1 : 2]), ps, new Buffer([0]), msg], k));
                                }

                                function nonZero(len, crypto) {
                                    var out = new Buffer(len);
                                    var i = 0;
                                    var cache = randomBytes(len * 2);
                                    var cur = 0;
                                    var num;
                                    while (i < len) {
                                        if (cur === cache.length) {
                                            cache = randomBytes(len * 2);
                                            cur = 0;
                                        }
                                        num = cache[cur++];
                                        if (num) {
                                            out[i++] = num;
                                        }
                                    }
                                    return out;
                                }
                            }).call(this, require("buffer").Buffer)
                        }, {
                            "./mgf": 170,
                            "./withPublic": 173,
                            "./xor": 174,
                            "bn.js": 33,
                            "browserify-rsa": 56,
                            "buffer": 64,
                            "create-hash": 68,
                            "parse-asn1": 161,
                            "randombytes": 175
                        }],
                        173: [function (require, module, exports) {
                            (function (Buffer) {
                                var bn = require('bn.js');

                                function withPublic(paddedMsg, key) {
                                    return new Buffer(paddedMsg
                                        .toRed(bn.mont(key.modulus))
                                        .redPow(new bn(key.publicExponent))
                                        .fromRed()
                                        .toArray());
                                }

                                module.exports = withPublic;
                            }).call(this, require("buffer").Buffer)
                        }, {"bn.js": 33, "buffer": 64}],
                        174: [function (require, module, exports) {
                            module.exports = function xor(a, b) {
                                var len = a.length;
                                var i = -1;
                                while (++i < len) {
                                    a[i] ^= b[i];
                                }
                                return a
                            };
                        }, {}],
                        175: [function (require, module, exports) {
                            (function (process, global) {
                                'use strict'

                                function oldBrowser() {
                                    throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11')
                                }

                                var Buffer = require('safe-buffer').Buffer
                                var crypto = global.crypto || global.msCrypto

                                if (crypto && crypto.getRandomValues) {
                                    module.exports = randomBytes
                                } else {
                                    module.exports = oldBrowser
                                }

                                function randomBytes(size, cb) {
                                    // phantomjs needs to throw
                                    if (size > 65536) throw new Error('requested too many random bytes')
                                    // in case browserify  isn't using the Uint8Array version
                                    var rawBytes = new global.Uint8Array(size)

                                    // This will not work in older browsers.
                                    // See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
                                    if (size > 0) {  // getRandomValues fails on IE if size == 0
                                        crypto.getRandomValues(rawBytes)
                                    }

                                    // XXX: phantomjs doesn't like a buffer being passed here
                                    var bytes = Buffer.from(rawBytes.buffer)

                                    if (typeof cb === 'function') {
                                        return process.nextTick(function () {
                                            cb(null, bytes)
                                        })
                                    }

                                    return bytes
                                }

                            }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
                        }, {"_process": 168, "safe-buffer": 191}],
                        176: [function (require, module, exports) {
                            (function (process, global) {
                                'use strict'

                                function oldBrowser() {
                                    throw new Error('secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11')
                                }

                                var safeBuffer = require('safe-buffer')
                                var randombytes = require('randombytes')
                                var Buffer = safeBuffer.Buffer
                                var kBufferMaxLength = safeBuffer.kMaxLength
                                var crypto = global.crypto || global.msCrypto
                                var kMaxUint32 = Math.pow(2, 32) - 1

                                function assertOffset(offset, length) {
                                    if (typeof offset !== 'number' || offset !== offset) { // eslint-disable-line no-self-compare
                                        throw new TypeError('offset must be a number')
                                    }

                                    if (offset > kMaxUint32 || offset < 0) {
                                        throw new TypeError('offset must be a uint32')
                                    }

                                    if (offset > kBufferMaxLength || offset > length) {
                                        throw new RangeError('offset out of range')
                                    }
                                }

                                function assertSize(size, offset, length) {
                                    if (typeof size !== 'number' || size !== size) { // eslint-disable-line no-self-compare
                                        throw new TypeError('size must be a number')
                                    }

                                    if (size > kMaxUint32 || size < 0) {
                                        throw new TypeError('size must be a uint32')
                                    }

                                    if (size + offset > length || size > kBufferMaxLength) {
                                        throw new RangeError('buffer too small')
                                    }
                                }

                                if ((crypto && crypto.getRandomValues) || !process.browser) {
                                    exports.randomFill = randomFill
                                    exports.randomFillSync = randomFillSync
                                } else {
                                    exports.randomFill = oldBrowser
                                    exports.randomFillSync = oldBrowser
                                }

                                function randomFill(buf, offset, size, cb) {
                                    if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
                                        throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
                                    }

                                    if (typeof offset === 'function') {
                                        cb = offset
                                        offset = 0
                                        size = buf.length
                                    } else if (typeof size === 'function') {
                                        cb = size
                                        size = buf.length - offset
                                    } else if (typeof cb !== 'function') {
                                        throw new TypeError('"cb" argument must be a function')
                                    }
                                    assertOffset(offset, buf.length)
                                    assertSize(size, offset, buf.length)
                                    return actualFill(buf, offset, size, cb)
                                }

                                function actualFill(buf, offset, size, cb) {
                                    if (process.browser) {
                                        var ourBuf = buf.buffer
                                        var uint = new Uint8Array(ourBuf, offset, size)
                                        crypto.getRandomValues(uint)
                                        if (cb) {
                                            process.nextTick(function () {
                                                cb(null, buf)
                                            })
                                            return
                                        }
                                        return buf
                                    }
                                    if (cb) {
                                        randombytes(size, function (err, bytes) {
                                            if (err) {
                                                return cb(err)
                                            }
                                            bytes.copy(buf, offset)
                                            cb(null, buf)
                                        })
                                        return
                                    }
                                    var bytes = randombytes(size)
                                    bytes.copy(buf, offset)
                                    return buf
                                }

                                function randomFillSync(buf, offset, size) {
                                    if (typeof offset === 'undefined') {
                                        offset = 0
                                    }
                                    if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
                                        throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
                                    }

                                    assertOffset(offset, buf.length)

                                    if (size === undefined) size = buf.length - offset

                                    assertSize(size, offset, buf.length)

                                    return actualFill(buf, offset, size)
                                }

                            }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
                        }, {"_process": 168, "randombytes": 175, "safe-buffer": 191}],
                        177: [function (require, module, exports) {
                            module.exports = require('./lib/_stream_duplex.js');

                        }, {"./lib/_stream_duplex.js": 178}],
                        178: [function (require, module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

                            'use strict';

                            /*<replacement>*/

                            var pna = require('process-nextick-args');
                            /*</replacement>*/

                            /*<replacement>*/
                            var objectKeys = Object.keys || function (obj) {
                                var keys = [];
                                for (var key in obj) {
                                    keys.push(key);
                                }
                                return keys;
                            };
                            /*</replacement>*/

                            module.exports = Duplex;

                            /*<replacement>*/
                            var util = require('core-util-is');
                            util.inherits = require('inherits');
                            /*</replacement>*/

                            var Readable = require('./_stream_readable');
                            var Writable = require('./_stream_writable');

                            util.inherits(Duplex, Readable);

                            {
                                // avoid scope creep, the keys array can then be collected
                                var keys = objectKeys(Writable.prototype);
                                for (var v = 0; v < keys.length; v++) {
                                    var method = keys[v];
                                    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
                                }
                            }

                            function Duplex(options) {
                                if (!(this instanceof Duplex)) return new Duplex(options);

                                Readable.call(this, options);
                                Writable.call(this, options);

                                if (options && options.readable === false) this.readable = false;

                                if (options && options.writable === false) this.writable = false;

                                this.allowHalfOpen = true;
                                if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

                                this.once('end', onend);
                            }

                            Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
                                // making it explicit this property is not enumerable
                                // because otherwise some prototype manipulation in
                                // userland will fail
                                enumerable: false,
                                get: function () {
                                    return this._writableState.highWaterMark;
                                }
                            });

// the no-half-open enforcer
                            function onend() {
                                // if we allow half-open state, or if the writable side ended,
                                // then we're ok.
                                if (this.allowHalfOpen || this._writableState.ended) return;

                                // no more data can be written.
                                // But allow more writes to happen in this tick.
                                pna.nextTick(onEndNT, this);
                            }

                            function onEndNT(self) {
                                self.end();
                            }

                            Object.defineProperty(Duplex.prototype, 'destroyed', {
                                get: function () {
                                    if (this._readableState === undefined || this._writableState === undefined) {
                                        return false;
                                    }
                                    return this._readableState.destroyed && this._writableState.destroyed;
                                },
                                set: function (value) {
                                    // we ignore the value if the stream
                                    // has not been initialized yet
                                    if (this._readableState === undefined || this._writableState === undefined) {
                                        return;
                                    }

                                    // backward compatibility, the user is explicitly
                                    // managing destroyed
                                    this._readableState.destroyed = value;
                                    this._writableState.destroyed = value;
                                }
                            });

                            Duplex.prototype._destroy = function (err, cb) {
                                this.push(null);
                                this.end();

                                pna.nextTick(cb, err);
                            };
                        }, {
                            "./_stream_readable": 180,
                            "./_stream_writable": 182,
                            "core-util-is": 66,
                            "inherits": 150,
                            "process-nextick-args": 167
                        }],
                        179: [function (require, module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

                            'use strict';

                            module.exports = PassThrough;

                            var Transform = require('./_stream_transform');

                            /*<replacement>*/
                            var util = require('core-util-is');
                            util.inherits = require('inherits');
                            /*</replacement>*/

                            util.inherits(PassThrough, Transform);

                            function PassThrough(options) {
                                if (!(this instanceof PassThrough)) return new PassThrough(options);

                                Transform.call(this, options);
                            }

                            PassThrough.prototype._transform = function (chunk, encoding, cb) {
                                cb(null, chunk);
                            };
                        }, {"./_stream_transform": 181, "core-util-is": 66, "inherits": 150}],
                        180: [function (require, module, exports) {
                            (function (process, global) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

                                'use strict';

                                /*<replacement>*/

                                var pna = require('process-nextick-args');
                                /*</replacement>*/

                                module.exports = Readable;

                                /*<replacement>*/
                                var isArray = require('isarray');
                                /*</replacement>*/

                                /*<replacement>*/
                                var Duplex;
                                /*</replacement>*/

                                Readable.ReadableState = ReadableState;

                                /*<replacement>*/
                                var EE = require('events').EventEmitter;

                                var EElistenerCount = function (emitter, type) {
                                    return emitter.listeners(type).length;
                                };
                                /*</replacement>*/

                                /*<replacement>*/
                                var Stream = require('./internal/streams/stream');
                                /*</replacement>*/

                                /*<replacement>*/

                                var Buffer = require('safe-buffer').Buffer;
                                var OurUint8Array = global.Uint8Array || function () {
                                };

                                function _uint8ArrayToBuffer(chunk) {
                                    return Buffer.from(chunk);
                                }

                                function _isUint8Array(obj) {
                                    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
                                }

                                /*</replacement>*/

                                /*<replacement>*/
                                var util = require('core-util-is');
                                util.inherits = require('inherits');
                                /*</replacement>*/

                                /*<replacement>*/
                                var debugUtil = require('util');
                                var debug = void 0;
                                if (debugUtil && debugUtil.debuglog) {
                                    debug = debugUtil.debuglog('stream');
                                } else {
                                    debug = function () {
                                    };
                                }
                                /*</replacement>*/

                                var BufferList = require('./internal/streams/BufferList');
                                var destroyImpl = require('./internal/streams/destroy');
                                var StringDecoder;

                                util.inherits(Readable, Stream);

                                var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

                                function prependListener(emitter, event, fn) {
                                    // Sadly this is not cacheable as some libraries bundle their own
                                    // event emitter implementation with them.
                                    if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

                                    // This is a hack to make sure that our error handler is attached before any
                                    // userland ones.  NEVER DO THIS. This is here only because this code needs
                                    // to continue to work with older versions of Node.js that do not include
                                    // the prependListener() method. The goal is to eventually remove this hack.
                                    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn); else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn); else emitter._events[event] = [fn, emitter._events[event]];
                                }

                                function ReadableState(options, stream) {
                                    Duplex = Duplex || require('./_stream_duplex');

                                    options = options || {};

                                    // Duplex streams are both readable and writable, but share
                                    // the same options object.
                                    // However, some cases require setting options to different
                                    // values for the readable and the writable sides of the duplex stream.
                                    // These options can be provided separately as readableXXX and writableXXX.
                                    var isDuplex = stream instanceof Duplex;

                                    // object stream flag. Used to make read(n) ignore n and to
                                    // make all the buffer merging and length checks go away
                                    this.objectMode = !!options.objectMode;

                                    if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

                                    // the point at which it stops calling _read() to fill the buffer
                                    // Note: 0 is a valid value, means "don't call _read preemptively ever"
                                    var hwm = options.highWaterMark;
                                    var readableHwm = options.readableHighWaterMark;
                                    var defaultHwm = this.objectMode ? 16 : 16 * 1024;

                                    if (hwm || hwm === 0) this.highWaterMark = hwm; else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm; else this.highWaterMark = defaultHwm;

                                    // cast to ints.
                                    this.highWaterMark = Math.floor(this.highWaterMark);

                                    // A linked list is used to store data chunks instead of an array because the
                                    // linked list can remove elements from the beginning faster than
                                    // array.shift()
                                    this.buffer = new BufferList();
                                    this.length = 0;
                                    this.pipes = null;
                                    this.pipesCount = 0;
                                    this.flowing = null;
                                    this.ended = false;
                                    this.endEmitted = false;
                                    this.reading = false;

                                    // a flag to be able to tell if the event 'readable'/'data' is emitted
                                    // immediately, or on a later tick.  We set this to true at first, because
                                    // any actions that shouldn't happen until "later" should generally also
                                    // not happen before the first read call.
                                    this.sync = true;

                                    // whenever we return null, then we set a flag to say
                                    // that we're awaiting a 'readable' event emission.
                                    this.needReadable = false;
                                    this.emittedReadable = false;
                                    this.readableListening = false;
                                    this.resumeScheduled = false;

                                    // has it been destroyed
                                    this.destroyed = false;

                                    // Crypto is kind of old and crusty.  Historically, its default string
                                    // encoding is 'binary' so we have to make this configurable.
                                    // Everything else in the universe uses 'utf8', though.
                                    this.defaultEncoding = options.defaultEncoding || 'utf8';

                                    // the number of writers that are awaiting a drain event in .pipe()s
                                    this.awaitDrain = 0;

                                    // if true, a maybeReadMore has been scheduled
                                    this.readingMore = false;

                                    this.decoder = null;
                                    this.encoding = null;
                                    if (options.encoding) {
                                        if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
                                        this.decoder = new StringDecoder(options.encoding);
                                        this.encoding = options.encoding;
                                    }
                                }

                                function Readable(options) {
                                    Duplex = Duplex || require('./_stream_duplex');

                                    if (!(this instanceof Readable)) return new Readable(options);

                                    this._readableState = new ReadableState(options, this);

                                    // legacy
                                    this.readable = true;

                                    if (options) {
                                        if (typeof options.read === 'function') this._read = options.read;

                                        if (typeof options.destroy === 'function') this._destroy = options.destroy;
                                    }

                                    Stream.call(this);
                                }

                                Object.defineProperty(Readable.prototype, 'destroyed', {
                                    get: function () {
                                        if (this._readableState === undefined) {
                                            return false;
                                        }
                                        return this._readableState.destroyed;
                                    },
                                    set: function (value) {
                                        // we ignore the value if the stream
                                        // has not been initialized yet
                                        if (!this._readableState) {
                                            return;
                                        }

                                        // backward compatibility, the user is explicitly
                                        // managing destroyed
                                        this._readableState.destroyed = value;
                                    }
                                });

                                Readable.prototype.destroy = destroyImpl.destroy;
                                Readable.prototype._undestroy = destroyImpl.undestroy;
                                Readable.prototype._destroy = function (err, cb) {
                                    this.push(null);
                                    cb(err);
                                };

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
                                Readable.prototype.push = function (chunk, encoding) {
                                    var state = this._readableState;
                                    var skipChunkCheck;

                                    if (!state.objectMode) {
                                        if (typeof chunk === 'string') {
                                            encoding = encoding || state.defaultEncoding;
                                            if (encoding !== state.encoding) {
                                                chunk = Buffer.from(chunk, encoding);
                                                encoding = '';
                                            }
                                            skipChunkCheck = true;
                                        }
                                    } else {
                                        skipChunkCheck = true;
                                    }

                                    return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
                                };

// Unshift should *always* be something directly out of read()
                                Readable.prototype.unshift = function (chunk) {
                                    return readableAddChunk(this, chunk, null, true, false);
                                };

                                function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
                                    var state = stream._readableState;
                                    if (chunk === null) {
                                        state.reading = false;
                                        onEofChunk(stream, state);
                                    } else {
                                        var er;
                                        if (!skipChunkCheck) er = chunkInvalid(state, chunk);
                                        if (er) {
                                            stream.emit('error', er);
                                        } else if (state.objectMode || chunk && chunk.length > 0) {
                                            if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
                                                chunk = _uint8ArrayToBuffer(chunk);
                                            }

                                            if (addToFront) {
                                                if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event')); else addChunk(stream, state, chunk, true);
                                            } else if (state.ended) {
                                                stream.emit('error', new Error('stream.push() after EOF'));
                                            } else {
                                                state.reading = false;
                                                if (state.decoder && !encoding) {
                                                    chunk = state.decoder.write(chunk);
                                                    if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false); else maybeReadMore(stream, state);
                                                } else {
                                                    addChunk(stream, state, chunk, false);
                                                }
                                            }
                                        } else if (!addToFront) {
                                            state.reading = false;
                                        }
                                    }

                                    return needMoreData(state);
                                }

                                function addChunk(stream, state, chunk, addToFront) {
                                    if (state.flowing && state.length === 0 && !state.sync) {
                                        stream.emit('data', chunk);
                                        stream.read(0);
                                    } else {
                                        // update the buffer info.
                                        state.length += state.objectMode ? 1 : chunk.length;
                                        if (addToFront) state.buffer.unshift(chunk); else state.buffer.push(chunk);

                                        if (state.needReadable) emitReadable(stream);
                                    }
                                    maybeReadMore(stream, state);
                                }

                                function chunkInvalid(state, chunk) {
                                    var er;
                                    if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
                                        er = new TypeError('Invalid non-string/buffer chunk');
                                    }
                                    return er;
                                }

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
                                function needMoreData(state) {
                                    return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
                                }

                                Readable.prototype.isPaused = function () {
                                    return this._readableState.flowing === false;
                                };

// backwards compatibility.
                                Readable.prototype.setEncoding = function (enc) {
                                    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
                                    this._readableState.decoder = new StringDecoder(enc);
                                    this._readableState.encoding = enc;
                                    return this;
                                };

// Don't raise the hwm > 8MB
                                var MAX_HWM = 0x800000;

                                function computeNewHighWaterMark(n) {
                                    if (n >= MAX_HWM) {
                                        n = MAX_HWM;
                                    } else {
                                        // Get the next highest power of 2 to prevent increasing hwm excessively in
                                        // tiny amounts
                                        n--;
                                        n |= n >>> 1;
                                        n |= n >>> 2;
                                        n |= n >>> 4;
                                        n |= n >>> 8;
                                        n |= n >>> 16;
                                        n++;
                                    }
                                    return n;
                                }

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
                                function howMuchToRead(n, state) {
                                    if (n <= 0 || state.length === 0 && state.ended) return 0;
                                    if (state.objectMode) return 1;
                                    if (n !== n) {
                                        // Only flow one buffer at a time
                                        if (state.flowing && state.length) return state.buffer.head.data.length; else return state.length;
                                    }
                                    // If we're asking for more than the current hwm, then raise the hwm.
                                    if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
                                    if (n <= state.length) return n;
                                    // Don't have enough
                                    if (!state.ended) {
                                        state.needReadable = true;
                                        return 0;
                                    }
                                    return state.length;
                                }

// you can override either this method, or the async _read(n) below.
                                Readable.prototype.read = function (n) {
                                    debug('read', n);
                                    n = parseInt(n, 10);
                                    var state = this._readableState;
                                    var nOrig = n;

                                    if (n !== 0) state.emittedReadable = false;

                                    // if we're doing read(0) to trigger a readable event, but we
                                    // already have a bunch of data in the buffer, then just trigger
                                    // the 'readable' event and move on.
                                    if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
                                        debug('read: emitReadable', state.length, state.ended);
                                        if (state.length === 0 && state.ended) endReadable(this); else emitReadable(this);
                                        return null;
                                    }

                                    n = howMuchToRead(n, state);

                                    // if we've ended, and we're now clear, then finish it up.
                                    if (n === 0 && state.ended) {
                                        if (state.length === 0) endReadable(this);
                                        return null;
                                    }

                                    // All the actual chunk generation logic needs to be
                                    // *below* the call to _read.  The reason is that in certain
                                    // synthetic stream cases, such as passthrough streams, _read
                                    // may be a completely synchronous operation which may change
                                    // the state of the read buffer, providing enough data when
                                    // before there was *not* enough.
                                    //
                                    // So, the steps are:
                                    // 1. Figure out what the state of things will be after we do
                                    // a read from the buffer.
                                    //
                                    // 2. If that resulting state will trigger a _read, then call _read.
                                    // Note that this may be asynchronous, or synchronous.  Yes, it is
                                    // deeply ugly to write APIs this way, but that still doesn't mean
                                    // that the Readable class should behave improperly, as streams are
                                    // designed to be sync/async agnostic.
                                    // Take note if the _read call is sync or async (ie, if the read call
                                    // has returned yet), so that we know whether or not it's safe to emit
                                    // 'readable' etc.
                                    //
                                    // 3. Actually pull the requested chunks out of the buffer and return.

                                    // if we need a readable event, then we need to do some reading.
                                    var doRead = state.needReadable;
                                    debug('need readable', doRead);

                                    // if we currently have less than the highWaterMark, then also read some
                                    if (state.length === 0 || state.length - n < state.highWaterMark) {
                                        doRead = true;
                                        debug('length less than watermark', doRead);
                                    }

                                    // however, if we've ended, then there's no point, and if we're already
                                    // reading, then it's unnecessary.
                                    if (state.ended || state.reading) {
                                        doRead = false;
                                        debug('reading or ended', doRead);
                                    } else if (doRead) {
                                        debug('do read');
                                        state.reading = true;
                                        state.sync = true;
                                        // if the length is currently zero, then we *need* a readable event.
                                        if (state.length === 0) state.needReadable = true;
                                        // call internal read method
                                        this._read(state.highWaterMark);
                                        state.sync = false;
                                        // If _read pushed data synchronously, then `reading` will be false,
                                        // and we need to re-evaluate how much data we can return to the user.
                                        if (!state.reading) n = howMuchToRead(nOrig, state);
                                    }

                                    var ret;
                                    if (n > 0) ret = fromList(n, state); else ret = null;

                                    if (ret === null) {
                                        state.needReadable = true;
                                        n = 0;
                                    } else {
                                        state.length -= n;
                                    }

                                    if (state.length === 0) {
                                        // If we have nothing in the buffer, then we want to know
                                        // as soon as we *do* get something into the buffer.
                                        if (!state.ended) state.needReadable = true;

                                        // If we tried to read() past the EOF, then emit end on the next tick.
                                        if (nOrig !== n && state.ended) endReadable(this);
                                    }

                                    if (ret !== null) this.emit('data', ret);

                                    return ret;
                                };

                                function onEofChunk(stream, state) {
                                    if (state.ended) return;
                                    if (state.decoder) {
                                        var chunk = state.decoder.end();
                                        if (chunk && chunk.length) {
                                            state.buffer.push(chunk);
                                            state.length += state.objectMode ? 1 : chunk.length;
                                        }
                                    }
                                    state.ended = true;

                                    // emit 'readable' now to make sure it gets picked up.
                                    emitReadable(stream);
                                }

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
                                function emitReadable(stream) {
                                    var state = stream._readableState;
                                    state.needReadable = false;
                                    if (!state.emittedReadable) {
                                        debug('emitReadable', state.flowing);
                                        state.emittedReadable = true;
                                        if (state.sync) pna.nextTick(emitReadable_, stream); else emitReadable_(stream);
                                    }
                                }

                                function emitReadable_(stream) {
                                    debug('emit readable');
                                    stream.emit('readable');
                                    flow(stream);
                                }

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
                                function maybeReadMore(stream, state) {
                                    if (!state.readingMore) {
                                        state.readingMore = true;
                                        pna.nextTick(maybeReadMore_, stream, state);
                                    }
                                }

                                function maybeReadMore_(stream, state) {
                                    var len = state.length;
                                    while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
                                        debug('maybeReadMore read 0');
                                        stream.read(0);
                                        if (len === state.length)
                                        // didn't get any data, stop spinning.
                                            break; else len = state.length;
                                    }
                                    state.readingMore = false;
                                }

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
                                Readable.prototype._read = function (n) {
                                    this.emit('error', new Error('_read() is not implemented'));
                                };

                                Readable.prototype.pipe = function (dest, pipeOpts) {
                                    var src = this;
                                    var state = this._readableState;

                                    switch (state.pipesCount) {
                                        case 0:
                                            state.pipes = dest;
                                            break;
                                        case 1:
                                            state.pipes = [state.pipes, dest];
                                            break;
                                        default:
                                            state.pipes.push(dest);
                                            break;
                                    }
                                    state.pipesCount += 1;
                                    debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

                                    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

                                    var endFn = doEnd ? onend : unpipe;
                                    if (state.endEmitted) pna.nextTick(endFn); else src.once('end', endFn);

                                    dest.on('unpipe', onunpipe);

                                    function onunpipe(readable, unpipeInfo) {
                                        debug('onunpipe');
                                        if (readable === src) {
                                            if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                                                unpipeInfo.hasUnpiped = true;
                                                cleanup();
                                            }
                                        }
                                    }

                                    function onend() {
                                        debug('onend');
                                        dest.end();
                                    }

                                    // when the dest drains, it reduces the awaitDrain counter
                                    // on the source.  This would be more elegant with a .once()
                                    // handler in flow(), but adding and removing repeatedly is
                                    // too slow.
                                    var ondrain = pipeOnDrain(src);
                                    dest.on('drain', ondrain);

                                    var cleanedUp = false;

                                    function cleanup() {
                                        debug('cleanup');
                                        // cleanup event handlers once the pipe is broken
                                        dest.removeListener('close', onclose);
                                        dest.removeListener('finish', onfinish);
                                        dest.removeListener('drain', ondrain);
                                        dest.removeListener('error', onerror);
                                        dest.removeListener('unpipe', onunpipe);
                                        src.removeListener('end', onend);
                                        src.removeListener('end', unpipe);
                                        src.removeListener('data', ondata);

                                        cleanedUp = true;

                                        // if the reader is waiting for a drain event from this
                                        // specific writer, then it would cause it to never start
                                        // flowing again.
                                        // So, if this is awaiting a drain, then we just call it now.
                                        // If we don't know, then assume that we are waiting for one.
                                        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
                                    }

                                    // If the user pushes more data while we're writing to dest then we'll end up
                                    // in ondata again. However, we only want to increase awaitDrain once because
                                    // dest will only emit one 'drain' event for the multiple writes.
                                    // => Introduce a guard on increasing awaitDrain.
                                    var increasedAwaitDrain = false;
                                    src.on('data', ondata);

                                    function ondata(chunk) {
                                        debug('ondata');
                                        increasedAwaitDrain = false;
                                        var ret = dest.write(chunk);
                                        if (false === ret && !increasedAwaitDrain) {
                                            // If the user unpiped during `dest.write()`, it is possible
                                            // to get stuck in a permanently paused state if that write
                                            // also returned false.
                                            // => Check whether `dest` is still a piping destination.
                                            if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                                                debug('false write response, pause', src._readableState.awaitDrain);
                                                src._readableState.awaitDrain++;
                                                increasedAwaitDrain = true;
                                            }
                                            src.pause();
                                        }
                                    }

                                    // if the dest has an error, then stop piping into it.
                                    // however, don't suppress the throwing behavior for this.
                                    function onerror(er) {
                                        debug('onerror', er);
                                        unpipe();
                                        dest.removeListener('error', onerror);
                                        if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
                                    }

                                    // Make sure our error handler is attached before userland ones.
                                    prependListener(dest, 'error', onerror);

                                    // Both close and finish should trigger unpipe, but only once.
                                    function onclose() {
                                        dest.removeListener('finish', onfinish);
                                        unpipe();
                                    }

                                    dest.once('close', onclose);

                                    function onfinish() {
                                        debug('onfinish');
                                        dest.removeListener('close', onclose);
                                        unpipe();
                                    }

                                    dest.once('finish', onfinish);

                                    function unpipe() {
                                        debug('unpipe');
                                        src.unpipe(dest);
                                    }

                                    // tell the dest that it's being piped to
                                    dest.emit('pipe', src);

                                    // start the flow if it hasn't been started already.
                                    if (!state.flowing) {
                                        debug('pipe resume');
                                        src.resume();
                                    }

                                    return dest;
                                };

                                function pipeOnDrain(src) {
                                    return function () {
                                        var state = src._readableState;
                                        debug('pipeOnDrain', state.awaitDrain);
                                        if (state.awaitDrain) state.awaitDrain--;
                                        if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
                                            state.flowing = true;
                                            flow(src);
                                        }
                                    };
                                }

                                Readable.prototype.unpipe = function (dest) {
                                    var state = this._readableState;
                                    var unpipeInfo = {hasUnpiped: false};

                                    // if we're not piping anywhere, then do nothing.
                                    if (state.pipesCount === 0) return this;

                                    // just one destination.  most common case.
                                    if (state.pipesCount === 1) {
                                        // passed in one, but it's not the right one.
                                        if (dest && dest !== state.pipes) return this;

                                        if (!dest) dest = state.pipes;

                                        // got a match.
                                        state.pipes = null;
                                        state.pipesCount = 0;
                                        state.flowing = false;
                                        if (dest) dest.emit('unpipe', this, unpipeInfo);
                                        return this;
                                    }

                                    // slow case. multiple pipe destinations.

                                    if (!dest) {
                                        // remove all.
                                        var dests = state.pipes;
                                        var len = state.pipesCount;
                                        state.pipes = null;
                                        state.pipesCount = 0;
                                        state.flowing = false;

                                        for (var i = 0; i < len; i++) {
                                            dests[i].emit('unpipe', this, unpipeInfo);
                                        }
                                        return this;
                                    }

                                    // try to find the right one.
                                    var index = indexOf(state.pipes, dest);
                                    if (index === -1) return this;

                                    state.pipes.splice(index, 1);
                                    state.pipesCount -= 1;
                                    if (state.pipesCount === 1) state.pipes = state.pipes[0];

                                    dest.emit('unpipe', this, unpipeInfo);

                                    return this;
                                };

// set up data events if they are asked for
// Ensure readable listeners eventually get something
                                Readable.prototype.on = function (ev, fn) {
                                    var res = Stream.prototype.on.call(this, ev, fn);

                                    if (ev === 'data') {
                                        // Start flowing on next tick if stream isn't explicitly paused
                                        if (this._readableState.flowing !== false) this.resume();
                                    } else if (ev === 'readable') {
                                        var state = this._readableState;
                                        if (!state.endEmitted && !state.readableListening) {
                                            state.readableListening = state.needReadable = true;
                                            state.emittedReadable = false;
                                            if (!state.reading) {
                                                pna.nextTick(nReadingNextTick, this);
                                            } else if (state.length) {
                                                emitReadable(this);
                                            }
                                        }
                                    }

                                    return res;
                                };
                                Readable.prototype.addListener = Readable.prototype.on;

                                function nReadingNextTick(self) {
                                    debug('readable nexttick read 0');
                                    self.read(0);
                                }

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
                                Readable.prototype.resume = function () {
                                    var state = this._readableState;
                                    if (!state.flowing) {
                                        debug('resume');
                                        state.flowing = true;
                                        resume(this, state);
                                    }
                                    return this;
                                };

                                function resume(stream, state) {
                                    if (!state.resumeScheduled) {
                                        state.resumeScheduled = true;
                                        pna.nextTick(resume_, stream, state);
                                    }
                                }

                                function resume_(stream, state) {
                                    if (!state.reading) {
                                        debug('resume read 0');
                                        stream.read(0);
                                    }

                                    state.resumeScheduled = false;
                                    state.awaitDrain = 0;
                                    stream.emit('resume');
                                    flow(stream);
                                    if (state.flowing && !state.reading) stream.read(0);
                                }

                                Readable.prototype.pause = function () {
                                    debug('call pause flowing=%j', this._readableState.flowing);
                                    if (false !== this._readableState.flowing) {
                                        debug('pause');
                                        this._readableState.flowing = false;
                                        this.emit('pause');
                                    }
                                    return this;
                                };

                                function flow(stream) {
                                    var state = stream._readableState;
                                    debug('flow', state.flowing);
                                    while (state.flowing && stream.read() !== null) {
                                    }
                                }

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
                                Readable.prototype.wrap = function (stream) {
                                    var _this = this;

                                    var state = this._readableState;
                                    var paused = false;

                                    stream.on('end', function () {
                                        debug('wrapped end');
                                        if (state.decoder && !state.ended) {
                                            var chunk = state.decoder.end();
                                            if (chunk && chunk.length) _this.push(chunk);
                                        }

                                        _this.push(null);
                                    });

                                    stream.on('data', function (chunk) {
                                        debug('wrapped data');
                                        if (state.decoder) chunk = state.decoder.write(chunk);

                                        // don't skip over falsy values in objectMode
                                        if (state.objectMode && (chunk === null || chunk === undefined)) return; else if (!state.objectMode && (!chunk || !chunk.length)) return;

                                        var ret = _this.push(chunk);
                                        if (!ret) {
                                            paused = true;
                                            stream.pause();
                                        }
                                    });

                                    // proxy all the other methods.
                                    // important when wrapping filters and duplexes.
                                    for (var i in stream) {
                                        if (this[i] === undefined && typeof stream[i] === 'function') {
                                            this[i] = function (method) {
                                                return function () {
                                                    return stream[method].apply(stream, arguments);
                                                };
                                            }(i);
                                        }
                                    }

                                    // proxy certain important events.
                                    for (var n = 0; n < kProxyEvents.length; n++) {
                                        stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
                                    }

                                    // when we try to consume some more bytes, simply unpause the
                                    // underlying stream.
                                    this._read = function (n) {
                                        debug('wrapped _read', n);
                                        if (paused) {
                                            paused = false;
                                            stream.resume();
                                        }
                                    };

                                    return this;
                                };

                                Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
                                    // making it explicit this property is not enumerable
                                    // because otherwise some prototype manipulation in
                                    // userland will fail
                                    enumerable: false,
                                    get: function () {
                                        return this._readableState.highWaterMark;
                                    }
                                });

// exposed for testing purposes only.
                                Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
                                function fromList(n, state) {
                                    // nothing buffered
                                    if (state.length === 0) return null;

                                    var ret;
                                    if (state.objectMode) ret = state.buffer.shift(); else if (!n || n >= state.length) {
                                        // read it all, truncate the list
                                        if (state.decoder) ret = state.buffer.join(''); else if (state.buffer.length === 1) ret = state.buffer.head.data; else ret = state.buffer.concat(state.length);
                                        state.buffer.clear();
                                    } else {
                                        // read part of list
                                        ret = fromListPartial(n, state.buffer, state.decoder);
                                    }

                                    return ret;
                                }

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
                                function fromListPartial(n, list, hasStrings) {
                                    var ret;
                                    if (n < list.head.data.length) {
                                        // slice is the same for buffers and strings
                                        ret = list.head.data.slice(0, n);
                                        list.head.data = list.head.data.slice(n);
                                    } else if (n === list.head.data.length) {
                                        // first chunk is a perfect match
                                        ret = list.shift();
                                    } else {
                                        // result spans more than one buffer
                                        ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
                                    }
                                    return ret;
                                }

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
                                function copyFromBufferString(n, list) {
                                    var p = list.head;
                                    var c = 1;
                                    var ret = p.data;
                                    n -= ret.length;
                                    while (p = p.next) {
                                        var str = p.data;
                                        var nb = n > str.length ? str.length : n;
                                        if (nb === str.length) ret += str; else ret += str.slice(0, n);
                                        n -= nb;
                                        if (n === 0) {
                                            if (nb === str.length) {
                                                ++c;
                                                if (p.next) list.head = p.next; else list.head = list.tail = null;
                                            } else {
                                                list.head = p;
                                                p.data = str.slice(nb);
                                            }
                                            break;
                                        }
                                        ++c;
                                    }
                                    list.length -= c;
                                    return ret;
                                }

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
                                function copyFromBuffer(n, list) {
                                    var ret = Buffer.allocUnsafe(n);
                                    var p = list.head;
                                    var c = 1;
                                    p.data.copy(ret);
                                    n -= p.data.length;
                                    while (p = p.next) {
                                        var buf = p.data;
                                        var nb = n > buf.length ? buf.length : n;
                                        buf.copy(ret, ret.length - n, 0, nb);
                                        n -= nb;
                                        if (n === 0) {
                                            if (nb === buf.length) {
                                                ++c;
                                                if (p.next) list.head = p.next; else list.head = list.tail = null;
                                            } else {
                                                list.head = p;
                                                p.data = buf.slice(nb);
                                            }
                                            break;
                                        }
                                        ++c;
                                    }
                                    list.length -= c;
                                    return ret;
                                }

                                function endReadable(stream) {
                                    var state = stream._readableState;

                                    // If we get here before consuming all the bytes, then that is a
                                    // bug in node.  Should never happen.
                                    if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

                                    if (!state.endEmitted) {
                                        state.ended = true;
                                        pna.nextTick(endReadableNT, state, stream);
                                    }
                                }

                                function endReadableNT(state, stream) {
                                    // Check that we didn't get one last unshift.
                                    if (!state.endEmitted && state.length === 0) {
                                        state.endEmitted = true;
                                        stream.readable = false;
                                        stream.emit('end');
                                    }
                                }

                                function indexOf(xs, x) {
                                    for (var i = 0, l = xs.length; i < l; i++) {
                                        if (xs[i] === x) return i;
                                    }
                                    return -1;
                                }
                            }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
                        }, {
                            "./_stream_duplex": 178,
                            "./internal/streams/BufferList": 183,
                            "./internal/streams/destroy": 184,
                            "./internal/streams/stream": 185,
                            "_process": 168,
                            "core-util-is": 66,
                            "events": 133,
                            "inherits": 150,
                            "isarray": 152,
                            "process-nextick-args": 167,
                            "safe-buffer": 191,
                            "string_decoder/": 201,
                            "util": 35
                        }],
                        181: [function (require, module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

                            'use strict';

                            module.exports = Transform;

                            var Duplex = require('./_stream_duplex');

                            /*<replacement>*/
                            var util = require('core-util-is');
                            util.inherits = require('inherits');
                            /*</replacement>*/

                            util.inherits(Transform, Duplex);

                            function afterTransform(er, data) {
                                var ts = this._transformState;
                                ts.transforming = false;

                                var cb = ts.writecb;

                                if (!cb) {
                                    return this.emit('error', new Error('write callback called multiple times'));
                                }

                                ts.writechunk = null;
                                ts.writecb = null;

                                if (data != null) // single equals check for both `null` and `undefined`
                                    this.push(data);

                                cb(er);

                                var rs = this._readableState;
                                rs.reading = false;
                                if (rs.needReadable || rs.length < rs.highWaterMark) {
                                    this._read(rs.highWaterMark);
                                }
                            }

                            function Transform(options) {
                                if (!(this instanceof Transform)) return new Transform(options);

                                Duplex.call(this, options);

                                this._transformState = {
                                    afterTransform: afterTransform.bind(this),
                                    needTransform: false,
                                    transforming: false,
                                    writecb: null,
                                    writechunk: null,
                                    writeencoding: null
                                };

                                // start out asking for a readable event once data is transformed.
                                this._readableState.needReadable = true;

                                // we have implemented the _read method, and done the other things
                                // that Readable wants before the first _read call, so unset the
                                // sync guard flag.
                                this._readableState.sync = false;

                                if (options) {
                                    if (typeof options.transform === 'function') this._transform = options.transform;

                                    if (typeof options.flush === 'function') this._flush = options.flush;
                                }

                                // When the writable side finishes, then flush out anything remaining.
                                this.on('prefinish', prefinish);
                            }

                            function prefinish() {
                                var _this = this;

                                if (typeof this._flush === 'function') {
                                    this._flush(function (er, data) {
                                        done(_this, er, data);
                                    });
                                } else {
                                    done(this, null, null);
                                }
                            }

                            Transform.prototype.push = function (chunk, encoding) {
                                this._transformState.needTransform = false;
                                return Duplex.prototype.push.call(this, chunk, encoding);
                            };

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
                            Transform.prototype._transform = function (chunk, encoding, cb) {
                                throw new Error('_transform() is not implemented');
                            };

                            Transform.prototype._write = function (chunk, encoding, cb) {
                                var ts = this._transformState;
                                ts.writecb = cb;
                                ts.writechunk = chunk;
                                ts.writeencoding = encoding;
                                if (!ts.transforming) {
                                    var rs = this._readableState;
                                    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
                                }
                            };

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
                            Transform.prototype._read = function (n) {
                                var ts = this._transformState;

                                if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
                                    ts.transforming = true;
                                    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
                                } else {
                                    // mark that we need a transform, so that any data that comes in
                                    // will get processed, now that we've asked for it.
                                    ts.needTransform = true;
                                }
                            };

                            Transform.prototype._destroy = function (err, cb) {
                                var _this2 = this;

                                Duplex.prototype._destroy.call(this, err, function (err2) {
                                    cb(err2);
                                    _this2.emit('close');
                                });
                            };

                            function done(stream, er, data) {
                                if (er) return stream.emit('error', er);

                                if (data != null) // single equals check for both `null` and `undefined`
                                    stream.push(data);

                                // if there's nothing in the write buffer, then that means
                                // that nothing more will ever be provided
                                if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');

                                if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');

                                return stream.push(null);
                            }
                        }, {"./_stream_duplex": 178, "core-util-is": 66, "inherits": 150}],
                        182: [function (require, module, exports) {
                            (function (process, global, setImmediate) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

                                'use strict';

                                /*<replacement>*/

                                var pna = require('process-nextick-args');
                                /*</replacement>*/

                                module.exports = Writable;

                                /* <replacement> */
                                function WriteReq(chunk, encoding, cb) {
                                    this.chunk = chunk;
                                    this.encoding = encoding;
                                    this.callback = cb;
                                    this.next = null;
                                }

// It seems a linked list but it is not
// there will be only 2 of these for each stream
                                function CorkedRequest(state) {
                                    var _this = this;

                                    this.next = null;
                                    this.entry = null;
                                    this.finish = function () {
                                        onCorkedFinish(_this, state);
                                    };
                                }

                                /* </replacement> */

                                /*<replacement>*/
                                var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
                                /*</replacement>*/

                                /*<replacement>*/
                                var Duplex;
                                /*</replacement>*/

                                Writable.WritableState = WritableState;

                                /*<replacement>*/
                                var util = require('core-util-is');
                                util.inherits = require('inherits');
                                /*</replacement>*/

                                /*<replacement>*/
                                var internalUtil = {
                                    deprecate: require('util-deprecate')
                                };
                                /*</replacement>*/

                                /*<replacement>*/
                                var Stream = require('./internal/streams/stream');
                                /*</replacement>*/

                                /*<replacement>*/

                                var Buffer = require('safe-buffer').Buffer;
                                var OurUint8Array = global.Uint8Array || function () {
                                };

                                function _uint8ArrayToBuffer(chunk) {
                                    return Buffer.from(chunk);
                                }

                                function _isUint8Array(obj) {
                                    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
                                }

                                /*</replacement>*/

                                var destroyImpl = require('./internal/streams/destroy');

                                util.inherits(Writable, Stream);

                                function nop() {
                                }

                                function WritableState(options, stream) {
                                    Duplex = Duplex || require('./_stream_duplex');

                                    options = options || {};

                                    // Duplex streams are both readable and writable, but share
                                    // the same options object.
                                    // However, some cases require setting options to different
                                    // values for the readable and the writable sides of the duplex stream.
                                    // These options can be provided separately as readableXXX and writableXXX.
                                    var isDuplex = stream instanceof Duplex;

                                    // object stream flag to indicate whether or not this stream
                                    // contains buffers or objects.
                                    this.objectMode = !!options.objectMode;

                                    if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

                                    // the point at which write() starts returning false
                                    // Note: 0 is a valid value, means that we always return false if
                                    // the entire buffer is not flushed immediately on write()
                                    var hwm = options.highWaterMark;
                                    var writableHwm = options.writableHighWaterMark;
                                    var defaultHwm = this.objectMode ? 16 : 16 * 1024;

                                    if (hwm || hwm === 0) this.highWaterMark = hwm; else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm; else this.highWaterMark = defaultHwm;

                                    // cast to ints.
                                    this.highWaterMark = Math.floor(this.highWaterMark);

                                    // if _final has been called
                                    this.finalCalled = false;

                                    // drain event flag.
                                    this.needDrain = false;
                                    // at the start of calling end()
                                    this.ending = false;
                                    // when end() has been called, and returned
                                    this.ended = false;
                                    // when 'finish' is emitted
                                    this.finished = false;

                                    // has it been destroyed
                                    this.destroyed = false;

                                    // should we decode strings into buffers before passing to _write?
                                    // this is here so that some node-core streams can optimize string
                                    // handling at a lower level.
                                    var noDecode = options.decodeStrings === false;
                                    this.decodeStrings = !noDecode;

                                    // Crypto is kind of old and crusty.  Historically, its default string
                                    // encoding is 'binary' so we have to make this configurable.
                                    // Everything else in the universe uses 'utf8', though.
                                    this.defaultEncoding = options.defaultEncoding || 'utf8';

                                    // not an actual buffer we keep track of, but a measurement
                                    // of how much we're waiting to get pushed to some underlying
                                    // socket or file.
                                    this.length = 0;

                                    // a flag to see when we're in the middle of a write.
                                    this.writing = false;

                                    // when true all writes will be buffered until .uncork() call
                                    this.corked = 0;

                                    // a flag to be able to tell if the onwrite cb is called immediately,
                                    // or on a later tick.  We set this to true at first, because any
                                    // actions that shouldn't happen until "later" should generally also
                                    // not happen before the first write call.
                                    this.sync = true;

                                    // a flag to know if we're processing previously buffered items, which
                                    // may call the _write() callback in the same tick, so that we don't
                                    // end up in an overlapped onwrite situation.
                                    this.bufferProcessing = false;

                                    // the callback that's passed to _write(chunk,cb)
                                    this.onwrite = function (er) {
                                        onwrite(stream, er);
                                    };

                                    // the callback that the user supplies to write(chunk,encoding,cb)
                                    this.writecb = null;

                                    // the amount that is being written when _write is called.
                                    this.writelen = 0;

                                    this.bufferedRequest = null;
                                    this.lastBufferedRequest = null;

                                    // number of pending user-supplied write callbacks
                                    // this must be 0 before 'finish' can be emitted
                                    this.pendingcb = 0;

                                    // emit prefinish if the only thing we're waiting for is _write cbs
                                    // This is relevant for synchronous Transform streams
                                    this.prefinished = false;

                                    // True if the error was already emitted and should not be thrown again
                                    this.errorEmitted = false;

                                    // count buffered requests
                                    this.bufferedRequestCount = 0;

                                    // allocate the first CorkedRequest, there is always
                                    // one allocated and free to use, and we maintain at most two
                                    this.corkedRequestsFree = new CorkedRequest(this);
                                }

                                WritableState.prototype.getBuffer = function getBuffer() {
                                    var current = this.bufferedRequest;
                                    var out = [];
                                    while (current) {
                                        out.push(current);
                                        current = current.next;
                                    }
                                    return out;
                                };

                                (function () {
                                    try {
                                        Object.defineProperty(WritableState.prototype, 'buffer', {
                                            get: internalUtil.deprecate(function () {
                                                return this.getBuffer();
                                            }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
                                        });
                                    } catch (_) {
                                    }
                                })();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
                                var realHasInstance;
                                if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
                                    realHasInstance = Function.prototype[Symbol.hasInstance];
                                    Object.defineProperty(Writable, Symbol.hasInstance, {
                                        value: function (object) {
                                            if (realHasInstance.call(this, object)) return true;
                                            if (this !== Writable) return false;

                                            return object && object._writableState instanceof WritableState;
                                        }
                                    });
                                } else {
                                    realHasInstance = function (object) {
                                        return object instanceof this;
                                    };
                                }

                                function Writable(options) {
                                    Duplex = Duplex || require('./_stream_duplex');

                                    // Writable ctor is applied to Duplexes, too.
                                    // `realHasInstance` is necessary because using plain `instanceof`
                                    // would return false, as no `_writableState` property is attached.

                                    // Trying to use the custom `instanceof` for Writable here will also break the
                                    // Node.js LazyTransform implementation, which has a non-trivial getter for
                                    // `_writableState` that would lead to infinite recursion.
                                    if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
                                        return new Writable(options);
                                    }

                                    this._writableState = new WritableState(options, this);

                                    // legacy.
                                    this.writable = true;

                                    if (options) {
                                        if (typeof options.write === 'function') this._write = options.write;

                                        if (typeof options.writev === 'function') this._writev = options.writev;

                                        if (typeof options.destroy === 'function') this._destroy = options.destroy;

                                        if (typeof options.final === 'function') this._final = options.final;
                                    }

                                    Stream.call(this);
                                }

// Otherwise people can pipe Writable streams, which is just wrong.
                                Writable.prototype.pipe = function () {
                                    this.emit('error', new Error('Cannot pipe, not readable'));
                                };

                                function writeAfterEnd(stream, cb) {
                                    var er = new Error('write after end');
                                    // TODO: defer error events consistently everywhere, not just the cb
                                    stream.emit('error', er);
                                    pna.nextTick(cb, er);
                                }

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
                                function validChunk(stream, state, chunk, cb) {
                                    var valid = true;
                                    var er = false;

                                    if (chunk === null) {
                                        er = new TypeError('May not write null values to stream');
                                    } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
                                        er = new TypeError('Invalid non-string/buffer chunk');
                                    }
                                    if (er) {
                                        stream.emit('error', er);
                                        pna.nextTick(cb, er);
                                        valid = false;
                                    }
                                    return valid;
                                }

                                Writable.prototype.write = function (chunk, encoding, cb) {
                                    var state = this._writableState;
                                    var ret = false;
                                    var isBuf = !state.objectMode && _isUint8Array(chunk);

                                    if (isBuf && !Buffer.isBuffer(chunk)) {
                                        chunk = _uint8ArrayToBuffer(chunk);
                                    }

                                    if (typeof encoding === 'function') {
                                        cb = encoding;
                                        encoding = null;
                                    }

                                    if (isBuf) encoding = 'buffer'; else if (!encoding) encoding = state.defaultEncoding;

                                    if (typeof cb !== 'function') cb = nop;

                                    if (state.ended) writeAfterEnd(this, cb); else if (isBuf || validChunk(this, state, chunk, cb)) {
                                        state.pendingcb++;
                                        ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
                                    }

                                    return ret;
                                };

                                Writable.prototype.cork = function () {
                                    var state = this._writableState;

                                    state.corked++;
                                };

                                Writable.prototype.uncork = function () {
                                    var state = this._writableState;

                                    if (state.corked) {
                                        state.corked--;

                                        if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
                                    }
                                };

                                Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
                                    // node::ParseEncoding() requires lower case.
                                    if (typeof encoding === 'string') encoding = encoding.toLowerCase();
                                    if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
                                    this._writableState.defaultEncoding = encoding;
                                    return this;
                                };

                                function decodeChunk(state, chunk, encoding) {
                                    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
                                        chunk = Buffer.from(chunk, encoding);
                                    }
                                    return chunk;
                                }

                                Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
                                    // making it explicit this property is not enumerable
                                    // because otherwise some prototype manipulation in
                                    // userland will fail
                                    enumerable: false,
                                    get: function () {
                                        return this._writableState.highWaterMark;
                                    }
                                });

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
                                function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
                                    if (!isBuf) {
                                        var newChunk = decodeChunk(state, chunk, encoding);
                                        if (chunk !== newChunk) {
                                            isBuf = true;
                                            encoding = 'buffer';
                                            chunk = newChunk;
                                        }
                                    }
                                    var len = state.objectMode ? 1 : chunk.length;

                                    state.length += len;

                                    var ret = state.length < state.highWaterMark;
                                    // we must ensure that previous needDrain will not be reset to false.
                                    if (!ret) state.needDrain = true;

                                    if (state.writing || state.corked) {
                                        var last = state.lastBufferedRequest;
                                        state.lastBufferedRequest = {
                                            chunk: chunk,
                                            encoding: encoding,
                                            isBuf: isBuf,
                                            callback: cb,
                                            next: null
                                        };
                                        if (last) {
                                            last.next = state.lastBufferedRequest;
                                        } else {
                                            state.bufferedRequest = state.lastBufferedRequest;
                                        }
                                        state.bufferedRequestCount += 1;
                                    } else {
                                        doWrite(stream, state, false, len, chunk, encoding, cb);
                                    }

                                    return ret;
                                }

                                function doWrite(stream, state, writev, len, chunk, encoding, cb) {
                                    state.writelen = len;
                                    state.writecb = cb;
                                    state.writing = true;
                                    state.sync = true;
                                    if (writev) stream._writev(chunk, state.onwrite); else stream._write(chunk, encoding, state.onwrite);
                                    state.sync = false;
                                }

                                function onwriteError(stream, state, sync, er, cb) {
                                    --state.pendingcb;

                                    if (sync) {
                                        // defer the callback if we are being called synchronously
                                        // to avoid piling up things on the stack
                                        pna.nextTick(cb, er);
                                        // this can emit finish, and it will always happen
                                        // after error
                                        pna.nextTick(finishMaybe, stream, state);
                                        stream._writableState.errorEmitted = true;
                                        stream.emit('error', er);
                                    } else {
                                        // the caller expect this to happen before if
                                        // it is async
                                        cb(er);
                                        stream._writableState.errorEmitted = true;
                                        stream.emit('error', er);
                                        // this can emit finish, but finish must
                                        // always follow error
                                        finishMaybe(stream, state);
                                    }
                                }

                                function onwriteStateUpdate(state) {
                                    state.writing = false;
                                    state.writecb = null;
                                    state.length -= state.writelen;
                                    state.writelen = 0;
                                }

                                function onwrite(stream, er) {
                                    var state = stream._writableState;
                                    var sync = state.sync;
                                    var cb = state.writecb;

                                    onwriteStateUpdate(state);

                                    if (er) onwriteError(stream, state, sync, er, cb); else {
                                        // Check if we're actually ready to finish, but don't emit yet
                                        var finished = needFinish(state);

                                        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
                                            clearBuffer(stream, state);
                                        }

                                        if (sync) {
                                            /*<replacement>*/
                                            asyncWrite(afterWrite, stream, state, finished, cb);
                                            /*</replacement>*/
                                        } else {
                                            afterWrite(stream, state, finished, cb);
                                        }
                                    }
                                }

                                function afterWrite(stream, state, finished, cb) {
                                    if (!finished) onwriteDrain(stream, state);
                                    state.pendingcb--;
                                    cb();
                                    finishMaybe(stream, state);
                                }

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
                                function onwriteDrain(stream, state) {
                                    if (state.length === 0 && state.needDrain) {
                                        state.needDrain = false;
                                        stream.emit('drain');
                                    }
                                }

// if there's something in the buffer waiting, then process it
                                function clearBuffer(stream, state) {
                                    state.bufferProcessing = true;
                                    var entry = state.bufferedRequest;

                                    if (stream._writev && entry && entry.next) {
                                        // Fast case, write everything using _writev()
                                        var l = state.bufferedRequestCount;
                                        var buffer = new Array(l);
                                        var holder = state.corkedRequestsFree;
                                        holder.entry = entry;

                                        var count = 0;
                                        var allBuffers = true;
                                        while (entry) {
                                            buffer[count] = entry;
                                            if (!entry.isBuf) allBuffers = false;
                                            entry = entry.next;
                                            count += 1;
                                        }
                                        buffer.allBuffers = allBuffers;

                                        doWrite(stream, state, true, state.length, buffer, '', holder.finish);

                                        // doWrite is almost always async, defer these to save a bit of time
                                        // as the hot path ends with doWrite
                                        state.pendingcb++;
                                        state.lastBufferedRequest = null;
                                        if (holder.next) {
                                            state.corkedRequestsFree = holder.next;
                                            holder.next = null;
                                        } else {
                                            state.corkedRequestsFree = new CorkedRequest(state);
                                        }
                                        state.bufferedRequestCount = 0;
                                    } else {
                                        // Slow case, write chunks one-by-one
                                        while (entry) {
                                            var chunk = entry.chunk;
                                            var encoding = entry.encoding;
                                            var cb = entry.callback;
                                            var len = state.objectMode ? 1 : chunk.length;

                                            doWrite(stream, state, false, len, chunk, encoding, cb);
                                            entry = entry.next;
                                            state.bufferedRequestCount--;
                                            // if we didn't call the onwrite immediately, then
                                            // it means that we need to wait until it does.
                                            // also, that means that the chunk and cb are currently
                                            // being processed, so move the buffer counter past them.
                                            if (state.writing) {
                                                break;
                                            }
                                        }

                                        if (entry === null) state.lastBufferedRequest = null;
                                    }

                                    state.bufferedRequest = entry;
                                    state.bufferProcessing = false;
                                }

                                Writable.prototype._write = function (chunk, encoding, cb) {
                                    cb(new Error('_write() is not implemented'));
                                };

                                Writable.prototype._writev = null;

                                Writable.prototype.end = function (chunk, encoding, cb) {
                                    var state = this._writableState;

                                    if (typeof chunk === 'function') {
                                        cb = chunk;
                                        chunk = null;
                                        encoding = null;
                                    } else if (typeof encoding === 'function') {
                                        cb = encoding;
                                        encoding = null;
                                    }

                                    if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

                                    // .end() fully uncorks
                                    if (state.corked) {
                                        state.corked = 1;
                                        this.uncork();
                                    }

                                    // ignore unnecessary end() calls.
                                    if (!state.ending && !state.finished) endWritable(this, state, cb);
                                };

                                function needFinish(state) {
                                    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
                                }

                                function callFinal(stream, state) {
                                    stream._final(function (err) {
                                        state.pendingcb--;
                                        if (err) {
                                            stream.emit('error', err);
                                        }
                                        state.prefinished = true;
                                        stream.emit('prefinish');
                                        finishMaybe(stream, state);
                                    });
                                }

                                function prefinish(stream, state) {
                                    if (!state.prefinished && !state.finalCalled) {
                                        if (typeof stream._final === 'function') {
                                            state.pendingcb++;
                                            state.finalCalled = true;
                                            pna.nextTick(callFinal, stream, state);
                                        } else {
                                            state.prefinished = true;
                                            stream.emit('prefinish');
                                        }
                                    }
                                }

                                function finishMaybe(stream, state) {
                                    var need = needFinish(state);
                                    if (need) {
                                        prefinish(stream, state);
                                        if (state.pendingcb === 0) {
                                            state.finished = true;
                                            stream.emit('finish');
                                        }
                                    }
                                    return need;
                                }

                                function endWritable(stream, state, cb) {
                                    state.ending = true;
                                    finishMaybe(stream, state);
                                    if (cb) {
                                        if (state.finished) pna.nextTick(cb); else stream.once('finish', cb);
                                    }
                                    state.ended = true;
                                    stream.writable = false;
                                }

                                function onCorkedFinish(corkReq, state, err) {
                                    var entry = corkReq.entry;
                                    corkReq.entry = null;
                                    while (entry) {
                                        var cb = entry.callback;
                                        state.pendingcb--;
                                        cb(err);
                                        entry = entry.next;
                                    }
                                    if (state.corkedRequestsFree) {
                                        state.corkedRequestsFree.next = corkReq;
                                    } else {
                                        state.corkedRequestsFree = corkReq;
                                    }
                                }

                                Object.defineProperty(Writable.prototype, 'destroyed', {
                                    get: function () {
                                        if (this._writableState === undefined) {
                                            return false;
                                        }
                                        return this._writableState.destroyed;
                                    },
                                    set: function (value) {
                                        // we ignore the value if the stream
                                        // has not been initialized yet
                                        if (!this._writableState) {
                                            return;
                                        }

                                        // backward compatibility, the user is explicitly
                                        // managing destroyed
                                        this._writableState.destroyed = value;
                                    }
                                });

                                Writable.prototype.destroy = destroyImpl.destroy;
                                Writable.prototype._undestroy = destroyImpl.undestroy;
                                Writable.prototype._destroy = function (err, cb) {
                                    this.end();
                                    cb(err);
                                };
                            }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {}, require("timers").setImmediate)
                        }, {
                            "./_stream_duplex": 178,
                            "./internal/streams/destroy": 184,
                            "./internal/streams/stream": 185,
                            "_process": 168,
                            "core-util-is": 66,
                            "inherits": 150,
                            "process-nextick-args": 167,
                            "safe-buffer": 191,
                            "timers": 202,
                            "util-deprecate": 203
                        }],
                        183: [function (require, module, exports) {
                            'use strict';

                            function _classCallCheck(instance, Constructor) {
                                if (!(instance instanceof Constructor)) {
                                    throw new TypeError("Cannot call a class as a function");
                                }
                            }

                            var Buffer = require('safe-buffer').Buffer;
                            var util = require('util');

                            function copyBuffer(src, target, offset) {
                                src.copy(target, offset);
                            }

                            module.exports = function () {
                                function BufferList() {
                                    _classCallCheck(this, BufferList);

                                    this.head = null;
                                    this.tail = null;
                                    this.length = 0;
                                }

                                BufferList.prototype.push = function push(v) {
                                    var entry = {data: v, next: null};
                                    if (this.length > 0) this.tail.next = entry; else this.head = entry;
                                    this.tail = entry;
                                    ++this.length;
                                };

                                BufferList.prototype.unshift = function unshift(v) {
                                    var entry = {data: v, next: this.head};
                                    if (this.length === 0) this.tail = entry;
                                    this.head = entry;
                                    ++this.length;
                                };

                                BufferList.prototype.shift = function shift() {
                                    if (this.length === 0) return;
                                    var ret = this.head.data;
                                    if (this.length === 1) this.head = this.tail = null; else this.head = this.head.next;
                                    --this.length;
                                    return ret;
                                };

                                BufferList.prototype.clear = function clear() {
                                    this.head = this.tail = null;
                                    this.length = 0;
                                };

                                BufferList.prototype.join = function join(s) {
                                    if (this.length === 0) return '';
                                    var p = this.head;
                                    var ret = '' + p.data;
                                    while (p = p.next) {
                                        ret += s + p.data;
                                    }
                                    return ret;
                                };

                                BufferList.prototype.concat = function concat(n) {
                                    if (this.length === 0) return Buffer.alloc(0);
                                    if (this.length === 1) return this.head.data;
                                    var ret = Buffer.allocUnsafe(n >>> 0);
                                    var p = this.head;
                                    var i = 0;
                                    while (p) {
                                        copyBuffer(p.data, ret, i);
                                        i += p.data.length;
                                        p = p.next;
                                    }
                                    return ret;
                                };

                                return BufferList;
                            }();

                            if (util && util.inspect && util.inspect.custom) {
                                module.exports.prototype[util.inspect.custom] = function () {
                                    var obj = util.inspect({length: this.length});
                                    return this.constructor.name + ' ' + obj;
                                };
                            }
                        }, {"safe-buffer": 191, "util": 35}],
                        184: [function (require, module, exports) {
                            'use strict';

                            /*<replacement>*/

                            var pna = require('process-nextick-args');
                            /*</replacement>*/

// undocumented cb() API, needed for core, not for public API
                            function destroy(err, cb) {
                                var _this = this;

                                var readableDestroyed = this._readableState && this._readableState.destroyed;
                                var writableDestroyed = this._writableState && this._writableState.destroyed;

                                if (readableDestroyed || writableDestroyed) {
                                    if (cb) {
                                        cb(err);
                                    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
                                        pna.nextTick(emitErrorNT, this, err);
                                    }
                                    return this;
                                }

                                // we set destroyed to true before firing error callbacks in order
                                // to make it re-entrance safe in case destroy() is called within callbacks

                                if (this._readableState) {
                                    this._readableState.destroyed = true;
                                }

                                // if this is a duplex stream mark the writable part as destroyed as well
                                if (this._writableState) {
                                    this._writableState.destroyed = true;
                                }

                                this._destroy(err || null, function (err) {
                                    if (!cb && err) {
                                        pna.nextTick(emitErrorNT, _this, err);
                                        if (_this._writableState) {
                                            _this._writableState.errorEmitted = true;
                                        }
                                    } else if (cb) {
                                        cb(err);
                                    }
                                });

                                return this;
                            }

                            function undestroy() {
                                if (this._readableState) {
                                    this._readableState.destroyed = false;
                                    this._readableState.reading = false;
                                    this._readableState.ended = false;
                                    this._readableState.endEmitted = false;
                                }

                                if (this._writableState) {
                                    this._writableState.destroyed = false;
                                    this._writableState.ended = false;
                                    this._writableState.ending = false;
                                    this._writableState.finished = false;
                                    this._writableState.errorEmitted = false;
                                }
                            }

                            function emitErrorNT(self, err) {
                                self.emit('error', err);
                            }

                            module.exports = {
                                destroy: destroy,
                                undestroy: undestroy
                            };
                        }, {"process-nextick-args": 167}],
                        185: [function (require, module, exports) {
                            module.exports = require('events').EventEmitter;

                        }, {"events": 133}],
                        186: [function (require, module, exports) {
                            module.exports = require('./readable').PassThrough

                        }, {"./readable": 187}],
                        187: [function (require, module, exports) {
                            exports = module.exports = require('./lib/_stream_readable.js');
                            exports.Stream = exports;
                            exports.Readable = exports;
                            exports.Writable = require('./lib/_stream_writable.js');
                            exports.Duplex = require('./lib/_stream_duplex.js');
                            exports.Transform = require('./lib/_stream_transform.js');
                            exports.PassThrough = require('./lib/_stream_passthrough.js');

                        }, {
                            "./lib/_stream_duplex.js": 178,
                            "./lib/_stream_passthrough.js": 179,
                            "./lib/_stream_readable.js": 180,
                            "./lib/_stream_transform.js": 181,
                            "./lib/_stream_writable.js": 182
                        }],
                        188: [function (require, module, exports) {
                            module.exports = require('./readable').Transform

                        }, {"./readable": 187}],
                        189: [function (require, module, exports) {
                            module.exports = require('./lib/_stream_writable.js');

                        }, {"./lib/_stream_writable.js": 182}],
                        190: [function (require, module, exports) {
                            'use strict'
                            var Buffer = require('buffer').Buffer
                            var inherits = require('inherits')
                            var HashBase = require('hash-base')

                            var ARRAY16 = new Array(16)

                            var zl = [
                                0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                                7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
                                3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
                                1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
                                4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
                            ]

                            var zr = [
                                5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
                                6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
                                15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
                                8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
                                12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
                            ]

                            var sl = [
                                11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
                                7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
                                11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
                                11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
                                9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
                            ]

                            var sr = [
                                8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
                                9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
                                9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
                                15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
                                8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
                            ]

                            var hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]
                            var hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]

                            function RIPEMD160() {
                                HashBase.call(this, 64)

                                // state
                                this._a = 0x67452301
                                this._b = 0xefcdab89
                                this._c = 0x98badcfe
                                this._d = 0x10325476
                                this._e = 0xc3d2e1f0
                            }

                            inherits(RIPEMD160, HashBase)

                            RIPEMD160.prototype._update = function () {
                                var words = ARRAY16
                                for (var j = 0; j < 16; ++j) words[j] = this._block.readInt32LE(j * 4)

                                var al = this._a | 0
                                var bl = this._b | 0
                                var cl = this._c | 0
                                var dl = this._d | 0
                                var el = this._e | 0

                                var ar = this._a | 0
                                var br = this._b | 0
                                var cr = this._c | 0
                                var dr = this._d | 0
                                var er = this._e | 0

                                // computation
                                for (var i = 0; i < 80; i += 1) {
                                    var tl
                                    var tr
                                    if (i < 16) {
                                        tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i])
                                        tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i])
                                    } else if (i < 32) {
                                        tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i])
                                        tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i])
                                    } else if (i < 48) {
                                        tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i])
                                        tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i])
                                    } else if (i < 64) {
                                        tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i])
                                        tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i])
                                    } else { // if (i<80) {
                                        tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i])
                                        tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i])
                                    }

                                    al = el
                                    el = dl
                                    dl = rotl(cl, 10)
                                    cl = bl
                                    bl = tl

                                    ar = er
                                    er = dr
                                    dr = rotl(cr, 10)
                                    cr = br
                                    br = tr
                                }

                                // update state
                                var t = (this._b + cl + dr) | 0
                                this._b = (this._c + dl + er) | 0
                                this._c = (this._d + el + ar) | 0
                                this._d = (this._e + al + br) | 0
                                this._e = (this._a + bl + cr) | 0
                                this._a = t
                            }

                            RIPEMD160.prototype._digest = function () {
                                // create padding and handle blocks
                                this._block[this._blockOffset++] = 0x80
                                if (this._blockOffset > 56) {
                                    this._block.fill(0, this._blockOffset, 64)
                                    this._update()
                                    this._blockOffset = 0
                                }

                                this._block.fill(0, this._blockOffset, 56)
                                this._block.writeUInt32LE(this._length[0], 56)
                                this._block.writeUInt32LE(this._length[1], 60)
                                this._update()

                                // produce result
                                var buffer = Buffer.alloc ? Buffer.alloc(20) : new Buffer(20)
                                buffer.writeInt32LE(this._a, 0)
                                buffer.writeInt32LE(this._b, 4)
                                buffer.writeInt32LE(this._c, 8)
                                buffer.writeInt32LE(this._d, 12)
                                buffer.writeInt32LE(this._e, 16)
                                return buffer
                            }

                            function rotl(x, n) {
                                return (x << n) | (x >>> (32 - n))
                            }

                            function fn1(a, b, c, d, e, m, k, s) {
                                return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0
                            }

                            function fn2(a, b, c, d, e, m, k, s) {
                                return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + e) | 0
                            }

                            function fn3(a, b, c, d, e, m, k, s) {
                                return (rotl((a + ((b | (~c)) ^ d) + m + k) | 0, s) + e) | 0
                            }

                            function fn4(a, b, c, d, e, m, k, s) {
                                return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + e) | 0
                            }

                            function fn5(a, b, c, d, e, m, k, s) {
                                return (rotl((a + (b ^ (c | (~d))) + m + k) | 0, s) + e) | 0
                            }

                            module.exports = RIPEMD160

                        }, {"buffer": 64, "hash-base": 135, "inherits": 150}],
                        191: [function (require, module, exports) {
                            /* eslint-disable node/no-deprecated-api */
                            var buffer = require('buffer')
                            var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
                            function copyProps(src, dst) {
                                for (var key in src) {
                                    dst[key] = src[key]
                                }
                            }

                            if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
                                module.exports = buffer
                            } else {
                                // Copy properties from require('buffer')
                                copyProps(buffer, exports)
                                exports.Buffer = SafeBuffer
                            }

                            function SafeBuffer(arg, encodingOrOffset, length) {
                                return Buffer(arg, encodingOrOffset, length)
                            }

// Copy static methods from Buffer
                            copyProps(Buffer, SafeBuffer)

                            SafeBuffer.from = function (arg, encodingOrOffset, length) {
                                if (typeof arg === 'number') {
                                    throw new TypeError('Argument must not be a number')
                                }
                                return Buffer(arg, encodingOrOffset, length)
                            }

                            SafeBuffer.alloc = function (size, fill, encoding) {
                                if (typeof size !== 'number') {
                                    throw new TypeError('Argument must be a number')
                                }
                                var buf = Buffer(size)
                                if (fill !== undefined) {
                                    if (typeof encoding === 'string') {
                                        buf.fill(fill, encoding)
                                    } else {
                                        buf.fill(fill)
                                    }
                                } else {
                                    buf.fill(0)
                                }
                                return buf
                            }

                            SafeBuffer.allocUnsafe = function (size) {
                                if (typeof size !== 'number') {
                                    throw new TypeError('Argument must be a number')
                                }
                                return Buffer(size)
                            }

                            SafeBuffer.allocUnsafeSlow = function (size) {
                                if (typeof size !== 'number') {
                                    throw new TypeError('Argument must be a number')
                                }
                                return buffer.SlowBuffer(size)
                            }

                        }, {"buffer": 64}],
                        192: [function (require, module, exports) {
                            var Buffer = require('safe-buffer').Buffer

// prototype class for hash functions
                            function Hash(blockSize, finalSize) {
                                this._block = Buffer.alloc(blockSize)
                                this._finalSize = finalSize
                                this._blockSize = blockSize
                                this._len = 0
                            }

                            Hash.prototype.update = function (data, enc) {
                                if (typeof data === 'string') {
                                    enc = enc || 'utf8'
                                    data = Buffer.from(data, enc)
                                }

                                var block = this._block
                                var blockSize = this._blockSize
                                var length = data.length
                                var accum = this._len

                                for (var offset = 0; offset < length;) {
                                    var assigned = accum % blockSize
                                    var remainder = Math.min(length - offset, blockSize - assigned)

                                    for (var i = 0; i < remainder; i++) {
                                        block[assigned + i] = data[offset + i]
                                    }

                                    accum += remainder
                                    offset += remainder

                                    if ((accum % blockSize) === 0) {
                                        this._update(block)
                                    }
                                }

                                this._len += length
                                return this
                            }

                            Hash.prototype.digest = function (enc) {
                                var rem = this._len % this._blockSize

                                this._block[rem] = 0x80

                                // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
                                // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
                                this._block.fill(0, rem + 1)

                                if (rem >= this._finalSize) {
                                    this._update(this._block)
                                    this._block.fill(0)
                                }

                                var bits = this._len * 8

                                // uint32
                                if (bits <= 0xffffffff) {
                                    this._block.writeUInt32BE(bits, this._blockSize - 4)

                                    // uint64
                                } else {
                                    var lowBits = (bits & 0xffffffff) >>> 0
                                    var highBits = (bits - lowBits) / 0x100000000

                                    this._block.writeUInt32BE(highBits, this._blockSize - 8)
                                    this._block.writeUInt32BE(lowBits, this._blockSize - 4)
                                }

                                this._update(this._block)
                                var hash = this._hash()

                                return enc ? hash.toString(enc) : hash
                            }

                            Hash.prototype._update = function () {
                                throw new Error('_update must be implemented by subclass')
                            }

                            module.exports = Hash

                        }, {"safe-buffer": 191}],
                        193: [function (require, module, exports) {
                            var exports = module.exports = function SHA(algorithm) {
                                algorithm = algorithm.toLowerCase()

                                var Algorithm = exports[algorithm]
                                if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')

                                return new Algorithm()
                            }

                            exports.sha = require('./sha')
                            exports.sha1 = require('./sha1')
                            exports.sha224 = require('./sha224')
                            exports.sha256 = require('./sha256')
                            exports.sha384 = require('./sha384')
                            exports.sha512 = require('./sha512')

                        }, {
                            "./sha": 194,
                            "./sha1": 195,
                            "./sha224": 196,
                            "./sha256": 197,
                            "./sha384": 198,
                            "./sha512": 199
                        }],
                        194: [function (require, module, exports) {
                            /*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */

                            var inherits = require('inherits')
                            var Hash = require('./hash')
                            var Buffer = require('safe-buffer').Buffer

                            var K = [
                                0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
                            ]

                            var W = new Array(80)

                            function Sha() {
                                this.init()
                                this._w = W

                                Hash.call(this, 64, 56)
                            }

                            inherits(Sha, Hash)

                            Sha.prototype.init = function () {
                                this._a = 0x67452301
                                this._b = 0xefcdab89
                                this._c = 0x98badcfe
                                this._d = 0x10325476
                                this._e = 0xc3d2e1f0

                                return this
                            }

                            function rotl5(num) {
                                return (num << 5) | (num >>> 27)
                            }

                            function rotl30(num) {
                                return (num << 30) | (num >>> 2)
                            }

                            function ft(s, b, c, d) {
                                if (s === 0) return (b & c) | ((~b) & d)
                                if (s === 2) return (b & c) | (b & d) | (c & d)
                                return b ^ c ^ d
                            }

                            Sha.prototype._update = function (M) {
                                var W = this._w

                                var a = this._a | 0
                                var b = this._b | 0
                                var c = this._c | 0
                                var d = this._d | 0
                                var e = this._e | 0

                                for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
                                for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]

                                for (var j = 0; j < 80; ++j) {
                                    var s = ~~(j / 20)
                                    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

                                    e = d
                                    d = c
                                    c = rotl30(b)
                                    b = a
                                    a = t
                                }

                                this._a = (a + this._a) | 0
                                this._b = (b + this._b) | 0
                                this._c = (c + this._c) | 0
                                this._d = (d + this._d) | 0
                                this._e = (e + this._e) | 0
                            }

                            Sha.prototype._hash = function () {
                                var H = Buffer.allocUnsafe(20)

                                H.writeInt32BE(this._a | 0, 0)
                                H.writeInt32BE(this._b | 0, 4)
                                H.writeInt32BE(this._c | 0, 8)
                                H.writeInt32BE(this._d | 0, 12)
                                H.writeInt32BE(this._e | 0, 16)

                                return H
                            }

                            module.exports = Sha

                        }, {"./hash": 192, "inherits": 150, "safe-buffer": 191}],
                        195: [function (require, module, exports) {
                            /*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

                            var inherits = require('inherits')
                            var Hash = require('./hash')
                            var Buffer = require('safe-buffer').Buffer

                            var K = [
                                0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
                            ]

                            var W = new Array(80)

                            function Sha1() {
                                this.init()
                                this._w = W

                                Hash.call(this, 64, 56)
                            }

                            inherits(Sha1, Hash)

                            Sha1.prototype.init = function () {
                                this._a = 0x67452301
                                this._b = 0xefcdab89
                                this._c = 0x98badcfe
                                this._d = 0x10325476
                                this._e = 0xc3d2e1f0

                                return this
                            }

                            function rotl1(num) {
                                return (num << 1) | (num >>> 31)
                            }

                            function rotl5(num) {
                                return (num << 5) | (num >>> 27)
                            }

                            function rotl30(num) {
                                return (num << 30) | (num >>> 2)
                            }

                            function ft(s, b, c, d) {
                                if (s === 0) return (b & c) | ((~b) & d)
                                if (s === 2) return (b & c) | (b & d) | (c & d)
                                return b ^ c ^ d
                            }

                            Sha1.prototype._update = function (M) {
                                var W = this._w

                                var a = this._a | 0
                                var b = this._b | 0
                                var c = this._c | 0
                                var d = this._d | 0
                                var e = this._e | 0

                                for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
                                for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])

                                for (var j = 0; j < 80; ++j) {
                                    var s = ~~(j / 20)
                                    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

                                    e = d
                                    d = c
                                    c = rotl30(b)
                                    b = a
                                    a = t
                                }

                                this._a = (a + this._a) | 0
                                this._b = (b + this._b) | 0
                                this._c = (c + this._c) | 0
                                this._d = (d + this._d) | 0
                                this._e = (e + this._e) | 0
                            }

                            Sha1.prototype._hash = function () {
                                var H = Buffer.allocUnsafe(20)

                                H.writeInt32BE(this._a | 0, 0)
                                H.writeInt32BE(this._b | 0, 4)
                                H.writeInt32BE(this._c | 0, 8)
                                H.writeInt32BE(this._d | 0, 12)
                                H.writeInt32BE(this._e | 0, 16)

                                return H
                            }

                            module.exports = Sha1

                        }, {"./hash": 192, "inherits": 150, "safe-buffer": 191}],
                        196: [function (require, module, exports) {
                            /**
                             * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
                             * in FIPS 180-2
                             * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
                             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
                             *
                             */

                            var inherits = require('inherits')
                            var Sha256 = require('./sha256')
                            var Hash = require('./hash')
                            var Buffer = require('safe-buffer').Buffer

                            var W = new Array(64)

                            function Sha224() {
                                this.init()

                                this._w = W // new Array(64)

                                Hash.call(this, 64, 56)
                            }

                            inherits(Sha224, Sha256)

                            Sha224.prototype.init = function () {
                                this._a = 0xc1059ed8
                                this._b = 0x367cd507
                                this._c = 0x3070dd17
                                this._d = 0xf70e5939
                                this._e = 0xffc00b31
                                this._f = 0x68581511
                                this._g = 0x64f98fa7
                                this._h = 0xbefa4fa4

                                return this
                            }

                            Sha224.prototype._hash = function () {
                                var H = Buffer.allocUnsafe(28)

                                H.writeInt32BE(this._a, 0)
                                H.writeInt32BE(this._b, 4)
                                H.writeInt32BE(this._c, 8)
                                H.writeInt32BE(this._d, 12)
                                H.writeInt32BE(this._e, 16)
                                H.writeInt32BE(this._f, 20)
                                H.writeInt32BE(this._g, 24)

                                return H
                            }

                            module.exports = Sha224

                        }, {"./hash": 192, "./sha256": 197, "inherits": 150, "safe-buffer": 191}],
                        197: [function (require, module, exports) {
                            /**
                             * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
                             * in FIPS 180-2
                             * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
                             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
                             *
                             */

                            var inherits = require('inherits')
                            var Hash = require('./hash')
                            var Buffer = require('safe-buffer').Buffer

                            var K = [
                                0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
                                0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
                                0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
                                0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
                                0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
                                0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
                                0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
                                0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
                                0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
                                0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
                                0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
                                0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
                                0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
                                0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
                                0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
                                0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
                            ]

                            var W = new Array(64)

                            function Sha256() {
                                this.init()

                                this._w = W // new Array(64)

                                Hash.call(this, 64, 56)
                            }

                            inherits(Sha256, Hash)

                            Sha256.prototype.init = function () {
                                this._a = 0x6a09e667
                                this._b = 0xbb67ae85
                                this._c = 0x3c6ef372
                                this._d = 0xa54ff53a
                                this._e = 0x510e527f
                                this._f = 0x9b05688c
                                this._g = 0x1f83d9ab
                                this._h = 0x5be0cd19

                                return this
                            }

                            function ch(x, y, z) {
                                return z ^ (x & (y ^ z))
                            }

                            function maj(x, y, z) {
                                return (x & y) | (z & (x | y))
                            }

                            function sigma0(x) {
                                return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
                            }

                            function sigma1(x) {
                                return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
                            }

                            function gamma0(x) {
                                return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
                            }

                            function gamma1(x) {
                                return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
                            }

                            Sha256.prototype._update = function (M) {
                                var W = this._w

                                var a = this._a | 0
                                var b = this._b | 0
                                var c = this._c | 0
                                var d = this._d | 0
                                var e = this._e | 0
                                var f = this._f | 0
                                var g = this._g | 0
                                var h = this._h | 0

                                for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
                                for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0

                                for (var j = 0; j < 64; ++j) {
                                    var T1 = (h + sigma1(e) + ch(e, f, g) + K[j] + W[j]) | 0
                                    var T2 = (sigma0(a) + maj(a, b, c)) | 0

                                    h = g
                                    g = f
                                    f = e
                                    e = (d + T1) | 0
                                    d = c
                                    c = b
                                    b = a
                                    a = (T1 + T2) | 0
                                }

                                this._a = (a + this._a) | 0
                                this._b = (b + this._b) | 0
                                this._c = (c + this._c) | 0
                                this._d = (d + this._d) | 0
                                this._e = (e + this._e) | 0
                                this._f = (f + this._f) | 0
                                this._g = (g + this._g) | 0
                                this._h = (h + this._h) | 0
                            }

                            Sha256.prototype._hash = function () {
                                var H = Buffer.allocUnsafe(32)

                                H.writeInt32BE(this._a, 0)
                                H.writeInt32BE(this._b, 4)
                                H.writeInt32BE(this._c, 8)
                                H.writeInt32BE(this._d, 12)
                                H.writeInt32BE(this._e, 16)
                                H.writeInt32BE(this._f, 20)
                                H.writeInt32BE(this._g, 24)
                                H.writeInt32BE(this._h, 28)

                                return H
                            }

                            module.exports = Sha256

                        }, {"./hash": 192, "inherits": 150, "safe-buffer": 191}],
                        198: [function (require, module, exports) {
                            var inherits = require('inherits')
                            var SHA512 = require('./sha512')
                            var Hash = require('./hash')
                            var Buffer = require('safe-buffer').Buffer

                            var W = new Array(160)

                            function Sha384() {
                                this.init()
                                this._w = W

                                Hash.call(this, 128, 112)
                            }

                            inherits(Sha384, SHA512)

                            Sha384.prototype.init = function () {
                                this._ah = 0xcbbb9d5d
                                this._bh = 0x629a292a
                                this._ch = 0x9159015a
                                this._dh = 0x152fecd8
                                this._eh = 0x67332667
                                this._fh = 0x8eb44a87
                                this._gh = 0xdb0c2e0d
                                this._hh = 0x47b5481d

                                this._al = 0xc1059ed8
                                this._bl = 0x367cd507
                                this._cl = 0x3070dd17
                                this._dl = 0xf70e5939
                                this._el = 0xffc00b31
                                this._fl = 0x68581511
                                this._gl = 0x64f98fa7
                                this._hl = 0xbefa4fa4

                                return this
                            }

                            Sha384.prototype._hash = function () {
                                var H = Buffer.allocUnsafe(48)

                                function writeInt64BE(h, l, offset) {
                                    H.writeInt32BE(h, offset)
                                    H.writeInt32BE(l, offset + 4)
                                }

                                writeInt64BE(this._ah, this._al, 0)
                                writeInt64BE(this._bh, this._bl, 8)
                                writeInt64BE(this._ch, this._cl, 16)
                                writeInt64BE(this._dh, this._dl, 24)
                                writeInt64BE(this._eh, this._el, 32)
                                writeInt64BE(this._fh, this._fl, 40)

                                return H
                            }

                            module.exports = Sha384

                        }, {"./hash": 192, "./sha512": 199, "inherits": 150, "safe-buffer": 191}],
                        199: [function (require, module, exports) {
                            var inherits = require('inherits')
                            var Hash = require('./hash')
                            var Buffer = require('safe-buffer').Buffer

                            var K = [
                                0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
                                0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
                                0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
                                0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
                                0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
                                0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
                                0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
                                0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
                                0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
                                0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
                                0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
                                0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
                                0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
                                0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
                                0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
                                0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
                                0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
                                0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
                                0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
                                0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
                                0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
                                0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
                                0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
                                0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
                                0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
                                0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
                                0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
                                0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
                                0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
                                0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
                                0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
                                0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
                                0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
                                0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
                                0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
                                0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
                                0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
                                0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
                                0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
                                0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
                            ]

                            var W = new Array(160)

                            function Sha512() {
                                this.init()
                                this._w = W

                                Hash.call(this, 128, 112)
                            }

                            inherits(Sha512, Hash)

                            Sha512.prototype.init = function () {
                                this._ah = 0x6a09e667
                                this._bh = 0xbb67ae85
                                this._ch = 0x3c6ef372
                                this._dh = 0xa54ff53a
                                this._eh = 0x510e527f
                                this._fh = 0x9b05688c
                                this._gh = 0x1f83d9ab
                                this._hh = 0x5be0cd19

                                this._al = 0xf3bcc908
                                this._bl = 0x84caa73b
                                this._cl = 0xfe94f82b
                                this._dl = 0x5f1d36f1
                                this._el = 0xade682d1
                                this._fl = 0x2b3e6c1f
                                this._gl = 0xfb41bd6b
                                this._hl = 0x137e2179

                                return this
                            }

                            function Ch(x, y, z) {
                                return z ^ (x & (y ^ z))
                            }

                            function maj(x, y, z) {
                                return (x & y) | (z & (x | y))
                            }

                            function sigma0(x, xl) {
                                return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
                            }

                            function sigma1(x, xl) {
                                return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
                            }

                            function Gamma0(x, xl) {
                                return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
                            }

                            function Gamma0l(x, xl) {
                                return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
                            }

                            function Gamma1(x, xl) {
                                return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
                            }

                            function Gamma1l(x, xl) {
                                return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
                            }

                            function getCarry(a, b) {
                                return (a >>> 0) < (b >>> 0) ? 1 : 0
                            }

                            Sha512.prototype._update = function (M) {
                                var W = this._w

                                var ah = this._ah | 0
                                var bh = this._bh | 0
                                var ch = this._ch | 0
                                var dh = this._dh | 0
                                var eh = this._eh | 0
                                var fh = this._fh | 0
                                var gh = this._gh | 0
                                var hh = this._hh | 0

                                var al = this._al | 0
                                var bl = this._bl | 0
                                var cl = this._cl | 0
                                var dl = this._dl | 0
                                var el = this._el | 0
                                var fl = this._fl | 0
                                var gl = this._gl | 0
                                var hl = this._hl | 0

                                for (var i = 0; i < 32; i += 2) {
                                    W[i] = M.readInt32BE(i * 4)
                                    W[i + 1] = M.readInt32BE(i * 4 + 4)
                                }
                                for (; i < 160; i += 2) {
                                    var xh = W[i - 15 * 2]
                                    var xl = W[i - 15 * 2 + 1]
                                    var gamma0 = Gamma0(xh, xl)
                                    var gamma0l = Gamma0l(xl, xh)

                                    xh = W[i - 2 * 2]
                                    xl = W[i - 2 * 2 + 1]
                                    var gamma1 = Gamma1(xh, xl)
                                    var gamma1l = Gamma1l(xl, xh)

                                    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
                                    var Wi7h = W[i - 7 * 2]
                                    var Wi7l = W[i - 7 * 2 + 1]

                                    var Wi16h = W[i - 16 * 2]
                                    var Wi16l = W[i - 16 * 2 + 1]

                                    var Wil = (gamma0l + Wi7l) | 0
                                    var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0
                                    Wil = (Wil + gamma1l) | 0
                                    Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0
                                    Wil = (Wil + Wi16l) | 0
                                    Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0

                                    W[i] = Wih
                                    W[i + 1] = Wil
                                }

                                for (var j = 0; j < 160; j += 2) {
                                    Wih = W[j]
                                    Wil = W[j + 1]

                                    var majh = maj(ah, bh, ch)
                                    var majl = maj(al, bl, cl)

                                    var sigma0h = sigma0(ah, al)
                                    var sigma0l = sigma0(al, ah)
                                    var sigma1h = sigma1(eh, el)
                                    var sigma1l = sigma1(el, eh)

                                    // t1 = h + sigma1 + ch + K[j] + W[j]
                                    var Kih = K[j]
                                    var Kil = K[j + 1]

                                    var chh = Ch(eh, fh, gh)
                                    var chl = Ch(el, fl, gl)

                                    var t1l = (hl + sigma1l) | 0
                                    var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0
                                    t1l = (t1l + chl) | 0
                                    t1h = (t1h + chh + getCarry(t1l, chl)) | 0
                                    t1l = (t1l + Kil) | 0
                                    t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0
                                    t1l = (t1l + Wil) | 0
                                    t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0

                                    // t2 = sigma0 + maj
                                    var t2l = (sigma0l + majl) | 0
                                    var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0

                                    hh = gh
                                    hl = gl
                                    gh = fh
                                    gl = fl
                                    fh = eh
                                    fl = el
                                    el = (dl + t1l) | 0
                                    eh = (dh + t1h + getCarry(el, dl)) | 0
                                    dh = ch
                                    dl = cl
                                    ch = bh
                                    cl = bl
                                    bh = ah
                                    bl = al
                                    al = (t1l + t2l) | 0
                                    ah = (t1h + t2h + getCarry(al, t1l)) | 0
                                }

                                this._al = (this._al + al) | 0
                                this._bl = (this._bl + bl) | 0
                                this._cl = (this._cl + cl) | 0
                                this._dl = (this._dl + dl) | 0
                                this._el = (this._el + el) | 0
                                this._fl = (this._fl + fl) | 0
                                this._gl = (this._gl + gl) | 0
                                this._hl = (this._hl + hl) | 0

                                this._ah = (this._ah + ah + getCarry(this._al, al)) | 0
                                this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0
                                this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0
                                this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0
                                this._eh = (this._eh + eh + getCarry(this._el, el)) | 0
                                this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0
                                this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0
                                this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0
                            }

                            Sha512.prototype._hash = function () {
                                var H = Buffer.allocUnsafe(64)

                                function writeInt64BE(h, l, offset) {
                                    H.writeInt32BE(h, offset)
                                    H.writeInt32BE(l, offset + 4)
                                }

                                writeInt64BE(this._ah, this._al, 0)
                                writeInt64BE(this._bh, this._bl, 8)
                                writeInt64BE(this._ch, this._cl, 16)
                                writeInt64BE(this._dh, this._dl, 24)
                                writeInt64BE(this._eh, this._el, 32)
                                writeInt64BE(this._fh, this._fl, 40)
                                writeInt64BE(this._gh, this._gl, 48)
                                writeInt64BE(this._hh, this._hl, 56)

                                return H
                            }

                            module.exports = Sha512

                        }, {"./hash": 192, "inherits": 150, "safe-buffer": 191}],
                        200: [function (require, module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

                            module.exports = Stream;

                            var EE = require('events').EventEmitter;
                            var inherits = require('inherits');

                            inherits(Stream, EE);
                            Stream.Readable = require('readable-stream/readable.js');
                            Stream.Writable = require('readable-stream/writable.js');
                            Stream.Duplex = require('readable-stream/duplex.js');
                            Stream.Transform = require('readable-stream/transform.js');
                            Stream.PassThrough = require('readable-stream/passthrough.js');

// Backwards-compat with node 0.4.x
                            Stream.Stream = Stream;


// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

                            function Stream() {
                                EE.call(this);
                            }

                            Stream.prototype.pipe = function (dest, options) {
                                var source = this;

                                function ondata(chunk) {
                                    if (dest.writable) {
                                        if (false === dest.write(chunk) && source.pause) {
                                            source.pause();
                                        }
                                    }
                                }

                                source.on('data', ondata);

                                function ondrain() {
                                    if (source.readable && source.resume) {
                                        source.resume();
                                    }
                                }

                                dest.on('drain', ondrain);

                                // If the 'end' option is not supplied, dest.end() will be called when
                                // source gets the 'end' or 'close' events.  Only dest.end() once.
                                if (!dest._isStdio && (!options || options.end !== false)) {
                                    source.on('end', onend);
                                    source.on('close', onclose);
                                }

                                var didOnEnd = false;

                                function onend() {
                                    if (didOnEnd) return;
                                    didOnEnd = true;

                                    dest.end();
                                }


                                function onclose() {
                                    if (didOnEnd) return;
                                    didOnEnd = true;

                                    if (typeof dest.destroy === 'function') dest.destroy();
                                }

                                // don't leave dangling pipes when there are errors.
                                function onerror(er) {
                                    cleanup();
                                    if (EE.listenerCount(this, 'error') === 0) {
                                        throw er; // Unhandled stream error in pipe.
                                    }
                                }

                                source.on('error', onerror);
                                dest.on('error', onerror);

                                // remove all the event listeners that were added.
                                function cleanup() {
                                    source.removeListener('data', ondata);
                                    dest.removeListener('drain', ondrain);

                                    source.removeListener('end', onend);
                                    source.removeListener('close', onclose);

                                    source.removeListener('error', onerror);
                                    dest.removeListener('error', onerror);

                                    source.removeListener('end', cleanup);
                                    source.removeListener('close', cleanup);

                                    dest.removeListener('close', cleanup);
                                }

                                source.on('end', cleanup);
                                source.on('close', cleanup);

                                dest.on('close', cleanup);

                                dest.emit('pipe', source);

                                // Allow for unix-like usage: A.pipe(B).pipe(C)
                                return dest;
                            };

                        }, {
                            "events": 133,
                            "inherits": 150,
                            "readable-stream/duplex.js": 177,
                            "readable-stream/passthrough.js": 186,
                            "readable-stream/readable.js": 187,
                            "readable-stream/transform.js": 188,
                            "readable-stream/writable.js": 189
                        }],
                        201: [function (require, module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

                            'use strict';

                            /*<replacement>*/

                            var Buffer = require('safe-buffer').Buffer;
                            /*</replacement>*/

                            var isEncoding = Buffer.isEncoding || function (encoding) {
                                encoding = '' + encoding;
                                switch (encoding && encoding.toLowerCase()) {
                                    case 'hex':
                                    case 'utf8':
                                    case 'utf-8':
                                    case 'ascii':
                                    case 'binary':
                                    case 'base64':
                                    case 'ucs2':
                                    case 'ucs-2':
                                    case 'utf16le':
                                    case 'utf-16le':
                                    case 'raw':
                                        return true;
                                    default:
                                        return false;
                                }
                            };

                            function _normalizeEncoding(enc) {
                                if (!enc) return 'utf8';
                                var retried;
                                while (true) {
                                    switch (enc) {
                                        case 'utf8':
                                        case 'utf-8':
                                            return 'utf8';
                                        case 'ucs2':
                                        case 'ucs-2':
                                        case 'utf16le':
                                        case 'utf-16le':
                                            return 'utf16le';
                                        case 'latin1':
                                        case 'binary':
                                            return 'latin1';
                                        case 'base64':
                                        case 'ascii':
                                        case 'hex':
                                            return enc;
                                        default:
                                            if (retried) return; // undefined
                                            enc = ('' + enc).toLowerCase();
                                            retried = true;
                                    }
                                }
                            };

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
                            function normalizeEncoding(enc) {
                                var nenc = _normalizeEncoding(enc);
                                if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
                                return nenc || enc;
                            }

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
                            exports.StringDecoder = StringDecoder;

                            function StringDecoder(encoding) {
                                this.encoding = normalizeEncoding(encoding);
                                var nb;
                                switch (this.encoding) {
                                    case 'utf16le':
                                        this.text = utf16Text;
                                        this.end = utf16End;
                                        nb = 4;
                                        break;
                                    case 'utf8':
                                        this.fillLast = utf8FillLast;
                                        nb = 4;
                                        break;
                                    case 'base64':
                                        this.text = base64Text;
                                        this.end = base64End;
                                        nb = 3;
                                        break;
                                    default:
                                        this.write = simpleWrite;
                                        this.end = simpleEnd;
                                        return;
                                }
                                this.lastNeed = 0;
                                this.lastTotal = 0;
                                this.lastChar = Buffer.allocUnsafe(nb);
                            }

                            StringDecoder.prototype.write = function (buf) {
                                if (buf.length === 0) return '';
                                var r;
                                var i;
                                if (this.lastNeed) {
                                    r = this.fillLast(buf);
                                    if (r === undefined) return '';
                                    i = this.lastNeed;
                                    this.lastNeed = 0;
                                } else {
                                    i = 0;
                                }
                                if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
                                return r || '';
                            };

                            StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
                            StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
                            StringDecoder.prototype.fillLast = function (buf) {
                                if (this.lastNeed <= buf.length) {
                                    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
                                    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
                                }
                                buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
                                this.lastNeed -= buf.length;
                            };

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
                            function utf8CheckByte(byte) {
                                if (byte <= 0x7F) return 0; else if (byte >> 5 === 0x06) return 2; else if (byte >> 4 === 0x0E) return 3; else if (byte >> 3 === 0x1E) return 4;
                                return byte >> 6 === 0x02 ? -1 : -2;
                            }

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
                            function utf8CheckIncomplete(self, buf, i) {
                                var j = buf.length - 1;
                                if (j < i) return 0;
                                var nb = utf8CheckByte(buf[j]);
                                if (nb >= 0) {
                                    if (nb > 0) self.lastNeed = nb - 1;
                                    return nb;
                                }
                                if (--j < i || nb === -2) return 0;
                                nb = utf8CheckByte(buf[j]);
                                if (nb >= 0) {
                                    if (nb > 0) self.lastNeed = nb - 2;
                                    return nb;
                                }
                                if (--j < i || nb === -2) return 0;
                                nb = utf8CheckByte(buf[j]);
                                if (nb >= 0) {
                                    if (nb > 0) {
                                        if (nb === 2) nb = 0; else self.lastNeed = nb - 3;
                                    }
                                    return nb;
                                }
                                return 0;
                            }

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
                            function utf8CheckExtraBytes(self, buf, p) {
                                if ((buf[0] & 0xC0) !== 0x80) {
                                    self.lastNeed = 0;
                                    return '\ufffd';
                                }
                                if (self.lastNeed > 1 && buf.length > 1) {
                                    if ((buf[1] & 0xC0) !== 0x80) {
                                        self.lastNeed = 1;
                                        return '\ufffd';
                                    }
                                    if (self.lastNeed > 2 && buf.length > 2) {
                                        if ((buf[2] & 0xC0) !== 0x80) {
                                            self.lastNeed = 2;
                                            return '\ufffd';
                                        }
                                    }
                                }
                            }

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
                            function utf8FillLast(buf) {
                                var p = this.lastTotal - this.lastNeed;
                                var r = utf8CheckExtraBytes(this, buf, p);
                                if (r !== undefined) return r;
                                if (this.lastNeed <= buf.length) {
                                    buf.copy(this.lastChar, p, 0, this.lastNeed);
                                    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
                                }
                                buf.copy(this.lastChar, p, 0, buf.length);
                                this.lastNeed -= buf.length;
                            }

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
                            function utf8Text(buf, i) {
                                var total = utf8CheckIncomplete(this, buf, i);
                                if (!this.lastNeed) return buf.toString('utf8', i);
                                this.lastTotal = total;
                                var end = buf.length - (total - this.lastNeed);
                                buf.copy(this.lastChar, 0, end);
                                return buf.toString('utf8', i, end);
                            }

// For UTF-8, a replacement character is added when ending on a partial
// character.
                            function utf8End(buf) {
                                var r = buf && buf.length ? this.write(buf) : '';
                                if (this.lastNeed) return r + '\ufffd';
                                return r;
                            }

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
                            function utf16Text(buf, i) {
                                if ((buf.length - i) % 2 === 0) {
                                    var r = buf.toString('utf16le', i);
                                    if (r) {
                                        var c = r.charCodeAt(r.length - 1);
                                        if (c >= 0xD800 && c <= 0xDBFF) {
                                            this.lastNeed = 2;
                                            this.lastTotal = 4;
                                            this.lastChar[0] = buf[buf.length - 2];
                                            this.lastChar[1] = buf[buf.length - 1];
                                            return r.slice(0, -1);
                                        }
                                    }
                                    return r;
                                }
                                this.lastNeed = 1;
                                this.lastTotal = 2;
                                this.lastChar[0] = buf[buf.length - 1];
                                return buf.toString('utf16le', i, buf.length - 1);
                            }

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
                            function utf16End(buf) {
                                var r = buf && buf.length ? this.write(buf) : '';
                                if (this.lastNeed) {
                                    var end = this.lastTotal - this.lastNeed;
                                    return r + this.lastChar.toString('utf16le', 0, end);
                                }
                                return r;
                            }

                            function base64Text(buf, i) {
                                var n = (buf.length - i) % 3;
                                if (n === 0) return buf.toString('base64', i);
                                this.lastNeed = 3 - n;
                                this.lastTotal = 3;
                                if (n === 1) {
                                    this.lastChar[0] = buf[buf.length - 1];
                                } else {
                                    this.lastChar[0] = buf[buf.length - 2];
                                    this.lastChar[1] = buf[buf.length - 1];
                                }
                                return buf.toString('base64', i, buf.length - n);
                            }

                            function base64End(buf) {
                                var r = buf && buf.length ? this.write(buf) : '';
                                if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
                                return r;
                            }

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
                            function simpleWrite(buf) {
                                return buf.toString(this.encoding);
                            }

                            function simpleEnd(buf) {
                                return buf && buf.length ? this.write(buf) : '';
                            }
                        }, {"safe-buffer": 191}],
                        202: [function (require, module, exports) {
                            (function (setImmediate, clearImmediate) {
                                var nextTick = require('process/browser.js').nextTick;
                                var apply = Function.prototype.apply;
                                var slice = Array.prototype.slice;
                                var immediateIds = {};
                                var nextImmediateId = 0;

// DOM APIs, for completeness

                                exports.setTimeout = function () {
                                    return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
                                };
                                exports.setInterval = function () {
                                    return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
                                };
                                exports.clearTimeout =
                                    exports.clearInterval = function (timeout) {
                                        timeout.close();
                                    };

                                function Timeout(id, clearFn) {
                                    this._id = id;
                                    this._clearFn = clearFn;
                                }

                                Timeout.prototype.unref = Timeout.prototype.ref = function () {
                                };
                                Timeout.prototype.close = function () {
                                    this._clearFn.call(window, this._id);
                                };

// Does not start the time, just sets up the members needed.
                                exports.enroll = function (item, msecs) {
                                    clearTimeout(item._idleTimeoutId);
                                    item._idleTimeout = msecs;
                                };

                                exports.unenroll = function (item) {
                                    clearTimeout(item._idleTimeoutId);
                                    item._idleTimeout = -1;
                                };

                                exports._unrefActive = exports.active = function (item) {
                                    clearTimeout(item._idleTimeoutId);

                                    var msecs = item._idleTimeout;
                                    if (msecs >= 0) {
                                        item._idleTimeoutId = setTimeout(function onTimeout() {
                                            if (item._onTimeout)
                                                item._onTimeout();
                                        }, msecs);
                                    }
                                };

// That's not how node.js implements it but the exposed api is the same.
                                exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function (fn) {
                                    var id = nextImmediateId++;
                                    var args = arguments.length < 2 ? false : slice.call(arguments, 1);

                                    immediateIds[id] = true;

                                    nextTick(function onNextTick() {
                                        if (immediateIds[id]) {
                                            // fn.call() is faster so we optimize for the common use-case
                                            // @see http://jsperf.com/call-apply-segu
                                            if (args) {
                                                fn.apply(null, args);
                                            } else {
                                                fn.call(null);
                                            }
                                            // Prevent ids from leaking
                                            exports.clearImmediate(id);
                                        }
                                    });

                                    return id;
                                };

                                exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function (id) {
                                    delete immediateIds[id];
                                };
                            }).call(this, require("timers").setImmediate, require("timers").clearImmediate)
                        }, {"process/browser.js": 168, "timers": 202}],
                        203: [function (require, module, exports) {
                            (function (global) {

                                /**
                                 * Module exports.
                                 */

                                module.exports = deprecate;

                                /**
                                 * Mark that a method should not be used.
                                 * Returns a modified function which warns once by default.
                                 *
                                 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
                                 *
                                 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
                                 * will throw an Error when invoked.
                                 *
                                 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
                                 * will invoke `console.trace()` instead of `console.error()`.
                                 *
                                 * @param {Function} fn - the function to deprecate
                                 * @param {String} msg - the string to print to the console when `fn` is invoked
                                 * @returns {Function} a new "deprecated" version of `fn`
                                 * @api public
                                 */

                                function deprecate(fn, msg) {
                                    if (config('noDeprecation')) {
                                        return fn;
                                    }

                                    var warned = false;

                                    function deprecated() {
                                        if (!warned) {
                                            if (config('throwDeprecation')) {
                                                throw new Error(msg);
                                            } else if (config('traceDeprecation')) {
                                                console.trace(msg);
                                            } else {
                                                console.warn(msg);
                                            }
                                            warned = true;
                                        }
                                        return fn.apply(this, arguments);
                                    }

                                    return deprecated;
                                }

                                /**
                                 * Checks `localStorage` for boolean values for the given `name`.
                                 *
                                 * @param {String} name
                                 * @returns {Boolean}
                                 * @api private
                                 */

                                function config(name) {
                                    // accessing global.localStorage can trigger a DOMException in sandboxed iframes
                                    try {
                                        if (!global.localStorage) return false;
                                    } catch (_) {
                                        return false;
                                    }
                                    var val = global.localStorage[name];
                                    if (null == val) return false;
                                    return String(val).toLowerCase() === 'true';
                                }

                            }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
                        }, {}],
                        204: [function (require, module, exports) {
                            var indexOf = function (xs, item) {
                                if (xs.indexOf) return xs.indexOf(item);
                                else for (var i = 0; i < xs.length; i++) {
                                    if (xs[i] === item) return i;
                                }
                                return -1;
                            };
                            var Object_keys = function (obj) {
                                if (Object.keys) return Object.keys(obj)
                                else {
                                    var res = [];
                                    for (var key in obj) res.push(key)
                                    return res;
                                }
                            };

                            var forEach = function (xs, fn) {
                                if (xs.forEach) return xs.forEach(fn)
                                else for (var i = 0; i < xs.length; i++) {
                                    fn(xs[i], i, xs);
                                }
                            };

                            var defineProp = (function () {
                                try {
                                    Object.defineProperty({}, '_', {});
                                    return function (obj, name, value) {
                                        Object.defineProperty(obj, name, {
                                            writable: true,
                                            enumerable: false,
                                            configurable: true,
                                            value: value
                                        })
                                    };
                                } catch (e) {
                                    return function (obj, name, value) {
                                        obj[name] = value;
                                    };
                                }
                            }());

                            var globals = ['Array', 'Boolean', 'Date', 'Error', 'EvalError', 'Function',
                                'Infinity', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'RangeError',
                                'ReferenceError', 'RegExp', 'String', 'SyntaxError', 'TypeError', 'URIError',
                                'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'escape',
                                'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'unescape'];

                            function Context() {
                            }

                            Context.prototype = {};

                            var Script = exports.Script = function NodeScript(code) {
                                if (!(this instanceof Script)) return new Script(code);
                                this.code = code;
                            };

                            Script.prototype.runInContext = function (context) {
                                if (!(context instanceof Context)) {
                                    throw new TypeError("needs a 'context' argument.");
                                }

                                var iframe = document.createElement('iframe');
                                if (!iframe.style) iframe.style = {};
                                iframe.style.display = 'none';

                                document.body.appendChild(iframe);

                                var win = iframe.contentWindow;
                                var wEval = win.eval, wExecScript = win.execScript;

                                if (!wEval && wExecScript) {
                                    // win.eval() magically appears when this is called in IE:
                                    wExecScript.call(win, 'null');
                                    wEval = win.eval;
                                }

                                forEach(Object_keys(context), function (key) {
                                    win[key] = context[key];
                                });
                                forEach(globals, function (key) {
                                    if (context[key]) {
                                        win[key] = context[key];
                                    }
                                });

                                var winKeys = Object_keys(win);

                                var res = wEval.call(win, this.code);

                                forEach(Object_keys(win), function (key) {
                                    // Avoid copying circular objects like `top` and `window` by only
                                    // updating existing context properties or new properties in the `win`
                                    // that was only introduced after the eval.
                                    if (key in context || indexOf(winKeys, key) === -1) {
                                        context[key] = win[key];
                                    }
                                });

                                forEach(globals, function (key) {
                                    if (!(key in context)) {
                                        defineProp(context, key, win[key]);
                                    }
                                });

                                document.body.removeChild(iframe);

                                return res;
                            };

                            Script.prototype.runInThisContext = function () {
                                return eval(this.code); // maybe...
                            };

                            Script.prototype.runInNewContext = function (context) {
                                var ctx = Script.createContext(context);
                                var res = this.runInContext(ctx);

                                if (context) {
                                    forEach(Object_keys(ctx), function (key) {
                                        context[key] = ctx[key];
                                    });
                                }

                                return res;
                            };

                            forEach(Object_keys(Script.prototype), function (name) {
                                exports[name] = Script[name] = function (code) {
                                    var s = Script(code);
                                    return s[name].apply(s, [].slice.call(arguments, 1));
                                };
                            });

                            exports.isContext = function (context) {
                                return context instanceof Context;
                            };

                            exports.createScript = function (code) {
                                return exports.Script(code);
                            };

                            exports.createContext = Script.createContext = function (context) {
                                var copy = new Context();
                                if (typeof context === 'object') {
                                    forEach(Object_keys(context), function (key) {
                                        copy[key] = context[key];
                                    });
                                }
                                return copy;
                            };

                        }, {}]
                    }, {}, [6])(6)
                });

            }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
        }, {
            "..": 1,
            "../": 1,
            "../../asn1": undefined,
            "../../elliptic": undefined,
            "../../is-buffer/index.js": undefined,
            "../asn1": undefined,
            "../base": undefined,
            "../common": undefined,
            "../constants": undefined,
            "../curve": undefined,
            "../des": undefined,
            "../elliptic": undefined,
            "../incr32": undefined,
            "../libs/axlsign": undefined,
            "../libs/base58": undefined,
            "../libs/blake2b": undefined,
            "../libs/converters": undefined,
            "../libs/secure-random": undefined,
            "../libs/sha3": undefined,
            "../package.json": 4,
            "../utils": undefined,
            "../utils/concat": undefined,
            "../utils/convert": undefined,
            "../utils/crypto": undefined,
            "./256": undefined,
            "./512": undefined,
            "./Seed": undefined,
            "./_stream_duplex": undefined,
            "./_stream_readable": undefined,
            "./_stream_transform": undefined,
            "./_stream_writable": undefined,
            "./aes": undefined,
            "./aesid.json": undefined,
            "./algorithms.json": undefined,
            "./asn1": undefined,
            "./asn1/api": undefined,
            "./asn1/base": undefined,
            "./asn1/constants": undefined,
            "./asn1/decoders": undefined,
            "./asn1/encoders": undefined,
            "./authCipher": undefined,
            "./base": undefined,
            "./browser/algorithms.json": undefined,
            "./buffer": undefined,
            "./byteProcessor/ByteProcessor": undefined,
            "./cbc": undefined,
            "./certificate": undefined,
            "./cfb": undefined,
            "./cfb1": undefined,
            "./cfb8": undefined,
            "./cipher-core": undefined,
            "./common": undefined,
            "./concat": undefined,
            "./config/Config": undefined,
            "./constants": undefined,
            "./core": undefined,
            "./ctr": undefined,
            "./curves.json": undefined,
            "./decrypter": undefined,
            "./default-encoding": undefined,
            "./der": undefined,
            "./des/cbc": undefined,
            "./des/cipher": undefined,
            "./des/des": undefined,
            "./des/ede": undefined,
            "./des/utils": undefined,
            "./dictionary": undefined,
            "./ecb": undefined,
            "./edwards": undefined,
            "./elliptic/curve": undefined,
            "./elliptic/curves": undefined,
            "./elliptic/ec": undefined,
            "./elliptic/eddsa": undefined,
            "./elliptic/utils": undefined,
            "./enc-base64": undefined,
            "./enc-utf16": undefined,
            "./encrypter": undefined,
            "./evpkdf": undefined,
            "./fixProc": undefined,
            "./format-hex": undefined,
            "./generatePrime": undefined,
            "./ghash": undefined,
            "./hash": undefined,
            "./hash/common": undefined,
            "./hash/hmac": undefined,
            "./hash/ripemd": undefined,
            "./hash/sha": undefined,
            "./hash/utils": undefined,
            "./hmac": undefined,
            "./incr32": undefined,
            "./index": undefined,
            "./internal/streams/BufferList": undefined,
            "./internal/streams/destroy": undefined,
            "./internal/streams/stream": undefined,
            "./key": undefined,
            "./legacy": undefined,
            "./lib-typedarrays": undefined,
            "./lib/_stream_duplex.js": undefined,
            "./lib/_stream_passthrough.js": undefined,
            "./lib/_stream_readable.js": undefined,
            "./lib/_stream_transform.js": undefined,
            "./lib/_stream_writable.js": undefined,
            "./lib/async": undefined,
            "./lib/dh": undefined,
            "./lib/generatePrime": undefined,
            "./lib/primes.json": undefined,
            "./lib/sync": undefined,
            "./libs/axlsign": undefined,
            "./libs/base58": undefined,
            "./libs/blake2b": undefined,
            "./libs/converters": undefined,
            "./libs/secure-random": undefined,
            "./libs/sha3": undefined,
            "./list.json": undefined,
            "./md5": undefined,
            "./mgf": undefined,
            "./mode-cfb": undefined,
            "./mode-ctr": undefined,
            "./mode-ctr-gladman": undefined,
            "./mode-ecb": undefined,
            "./mode-ofb": undefined,
            "./modes": undefined,
            "./modes/list.json": undefined,
            "./mont": undefined,
            "./node": undefined,
            "./ofb": undefined,
            "./pad-ansix923": undefined,
            "./pad-iso10126": undefined,
            "./pad-iso97971": undefined,
            "./pad-nopadding": undefined,
            "./pad-zeropadding": undefined,
            "./pbkdf2": undefined,
            "./pem": undefined,
            "./precomputed/secp256k1": undefined,
            "./precondition": undefined,
            "./privateDecrypt": undefined,
            "./publicEncrypt": undefined,
            "./rabbit": undefined,
            "./rabbit-legacy": undefined,
            "./rc4": undefined,
            "./readable": undefined,
            "./reporter": undefined,
            "./ripemd160": undefined,
            "./sha": undefined,
            "./sha/1": undefined,
            "./sha/224": undefined,
            "./sha/256": undefined,
            "./sha/384": undefined,
            "./sha/512": undefined,
            "./sha1": undefined,
            "./sha224": undefined,
            "./sha256": undefined,
            "./sha3": undefined,
            "./sha384": undefined,
            "./sha512": undefined,
            "./short": undefined,
            "./sign": undefined,
            "./signature": undefined,
            "./signatureFactory/SignatureFactory": undefined,
            "./streamCipher": undefined,
            "./sync": undefined,
            "./tripledes": undefined,
            "./utils": undefined,
            "./utils/concat": undefined,
            "./utils/convert": undefined,
            "./utils/crypto": undefined,
            "./verify": undefined,
            "./withPublic": undefined,
            "./x64-core": undefined,
            "./xor": undefined,
            "_process": 49,
            "asn1.js": 5,
            "base64-js": 2,
            "bignumber.js": 3,
            "bn.js": 20,
            "brorand": 21,
            "browserify-aes": 25,
            "browserify-aes/browser": 25,
            "browserify-aes/modes": 29,
            "browserify-cipher": 38,
            "browserify-des": 39,
            "browserify-des/modes": 40,
            "browserify-rsa": 41,
            "browserify-sign": 45,
            "browserify-sign/algos": 42,
            "buffer": 57,
            "buffer-xor": 56,
            "cipher-base": 59,
            "core-util-is": 60,
            "create-ecdh": 61,
            "create-hash": 62,
            "create-hash/md5": 64,
            "create-hmac": 65,
            "crypto": undefined,
            "crypto-js": 75,
            "des.js": 101,
            "diffie-hellman": 107,
            "elliptic": 111,
            "events": 127,
            "evp_bytestokey": 128,
            "hash-base": 129,
            "hash.js": 130,
            "hmac-drbg": 142,
            "ieee754": undefined,
            "inherits": 143,
            "isarray": 145,
            "md5.js": undefined,
            "miller-rabin": 146,
            "minimalistic-assert": 147,
            "minimalistic-crypto-utils": 148,
            "parse-asn1": 153,
            "pbkdf2": 155,
            "process-nextick-args": 160,
            "process/browser.js": 161,
            "public-encrypt": 162,
            "randombytes": 168,
            "randomfill": undefined,
            "readable-stream/duplex.js": 169,
            "readable-stream/passthrough.js": 179,
            "readable-stream/readable.js": 180,
            "readable-stream/transform.js": 181,
            "readable-stream/writable.js": 182,
            "ripemd160": 183,
            "safe-buffer": 184,
            "sha.js": 186,
            "stream": 193,
            "string_decoder": 50,
            "string_decoder/": 213,
            "timers": 51,
            "util": 54,
            "util-deprecate": 214,
            "vm": 55
        }],
        2: [function (require, module, exports) {
            'use strict'

            exports.byteLength = byteLength
            exports.toByteArray = toByteArray
            exports.fromByteArray = fromByteArray

            var lookup = []
            var revLookup = []
            var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

            var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
            for (var i = 0, len = code.length; i < len; ++i) {
                lookup[i] = code[i]
                revLookup[code.charCodeAt(i)] = i
            }

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
            revLookup['-'.charCodeAt(0)] = 62
            revLookup['_'.charCodeAt(0)] = 63

            function getLens(b64) {
                var len = b64.length

                if (len % 4 > 0) {
                    throw new Error('Invalid string. Length must be a multiple of 4')
                }

                // Trim off extra bytes after placeholder bytes are found
                // See: https://github.com/beatgammit/base64-js/issues/42
                var validLen = b64.indexOf('=')
                if (validLen === -1) validLen = len

                var placeHoldersLen = validLen === len
                    ? 0
                    : 4 - (validLen % 4)

                return [validLen, placeHoldersLen]
            }

// base64 is 4/3 + up to two characters of the original data
            function byteLength(b64) {
                var lens = getLens(b64)
                var validLen = lens[0]
                var placeHoldersLen = lens[1]
                return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
            }

            function _byteLength(b64, validLen, placeHoldersLen) {
                return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
            }

            function toByteArray(b64) {
                var tmp
                var lens = getLens(b64)
                var validLen = lens[0]
                var placeHoldersLen = lens[1]

                var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

                var curByte = 0

                // if there are placeholders, only get up to the last complete 4 chars
                var len = placeHoldersLen > 0
                    ? validLen - 4
                    : validLen

                for (var i = 0; i < len; i += 4) {
                    tmp =
                        (revLookup[b64.charCodeAt(i)] << 18) |
                        (revLookup[b64.charCodeAt(i + 1)] << 12) |
                        (revLookup[b64.charCodeAt(i + 2)] << 6) |
                        revLookup[b64.charCodeAt(i + 3)]
                    arr[curByte++] = (tmp >> 16) & 0xFF
                    arr[curByte++] = (tmp >> 8) & 0xFF
                    arr[curByte++] = tmp & 0xFF
                }

                if (placeHoldersLen === 2) {
                    tmp =
                        (revLookup[b64.charCodeAt(i)] << 2) |
                        (revLookup[b64.charCodeAt(i + 1)] >> 4)
                    arr[curByte++] = tmp & 0xFF
                }

                if (placeHoldersLen === 1) {
                    tmp =
                        (revLookup[b64.charCodeAt(i)] << 10) |
                        (revLookup[b64.charCodeAt(i + 1)] << 4) |
                        (revLookup[b64.charCodeAt(i + 2)] >> 2)
                    arr[curByte++] = (tmp >> 8) & 0xFF
                    arr[curByte++] = tmp & 0xFF
                }

                return arr
            }

            function tripletToBase64(num) {
                return lookup[num >> 18 & 0x3F] +
                    lookup[num >> 12 & 0x3F] +
                    lookup[num >> 6 & 0x3F] +
                    lookup[num & 0x3F]
            }

            function encodeChunk(uint8, start, end) {
                var tmp
                var output = []
                for (var i = start; i < end; i += 3) {
                    tmp =
                        ((uint8[i] << 16) & 0xFF0000) +
                        ((uint8[i + 1] << 8) & 0xFF00) +
                        (uint8[i + 2] & 0xFF)
                    output.push(tripletToBase64(tmp))
                }
                return output.join('')
            }

            function fromByteArray(uint8) {
                var tmp
                var len = uint8.length
                var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
                var parts = []
                var maxChunkLength = 16383 // must be multiple of 3

                // go through the array every three bytes, we'll deal with trailing stuff later
                for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
                    parts.push(encodeChunk(
                        uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
                    ))
                }

                // pad the end with zeros, but make sure to not forget the extra bytes
                if (extraBytes === 1) {
                    tmp = uint8[len - 1]
                    parts.push(
                        lookup[tmp >> 2] +
                        lookup[(tmp << 4) & 0x3F] +
                        '=='
                    )
                } else if (extraBytes === 2) {
                    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
                    parts.push(
                        lookup[tmp >> 10] +
                        lookup[(tmp >> 4) & 0x3F] +
                        lookup[(tmp << 2) & 0x3F] +
                        '='
                    )
                }

                return parts.join('')
            }

        }, {}],
        3: [function (require, module, exports) {
            ;(function (globalObject) {
                'use strict';

                /*
 *      bignumber.js v7.2.1
 *      A JavaScript library for arbitrary-precision arithmetic.
 *      https://github.com/MikeMcl/bignumber.js
 *      Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>
 *      MIT Licensed.
 *
 *      BigNumber.prototype methods     |  BigNumber methods
 *                                      |
 *      absoluteValue            abs    |  clone
 *      comparedTo                      |  config               set
 *      decimalPlaces            dp     |      DECIMAL_PLACES
 *      dividedBy                div    |      ROUNDING_MODE
 *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT
 *      exponentiatedBy          pow    |      RANGE
 *      integerValue                    |      CRYPTO
 *      isEqualTo                eq     |      MODULO_MODE
 *      isFinite                        |      POW_PRECISION
 *      isGreaterThan            gt     |      FORMAT
 *      isGreaterThanOrEqualTo   gte    |      ALPHABET
 *      isInteger                       |  isBigNumber
 *      isLessThan               lt     |  maximum              max
 *      isLessThanOrEqualTo      lte    |  minimum              min
 *      isNaN                           |  random
 *      isNegative                      |
 *      isPositive                      |
 *      isZero                          |
 *      minus                           |
 *      modulo                   mod    |
 *      multipliedBy             times  |
 *      negated                         |
 *      plus                            |
 *      precision                sd     |
 *      shiftedBy                       |
 *      squareRoot               sqrt   |
 *      toExponential                   |
 *      toFixed                         |
 *      toFormat                        |
 *      toFraction                      |
 *      toJSON                          |
 *      toNumber                        |
 *      toPrecision                     |
 *      toString                        |
 *      valueOf                         |
 *
 */


                var BigNumber,
                    isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,

                    mathceil = Math.ceil,
                    mathfloor = Math.floor,

                    bignumberError = '[BigNumber Error] ',
                    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',

                    BASE = 1e14,
                    LOG_BASE = 14,
                    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1
                    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1
                    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],
                    SQRT_BASE = 1e7,

                    // EDITABLE
                    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and
                    // the arguments to toExponential, toFixed, toFormat, and toPrecision.
                    MAX = 1E9;                                   // 0 to MAX_INT32


                /*
   * Create and return a BigNumber constructor.
   */
                function clone(configObject) {
                    var div, convertBase, parseNumeric,
                        P = BigNumber.prototype = {constructor: BigNumber, toString: null, valueOf: null},
                        ONE = new BigNumber(1),


                        //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------


                        // The default values below must be integers within the inclusive ranges stated.
                        // The values can also be changed at run-time using BigNumber.set.

                        // The maximum number of decimal places for operations involving division.
                        DECIMAL_PLACES = 20,                     // 0 to MAX

                        // The rounding mode used when rounding to the above decimal places, and when using
                        // toExponential, toFixed, toFormat and toPrecision, and round (default value).
                        // UP         0 Away from zero.
                        // DOWN       1 Towards zero.
                        // CEIL       2 Towards +Infinity.
                        // FLOOR      3 Towards -Infinity.
                        // HALF_UP    4 Towards nearest neighbour. If equidistant, up.
                        // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
                        // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
                        // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
                        // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
                        ROUNDING_MODE = 4,                       // 0 to 8

                        // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]

                        // The exponent value at and beneath which toString returns exponential notation.
                        // Number type: -7
                        TO_EXP_NEG = -7,                         // 0 to -MAX

                        // The exponent value at and above which toString returns exponential notation.
                        // Number type: 21
                        TO_EXP_POS = 21,                         // 0 to MAX

                        // RANGE : [MIN_EXP, MAX_EXP]

                        // The minimum exponent value, beneath which underflow to zero occurs.
                        // Number type: -324  (5e-324)
                        MIN_EXP = -1e7,                          // -1 to -MAX

                        // The maximum exponent value, above which overflow to Infinity occurs.
                        // Number type:  308  (1.7976931348623157e+308)
                        // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.
                        MAX_EXP = 1e7,                           // 1 to MAX

                        // Whether to use cryptographically-secure random number generation, if available.
                        CRYPTO = false,                          // true or false

                        // The modulo mode used when calculating the modulus: a mod n.
                        // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
                        // The remainder (r) is calculated as: r = a - n * q.
                        //
                        // UP        0 The remainder is positive if the dividend is negative, else is negative.
                        // DOWN      1 The remainder has the same sign as the dividend.
                        //             This modulo mode is commonly known as 'truncated division' and is
                        //             equivalent to (a % n) in JavaScript.
                        // FLOOR     3 The remainder has the same sign as the divisor (Python %).
                        // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.
                        // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).
                        //             The remainder is always positive.
                        //
                        // The truncated division, floored division, Euclidian division and IEEE 754 remainder
                        // modes are commonly used for the modulus operation.
                        // Although the other rounding modes can also be used, they may not give useful results.
                        MODULO_MODE = 1,                         // 0 to 9

                        // The maximum number of significant digits of the result of the exponentiatedBy operation.
                        // If POW_PRECISION is 0, there will be unlimited significant digits.
                        POW_PRECISION = 0,                    // 0 to MAX

                        // The format specification used by the BigNumber.prototype.toFormat method.
                        FORMAT = {
                            decimalSeparator: '.',
                            groupSeparator: ',',
                            groupSize: 3,
                            secondaryGroupSize: 0,
                            fractionGroupSeparator: '\xA0',      // non-breaking space
                            fractionGroupSize: 0
                        },

                        // The alphabet used for base conversion.
                        // It must be at least 2 characters long, with no '.' or repeated character.
                        // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'
                        ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';


                    //------------------------------------------------------------------------------------------


                    // CONSTRUCTOR


                    /*
     * The BigNumber constructor and exported function.
     * Create and return a new instance of a BigNumber object.
     *
     * n {number|string|BigNumber} A numeric value.
     * [b] {number} The base of n. Integer, 2 to ALPHABET.length inclusive.
     */
                    function BigNumber(n, b) {
                        var alphabet, c, caseChanged, e, i, isNum, len, str,
                            x = this;

                        // Enable constructor usage without new.
                        if (!(x instanceof BigNumber)) {

                            // Don't throw on constructor call without new (#81).
                            // '[BigNumber Error] Constructor call without new: {n}'
                            //throw Error(bignumberError + ' Constructor call without new: ' + n);
                            return new BigNumber(n, b);
                        }

                        if (b == null) {

                            // Duplicate.
                            if (n instanceof BigNumber) {
                                x.s = n.s;
                                x.e = n.e;
                                x.c = (n = n.c) ? n.slice() : n;
                                return;
                            }

                            isNum = typeof n == 'number';

                            if (isNum && n * 0 == 0) {

                                // Use `1 / n` to handle minus zero also.
                                x.s = 1 / n < 0 ? (n = -n, -1) : 1;

                                // Faster path for integers.
                                if (n === ~~n) {
                                    for (e = 0, i = n; i >= 10; i /= 10, e++) ;
                                    x.e = e;
                                    x.c = [n];
                                    return;
                                }

                                str = n + '';
                            } else {
                                if (!isNumeric.test(str = n + '')) return parseNumeric(x, str, isNum);
                                x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;
                            }

                            // Decimal point?
                            if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');

                            // Exponential form?
                            if ((i = str.search(/e/i)) > 0) {

                                // Determine exponent.
                                if (e < 0) e = i;
                                e += +str.slice(i + 1);
                                str = str.substring(0, i);
                            } else if (e < 0) {

                                // Integer.
                                e = str.length;
                            }

                        } else {

                            // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
                            intCheck(b, 2, ALPHABET.length, 'Base');
                            str = n + '';

                            // Allow exponential notation to be used with base 10 argument, while
                            // also rounding to DECIMAL_PLACES as with other bases.
                            if (b == 10) {
                                x = new BigNumber(n instanceof BigNumber ? n : str);
                                return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
                            }

                            isNum = typeof n == 'number';

                            if (isNum) {

                                // Avoid potential interpretation of Infinity and NaN as base 44+ values.
                                if (n * 0 != 0) return parseNumeric(x, str, isNum, b);

                                x.s = 1 / n < 0 ? (str = str.slice(1), -1) : 1;

                                // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
                                if (BigNumber.DEBUG && str.replace(/^0\.0*|\./, '').length > 15) {
                                    throw Error
                                    (tooManyDigits + n);
                                }

                                // Prevent later check for length on converted number.
                                isNum = false;
                            } else {
                                x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
                            }

                            alphabet = ALPHABET.slice(0, b);
                            e = i = 0;

                            // Check that str is a valid base b number.
                            // Don't use RegExp so alphabet can contain special characters.
                            for (len = str.length; i < len; i++) {
                                if (alphabet.indexOf(c = str.charAt(i)) < 0) {
                                    if (c == '.') {

                                        // If '.' is not the first character and it has not be found before.
                                        if (i > e) {
                                            e = len;
                                            continue;
                                        }
                                    } else if (!caseChanged) {

                                        // Allow e.g. hexadecimal 'FF' as well as 'ff'.
                                        if (str == str.toUpperCase() && (str = str.toLowerCase()) ||
                                            str == str.toLowerCase() && (str = str.toUpperCase())) {
                                            caseChanged = true;
                                            i = -1;
                                            e = 0;
                                            continue;
                                        }
                                    }

                                    return parseNumeric(x, n + '', isNum, b);
                                }
                            }

                            str = convertBase(str, b, 10, x.s);

                            // Decimal point?
                            if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');
                            else e = str.length;
                        }

                        // Determine leading zeros.
                        for (i = 0; str.charCodeAt(i) === 48; i++) ;

                        // Determine trailing zeros.
                        for (len = str.length; str.charCodeAt(--len) === 48;) ;

                        str = str.slice(i, ++len);

                        if (str) {
                            len -= i;

                            // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
                            if (isNum && BigNumber.DEBUG &&
                                len > 15 && (n > MAX_SAFE_INTEGER || n !== mathfloor(n))) {
                                throw Error
                                (tooManyDigits + (x.s * n));
                            }

                            e = e - i - 1;

                            // Overflow?
                            if (e > MAX_EXP) {

                                // Infinity.
                                x.c = x.e = null;

                                // Underflow?
                            } else if (e < MIN_EXP) {

                                // Zero.
                                x.c = [x.e = 0];
                            } else {
                                x.e = e;
                                x.c = [];

                                // Transform base

                                // e is the base 10 exponent.
                                // i is where to slice str to get the first element of the coefficient array.
                                i = (e + 1) % LOG_BASE;
                                if (e < 0) i += LOG_BASE;

                                if (i < len) {
                                    if (i) x.c.push(+str.slice(0, i));

                                    for (len -= LOG_BASE; i < len;) {
                                        x.c.push(+str.slice(i, i += LOG_BASE));
                                    }

                                    str = str.slice(i);
                                    i = LOG_BASE - str.length;
                                } else {
                                    i -= len;
                                }

                                for (; i--; str += '0') ;
                                x.c.push(+str);
                            }
                        } else {

                            // Zero.
                            x.c = [x.e = 0];
                        }
                    }


                    // CONSTRUCTOR PROPERTIES


                    BigNumber.clone = clone;

                    BigNumber.ROUND_UP = 0;
                    BigNumber.ROUND_DOWN = 1;
                    BigNumber.ROUND_CEIL = 2;
                    BigNumber.ROUND_FLOOR = 3;
                    BigNumber.ROUND_HALF_UP = 4;
                    BigNumber.ROUND_HALF_DOWN = 5;
                    BigNumber.ROUND_HALF_EVEN = 6;
                    BigNumber.ROUND_HALF_CEIL = 7;
                    BigNumber.ROUND_HALF_FLOOR = 8;
                    BigNumber.EUCLID = 9;


                    /*
     * Configure infrequently-changing library-wide settings.
     *
     * Accept an object with the following optional properties (if the value of a property is
     * a number, it must be an integer within the inclusive range stated):
     *
     *   DECIMAL_PLACES   {number}           0 to MAX
     *   ROUNDING_MODE    {number}           0 to 8
     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]
     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]
     *   CRYPTO           {boolean}          true or false
     *   MODULO_MODE      {number}           0 to 9
     *   POW_PRECISION       {number}           0 to MAX
     *   ALPHABET         {string}           A string of two or more unique characters which does
     *                                       not contain '.'.
     *   FORMAT           {object}           An object with some of the following properties:
     *      decimalSeparator       {string}
     *      groupSeparator         {string}
     *      groupSize              {number}
     *      secondaryGroupSize     {number}
     *      fractionGroupSeparator {string}
     *      fractionGroupSize      {number}
     *
     * (The values assigned to the above FORMAT object properties are not checked for validity.)
     *
     * E.g.
     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })
     *
     * Ignore properties/parameters set to null or undefined, except for ALPHABET.
     *
     * Return an object with the properties current values.
     */
                    BigNumber.config = BigNumber.set = function (obj) {
                        var p, v;

                        if (obj != null) {

                            if (typeof obj == 'object') {

                                // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.
                                // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'
                                if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {
                                    v = obj[p];
                                    intCheck(v, 0, MAX, p);
                                    DECIMAL_PLACES = v;
                                }

                                // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.
                                // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'
                                if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {
                                    v = obj[p];
                                    intCheck(v, 0, 8, p);
                                    ROUNDING_MODE = v;
                                }

                                // EXPONENTIAL_AT {number|number[]}
                                // Integer, -MAX to MAX inclusive or
                                // [integer -MAX to 0 inclusive, 0 to MAX inclusive].
                                // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'
                                if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {
                                    v = obj[p];
                                    if (isArray(v)) {
                                        intCheck(v[0], -MAX, 0, p);
                                        intCheck(v[1], 0, MAX, p);
                                        TO_EXP_NEG = v[0];
                                        TO_EXP_POS = v[1];
                                    } else {
                                        intCheck(v, -MAX, MAX, p);
                                        TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);
                                    }
                                }

                                // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or
                                // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].
                                // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'
                                if (obj.hasOwnProperty(p = 'RANGE')) {
                                    v = obj[p];
                                    if (isArray(v)) {
                                        intCheck(v[0], -MAX, -1, p);
                                        intCheck(v[1], 1, MAX, p);
                                        MIN_EXP = v[0];
                                        MAX_EXP = v[1];
                                    } else {
                                        intCheck(v, -MAX, MAX, p);
                                        if (v) {
                                            MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);
                                        } else {
                                            throw Error
                                            (bignumberError + p + ' cannot be zero: ' + v);
                                        }
                                    }
                                }

                                // CRYPTO {boolean} true or false.
                                // '[BigNumber Error] CRYPTO not true or false: {v}'
                                // '[BigNumber Error] crypto unavailable'
                                if (obj.hasOwnProperty(p = 'CRYPTO')) {
                                    v = obj[p];
                                    if (v === !!v) {
                                        if (v) {
                                            if (typeof crypto != 'undefined' && crypto &&
                                                (crypto.getRandomValues || crypto.randomBytes)) {
                                                CRYPTO = v;
                                            } else {
                                                CRYPTO = !v;
                                                throw Error
                                                (bignumberError + 'crypto unavailable');
                                            }
                                        } else {
                                            CRYPTO = v;
                                        }
                                    } else {
                                        throw Error
                                        (bignumberError + p + ' not true or false: ' + v);
                                    }
                                }

                                // MODULO_MODE {number} Integer, 0 to 9 inclusive.
                                // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'
                                if (obj.hasOwnProperty(p = 'MODULO_MODE')) {
                                    v = obj[p];
                                    intCheck(v, 0, 9, p);
                                    MODULO_MODE = v;
                                }

                                // POW_PRECISION {number} Integer, 0 to MAX inclusive.
                                // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'
                                if (obj.hasOwnProperty(p = 'POW_PRECISION')) {
                                    v = obj[p];
                                    intCheck(v, 0, MAX, p);
                                    POW_PRECISION = v;
                                }

                                // FORMAT {object}
                                // '[BigNumber Error] FORMAT not an object: {v}'
                                if (obj.hasOwnProperty(p = 'FORMAT')) {
                                    v = obj[p];
                                    if (typeof v == 'object') FORMAT = v;
                                    else throw Error
                                    (bignumberError + p + ' not an object: ' + v);
                                }

                                // ALPHABET {string}
                                // '[BigNumber Error] ALPHABET invalid: {v}'
                                if (obj.hasOwnProperty(p = 'ALPHABET')) {
                                    v = obj[p];

                                    // Disallow if only one character, or contains '.' or a repeated character.
                                    if (typeof v == 'string' && !/^.$|\.|(.).*\1/.test(v)) {
                                        ALPHABET = v;
                                    } else {
                                        throw Error
                                        (bignumberError + p + ' invalid: ' + v);
                                    }
                                }

                            } else {

                                // '[BigNumber Error] Object expected: {v}'
                                throw Error
                                (bignumberError + 'Object expected: ' + obj);
                            }
                        }

                        return {
                            DECIMAL_PLACES: DECIMAL_PLACES,
                            ROUNDING_MODE: ROUNDING_MODE,
                            EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],
                            RANGE: [MIN_EXP, MAX_EXP],
                            CRYPTO: CRYPTO,
                            MODULO_MODE: MODULO_MODE,
                            POW_PRECISION: POW_PRECISION,
                            FORMAT: FORMAT,
                            ALPHABET: ALPHABET
                        };
                    };


                    /*
     * Return true if v is a BigNumber instance, otherwise return false.
     *
     * v {any}
     */
                    BigNumber.isBigNumber = function (v) {
                        return v instanceof BigNumber || v && v._isBigNumber === true || false;
                    };


                    /*
     * Return a new BigNumber whose value is the maximum of the arguments.
     *
     * arguments {number|string|BigNumber}
     */
                    BigNumber.maximum = BigNumber.max = function () {
                        return maxOrMin(arguments, P.lt);
                    };


                    /*
     * Return a new BigNumber whose value is the minimum of the arguments.
     *
     * arguments {number|string|BigNumber}
     */
                    BigNumber.minimum = BigNumber.min = function () {
                        return maxOrMin(arguments, P.gt);
                    };


                    /*
     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,
     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing
     * zeros are produced).
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'
     * '[BigNumber Error] crypto unavailable'
     */
                    BigNumber.random = (function () {
                        var pow2_53 = 0x20000000000000;

                        // Return a 53 bit integer n, where 0 <= n < 9007199254740992.
                        // Check if Math.random() produces more than 32 bits of randomness.
                        // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.
                        // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.
                        var random53bitInt = (Math.random() * pow2_53) & 0x1fffff
                            ? function () {
                                return mathfloor(Math.random() * pow2_53);
                            }
                            : function () {
                                return ((Math.random() * 0x40000000 | 0) * 0x800000) +
                                    (Math.random() * 0x800000 | 0);
                            };

                        return function (dp) {
                            var a, b, e, k, v,
                                i = 0,
                                c = [],
                                rand = new BigNumber(ONE);

                            if (dp == null) dp = DECIMAL_PLACES;
                            else intCheck(dp, 0, MAX);

                            k = mathceil(dp / LOG_BASE);

                            if (CRYPTO) {

                                // Browsers supporting crypto.getRandomValues.
                                if (crypto.getRandomValues) {

                                    a = crypto.getRandomValues(new Uint32Array(k *= 2));

                                    for (; i < k;) {

                                        // 53 bits:
                                        // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)
                                        // 11111 11111111 11111111 11111111 11100000 00000000 00000000
                                        // ((Math.pow(2, 32) - 1) >>> 11).toString(2)
                                        //                                     11111 11111111 11111111
                                        // 0x20000 is 2^21.
                                        v = a[i] * 0x20000 + (a[i + 1] >>> 11);

                                        // Rejection sampling:
                                        // 0 <= v < 9007199254740992
                                        // Probability that v >= 9e15, is
                                        // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251
                                        if (v >= 9e15) {
                                            b = crypto.getRandomValues(new Uint32Array(2));
                                            a[i] = b[0];
                                            a[i + 1] = b[1];
                                        } else {

                                            // 0 <= v <= 8999999999999999
                                            // 0 <= (v % 1e14) <= 99999999999999
                                            c.push(v % 1e14);
                                            i += 2;
                                        }
                                    }
                                    i = k / 2;

                                    // Node.js supporting crypto.randomBytes.
                                } else if (crypto.randomBytes) {

                                    // buffer
                                    a = crypto.randomBytes(k *= 7);

                                    for (; i < k;) {

                                        // 0x1000000000000 is 2^48, 0x10000000000 is 2^40
                                        // 0x100000000 is 2^32, 0x1000000 is 2^24
                                        // 11111 11111111 11111111 11111111 11111111 11111111 11111111
                                        // 0 <= v < 9007199254740992
                                        v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +
                                            (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +
                                            (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];

                                        if (v >= 9e15) {
                                            crypto.randomBytes(7).copy(a, i);
                                        } else {

                                            // 0 <= (v % 1e14) <= 99999999999999
                                            c.push(v % 1e14);
                                            i += 7;
                                        }
                                    }
                                    i = k / 7;
                                } else {
                                    CRYPTO = false;
                                    throw Error
                                    (bignumberError + 'crypto unavailable');
                                }
                            }

                            // Use Math.random.
                            if (!CRYPTO) {

                                for (; i < k;) {
                                    v = random53bitInt();
                                    if (v < 9e15) c[i++] = v % 1e14;
                                }
                            }

                            k = c[--i];
                            dp %= LOG_BASE;

                            // Convert trailing digits to zeros according to dp.
                            if (k && dp) {
                                v = POWS_TEN[LOG_BASE - dp];
                                c[i] = mathfloor(k / v) * v;
                            }

                            // Remove trailing elements which are zero.
                            for (; c[i] === 0; c.pop(), i--) ;

                            // Zero?
                            if (i < 0) {
                                c = [e = 0];
                            } else {

                                // Remove leading elements which are zero and adjust exponent accordingly.
                                for (e = -1; c[0] === 0; c.splice(0, 1), e -= LOG_BASE) ;

                                // Count the digits of the first element of c to determine leading zeros, and...
                                for (i = 1, v = c[0]; v >= 10; v /= 10, i++) ;

                                // adjust the exponent accordingly.
                                if (i < LOG_BASE) e -= LOG_BASE - i;
                            }

                            rand.e = e;
                            rand.c = c;
                            return rand;
                        };
                    })();


                    // PRIVATE FUNCTIONS


                    // Called by BigNumber and BigNumber.prototype.toString.
                    convertBase = (function () {
                        var decimal = '0123456789';

                        /*
       * Convert string of baseIn to an array of numbers of baseOut.
       * Eg. toBaseOut('255', 10, 16) returns [15, 15].
       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].
       */
                        function toBaseOut(str, baseIn, baseOut, alphabet) {
                            var j,
                                arr = [0],
                                arrL,
                                i = 0,
                                len = str.length;

                            for (; i < len;) {
                                for (arrL = arr.length; arrL--; arr[arrL] *= baseIn) ;

                                arr[0] += alphabet.indexOf(str.charAt(i++));

                                for (j = 0; j < arr.length; j++) {

                                    if (arr[j] > baseOut - 1) {
                                        if (arr[j + 1] == null) arr[j + 1] = 0;
                                        arr[j + 1] += arr[j] / baseOut | 0;
                                        arr[j] %= baseOut;
                                    }
                                }
                            }

                            return arr.reverse();
                        }

                        // Convert a numeric string of baseIn to a numeric string of baseOut.
                        // If the caller is toString, we are converting from base 10 to baseOut.
                        // If the caller is BigNumber, we are converting from baseIn to base 10.
                        return function (str, baseIn, baseOut, sign, callerIsToString) {
                            var alphabet, d, e, k, r, x, xc, y,
                                i = str.indexOf('.'),
                                dp = DECIMAL_PLACES,
                                rm = ROUNDING_MODE;

                            // Non-integer.
                            if (i >= 0) {
                                k = POW_PRECISION;

                                // Unlimited precision.
                                POW_PRECISION = 0;
                                str = str.replace('.', '');
                                y = new BigNumber(baseIn);
                                x = y.pow(str.length - i);
                                POW_PRECISION = k;

                                // Convert str as if an integer, then restore the fraction part by dividing the
                                // result by its base raised to a power.

                                y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),
                                    10, baseOut, decimal);
                                y.e = y.c.length;
                            }

                            // Convert the number as integer.

                            xc = toBaseOut(str, baseIn, baseOut, callerIsToString
                                ? (alphabet = ALPHABET, decimal)
                                : (alphabet = decimal, ALPHABET));

                            // xc now represents str as an integer and converted to baseOut. e is the exponent.
                            e = k = xc.length;

                            // Remove trailing zeros.
                            for (; xc[--k] == 0; xc.pop()) ;

                            // Zero?
                            if (!xc[0]) return alphabet.charAt(0);

                            // Does str represent an integer? If so, no need for the division.
                            if (i < 0) {
                                --e;
                            } else {
                                x.c = xc;
                                x.e = e;

                                // The sign is needed for correct rounding.
                                x.s = sign;
                                x = div(x, y, dp, rm, baseOut);
                                xc = x.c;
                                r = x.r;
                                e = x.e;
                            }

                            // xc now represents str converted to baseOut.

                            // THe index of the rounding digit.
                            d = e + dp + 1;

                            // The rounding digit: the digit to the right of the digit that may be rounded up.
                            i = xc[d];

                            // Look at the rounding digits and mode to determine whether to round up.

                            k = baseOut / 2;
                            r = r || d < 0 || xc[d + 1] != null;

                            r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
                                : i > k || i == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||
                                rm == (x.s < 0 ? 8 : 7));

                            // If the index of the rounding digit is not greater than zero, or xc represents
                            // zero, then the result of the base conversion is zero or, if rounding up, a value
                            // such as 0.00001.
                            if (d < 1 || !xc[0]) {

                                // 1^-dp or 0
                                str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0))
                                    : alphabet.charAt(0);
                            } else {

                                // Truncate xc to the required number of decimal places.
                                xc.length = d;

                                // Round up?
                                if (r) {

                                    // Rounding up may mean the previous digit has to be rounded up and so on.
                                    for (--baseOut; ++xc[--d] > baseOut;) {
                                        xc[d] = 0;

                                        if (!d) {
                                            ++e;
                                            xc = [1].concat(xc);
                                        }
                                    }
                                }

                                // Determine trailing zeros.
                                for (k = xc.length; !xc[--k];) ;

                                // E.g. [4, 11, 15] becomes 4bf.
                                for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++])) ;

                                // Add leading zeros, decimal point and trailing zeros as required.
                                str = toFixedPoint(str, e, alphabet.charAt(0));
                            }

                            // The caller will add the sign.
                            return str;
                        };
                    })();


                    // Perform division in the specified base. Called by div and convertBase.
                    div = (function () {

                        // Assume non-zero x and k.
                        function multiply(x, k, base) {
                            var m, temp, xlo, xhi,
                                carry = 0,
                                i = x.length,
                                klo = k % SQRT_BASE,
                                khi = k / SQRT_BASE | 0;

                            for (x = x.slice(); i--;) {
                                xlo = x[i] % SQRT_BASE;
                                xhi = x[i] / SQRT_BASE | 0;
                                m = khi * xlo + xhi * klo;
                                temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;
                                carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;
                                x[i] = temp % base;
                            }

                            if (carry) x = [carry].concat(x);

                            return x;
                        }

                        function compare(a, b, aL, bL) {
                            var i, cmp;

                            if (aL != bL) {
                                cmp = aL > bL ? 1 : -1;
                            } else {

                                for (i = cmp = 0; i < aL; i++) {

                                    if (a[i] != b[i]) {
                                        cmp = a[i] > b[i] ? 1 : -1;
                                        break;
                                    }
                                }
                            }

                            return cmp;
                        }

                        function subtract(a, b, aL, base) {
                            var i = 0;

                            // Subtract b from a.
                            for (; aL--;) {
                                a[aL] -= i;
                                i = a[aL] < b[aL] ? 1 : 0;
                                a[aL] = i * base + a[aL] - b[aL];
                            }

                            // Remove leading zeros.
                            for (; !a[0] && a.length > 1; a.splice(0, 1)) ;
                        }

                        // x: dividend, y: divisor.
                        return function (x, y, dp, rm, base) {
                            var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,
                                yL, yz,
                                s = x.s == y.s ? 1 : -1,
                                xc = x.c,
                                yc = y.c;

                            // Either NaN, Infinity or 0?
                            if (!xc || !xc[0] || !yc || !yc[0]) {

                                return new BigNumber(
                                    // Return NaN if either NaN, or both Infinity or 0.
                                    !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :

                                        // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
                                        xc && xc[0] == 0 || !yc ? s * 0 : s / 0
                                );
                            }

                            q = new BigNumber(s);
                            qc = q.c = [];
                            e = x.e - y.e;
                            s = dp + e + 1;

                            if (!base) {
                                base = BASE;
                                e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
                                s = s / LOG_BASE | 0;
                            }

                            // Result exponent may be one less then the current value of e.
                            // The coefficients of the BigNumbers from convertBase may have trailing zeros.
                            for (i = 0; yc[i] == (xc[i] || 0); i++) ;

                            if (yc[i] > (xc[i] || 0)) e--;

                            if (s < 0) {
                                qc.push(1);
                                more = true;
                            } else {
                                xL = xc.length;
                                yL = yc.length;
                                i = 0;
                                s += 2;

                                // Normalise xc and yc so highest order digit of yc is >= base / 2.

                                n = mathfloor(base / (yc[0] + 1));

                                // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.
                                // if (n > 1 || n++ == 1 && yc[0] < base / 2) {
                                if (n > 1) {
                                    yc = multiply(yc, n, base);
                                    xc = multiply(xc, n, base);
                                    yL = yc.length;
                                    xL = xc.length;
                                }

                                xi = yL;
                                rem = xc.slice(0, yL);
                                remL = rem.length;

                                // Add zeros to make remainder as long as divisor.
                                for (; remL < yL; rem[remL++] = 0) ;
                                yz = yc.slice();
                                yz = [0].concat(yz);
                                yc0 = yc[0];
                                if (yc[1] >= base / 2) yc0++;
                                // Not necessary, but to prevent trial digit n > base, when using base 3.
                                // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;

                                do {
                                    n = 0;

                                    // Compare divisor and remainder.
                                    cmp = compare(yc, rem, yL, remL);

                                    // If divisor < remainder.
                                    if (cmp < 0) {

                                        // Calculate trial digit, n.

                                        rem0 = rem[0];
                                        if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);

                                        // n is how many times the divisor goes into the current remainder.
                                        n = mathfloor(rem0 / yc0);

                                        //  Algorithm:
                                        //  product = divisor multiplied by trial digit (n).
                                        //  Compare product and remainder.
                                        //  If product is greater than remainder:
                                        //    Subtract divisor from product, decrement trial digit.
                                        //  Subtract product from remainder.
                                        //  If product was less than remainder at the last compare:
                                        //    Compare new remainder and divisor.
                                        //    If remainder is greater than divisor:
                                        //      Subtract divisor from remainder, increment trial digit.

                                        if (n > 1) {

                                            // n may be > base only when base is 3.
                                            if (n >= base) n = base - 1;

                                            // product = divisor * trial digit.
                                            prod = multiply(yc, n, base);
                                            prodL = prod.length;
                                            remL = rem.length;

                                            // Compare product and remainder.
                                            // If product > remainder then trial digit n too high.
                                            // n is 1 too high about 5% of the time, and is not known to have
                                            // ever been more than 1 too high.
                                            while (compare(prod, rem, prodL, remL) == 1) {
                                                n--;

                                                // Subtract divisor from product.
                                                subtract(prod, yL < prodL ? yz : yc, prodL, base);
                                                prodL = prod.length;
                                                cmp = 1;
                                            }
                                        } else {

                                            // n is 0 or 1, cmp is -1.
                                            // If n is 0, there is no need to compare yc and rem again below,
                                            // so change cmp to 1 to avoid it.
                                            // If n is 1, leave cmp as -1, so yc and rem are compared again.
                                            if (n == 0) {

                                                // divisor < remainder, so n must be at least 1.
                                                cmp = n = 1;
                                            }

                                            // product = divisor
                                            prod = yc.slice();
                                            prodL = prod.length;
                                        }

                                        if (prodL < remL) prod = [0].concat(prod);

                                        // Subtract product from remainder.
                                        subtract(rem, prod, remL, base);
                                        remL = rem.length;

                                        // If product was < remainder.
                                        if (cmp == -1) {

                                            // Compare divisor and new remainder.
                                            // If divisor < new remainder, subtract divisor from remainder.
                                            // Trial digit n too low.
                                            // n is 1 too low about 5% of the time, and very rarely 2 too low.
                                            while (compare(yc, rem, yL, remL) < 1) {
                                                n++;

                                                // Subtract divisor from remainder.
                                                subtract(rem, yL < remL ? yz : yc, remL, base);
                                                remL = rem.length;
                                            }
                                        }
                                    } else if (cmp === 0) {
                                        n++;
                                        rem = [0];
                                    } // else cmp === 1 and n will be 0

                                    // Add the next digit, n, to the result array.
                                    qc[i++] = n;

                                    // Update the remainder.
                                    if (rem[0]) {
                                        rem[remL++] = xc[xi] || 0;
                                    } else {
                                        rem = [xc[xi]];
                                        remL = 1;
                                    }
                                } while ((xi++ < xL || rem[0] != null) && s--);

                                more = rem[0] != null;

                                // Leading zero?
                                if (!qc[0]) qc.splice(0, 1);
                            }

                            if (base == BASE) {

                                // To calculate q.e, first get the number of digits of qc[0].
                                for (i = 1, s = qc[0]; s >= 10; s /= 10, i++) ;

                                round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);

                                // Caller is convertBase.
                            } else {
                                q.e = e;
                                q.r = +more;
                            }

                            return q;
                        };
                    })();


                    /*
     * Return a string representing the value of BigNumber n in fixed-point or exponential
     * notation rounded to the specified decimal places or significant digits.
     *
     * n: a BigNumber.
     * i: the index of the last digit required (i.e. the digit that may be rounded up).
     * rm: the rounding mode.
     * id: 1 (toExponential) or 2 (toPrecision).
     */
                    function format(n, i, rm, id) {
                        var c0, e, ne, len, str;

                        if (rm == null) rm = ROUNDING_MODE;
                        else intCheck(rm, 0, 8);

                        if (!n.c) return n.toString();

                        c0 = n.c[0];
                        ne = n.e;

                        if (i == null) {
                            str = coeffToString(n.c);
                            str = id == 1 || id == 2 && ne <= TO_EXP_NEG
                                ? toExponential(str, ne)
                                : toFixedPoint(str, ne, '0');
                        } else {
                            n = round(new BigNumber(n), i, rm);

                            // n.e may have changed if the value was rounded up.
                            e = n.e;

                            str = coeffToString(n.c);
                            len = str.length;

                            // toPrecision returns exponential notation if the number of significant digits
                            // specified is less than the number of digits necessary to represent the integer
                            // part of the value in fixed-point notation.

                            // Exponential notation.
                            if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {

                                // Append zeros?
                                for (; len < i; str += '0', len++) ;
                                str = toExponential(str, e);

                                // Fixed-point notation.
                            } else {
                                i -= ne;
                                str = toFixedPoint(str, e, '0');

                                // Append zeros?
                                if (e + 1 > len) {
                                    if (--i > 0) for (str += '.'; i--; str += '0') ;
                                } else {
                                    i += e - len;
                                    if (i > 0) {
                                        if (e + 1 == len) str += '.';
                                        for (; i--; str += '0') ;
                                    }
                                }
                            }
                        }

                        return n.s < 0 && c0 ? '-' + str : str;
                    }


                    // Handle BigNumber.max and BigNumber.min.
                    function maxOrMin(args, method) {
                        var m, n,
                            i = 0;

                        if (isArray(args[0])) args = args[0];
                        m = new BigNumber(args[0]);

                        for (; ++i < args.length;) {
                            n = new BigNumber(args[i]);

                            // If any number is NaN, return NaN.
                            if (!n.s) {
                                m = n;
                                break;
                            } else if (method.call(m, n)) {
                                m = n;
                            }
                        }

                        return m;
                    }


                    /*
     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.
     * Called by minus, plus and times.
     */
                    function normalise(n, c, e) {
                        var i = 1,
                            j = c.length;

                        // Remove trailing zeros.
                        for (; !c[--j]; c.pop()) ;

                        // Calculate the base 10 exponent. First get the number of digits of c[0].
                        for (j = c[0]; j >= 10; j /= 10, i++) ;

                        // Overflow?
                        if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {

                            // Infinity.
                            n.c = n.e = null;

                            // Underflow?
                        } else if (e < MIN_EXP) {

                            // Zero.
                            n.c = [n.e = 0];
                        } else {
                            n.e = e;
                            n.c = c;
                        }

                        return n;
                    }


                    // Handle values that fail the validity test in BigNumber.
                    parseNumeric = (function () {
                        var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i,
                            dotAfter = /^([^.]+)\.$/,
                            dotBefore = /^\.([^.]+)$/,
                            isInfinityOrNaN = /^-?(Infinity|NaN)$/,
                            whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;

                        return function (x, str, isNum, b) {
                            var base,
                                s = isNum ? str : str.replace(whitespaceOrPlus, '');

                            // No exception on ±Infinity or NaN.
                            if (isInfinityOrNaN.test(s)) {
                                x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
                                x.c = x.e = null;
                            } else {
                                if (!isNum) {

                                    // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i
                                    s = s.replace(basePrefix, function (m, p1, p2) {
                                        base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;
                                        return !b || b == base ? p1 : m;
                                    });

                                    if (b) {
                                        base = b;

                                        // E.g. '1.' to '1', '.1' to '0.1'
                                        s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');
                                    }

                                    if (str != s) return new BigNumber(s, base);
                                }

                                // '[BigNumber Error] Not a number: {n}'
                                // '[BigNumber Error] Not a base {b} number: {n}'
                                if (BigNumber.DEBUG) {
                                    throw Error
                                    (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);
                                }

                                // NaN
                                x.c = x.e = x.s = null;
                            }
                        }
                    })();


                    /*
     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.
     * If r is truthy, it is known that there are more digits after the rounding digit.
     */
                    function round(x, sd, rm, r) {
                        var d, i, j, k, n, ni, rd,
                            xc = x.c,
                            pows10 = POWS_TEN;

                        // if x is not Infinity or NaN...
                        if (xc) {

                            // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.
                            // n is a base 1e14 number, the value of the element of array x.c containing rd.
                            // ni is the index of n within x.c.
                            // d is the number of digits of n.
                            // i is the index of rd within n including leading zeros.
                            // j is the actual index of rd within n (if < 0, rd is a leading zero).
                            out: {

                                // Get the number of digits of the first element of xc.
                                for (d = 1, k = xc[0]; k >= 10; k /= 10, d++) ;
                                i = sd - d;

                                // If the rounding digit is in the first element of xc...
                                if (i < 0) {
                                    i += LOG_BASE;
                                    j = sd;
                                    n = xc[ni = 0];

                                    // Get the rounding digit at index j of n.
                                    rd = n / pows10[d - j - 1] % 10 | 0;
                                } else {
                                    ni = mathceil((i + 1) / LOG_BASE);

                                    if (ni >= xc.length) {

                                        if (r) {

                                            // Needed by sqrt.
                                            for (; xc.length <= ni; xc.push(0)) ;
                                            n = rd = 0;
                                            d = 1;
                                            i %= LOG_BASE;
                                            j = i - LOG_BASE + 1;
                                        } else {
                                            break out;
                                        }
                                    } else {
                                        n = k = xc[ni];

                                        // Get the number of digits of n.
                                        for (d = 1; k >= 10; k /= 10, d++) ;

                                        // Get the index of rd within n.
                                        i %= LOG_BASE;

                                        // Get the index of rd within n, adjusted for leading zeros.
                                        // The number of leading zeros of n is given by LOG_BASE - d.
                                        j = i - LOG_BASE + d;

                                        // Get the rounding digit at index j of n.
                                        rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;
                                    }
                                }

                                r = r || sd < 0 ||

                                    // Are there any non-zero digits after the rounding digit?
                                    // The expression  n % pows10[d - j - 1]  returns all digits of n to the right
                                    // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
                                    xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);

                                r = rm < 4
                                    ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
                                    : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&

                                    // Check whether the digit to the left of the rounding digit is odd.
                                    ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||
                                    rm == (x.s < 0 ? 8 : 7));

                                if (sd < 1 || !xc[0]) {
                                    xc.length = 0;

                                    if (r) {

                                        // Convert sd to decimal places.
                                        sd -= x.e + 1;

                                        // 1, 0.1, 0.01, 0.001, 0.0001 etc.
                                        xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
                                        x.e = -sd || 0;
                                    } else {

                                        // Zero.
                                        xc[0] = x.e = 0;
                                    }

                                    return x;
                                }

                                // Remove excess digits.
                                if (i == 0) {
                                    xc.length = ni;
                                    k = 1;
                                    ni--;
                                } else {
                                    xc.length = ni + 1;
                                    k = pows10[LOG_BASE - i];

                                    // E.g. 56700 becomes 56000 if 7 is the rounding digit.
                                    // j > 0 means i > number of leading zeros of n.
                                    xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
                                }

                                // Round up?
                                if (r) {

                                    for (; ;) {

                                        // If the digit to be rounded up is in the first element of xc...
                                        if (ni == 0) {

                                            // i will be the length of xc[0] before k is added.
                                            for (i = 1, j = xc[0]; j >= 10; j /= 10, i++) ;
                                            j = xc[0] += k;
                                            for (k = 1; j >= 10; j /= 10, k++) ;

                                            // if i != k the length has increased.
                                            if (i != k) {
                                                x.e++;
                                                if (xc[0] == BASE) xc[0] = 1;
                                            }

                                            break;
                                        } else {
                                            xc[ni] += k;
                                            if (xc[ni] != BASE) break;
                                            xc[ni--] = 0;
                                            k = 1;
                                        }
                                    }
                                }

                                // Remove trailing zeros.
                                for (i = xc.length; xc[--i] === 0; xc.pop()) ;
                            }

                            // Overflow? Infinity.
                            if (x.e > MAX_EXP) {
                                x.c = x.e = null;

                                // Underflow? Zero.
                            } else if (x.e < MIN_EXP) {
                                x.c = [x.e = 0];
                            }
                        }

                        return x;
                    }


                    // PROTOTYPE/INSTANCE METHODS


                    /*
     * Return a new BigNumber whose value is the absolute value of this BigNumber.
     */
                    P.absoluteValue = P.abs = function () {
                        var x = new BigNumber(this);
                        if (x.s < 0) x.s = 1;
                        return x;
                    };


                    /*
     * Return
     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),
     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),
     *   0 if they have the same value,
     *   or null if the value of either is NaN.
     */
                    P.comparedTo = function (y, b) {
                        return compare(this, new BigNumber(y, b));
                    };


                    /*
     * If dp is undefined or null or true or false, return the number of decimal places of the
     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
     *
     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this
     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or
     * ROUNDING_MODE if rm is omitted.
     *
     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     */
                    P.decimalPlaces = P.dp = function (dp, rm) {
                        var c, n, v,
                            x = this;

                        if (dp != null) {
                            intCheck(dp, 0, MAX);
                            if (rm == null) rm = ROUNDING_MODE;
                            else intCheck(rm, 0, 8);

                            return round(new BigNumber(x), dp + x.e + 1, rm);
                        }

                        if (!(c = x.c)) return null;
                        n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;

                        // Subtract the number of trailing zeros of the last number.
                        if (v = c[v]) for (; v % 10 == 0; v /= 10, n--) ;
                        if (n < 0) n = 0;

                        return n;
                    };


                    /*
     *  n / 0 = I
     *  n / N = N
     *  n / I = 0
     *  0 / n = 0
     *  0 / 0 = N
     *  0 / N = N
     *  0 / I = 0
     *  N / n = N
     *  N / 0 = N
     *  N / N = N
     *  N / I = N
     *  I / n = I
     *  I / 0 = I
     *  I / N = N
     *  I / I = N
     *
     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of
     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.
     */
                    P.dividedBy = P.div = function (y, b) {
                        return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);
                    };


                    /*
     * Return a new BigNumber whose value is the integer part of dividing the value of this
     * BigNumber by the value of BigNumber(y, b).
     */
                    P.dividedToIntegerBy = P.idiv = function (y, b) {
                        return div(this, new BigNumber(y, b), 0, 1);
                    };


                    /*
     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.
     *
     * If m is present, return the result modulo m.
     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.
     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.
     *
     * The modular power operation works efficiently when x, n, and m are integers, otherwise it
     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.
     *
     * n {number|string|BigNumber} The exponent. An integer.
     * [m] {number|string|BigNumber} The modulus.
     *
     * '[BigNumber Error] Exponent not an integer: {n}'
     */
                    P.exponentiatedBy = P.pow = function (n, m) {
                        var half, isModExp, k, more, nIsBig, nIsNeg, nIsOdd, y,
                            x = this;

                        n = new BigNumber(n);

                        // Allow NaN and ±Infinity, but not other non-integers.
                        if (n.c && !n.isInteger()) {
                            throw Error
                            (bignumberError + 'Exponent not an integer: ' + n);
                        }

                        if (m != null) m = new BigNumber(m);

                        // Exponent of MAX_SAFE_INTEGER is 15.
                        nIsBig = n.e > 14;

                        // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.
                        if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {

                            // The sign of the result of pow when x is negative depends on the evenness of n.
                            // If +n overflows to ±Infinity, the evenness of n would be not be known.
                            y = new BigNumber(Math.pow(+x.valueOf(), nIsBig ? 2 - isOdd(n) : +n));
                            return m ? y.mod(m) : y;
                        }

                        nIsNeg = n.s < 0;

                        if (m) {

                            // x % m returns NaN if abs(m) is zero, or m is NaN.
                            if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);

                            isModExp = !nIsNeg && x.isInteger() && m.isInteger();

                            if (isModExp) x = x.mod(m);

                            // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.
                            // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.
                        } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0
                            // [1, 240000000]
                            ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7
                            // [80000000000000]  [99999750000000]
                            : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {

                            // If x is negative and n is odd, k = -0, else k = 0.
                            k = x.s < 0 && isOdd(n) ? -0 : 0;

                            // If x >= 1, k = ±Infinity.
                            if (x.e > -1) k = 1 / k;

                            // If n is negative return ±0, else return ±Infinity.
                            return new BigNumber(nIsNeg ? 1 / k : k);

                        } else if (POW_PRECISION) {

                            // Truncating each coefficient array to a length of k after each multiplication
                            // equates to truncating significant digits to POW_PRECISION + [28, 41],
                            // i.e. there will be a minimum of 28 guard digits retained.
                            k = mathceil(POW_PRECISION / LOG_BASE + 2);
                        }

                        if (nIsBig) {
                            half = new BigNumber(0.5);
                            nIsOdd = isOdd(n);
                        } else {
                            nIsOdd = n % 2;
                        }

                        if (nIsNeg) n.s = 1;

                        y = new BigNumber(ONE);

                        // Performs 54 loop iterations for n of 9007199254740991.
                        for (; ;) {

                            if (nIsOdd) {
                                y = y.times(x);
                                if (!y.c) break;

                                if (k) {
                                    if (y.c.length > k) y.c.length = k;
                                } else if (isModExp) {
                                    y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));
                                }
                            }

                            if (nIsBig) {
                                n = n.times(half);
                                round(n, n.e + 1, 1);
                                if (!n.c[0]) break;
                                nIsBig = n.e > 14;
                                nIsOdd = isOdd(n);
                            } else {
                                n = mathfloor(n / 2);
                                if (!n) break;
                                nIsOdd = n % 2;
                            }

                            x = x.times(x);

                            if (k) {
                                if (x.c && x.c.length > k) x.c.length = k;
                            } else if (isModExp) {
                                x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));
                            }
                        }

                        if (isModExp) return y;
                        if (nIsNeg) y = ONE.div(y);

                        return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;
                    };


                    /*
     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer
     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.
     *
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'
     */
                    P.integerValue = function (rm) {
                        var n = new BigNumber(this);
                        if (rm == null) rm = ROUNDING_MODE;
                        else intCheck(rm, 0, 8);
                        return round(n, n.e + 1, rm);
                    };


                    /*
     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),
     * otherwise return false.
     */
                    P.isEqualTo = P.eq = function (y, b) {
                        return compare(this, new BigNumber(y, b)) === 0;
                    };


                    /*
     * Return true if the value of this BigNumber is a finite number, otherwise return false.
     */
                    P.isFinite = function () {
                        return !!this.c;
                    };


                    /*
     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),
     * otherwise return false.
     */
                    P.isGreaterThan = P.gt = function (y, b) {
                        return compare(this, new BigNumber(y, b)) > 0;
                    };


                    /*
     * Return true if the value of this BigNumber is greater than or equal to the value of
     * BigNumber(y, b), otherwise return false.
     */
                    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {
                        return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;

                    };


                    /*
     * Return true if the value of this BigNumber is an integer, otherwise return false.
     */
                    P.isInteger = function () {
                        return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
                    };


                    /*
     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),
     * otherwise return false.
     */
                    P.isLessThan = P.lt = function (y, b) {
                        return compare(this, new BigNumber(y, b)) < 0;
                    };


                    /*
     * Return true if the value of this BigNumber is less than or equal to the value of
     * BigNumber(y, b), otherwise return false.
     */
                    P.isLessThanOrEqualTo = P.lte = function (y, b) {
                        return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;
                    };


                    /*
     * Return true if the value of this BigNumber is NaN, otherwise return false.
     */
                    P.isNaN = function () {
                        return !this.s;
                    };


                    /*
     * Return true if the value of this BigNumber is negative, otherwise return false.
     */
                    P.isNegative = function () {
                        return this.s < 0;
                    };


                    /*
     * Return true if the value of this BigNumber is positive, otherwise return false.
     */
                    P.isPositive = function () {
                        return this.s > 0;
                    };


                    /*
     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.
     */
                    P.isZero = function () {
                        return !!this.c && this.c[0] == 0;
                    };


                    /*
     *  n - 0 = n
     *  n - N = N
     *  n - I = -I
     *  0 - n = -n
     *  0 - 0 = 0
     *  0 - N = N
     *  0 - I = -I
     *  N - n = N
     *  N - 0 = N
     *  N - N = N
     *  N - I = N
     *  I - n = I
     *  I - 0 = I
     *  I - N = N
     *  I - I = N
     *
     * Return a new BigNumber whose value is the value of this BigNumber minus the value of
     * BigNumber(y, b).
     */
                    P.minus = function (y, b) {
                        var i, j, t, xLTy,
                            x = this,
                            a = x.s;

                        y = new BigNumber(y, b);
                        b = y.s;

                        // Either NaN?
                        if (!a || !b) return new BigNumber(NaN);

                        // Signs differ?
                        if (a != b) {
                            y.s = -b;
                            return x.plus(y);
                        }

                        var xe = x.e / LOG_BASE,
                            ye = y.e / LOG_BASE,
                            xc = x.c,
                            yc = y.c;

                        if (!xe || !ye) {

                            // Either Infinity?
                            if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);

                            // Either zero?
                            if (!xc[0] || !yc[0]) {

                                // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
                                return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :

                                    // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
                                    ROUNDING_MODE == 3 ? -0 : 0);
                            }
                        }

                        xe = bitFloor(xe);
                        ye = bitFloor(ye);
                        xc = xc.slice();

                        // Determine which is the bigger number.
                        if (a = xe - ye) {

                            if (xLTy = a < 0) {
                                a = -a;
                                t = xc;
                            } else {
                                ye = xe;
                                t = yc;
                            }

                            t.reverse();

                            // Prepend zeros to equalise exponents.
                            for (b = a; b--; t.push(0)) ;
                            t.reverse();
                        } else {

                            // Exponents equal. Check digit by digit.
                            j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;

                            for (a = b = 0; b < j; b++) {

                                if (xc[b] != yc[b]) {
                                    xLTy = xc[b] < yc[b];
                                    break;
                                }
                            }
                        }

                        // x < y? Point xc to the array of the bigger number.
                        if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;

                        b = (j = yc.length) - (i = xc.length);

                        // Append zeros to xc if shorter.
                        // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.
                        if (b > 0) for (; b--; xc[i++] = 0) ;
                        b = BASE - 1;

                        // Subtract yc from xc.
                        for (; j > a;) {

                            if (xc[--j] < yc[j]) {
                                for (i = j; i && !xc[--i]; xc[i] = b) ;
                                --xc[i];
                                xc[j] += BASE;
                            }

                            xc[j] -= yc[j];
                        }

                        // Remove leading zeros and adjust exponent accordingly.
                        for (; xc[0] == 0; xc.splice(0, 1), --ye) ;

                        // Zero?
                        if (!xc[0]) {

                            // Following IEEE 754 (2008) 6.3,
                            // n - n = +0  but  n - n = -0  when rounding towards -Infinity.
                            y.s = ROUNDING_MODE == 3 ? -1 : 1;
                            y.c = [y.e = 0];
                            return y;
                        }

                        // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity
                        // for finite x and y.
                        return normalise(y, xc, ye);
                    };


                    /*
     *   n % 0 =  N
     *   n % N =  N
     *   n % I =  n
     *   0 % n =  0
     *  -0 % n = -0
     *   0 % 0 =  N
     *   0 % N =  N
     *   0 % I =  0
     *   N % n =  N
     *   N % 0 =  N
     *   N % N =  N
     *   N % I =  N
     *   I % n =  N
     *   I % 0 =  N
     *   I % N =  N
     *   I % I =  N
     *
     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of
     * BigNumber(y, b). The result depends on the value of MODULO_MODE.
     */
                    P.modulo = P.mod = function (y, b) {
                        var q, s,
                            x = this;

                        y = new BigNumber(y, b);

                        // Return NaN if x is Infinity or NaN, or y is NaN or zero.
                        if (!x.c || !y.s || y.c && !y.c[0]) {
                            return new BigNumber(NaN);

                            // Return x if y is Infinity or x is zero.
                        } else if (!y.c || x.c && !x.c[0]) {
                            return new BigNumber(x);
                        }

                        if (MODULO_MODE == 9) {

                            // Euclidian division: q = sign(y) * floor(x / abs(y))
                            // r = x - qy    where  0 <= r < abs(y)
                            s = y.s;
                            y.s = 1;
                            q = div(x, y, 0, 3);
                            y.s = s;
                            q.s *= s;
                        } else {
                            q = div(x, y, 0, MODULO_MODE);
                        }

                        y = x.minus(q.times(y));

                        // To match JavaScript %, ensure sign of zero is sign of dividend.
                        if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;

                        return y;
                    };


                    /*
     *  n * 0 = 0
     *  n * N = N
     *  n * I = I
     *  0 * n = 0
     *  0 * 0 = 0
     *  0 * N = N
     *  0 * I = N
     *  N * n = N
     *  N * 0 = N
     *  N * N = N
     *  N * I = N
     *  I * n = I
     *  I * 0 = N
     *  I * N = N
     *  I * I = I
     *
     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value
     * of BigNumber(y, b).
     */
                    P.multipliedBy = P.times = function (y, b) {
                        var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,
                            base, sqrtBase,
                            x = this,
                            xc = x.c,
                            yc = (y = new BigNumber(y, b)).c;

                        // Either NaN, ±Infinity or ±0?
                        if (!xc || !yc || !xc[0] || !yc[0]) {

                            // Return NaN if either is NaN, or one is 0 and the other is Infinity.
                            if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
                                y.c = y.e = y.s = null;
                            } else {
                                y.s *= x.s;

                                // Return ±Infinity if either is ±Infinity.
                                if (!xc || !yc) {
                                    y.c = y.e = null;

                                    // Return ±0 if either is ±0.
                                } else {
                                    y.c = [0];
                                    y.e = 0;
                                }
                            }

                            return y;
                        }

                        e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
                        y.s *= x.s;
                        xcL = xc.length;
                        ycL = yc.length;

                        // Ensure xc points to longer array and xcL to its length.
                        if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;

                        // Initialise the result array with zeros.
                        for (i = xcL + ycL, zc = []; i--; zc.push(0)) ;

                        base = BASE;
                        sqrtBase = SQRT_BASE;

                        for (i = ycL; --i >= 0;) {
                            c = 0;
                            ylo = yc[i] % sqrtBase;
                            yhi = yc[i] / sqrtBase | 0;

                            for (k = xcL, j = i + k; j > i;) {
                                xlo = xc[--k] % sqrtBase;
                                xhi = xc[k] / sqrtBase | 0;
                                m = yhi * xlo + xhi * ylo;
                                xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;
                                c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;
                                zc[j--] = xlo % base;
                            }

                            zc[j] = c;
                        }

                        if (c) {
                            ++e;
                        } else {
                            zc.splice(0, 1);
                        }

                        return normalise(y, zc, e);
                    };


                    /*
     * Return a new BigNumber whose value is the value of this BigNumber negated,
     * i.e. multiplied by -1.
     */
                    P.negated = function () {
                        var x = new BigNumber(this);
                        x.s = -x.s || null;
                        return x;
                    };


                    /*
     *  n + 0 = n
     *  n + N = N
     *  n + I = I
     *  0 + n = n
     *  0 + 0 = 0
     *  0 + N = N
     *  0 + I = I
     *  N + n = N
     *  N + 0 = N
     *  N + N = N
     *  N + I = N
     *  I + n = I
     *  I + 0 = I
     *  I + N = N
     *  I + I = I
     *
     * Return a new BigNumber whose value is the value of this BigNumber plus the value of
     * BigNumber(y, b).
     */
                    P.plus = function (y, b) {
                        var t,
                            x = this,
                            a = x.s;

                        y = new BigNumber(y, b);
                        b = y.s;

                        // Either NaN?
                        if (!a || !b) return new BigNumber(NaN);

                        // Signs differ?
                        if (a != b) {
                            y.s = -b;
                            return x.minus(y);
                        }

                        var xe = x.e / LOG_BASE,
                            ye = y.e / LOG_BASE,
                            xc = x.c,
                            yc = y.c;

                        if (!xe || !ye) {

                            // Return ±Infinity if either ±Infinity.
                            if (!xc || !yc) return new BigNumber(a / 0);

                            // Either zero?
                            // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
                            if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);
                        }

                        xe = bitFloor(xe);
                        ye = bitFloor(ye);
                        xc = xc.slice();

                        // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.
                        if (a = xe - ye) {
                            if (a > 0) {
                                ye = xe;
                                t = yc;
                            } else {
                                a = -a;
                                t = xc;
                            }

                            t.reverse();
                            for (; a--; t.push(0)) ;
                            t.reverse();
                        }

                        a = xc.length;
                        b = yc.length;

                        // Point xc to the longer array, and b to the shorter length.
                        if (a - b < 0) t = yc, yc = xc, xc = t, b = a;

                        // Only start adding at yc.length - 1 as the further digits of xc can be ignored.
                        for (a = 0; b;) {
                            a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
                            xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;
                        }

                        if (a) {
                            xc = [a].concat(xc);
                            ++ye;
                        }

                        // No need to check for zero, as +x + +y != 0 && -x + -y != 0
                        // ye = MAX_EXP + 1 possible
                        return normalise(y, xc, ye);
                    };


                    /*
     * If sd is undefined or null or true or false, return the number of significant digits of
     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
     * If sd is true include integer-part trailing zeros in the count.
     *
     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this
     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or
     * ROUNDING_MODE if rm is omitted.
     *
     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.
     *                     boolean: whether to count integer-part trailing zeros: true or false.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
     */
                    P.precision = P.sd = function (sd, rm) {
                        var c, n, v,
                            x = this;

                        if (sd != null && sd !== !!sd) {
                            intCheck(sd, 1, MAX);
                            if (rm == null) rm = ROUNDING_MODE;
                            else intCheck(rm, 0, 8);

                            return round(new BigNumber(x), sd, rm);
                        }

                        if (!(c = x.c)) return null;
                        v = c.length - 1;
                        n = v * LOG_BASE + 1;

                        if (v = c[v]) {

                            // Subtract the number of trailing zeros of the last element.
                            for (; v % 10 == 0; v /= 10, n--) ;

                            // Add the number of digits of the first element.
                            for (v = c[0]; v >= 10; v /= 10, n++) ;
                        }

                        if (sd && x.e + 1 > n) n = x.e + 1;

                        return n;
                    };


                    /*
     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places
     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.
     *
     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'
     */
                    P.shiftedBy = function (k) {
                        intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
                        return this.times('1e' + k);
                    };


                    /*
     *  sqrt(-n) =  N
     *  sqrt(N) =  N
     *  sqrt(-I) =  N
     *  sqrt(I) =  I
     *  sqrt(0) =  0
     *  sqrt(-0) = -0
     *
     * Return a new BigNumber whose value is the square root of the value of this BigNumber,
     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.
     */
                    P.squareRoot = P.sqrt = function () {
                        var m, n, r, rep, t,
                            x = this,
                            c = x.c,
                            s = x.s,
                            e = x.e,
                            dp = DECIMAL_PLACES + 4,
                            half = new BigNumber('0.5');

                        // Negative/NaN/Infinity/zero?
                        if (s !== 1 || !c || !c[0]) {
                            return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
                        }

                        // Initial estimate.
                        s = Math.sqrt(+x);

                        // Math.sqrt underflow/overflow?
                        // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
                        if (s == 0 || s == 1 / 0) {
                            n = coeffToString(c);
                            if ((n.length + e) % 2 == 0) n += '0';
                            s = Math.sqrt(n);
                            e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);

                            if (s == 1 / 0) {
                                n = '1e' + e;
                            } else {
                                n = s.toExponential();
                                n = n.slice(0, n.indexOf('e') + 1) + e;
                            }

                            r = new BigNumber(n);
                        } else {
                            r = new BigNumber(s + '');
                        }

                        // Check for zero.
                        // r could be zero if MIN_EXP is changed after the this value was created.
                        // This would cause a division by zero (x/t) and hence Infinity below, which would cause
                        // coeffToString to throw.
                        if (r.c[0]) {
                            e = r.e;
                            s = e + dp;
                            if (s < 3) s = 0;

                            // Newton-Raphson iteration.
                            for (; ;) {
                                t = r;
                                r = half.times(t.plus(div(x, t, dp, 1)));

                                if (coeffToString(t.c).slice(0, s) === (n =
                                    coeffToString(r.c)).slice(0, s)) {

                                    // The exponent of r may here be one less than the final result exponent,
                                    // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits
                                    // are indexed correctly.
                                    if (r.e < e) --s;
                                    n = n.slice(s - 3, s + 1);

                                    // The 4th rounding digit may be in error by -1 so if the 4 rounding digits
                                    // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the
                                    // iteration.
                                    if (n == '9999' || !rep && n == '4999') {

                                        // On the first iteration only, check to see if rounding up gives the
                                        // exact result as the nines may infinitely repeat.
                                        if (!rep) {
                                            round(t, t.e + DECIMAL_PLACES + 2, 0);

                                            if (t.times(t).eq(x)) {
                                                r = t;
                                                break;
                                            }
                                        }

                                        dp += 4;
                                        s += 4;
                                        rep = 1;
                                    } else {

                                        // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact
                                        // result. If not, then there are further digits and m will be truthy.
                                        if (!+n || !+n.slice(1) && n.charAt(0) == '5') {

                                            // Truncate to the first rounding digit.
                                            round(r, r.e + DECIMAL_PLACES + 2, 1);
                                            m = !r.times(r).eq(x);
                                        }

                                        break;
                                    }
                                }
                            }
                        }

                        return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
                    };


                    /*
     * Return a string representing the value of this BigNumber in exponential notation and
     * rounded using ROUNDING_MODE to dp fixed decimal places.
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     */
                    P.toExponential = function (dp, rm) {
                        if (dp != null) {
                            intCheck(dp, 0, MAX);
                            dp++;
                        }
                        return format(this, dp, rm, 1);
                    };


                    /*
     * Return a string representing the value of this BigNumber in fixed-point notation rounding
     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.
     *
     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',
     * but e.g. (-0.00001).toFixed(0) is '-0'.
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     */
                    P.toFixed = function (dp, rm) {
                        if (dp != null) {
                            intCheck(dp, 0, MAX);
                            dp = dp + this.e + 1;
                        }
                        return format(this, dp, rm);
                    };


                    /*
     * Return a string representing the value of this BigNumber in fixed-point notation rounded
     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties
     * of the FORMAT object (see BigNumber.set).
     *
     * FORMAT = {
     *      decimalSeparator : '.',
     *      groupSeparator : ',',
     *      groupSize : 3,
     *      secondaryGroupSize : 0,
     *      fractionGroupSeparator : '\xA0',    // non-breaking space
     *      fractionGroupSize : 0
     * };
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     */
                    P.toFormat = function (dp, rm) {
                        var str = this.toFixed(dp, rm);

                        if (this.c) {
                            var i,
                                arr = str.split('.'),
                                g1 = +FORMAT.groupSize,
                                g2 = +FORMAT.secondaryGroupSize,
                                groupSeparator = FORMAT.groupSeparator,
                                intPart = arr[0],
                                fractionPart = arr[1],
                                isNeg = this.s < 0,
                                intDigits = isNeg ? intPart.slice(1) : intPart,
                                len = intDigits.length;

                            if (g2) i = g1, g1 = g2, g2 = i, len -= i;

                            if (g1 > 0 && len > 0) {
                                i = len % g1 || g1;
                                intPart = intDigits.substr(0, i);

                                for (; i < len; i += g1) {
                                    intPart += groupSeparator + intDigits.substr(i, g1);
                                }

                                if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);
                                if (isNeg) intPart = '-' + intPart;
                            }

                            str = fractionPart
                                ? intPart + FORMAT.decimalSeparator + ((g2 = +FORMAT.fractionGroupSize)
                                ? fractionPart.replace(new RegExp('\\d{' + g2 + '}\\B', 'g'),
                                    '$&' + FORMAT.fractionGroupSeparator)
                                : fractionPart)
                                : intPart;
                        }

                        return str;
                    };


                    /*
     * Return a string array representing the value of this BigNumber as a simple fraction with
     * an integer numerator and an integer denominator. The denominator will be a positive
     * non-zero value less than or equal to the specified maximum denominator. If a maximum
     * denominator is not specified, the denominator will be the lowest value necessary to
     * represent the number exactly.
     *
     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.
     *
     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'
     */
                    P.toFraction = function (md) {
                        var arr, d, d0, d1, d2, e, exp, n, n0, n1, q, s,
                            x = this,
                            xc = x.c;

                        if (md != null) {
                            n = new BigNumber(md);

                            // Throw if md is less than one or is not an integer, unless it is Infinity.
                            if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {
                                throw Error
                                (bignumberError + 'Argument ' +
                                    (n.isInteger() ? 'out of range: ' : 'not an integer: ') + md);
                            }
                        }

                        if (!xc) return x.toString();

                        d = new BigNumber(ONE);
                        n1 = d0 = new BigNumber(ONE);
                        d1 = n0 = new BigNumber(ONE);
                        s = coeffToString(xc);

                        // Determine initial denominator.
                        // d is a power of 10 and the minimum max denominator that specifies the value exactly.
                        e = d.e = s.length - x.e - 1;
                        d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
                        md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;

                        exp = MAX_EXP;
                        MAX_EXP = 1 / 0;
                        n = new BigNumber(s);

                        // n0 = d1 = 0
                        n0.c[0] = 0;

                        for (; ;) {
                            q = div(n, d, 0, 1);
                            d2 = d0.plus(q.times(d1));
                            if (d2.comparedTo(md) == 1) break;
                            d0 = d1;
                            d1 = d2;
                            n1 = n0.plus(q.times(d2 = n1));
                            n0 = d2;
                            d = n.minus(q.times(d2 = d));
                            n = d2;
                        }

                        d2 = div(md.minus(d0), d1, 0, 1);
                        n0 = n0.plus(d2.times(n1));
                        d0 = d0.plus(d2.times(d1));
                        n0.s = n1.s = x.s;
                        e *= 2;

                        // Determine which fraction is closer to x, n0/d0 or n1/d1
                        arr = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(
                            div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1
                            ? [n1.toString(), d1.toString()]
                            : [n0.toString(), d0.toString()];

                        MAX_EXP = exp;
                        return arr;
                    };


                    /*
     * Return the value of this BigNumber converted to a number primitive.
     */
                    P.toNumber = function () {
                        return +this;
                    };


                    /*
     * Return a string representing the value of this BigNumber rounded to sd significant digits
     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits
     * necessary to represent the integer part of the value in fixed-point notation, then use
     * exponential notation.
     *
     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
     */
                    P.toPrecision = function (sd, rm) {
                        if (sd != null) intCheck(sd, 1, MAX);
                        return format(this, sd, rm, 2);
                    };


                    /*
     * Return a string representing the value of this BigNumber in base b, or base 10 if b is
     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and
     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent
     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than
     * TO_EXP_NEG, return exponential notation.
     *
     * [b] {number} Integer, 2 to ALPHABET.length inclusive.
     *
     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
     */
                    P.toString = function (b) {
                        var str,
                            n = this,
                            s = n.s,
                            e = n.e;

                        // Infinity or NaN?
                        if (e === null) {

                            if (s) {
                                str = 'Infinity';
                                if (s < 0) str = '-' + str;
                            } else {
                                str = 'NaN';
                            }
                        } else {
                            str = coeffToString(n.c);

                            if (b == null) {
                                str = e <= TO_EXP_NEG || e >= TO_EXP_POS
                                    ? toExponential(str, e)
                                    : toFixedPoint(str, e, '0');
                            } else {
                                intCheck(b, 2, ALPHABET.length, 'Base');
                                str = convertBase(toFixedPoint(str, e, '0'), 10, b, s, true);
                            }

                            if (s < 0 && n.c[0]) str = '-' + str;
                        }

                        return str;
                    };


                    /*
     * Return as toString, but do not accept a base argument, and include the minus sign for
     * negative zero.
     */
                    P.valueOf = P.toJSON = function () {
                        var str,
                            n = this,
                            e = n.e;

                        if (e === null) return n.toString();

                        str = coeffToString(n.c);

                        str = e <= TO_EXP_NEG || e >= TO_EXP_POS
                            ? toExponential(str, e)
                            : toFixedPoint(str, e, '0');

                        return n.s < 0 ? '-' + str : str;
                    };


                    P._isBigNumber = true;

                    if (configObject != null) BigNumber.set(configObject);

                    return BigNumber;
                }


                // PRIVATE HELPER FUNCTIONS


                function bitFloor(n) {
                    var i = n | 0;
                    return n > 0 || n === i ? i : i - 1;
                }


                // Return a coefficient array as a string of base 10 digits.
                function coeffToString(a) {
                    var s, z,
                        i = 1,
                        j = a.length,
                        r = a[0] + '';

                    for (; i < j;) {
                        s = a[i++] + '';
                        z = LOG_BASE - s.length;
                        for (; z--; s = '0' + s) ;
                        r += s;
                    }

                    // Determine trailing zeros.
                    for (j = r.length; r.charCodeAt(--j) === 48;) ;
                    return r.slice(0, j + 1 || 1);
                }


                // Compare the value of BigNumbers x and y.
                function compare(x, y) {
                    var a, b,
                        xc = x.c,
                        yc = y.c,
                        i = x.s,
                        j = y.s,
                        k = x.e,
                        l = y.e;

                    // Either NaN?
                    if (!i || !j) return null;

                    a = xc && !xc[0];
                    b = yc && !yc[0];

                    // Either zero?
                    if (a || b) return a ? b ? 0 : -j : i;

                    // Signs differ?
                    if (i != j) return i;

                    a = i < 0;
                    b = k == l;

                    // Either Infinity?
                    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;

                    // Compare exponents.
                    if (!b) return k > l ^ a ? 1 : -1;

                    j = (k = xc.length) < (l = yc.length) ? k : l;

                    // Compare digit by digit.
                    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;

                    // Compare lengths.
                    return k == l ? 0 : k > l ^ a ? 1 : -1;
                }


                /*
   * Check that n is a primitive number, an integer, and in range, otherwise throw.
   */
                function intCheck(n, min, max, name) {
                    if (n < min || n > max || n !== (n < 0 ? mathceil(n) : mathfloor(n))) {
                        throw Error
                        (bignumberError + (name || 'Argument') + (typeof n == 'number'
                            ? n < min || n > max ? ' out of range: ' : ' not an integer: '
                            : ' not a primitive number: ') + n);
                    }
                }


                function isArray(obj) {
                    return Object.prototype.toString.call(obj) == '[object Array]';
                }


                // Assumes finite n.
                function isOdd(n) {
                    var k = n.c.length - 1;
                    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;
                }


                function toExponential(str, e) {
                    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +
                        (e < 0 ? 'e' : 'e+') + e;
                }


                function toFixedPoint(str, e, z) {
                    var len, zs;

                    // Negative exponent?
                    if (e < 0) {

                        // Prepend zeros.
                        for (zs = z + '.'; ++e; zs += z) ;
                        str = zs + str;

                        // Positive exponent
                    } else {
                        len = str.length;

                        // Append zeros.
                        if (++e > len) {
                            for (zs = z, e -= len; --e; zs += z) ;
                            str += zs;
                        } else if (e < len) {
                            str = str.slice(0, e) + '.' + str.slice(e);
                        }
                    }

                    return str;
                }


                // EXPORT


                BigNumber = clone();
                BigNumber['default'] = BigNumber.BigNumber = BigNumber;

                // AMD.
                if (typeof define == 'function' && define.amd) {
                    define(function () {
                        return BigNumber;
                    });

                    // Node.js and other environments that support module.exports.
                } else if (typeof module != 'undefined' && module.exports) {
                    module.exports = BigNumber;

                    // Browser.
                } else {
                    if (!globalObject) {
                        globalObject = typeof self != 'undefined' && self ? self : window;
                    }

                    globalObject.BigNumber = BigNumber;
                }
            })(this);

        }, {}],
        4: [function (require, module, exports) {
            module.exports = {
                "_from": "@waves/waves-signature-generator@0.14.0",
                "_id": "@waves/waves-signature-generator@0.14.0",
                "_inBundle": false,
                "_integrity": "sha512-ki21Nfd7t0BVtAHDdK9wN4SgHwQbD4ptWR4XBDKqBuJ4bfwSgdTbxmy4tfhqX8uFsAjhV3Dn8XOLxv57Z8wp/g==",
                "_location": "/@waves/waves-signature-generator",
                "_phantomChildren": {},
                "_requested": {
                    "type": "version",
                    "registry": true,
                    "raw": "@waves/waves-signature-generator@0.14.0",
                    "name": "@waves/waves-signature-generator",
                    "escapedName": "@waves%2fwaves-signature-generator",
                    "scope": "@waves",
                    "rawSpec": "0.14.0",
                    "saveSpec": null,
                    "fetchSpec": "0.14.0"
                },
                "_requiredBy": [
                    "/"
                ],
                "_resolved": "https://registry.npmjs.org/@waves/waves-signature-generator/-/waves-signature-generator-0.14.0.tgz",
                "_shasum": "e176745b16d789d20fd4991c9b81f91dc56d5168",
                "_spec": "@waves/waves-signature-generator@0.14.0",
                "_where": "/home/phil/Waves/waves-api",
                "bundleDependencies": false,
                "dependencies": {
                    "base64-js": "1.3.0",
                    "bignumber.js": "7.2.1",
                    "crypto-js": "3.1.9-1"
                },
                "deprecated": false,
                "devDependencies": {
                    "@types/jest": "^23.1.4",
                    "browserify": "^16.2.2",
                    "jest": "^23.2.0"
                },
                "main": "dist/waves-signature-generator.js",
                "name": "@waves/waves-signature-generator",
                "scripts": {
                    "build": "tsc && node_modules/.bin/browserify dist/index.js -s wavesSignatureGenerator -o dist/waves-signature-generator.js",
                    "prepare": "npm run build",
                    "test": "tsc -p ./test && jest"
                },
                "types": "src/index.ts",
                "version": "0.14.0"
            }

        }, {}],
        5: [function (require, module, exports) {
            var asn1 = exports;

            asn1.bignum = require('bn.js');

            asn1.define = require('./asn1/api').define;
            asn1.base = require('./asn1/base');
            asn1.constants = require('./asn1/constants');
            asn1.decoders = require('./asn1/decoders');
            asn1.encoders = require('./asn1/encoders');

        }, {
            "./asn1/api": 6,
            "./asn1/base": 8,
            "./asn1/constants": 12,
            "./asn1/decoders": 14,
            "./asn1/encoders": 17,
            "bn.js": 20
        }],
        6: [function (require, module, exports) {
            var asn1 = require('../asn1');
            var inherits = require('inherits');

            var api = exports;

            api.define = function define(name, body) {
                return new Entity(name, body);
            };

            function Entity(name, body) {
                this.name = name;
                this.body = body;

                this.decoders = {};
                this.encoders = {};
            };

            Entity.prototype._createNamed = function createNamed(base) {
                var named;
                try {
                    named = require('vm').runInThisContext(
                        '(function ' + this.name + '(entity) {\n' +
                        '  this._initNamed(entity);\n' +
                        '})'
                    );
                } catch (e) {
                    named = function (entity) {
                        this._initNamed(entity);
                    };
                }
                inherits(named, base);
                named.prototype._initNamed = function initnamed(entity) {
                    base.call(this, entity);
                };

                return new named(this);
            };

            Entity.prototype._getDecoder = function _getDecoder(enc) {
                enc = enc || 'der';
                // Lazily create decoder
                if (!this.decoders.hasOwnProperty(enc))
                    this.decoders[enc] = this._createNamed(asn1.decoders[enc]);
                return this.decoders[enc];
            };

            Entity.prototype.decode = function decode(data, enc, options) {
                return this._getDecoder(enc).decode(data, options);
            };

            Entity.prototype._getEncoder = function _getEncoder(enc) {
                enc = enc || 'der';
                // Lazily create encoder
                if (!this.encoders.hasOwnProperty(enc))
                    this.encoders[enc] = this._createNamed(asn1.encoders[enc]);
                return this.encoders[enc];
            };

            Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
                return this._getEncoder(enc).encode(data, reporter);
            };

        }, {"../asn1": 5, "inherits": 143, "vm": 55}],
        7: [function (require, module, exports) {
            var inherits = require('inherits');
            var Reporter = require('../base').Reporter;
            var Buffer = require('buffer').Buffer;

            function DecoderBuffer(base, options) {
                Reporter.call(this, options);
                if (!Buffer.isBuffer(base)) {
                    this.error('Input not Buffer');
                    return;
                }

                this.base = base;
                this.offset = 0;
                this.length = base.length;
            }

            inherits(DecoderBuffer, Reporter);
            exports.DecoderBuffer = DecoderBuffer;

            DecoderBuffer.prototype.save = function save() {
                return {offset: this.offset, reporter: Reporter.prototype.save.call(this)};
            };

            DecoderBuffer.prototype.restore = function restore(save) {
                // Return skipped data
                var res = new DecoderBuffer(this.base);
                res.offset = save.offset;
                res.length = this.offset;

                this.offset = save.offset;
                Reporter.prototype.restore.call(this, save.reporter);

                return res;
            };

            DecoderBuffer.prototype.isEmpty = function isEmpty() {
                return this.offset === this.length;
            };

            DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
                if (this.offset + 1 <= this.length)
                    return this.base.readUInt8(this.offset++, true);
                else
                    return this.error(fail || 'DecoderBuffer overrun');
            }

            DecoderBuffer.prototype.skip = function skip(bytes, fail) {
                if (!(this.offset + bytes <= this.length))
                    return this.error(fail || 'DecoderBuffer overrun');

                var res = new DecoderBuffer(this.base);

                // Share reporter state
                res._reporterState = this._reporterState;

                res.offset = this.offset;
                res.length = this.offset + bytes;
                this.offset += bytes;
                return res;
            }

            DecoderBuffer.prototype.raw = function raw(save) {
                return this.base.slice(save ? save.offset : this.offset, this.length);
            }

            function EncoderBuffer(value, reporter) {
                if (Array.isArray(value)) {
                    this.length = 0;
                    this.value = value.map(function (item) {
                        if (!(item instanceof EncoderBuffer))
                            item = new EncoderBuffer(item, reporter);
                        this.length += item.length;
                        return item;
                    }, this);
                } else if (typeof value === 'number') {
                    if (!(0 <= value && value <= 0xff))
                        return reporter.error('non-byte EncoderBuffer value');
                    this.value = value;
                    this.length = 1;
                } else if (typeof value === 'string') {
                    this.value = value;
                    this.length = Buffer.byteLength(value);
                } else if (Buffer.isBuffer(value)) {
                    this.value = value;
                    this.length = value.length;
                } else {
                    return reporter.error('Unsupported type: ' + typeof value);
                }
            }

            exports.EncoderBuffer = EncoderBuffer;

            EncoderBuffer.prototype.join = function join(out, offset) {
                if (!out)
                    out = new Buffer(this.length);
                if (!offset)
                    offset = 0;

                if (this.length === 0)
                    return out;

                if (Array.isArray(this.value)) {
                    this.value.forEach(function (item) {
                        item.join(out, offset);
                        offset += item.length;
                    });
                } else {
                    if (typeof this.value === 'number')
                        out[offset] = this.value;
                    else if (typeof this.value === 'string')
                        out.write(this.value, offset);
                    else if (Buffer.isBuffer(this.value))
                        this.value.copy(out, offset);
                    offset += this.length;
                }

                return out;
            };

        }, {"../base": 8, "buffer": 57, "inherits": 143}],
        8: [function (require, module, exports) {
            var base = exports;

            base.Reporter = require('./reporter').Reporter;
            base.DecoderBuffer = require('./buffer').DecoderBuffer;
            base.EncoderBuffer = require('./buffer').EncoderBuffer;
            base.Node = require('./node');

        }, {"./buffer": 7, "./node": 9, "./reporter": 10}],
        9: [function (require, module, exports) {
            var Reporter = require('../base').Reporter;
            var EncoderBuffer = require('../base').EncoderBuffer;
            var DecoderBuffer = require('../base').DecoderBuffer;
            var assert = require('minimalistic-assert');

// Supported tags
            var tags = [
                'seq', 'seqof', 'set', 'setof', 'objid', 'bool',
                'gentime', 'utctime', 'null_', 'enum', 'int', 'objDesc',
                'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str',
                'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr'
            ];

// Public methods list
            var methods = [
                'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',
                'any', 'contains'
            ].concat(tags);

// Overrided methods list
            var overrided = [
                '_peekTag', '_decodeTag', '_use',
                '_decodeStr', '_decodeObjid', '_decodeTime',
                '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',

                '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',
                '_encodeNull', '_encodeInt', '_encodeBool'
            ];

            function Node(enc, parent) {
                var state = {};
                this._baseState = state;

                state.enc = enc;

                state.parent = parent || null;
                state.children = null;

                // State
                state.tag = null;
                state.args = null;
                state.reverseArgs = null;
                state.choice = null;
                state.optional = false;
                state.any = false;
                state.obj = false;
                state.use = null;
                state.useDecoder = null;
                state.key = null;
                state['default'] = null;
                state.explicit = null;
                state.implicit = null;
                state.contains = null;

                // Should create new instance on each method
                if (!state.parent) {
                    state.children = [];
                    this._wrap();
                }
            }

            module.exports = Node;

            var stateProps = [
                'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',
                'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',
                'implicit', 'contains'
            ];

            Node.prototype.clone = function clone() {
                var state = this._baseState;
                var cstate = {};
                stateProps.forEach(function (prop) {
                    cstate[prop] = state[prop];
                });
                var res = new this.constructor(cstate.parent);
                res._baseState = cstate;
                return res;
            };

            Node.prototype._wrap = function wrap() {
                var state = this._baseState;
                methods.forEach(function (method) {
                    this[method] = function _wrappedMethod() {
                        var clone = new this.constructor(this);
                        state.children.push(clone);
                        return clone[method].apply(clone, arguments);
                    };
                }, this);
            };

            Node.prototype._init = function init(body) {
                var state = this._baseState;

                assert(state.parent === null);
                body.call(this);

                // Filter children
                state.children = state.children.filter(function (child) {
                    return child._baseState.parent === this;
                }, this);
                assert.equal(state.children.length, 1, 'Root node can have only one child');
            };

            Node.prototype._useArgs = function useArgs(args) {
                var state = this._baseState;

                // Filter children and args
                var children = args.filter(function (arg) {
                    return arg instanceof this.constructor;
                }, this);
                args = args.filter(function (arg) {
                    return !(arg instanceof this.constructor);
                }, this);

                if (children.length !== 0) {
                    assert(state.children === null);
                    state.children = children;

                    // Replace parent to maintain backward link
                    children.forEach(function (child) {
                        child._baseState.parent = this;
                    }, this);
                }
                if (args.length !== 0) {
                    assert(state.args === null);
                    state.args = args;
                    state.reverseArgs = args.map(function (arg) {
                        if (typeof arg !== 'object' || arg.constructor !== Object)
                            return arg;

                        var res = {};
                        Object.keys(arg).forEach(function (key) {
                            if (key == (key | 0))
                                key |= 0;
                            var value = arg[key];
                            res[value] = key;
                        });
                        return res;
                    });
                }
            };

//
// Overrided methods
//

            overrided.forEach(function (method) {
                Node.prototype[method] = function _overrided() {
                    var state = this._baseState;
                    throw new Error(method + ' not implemented for encoding: ' + state.enc);
                };
            });

//
// Public methods
//

            tags.forEach(function (tag) {
                Node.prototype[tag] = function _tagMethod() {
                    var state = this._baseState;
                    var args = Array.prototype.slice.call(arguments);

                    assert(state.tag === null);
                    state.tag = tag;

                    this._useArgs(args);

                    return this;
                };
            });

            Node.prototype.use = function use(item) {
                assert(item);
                var state = this._baseState;

                assert(state.use === null);
                state.use = item;

                return this;
            };

            Node.prototype.optional = function optional() {
                var state = this._baseState;

                state.optional = true;

                return this;
            };

            Node.prototype.def = function def(val) {
                var state = this._baseState;

                assert(state['default'] === null);
                state['default'] = val;
                state.optional = true;

                return this;
            };

            Node.prototype.explicit = function explicit(num) {
                var state = this._baseState;

                assert(state.explicit === null && state.implicit === null);
                state.explicit = num;

                return this;
            };

            Node.prototype.implicit = function implicit(num) {
                var state = this._baseState;

                assert(state.explicit === null && state.implicit === null);
                state.implicit = num;

                return this;
            };

            Node.prototype.obj = function obj() {
                var state = this._baseState;
                var args = Array.prototype.slice.call(arguments);

                state.obj = true;

                if (args.length !== 0)
                    this._useArgs(args);

                return this;
            };

            Node.prototype.key = function key(newKey) {
                var state = this._baseState;

                assert(state.key === null);
                state.key = newKey;

                return this;
            };

            Node.prototype.any = function any() {
                var state = this._baseState;

                state.any = true;

                return this;
            };

            Node.prototype.choice = function choice(obj) {
                var state = this._baseState;

                assert(state.choice === null);
                state.choice = obj;
                this._useArgs(Object.keys(obj).map(function (key) {
                    return obj[key];
                }));

                return this;
            };

            Node.prototype.contains = function contains(item) {
                var state = this._baseState;

                assert(state.use === null);
                state.contains = item;

                return this;
            };

//
// Decoding
//

            Node.prototype._decode = function decode(input, options) {
                var state = this._baseState;

                // Decode root node
                if (state.parent === null)
                    return input.wrapResult(state.children[0]._decode(input, options));

                var result = state['default'];
                var present = true;

                var prevKey = null;
                if (state.key !== null)
                    prevKey = input.enterKey(state.key);

                // Check if tag is there
                if (state.optional) {
                    var tag = null;
                    if (state.explicit !== null)
                        tag = state.explicit;
                    else if (state.implicit !== null)
                        tag = state.implicit;
                    else if (state.tag !== null)
                        tag = state.tag;

                    if (tag === null && !state.any) {
                        // Trial and Error
                        var save = input.save();
                        try {
                            if (state.choice === null)
                                this._decodeGeneric(state.tag, input, options);
                            else
                                this._decodeChoice(input, options);
                            present = true;
                        } catch (e) {
                            present = false;
                        }
                        input.restore(save);
                    } else {
                        present = this._peekTag(input, tag, state.any);

                        if (input.isError(present))
                            return present;
                    }
                }

                // Push object on stack
                var prevObj;
                if (state.obj && present)
                    prevObj = input.enterObject();

                if (present) {
                    // Unwrap explicit values
                    if (state.explicit !== null) {
                        var explicit = this._decodeTag(input, state.explicit);
                        if (input.isError(explicit))
                            return explicit;
                        input = explicit;
                    }

                    var start = input.offset;

                    // Unwrap implicit and normal values
                    if (state.use === null && state.choice === null) {
                        if (state.any)
                            var save = input.save();
                        var body = this._decodeTag(
                            input,
                            state.implicit !== null ? state.implicit : state.tag,
                            state.any
                        );
                        if (input.isError(body))
                            return body;

                        if (state.any)
                            result = input.raw(save);
                        else
                            input = body;
                    }

                    if (options && options.track && state.tag !== null)
                        options.track(input.path(), start, input.length, 'tagged');

                    if (options && options.track && state.tag !== null)
                        options.track(input.path(), input.offset, input.length, 'content');

                    // Select proper method for tag
                    if (state.any)
                        result = result;
                    else if (state.choice === null)
                        result = this._decodeGeneric(state.tag, input, options);
                    else
                        result = this._decodeChoice(input, options);

                    if (input.isError(result))
                        return result;

                    // Decode children
                    if (!state.any && state.choice === null && state.children !== null) {
                        state.children.forEach(function decodeChildren(child) {
                            // NOTE: We are ignoring errors here, to let parser continue with other
                            // parts of encoded data
                            child._decode(input, options);
                        });
                    }

                    // Decode contained/encoded by schema, only in bit or octet strings
                    if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
                        var data = new DecoderBuffer(result);
                        result = this._getUse(state.contains, input._reporterState.obj)
                            ._decode(data, options);
                    }
                }

                // Pop object
                if (state.obj && present)
                    result = input.leaveObject(prevObj);

                // Set key
                if (state.key !== null && (result !== null || present === true))
                    input.leaveKey(prevKey, state.key, result);
                else if (prevKey !== null)
                    input.exitKey(prevKey);

                return result;
            };

            Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
                var state = this._baseState;

                if (tag === 'seq' || tag === 'set')
                    return null;
                if (tag === 'seqof' || tag === 'setof')
                    return this._decodeList(input, tag, state.args[0], options);
                else if (/str$/.test(tag))
                    return this._decodeStr(input, tag, options);
                else if (tag === 'objid' && state.args)
                    return this._decodeObjid(input, state.args[0], state.args[1], options);
                else if (tag === 'objid')
                    return this._decodeObjid(input, null, null, options);
                else if (tag === 'gentime' || tag === 'utctime')
                    return this._decodeTime(input, tag, options);
                else if (tag === 'null_')
                    return this._decodeNull(input, options);
                else if (tag === 'bool')
                    return this._decodeBool(input, options);
                else if (tag === 'objDesc')
                    return this._decodeStr(input, tag, options);
                else if (tag === 'int' || tag === 'enum')
                    return this._decodeInt(input, state.args && state.args[0], options);

                if (state.use !== null) {
                    return this._getUse(state.use, input._reporterState.obj)
                        ._decode(input, options);
                } else {
                    return input.error('unknown tag: ' + tag);
                }
            };

            Node.prototype._getUse = function _getUse(entity, obj) {

                var state = this._baseState;
                // Create altered use decoder if implicit is set
                state.useDecoder = this._use(entity, obj);
                assert(state.useDecoder._baseState.parent === null);
                state.useDecoder = state.useDecoder._baseState.children[0];
                if (state.implicit !== state.useDecoder._baseState.implicit) {
                    state.useDecoder = state.useDecoder.clone();
                    state.useDecoder._baseState.implicit = state.implicit;
                }
                return state.useDecoder;
            };

            Node.prototype._decodeChoice = function decodeChoice(input, options) {
                var state = this._baseState;
                var result = null;
                var match = false;

                Object.keys(state.choice).some(function (key) {
                    var save = input.save();
                    var node = state.choice[key];
                    try {
                        var value = node._decode(input, options);
                        if (input.isError(value))
                            return false;

                        result = {type: key, value: value};
                        match = true;
                    } catch (e) {
                        input.restore(save);
                        return false;
                    }
                    return true;
                }, this);

                if (!match)
                    return input.error('Choice not matched');

                return result;
            };

//
// Encoding
//

            Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
                return new EncoderBuffer(data, this.reporter);
            };

            Node.prototype._encode = function encode(data, reporter, parent) {
                var state = this._baseState;
                if (state['default'] !== null && state['default'] === data)
                    return;

                var result = this._encodeValue(data, reporter, parent);
                if (result === undefined)
                    return;

                if (this._skipDefault(result, reporter, parent))
                    return;

                return result;
            };

            Node.prototype._encodeValue = function encode(data, reporter, parent) {
                var state = this._baseState;

                // Decode root node
                if (state.parent === null)
                    return state.children[0]._encode(data, reporter || new Reporter());

                var result = null;

                // Set reporter to share it with a child class
                this.reporter = reporter;

                // Check if data is there
                if (state.optional && data === undefined) {
                    if (state['default'] !== null)
                        data = state['default']
                    else
                        return;
                }

                // Encode children first
                var content = null;
                var primitive = false;
                if (state.any) {
                    // Anything that was given is translated to buffer
                    result = this._createEncoderBuffer(data);
                } else if (state.choice) {
                    result = this._encodeChoice(data, reporter);
                } else if (state.contains) {
                    content = this._getUse(state.contains, parent)._encode(data, reporter);
                    primitive = true;
                } else if (state.children) {
                    content = state.children.map(function (child) {
                        if (child._baseState.tag === 'null_')
                            return child._encode(null, reporter, data);

                        if (child._baseState.key === null)
                            return reporter.error('Child should have a key');
                        var prevKey = reporter.enterKey(child._baseState.key);

                        if (typeof data !== 'object')
                            return reporter.error('Child expected, but input is not object');

                        var res = child._encode(data[child._baseState.key], reporter, data);
                        reporter.leaveKey(prevKey);

                        return res;
                    }, this).filter(function (child) {
                        return child;
                    });
                    content = this._createEncoderBuffer(content);
                } else {
                    if (state.tag === 'seqof' || state.tag === 'setof') {
                        // TODO(indutny): this should be thrown on DSL level
                        if (!(state.args && state.args.length === 1))
                            return reporter.error('Too many args for : ' + state.tag);

                        if (!Array.isArray(data))
                            return reporter.error('seqof/setof, but data is not Array');

                        var child = this.clone();
                        child._baseState.implicit = null;
                        content = this._createEncoderBuffer(data.map(function (item) {
                            var state = this._baseState;

                            return this._getUse(state.args[0], data)._encode(item, reporter);
                        }, child));
                    } else if (state.use !== null) {
                        result = this._getUse(state.use, parent)._encode(data, reporter);
                    } else {
                        content = this._encodePrimitive(state.tag, data);
                        primitive = true;
                    }
                }

                // Encode data itself
                var result;
                if (!state.any && state.choice === null) {
                    var tag = state.implicit !== null ? state.implicit : state.tag;
                    var cls = state.implicit === null ? 'universal' : 'context';

                    if (tag === null) {
                        if (state.use === null)
                            reporter.error('Tag could be ommited only for .use()');
                    } else {
                        if (state.use === null)
                            result = this._encodeComposite(tag, primitive, cls, content);
                    }
                }

                // Wrap in explicit
                if (state.explicit !== null)
                    result = this._encodeComposite(state.explicit, false, 'context', result);

                return result;
            };

            Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
                var state = this._baseState;

                var node = state.choice[data.type];
                if (!node) {
                    assert(
                        false,
                        data.type + ' not found in ' +
                        JSON.stringify(Object.keys(state.choice)));
                }
                return node._encode(data.value, reporter);
            };

            Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
                var state = this._baseState;

                if (/str$/.test(tag))
                    return this._encodeStr(data, tag);
                else if (tag === 'objid' && state.args)
                    return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
                else if (tag === 'objid')
                    return this._encodeObjid(data, null, null);
                else if (tag === 'gentime' || tag === 'utctime')
                    return this._encodeTime(data, tag);
                else if (tag === 'null_')
                    return this._encodeNull();
                else if (tag === 'int' || tag === 'enum')
                    return this._encodeInt(data, state.args && state.reverseArgs[0]);
                else if (tag === 'bool')
                    return this._encodeBool(data);
                else if (tag === 'objDesc')
                    return this._encodeStr(data, tag);
                else
                    throw new Error('Unsupported tag: ' + tag);
            };

            Node.prototype._isNumstr = function isNumstr(str) {
                return /^[0-9 ]*$/.test(str);
            };

            Node.prototype._isPrintstr = function isPrintstr(str) {
                return /^[A-Za-z0-9 '\(\)\+,\-\.\/:=\?]*$/.test(str);
            };

        }, {"../base": 8, "minimalistic-assert": 147}],
        10: [function (require, module, exports) {
            var inherits = require('inherits');

            function Reporter(options) {
                this._reporterState = {
                    obj: null,
                    path: [],
                    options: options || {},
                    errors: []
                };
            }

            exports.Reporter = Reporter;

            Reporter.prototype.isError = function isError(obj) {
                return obj instanceof ReporterError;
            };

            Reporter.prototype.save = function save() {
                var state = this._reporterState;

                return {obj: state.obj, pathLen: state.path.length};
            };

            Reporter.prototype.restore = function restore(data) {
                var state = this._reporterState;

                state.obj = data.obj;
                state.path = state.path.slice(0, data.pathLen);
            };

            Reporter.prototype.enterKey = function enterKey(key) {
                return this._reporterState.path.push(key);
            };

            Reporter.prototype.exitKey = function exitKey(index) {
                var state = this._reporterState;

                state.path = state.path.slice(0, index - 1);
            };

            Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
                var state = this._reporterState;

                this.exitKey(index);
                if (state.obj !== null)
                    state.obj[key] = value;
            };

            Reporter.prototype.path = function path() {
                return this._reporterState.path.join('/');
            };

            Reporter.prototype.enterObject = function enterObject() {
                var state = this._reporterState;

                var prev = state.obj;
                state.obj = {};
                return prev;
            };

            Reporter.prototype.leaveObject = function leaveObject(prev) {
                var state = this._reporterState;

                var now = state.obj;
                state.obj = prev;
                return now;
            };

            Reporter.prototype.error = function error(msg) {
                var err;
                var state = this._reporterState;

                var inherited = msg instanceof ReporterError;
                if (inherited) {
                    err = msg;
                } else {
                    err = new ReporterError(state.path.map(function (elem) {
                        return '[' + JSON.stringify(elem) + ']';
                    }).join(''), msg.message || msg, msg.stack);
                }

                if (!state.options.partial)
                    throw err;

                if (!inherited)
                    state.errors.push(err);

                return err;
            };

            Reporter.prototype.wrapResult = function wrapResult(result) {
                var state = this._reporterState;
                if (!state.options.partial)
                    return result;

                return {
                    result: this.isError(result) ? null : result,
                    errors: state.errors
                };
            };

            function ReporterError(path, msg) {
                this.path = path;
                this.rethrow(msg);
            };
            inherits(ReporterError, Error);

            ReporterError.prototype.rethrow = function rethrow(msg) {
                this.message = msg + ' at: ' + (this.path || '(shallow)');
                if (Error.captureStackTrace)
                    Error.captureStackTrace(this, ReporterError);

                if (!this.stack) {
                    try {
                        // IE only adds stack when thrown
                        throw new Error(this.message);
                    } catch (e) {
                        this.stack = e.stack;
                    }
                }
                return this;
            };

        }, {"inherits": 143}],
        11: [function (require, module, exports) {
            var constants = require('../constants');

            exports.tagClass = {
                0: 'universal',
                1: 'application',
                2: 'context',
                3: 'private'
            };
            exports.tagClassByName = constants._reverse(exports.tagClass);

            exports.tag = {
                0x00: 'end',
                0x01: 'bool',
                0x02: 'int',
                0x03: 'bitstr',
                0x04: 'octstr',
                0x05: 'null_',
                0x06: 'objid',
                0x07: 'objDesc',
                0x08: 'external',
                0x09: 'real',
                0x0a: 'enum',
                0x0b: 'embed',
                0x0c: 'utf8str',
                0x0d: 'relativeOid',
                0x10: 'seq',
                0x11: 'set',
                0x12: 'numstr',
                0x13: 'printstr',
                0x14: 't61str',
                0x15: 'videostr',
                0x16: 'ia5str',
                0x17: 'utctime',
                0x18: 'gentime',
                0x19: 'graphstr',
                0x1a: 'iso646str',
                0x1b: 'genstr',
                0x1c: 'unistr',
                0x1d: 'charstr',
                0x1e: 'bmpstr'
            };
            exports.tagByName = constants._reverse(exports.tag);

        }, {"../constants": 12}],
        12: [function (require, module, exports) {
            var constants = exports;

// Helper
            constants._reverse = function reverse(map) {
                var res = {};

                Object.keys(map).forEach(function (key) {
                    // Convert key to integer if it is stringified
                    if ((key | 0) == key)
                        key = key | 0;

                    var value = map[key];
                    res[value] = key;
                });

                return res;
            };

            constants.der = require('./der');

        }, {"./der": 11}],
        13: [function (require, module, exports) {
            var inherits = require('inherits');

            var asn1 = require('../../asn1');
            var base = asn1.base;
            var bignum = asn1.bignum;

// Import DER constants
            var der = asn1.constants.der;

            function DERDecoder(entity) {
                this.enc = 'der';
                this.name = entity.name;
                this.entity = entity;

                // Construct base tree
                this.tree = new DERNode();
                this.tree._init(entity.body);
            };
            module.exports = DERDecoder;

            DERDecoder.prototype.decode = function decode(data, options) {
                if (!(data instanceof base.DecoderBuffer))
                    data = new base.DecoderBuffer(data, options);

                return this.tree._decode(data, options);
            };

// Tree methods

            function DERNode(parent) {
                base.Node.call(this, 'der', parent);
            }

            inherits(DERNode, base.Node);

            DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
                if (buffer.isEmpty())
                    return false;

                var state = buffer.save();
                var decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
                if (buffer.isError(decodedTag))
                    return decodedTag;

                buffer.restore(state);

                return decodedTag.tag === tag || decodedTag.tagStr === tag ||
                    (decodedTag.tagStr + 'of') === tag || any;
            };

            DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
                var decodedTag = derDecodeTag(buffer,
                    'Failed to decode tag of "' + tag + '"');
                if (buffer.isError(decodedTag))
                    return decodedTag;

                var len = derDecodeLen(buffer,
                    decodedTag.primitive,
                    'Failed to get length of "' + tag + '"');

                // Failure
                if (buffer.isError(len))
                    return len;

                if (!any &&
                    decodedTag.tag !== tag &&
                    decodedTag.tagStr !== tag &&
                    decodedTag.tagStr + 'of' !== tag) {
                    return buffer.error('Failed to match tag: "' + tag + '"');
                }

                if (decodedTag.primitive || len !== null)
                    return buffer.skip(len, 'Failed to match body of: "' + tag + '"');

                // Indefinite length... find END tag
                var state = buffer.save();
                var res = this._skipUntilEnd(
                    buffer,
                    'Failed to skip indefinite length body: "' + this.tag + '"');
                if (buffer.isError(res))
                    return res;

                len = buffer.offset - state.offset;
                buffer.restore(state);
                return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
            };

            DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
                while (true) {
                    var tag = derDecodeTag(buffer, fail);
                    if (buffer.isError(tag))
                        return tag;
                    var len = derDecodeLen(buffer, tag.primitive, fail);
                    if (buffer.isError(len))
                        return len;

                    var res;
                    if (tag.primitive || len !== null)
                        res = buffer.skip(len)
                    else
                        res = this._skipUntilEnd(buffer, fail);

                    // Failure
                    if (buffer.isError(res))
                        return res;

                    if (tag.tagStr === 'end')
                        break;
                }
            };

            DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder,
                                                                options) {
                var result = [];
                while (!buffer.isEmpty()) {
                    var possibleEnd = this._peekTag(buffer, 'end');
                    if (buffer.isError(possibleEnd))
                        return possibleEnd;

                    var res = decoder.decode(buffer, 'der', options);
                    if (buffer.isError(res) && possibleEnd)
                        break;
                    result.push(res);
                }
                return result;
            };

            DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
                if (tag === 'bitstr') {
                    var unused = buffer.readUInt8();
                    if (buffer.isError(unused))
                        return unused;
                    return {unused: unused, data: buffer.raw()};
                } else if (tag === 'bmpstr') {
                    var raw = buffer.raw();
                    if (raw.length % 2 === 1)
                        return buffer.error('Decoding of string type: bmpstr length mismatch');

                    var str = '';
                    for (var i = 0; i < raw.length / 2; i++) {
                        str += String.fromCharCode(raw.readUInt16BE(i * 2));
                    }
                    return str;
                } else if (tag === 'numstr') {
                    var numstr = buffer.raw().toString('ascii');
                    if (!this._isNumstr(numstr)) {
                        return buffer.error('Decoding of string type: ' +
                            'numstr unsupported characters');
                    }
                    return numstr;
                } else if (tag === 'octstr') {
                    return buffer.raw();
                } else if (tag === 'objDesc') {
                    return buffer.raw();
                } else if (tag === 'printstr') {
                    var printstr = buffer.raw().toString('ascii');
                    if (!this._isPrintstr(printstr)) {
                        return buffer.error('Decoding of string type: ' +
                            'printstr unsupported characters');
                    }
                    return printstr;
                } else if (/str$/.test(tag)) {
                    return buffer.raw().toString();
                } else {
                    return buffer.error('Decoding of string type: ' + tag + ' unsupported');
                }
            };

            DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
                var result;
                var identifiers = [];
                var ident = 0;
                while (!buffer.isEmpty()) {
                    var subident = buffer.readUInt8();
                    ident <<= 7;
                    ident |= subident & 0x7f;
                    if ((subident & 0x80) === 0) {
                        identifiers.push(ident);
                        ident = 0;
                    }
                }
                if (subident & 0x80)
                    identifiers.push(ident);

                var first = (identifiers[0] / 40) | 0;
                var second = identifiers[0] % 40;

                if (relative)
                    result = identifiers;
                else
                    result = [first, second].concat(identifiers.slice(1));

                if (values) {
                    var tmp = values[result.join(' ')];
                    if (tmp === undefined)
                        tmp = values[result.join('.')];
                    if (tmp !== undefined)
                        result = tmp;
                }

                return result;
            };

            DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
                var str = buffer.raw().toString();
                if (tag === 'gentime') {
                    var year = str.slice(0, 4) | 0;
                    var mon = str.slice(4, 6) | 0;
                    var day = str.slice(6, 8) | 0;
                    var hour = str.slice(8, 10) | 0;
                    var min = str.slice(10, 12) | 0;
                    var sec = str.slice(12, 14) | 0;
                } else if (tag === 'utctime') {
                    var year = str.slice(0, 2) | 0;
                    var mon = str.slice(2, 4) | 0;
                    var day = str.slice(4, 6) | 0;
                    var hour = str.slice(6, 8) | 0;
                    var min = str.slice(8, 10) | 0;
                    var sec = str.slice(10, 12) | 0;
                    if (year < 70)
                        year = 2000 + year;
                    else
                        year = 1900 + year;
                } else {
                    return buffer.error('Decoding ' + tag + ' time is not supported yet');
                }

                return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
            };

            DERNode.prototype._decodeNull = function decodeNull(buffer) {
                return null;
            };

            DERNode.prototype._decodeBool = function decodeBool(buffer) {
                var res = buffer.readUInt8();
                if (buffer.isError(res))
                    return res;
                else
                    return res !== 0;
            };

            DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
                // Bigint, return as it is (assume big endian)
                var raw = buffer.raw();
                var res = new bignum(raw);

                if (values)
                    res = values[res.toString(10)] || res;

                return res;
            };

            DERNode.prototype._use = function use(entity, obj) {
                if (typeof entity === 'function')
                    entity = entity(obj);
                return entity._getDecoder('der').tree;
            };

// Utility methods

            function derDecodeTag(buf, fail) {
                var tag = buf.readUInt8(fail);
                if (buf.isError(tag))
                    return tag;

                var cls = der.tagClass[tag >> 6];
                var primitive = (tag & 0x20) === 0;

                // Multi-octet tag - load
                if ((tag & 0x1f) === 0x1f) {
                    var oct = tag;
                    tag = 0;
                    while ((oct & 0x80) === 0x80) {
                        oct = buf.readUInt8(fail);
                        if (buf.isError(oct))
                            return oct;

                        tag <<= 7;
                        tag |= oct & 0x7f;
                    }
                } else {
                    tag &= 0x1f;
                }
                var tagStr = der.tag[tag];

                return {
                    cls: cls,
                    primitive: primitive,
                    tag: tag,
                    tagStr: tagStr
                };
            }

            function derDecodeLen(buf, primitive, fail) {
                var len = buf.readUInt8(fail);
                if (buf.isError(len))
                    return len;

                // Indefinite form
                if (!primitive && len === 0x80)
                    return null;

                // Definite form
                if ((len & 0x80) === 0) {
                    // Short form
                    return len;
                }

                // Long form
                var num = len & 0x7f;
                if (num > 4)
                    return buf.error('length octect is too long');

                len = 0;
                for (var i = 0; i < num; i++) {
                    len <<= 8;
                    var j = buf.readUInt8(fail);
                    if (buf.isError(j))
                        return j;
                    len |= j;
                }

                return len;
            }

        }, {"../../asn1": 5, "inherits": 143}],
        14: [function (require, module, exports) {
            var decoders = exports;

            decoders.der = require('./der');
            decoders.pem = require('./pem');

        }, {"./der": 13, "./pem": 15}],
        15: [function (require, module, exports) {
            var inherits = require('inherits');
            var Buffer = require('buffer').Buffer;

            var DERDecoder = require('./der');

            function PEMDecoder(entity) {
                DERDecoder.call(this, entity);
                this.enc = 'pem';
            };
            inherits(PEMDecoder, DERDecoder);
            module.exports = PEMDecoder;

            PEMDecoder.prototype.decode = function decode(data, options) {
                var lines = data.toString().split(/[\r\n]+/g);

                var label = options.label.toUpperCase();

                var re = /^-----(BEGIN|END) ([^-]+)-----$/;
                var start = -1;
                var end = -1;
                for (var i = 0; i < lines.length; i++) {
                    var match = lines[i].match(re);
                    if (match === null)
                        continue;

                    if (match[2] !== label)
                        continue;

                    if (start === -1) {
                        if (match[1] !== 'BEGIN')
                            break;
                        start = i;
                    } else {
                        if (match[1] !== 'END')
                            break;
                        end = i;
                        break;
                    }
                }
                if (start === -1 || end === -1)
                    throw new Error('PEM section not found for: ' + label);

                var base64 = lines.slice(start + 1, end).join('');
                // Remove excessive symbols
                base64.replace(/[^a-z0-9\+\/=]+/gi, '');

                var input = new Buffer(base64, 'base64');
                return DERDecoder.prototype.decode.call(this, input, options);
            };

        }, {"./der": 13, "buffer": 57, "inherits": 143}],
        16: [function (require, module, exports) {
            var inherits = require('inherits');
            var Buffer = require('buffer').Buffer;

            var asn1 = require('../../asn1');
            var base = asn1.base;

// Import DER constants
            var der = asn1.constants.der;

            function DEREncoder(entity) {
                this.enc = 'der';
                this.name = entity.name;
                this.entity = entity;

                // Construct base tree
                this.tree = new DERNode();
                this.tree._init(entity.body);
            };
            module.exports = DEREncoder;

            DEREncoder.prototype.encode = function encode(data, reporter) {
                return this.tree._encode(data, reporter).join();
            };

// Tree methods

            function DERNode(parent) {
                base.Node.call(this, 'der', parent);
            }

            inherits(DERNode, base.Node);

            DERNode.prototype._encodeComposite = function encodeComposite(tag,
                                                                          primitive,
                                                                          cls,
                                                                          content) {
                var encodedTag = encodeTag(tag, primitive, cls, this.reporter);

                // Short form
                if (content.length < 0x80) {
                    var header = new Buffer(2);
                    header[0] = encodedTag;
                    header[1] = content.length;
                    return this._createEncoderBuffer([header, content]);
                }

                // Long form
                // Count octets required to store length
                var lenOctets = 1;
                for (var i = content.length; i >= 0x100; i >>= 8)
                    lenOctets++;

                var header = new Buffer(1 + 1 + lenOctets);
                header[0] = encodedTag;
                header[1] = 0x80 | lenOctets;

                for (var i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)
                    header[i] = j & 0xff;

                return this._createEncoderBuffer([header, content]);
            };

            DERNode.prototype._encodeStr = function encodeStr(str, tag) {
                if (tag === 'bitstr') {
                    return this._createEncoderBuffer([str.unused | 0, str.data]);
                } else if (tag === 'bmpstr') {
                    var buf = new Buffer(str.length * 2);
                    for (var i = 0; i < str.length; i++) {
                        buf.writeUInt16BE(str.charCodeAt(i), i * 2);
                    }
                    return this._createEncoderBuffer(buf);
                } else if (tag === 'numstr') {
                    if (!this._isNumstr(str)) {
                        return this.reporter.error('Encoding of string type: numstr supports ' +
                            'only digits and space');
                    }
                    return this._createEncoderBuffer(str);
                } else if (tag === 'printstr') {
                    if (!this._isPrintstr(str)) {
                        return this.reporter.error('Encoding of string type: printstr supports ' +
                            'only latin upper and lower case letters, ' +
                            'digits, space, apostrophe, left and rigth ' +
                            'parenthesis, plus sign, comma, hyphen, ' +
                            'dot, slash, colon, equal sign, ' +
                            'question mark');
                    }
                    return this._createEncoderBuffer(str);
                } else if (/str$/.test(tag)) {
                    return this._createEncoderBuffer(str);
                } else if (tag === 'objDesc') {
                    return this._createEncoderBuffer(str);
                } else {
                    return this.reporter.error('Encoding of string type: ' + tag +
                        ' unsupported');
                }
            };

            DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
                if (typeof id === 'string') {
                    if (!values)
                        return this.reporter.error('string objid given, but no values map found');
                    if (!values.hasOwnProperty(id))
                        return this.reporter.error('objid not found in values map');
                    id = values[id].split(/[\s\.]+/g);
                    for (var i = 0; i < id.length; i++)
                        id[i] |= 0;
                } else if (Array.isArray(id)) {
                    id = id.slice();
                    for (var i = 0; i < id.length; i++)
                        id[i] |= 0;
                }

                if (!Array.isArray(id)) {
                    return this.reporter.error('objid() should be either array or string, ' +
                        'got: ' + JSON.stringify(id));
                }

                if (!relative) {
                    if (id[1] >= 40)
                        return this.reporter.error('Second objid identifier OOB');
                    id.splice(0, 2, id[0] * 40 + id[1]);
                }

                // Count number of octets
                var size = 0;
                for (var i = 0; i < id.length; i++) {
                    var ident = id[i];
                    for (size++; ident >= 0x80; ident >>= 7)
                        size++;
                }

                var objid = new Buffer(size);
                var offset = objid.length - 1;
                for (var i = id.length - 1; i >= 0; i--) {
                    var ident = id[i];
                    objid[offset--] = ident & 0x7f;
                    while ((ident >>= 7) > 0)
                        objid[offset--] = 0x80 | (ident & 0x7f);
                }

                return this._createEncoderBuffer(objid);
            };

            function two(num) {
                if (num < 10)
                    return '0' + num;
                else
                    return num;
            }

            DERNode.prototype._encodeTime = function encodeTime(time, tag) {
                var str;
                var date = new Date(time);

                if (tag === 'gentime') {
                    str = [
                        two(date.getFullYear()),
                        two(date.getUTCMonth() + 1),
                        two(date.getUTCDate()),
                        two(date.getUTCHours()),
                        two(date.getUTCMinutes()),
                        two(date.getUTCSeconds()),
                        'Z'
                    ].join('');
                } else if (tag === 'utctime') {
                    str = [
                        two(date.getFullYear() % 100),
                        two(date.getUTCMonth() + 1),
                        two(date.getUTCDate()),
                        two(date.getUTCHours()),
                        two(date.getUTCMinutes()),
                        two(date.getUTCSeconds()),
                        'Z'
                    ].join('');
                } else {
                    this.reporter.error('Encoding ' + tag + ' time is not supported yet');
                }

                return this._encodeStr(str, 'octstr');
            };

            DERNode.prototype._encodeNull = function encodeNull() {
                return this._createEncoderBuffer('');
            };

            DERNode.prototype._encodeInt = function encodeInt(num, values) {
                if (typeof num === 'string') {
                    if (!values)
                        return this.reporter.error('String int or enum given, but no values map');
                    if (!values.hasOwnProperty(num)) {
                        return this.reporter.error('Values map doesn\'t contain: ' +
                            JSON.stringify(num));
                    }
                    num = values[num];
                }

                // Bignum, assume big endian
                if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
                    var numArray = num.toArray();
                    if (!num.sign && numArray[0] & 0x80) {
                        numArray.unshift(0);
                    }
                    num = new Buffer(numArray);
                }

                if (Buffer.isBuffer(num)) {
                    var size = num.length;
                    if (num.length === 0)
                        size++;

                    var out = new Buffer(size);
                    num.copy(out);
                    if (num.length === 0)
                        out[0] = 0
                    return this._createEncoderBuffer(out);
                }

                if (num < 0x80)
                    return this._createEncoderBuffer(num);

                if (num < 0x100)
                    return this._createEncoderBuffer([0, num]);

                var size = 1;
                for (var i = num; i >= 0x100; i >>= 8)
                    size++;

                var out = new Array(size);
                for (var i = out.length - 1; i >= 0; i--) {
                    out[i] = num & 0xff;
                    num >>= 8;
                }
                if (out[0] & 0x80) {
                    out.unshift(0);
                }

                return this._createEncoderBuffer(new Buffer(out));
            };

            DERNode.prototype._encodeBool = function encodeBool(value) {
                return this._createEncoderBuffer(value ? 0xff : 0);
            };

            DERNode.prototype._use = function use(entity, obj) {
                if (typeof entity === 'function')
                    entity = entity(obj);
                return entity._getEncoder('der').tree;
            };

            DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
                var state = this._baseState;
                var i;
                if (state['default'] === null)
                    return false;

                var data = dataBuffer.join();
                if (state.defaultBuffer === undefined)
                    state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();

                if (data.length !== state.defaultBuffer.length)
                    return false;

                for (i = 0; i < data.length; i++)
                    if (data[i] !== state.defaultBuffer[i])
                        return false;

                return true;
            };

// Utility methods

            function encodeTag(tag, primitive, cls, reporter) {
                var res;

                if (tag === 'seqof')
                    tag = 'seq';
                else if (tag === 'setof')
                    tag = 'set';

                if (der.tagByName.hasOwnProperty(tag))
                    res = der.tagByName[tag];
                else if (typeof tag === 'number' && (tag | 0) === tag)
                    res = tag;
                else
                    return reporter.error('Unknown tag: ' + tag);

                if (res >= 0x1f)
                    return reporter.error('Multi-octet tag encoding unsupported');

                if (!primitive)
                    res |= 0x20;

                res |= (der.tagClassByName[cls || 'universal'] << 6);

                return res;
            }

        }, {"../../asn1": 5, "buffer": 57, "inherits": 143}],
        17: [function (require, module, exports) {
            var encoders = exports;

            encoders.der = require('./der');
            encoders.pem = require('./pem');

        }, {"./der": 16, "./pem": 18}],
        18: [function (require, module, exports) {
            var inherits = require('inherits');

            var DEREncoder = require('./der');

            function PEMEncoder(entity) {
                DEREncoder.call(this, entity);
                this.enc = 'pem';
            };
            inherits(PEMEncoder, DEREncoder);
            module.exports = PEMEncoder;

            PEMEncoder.prototype.encode = function encode(data, options) {
                var buf = DEREncoder.prototype.encode.call(this, data);

                var p = buf.toString('base64');
                var out = ['-----BEGIN ' + options.label + '-----'];
                for (var i = 0; i < p.length; i += 64)
                    out.push(p.slice(i, i + 64));
                out.push('-----END ' + options.label + '-----');
                return out.join('\n');
            };

        }, {"./der": 16, "inherits": 143}],
        19: [function (require, module, exports) {
            'use strict'

            exports.byteLength = byteLength
            exports.toByteArray = toByteArray
            exports.fromByteArray = fromByteArray

            var lookup = []
            var revLookup = []
            var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

            var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
            for (var i = 0, len = code.length; i < len; ++i) {
                lookup[i] = code[i]
                revLookup[code.charCodeAt(i)] = i
            }

            revLookup['-'.charCodeAt(0)] = 62
            revLookup['_'.charCodeAt(0)] = 63

            function placeHoldersCount(b64) {
                var len = b64.length
                if (len % 4 > 0) {
                    throw new Error('Invalid string. Length must be a multiple of 4')
                }

                // the number of equal signs (place holders)
                // if there are two placeholders, than the two characters before it
                // represent one byte
                // if there is only one, then the three characters before it represent 2 bytes
                // this is just a cheap hack to not do indexOf twice
                return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
            }

            function byteLength(b64) {
                // base64 is 4/3 + up to two characters of the original data
                return (b64.length * 3 / 4) - placeHoldersCount(b64)
            }

            function toByteArray(b64) {
                var i, l, tmp, placeHolders, arr
                var len = b64.length
                placeHolders = placeHoldersCount(b64)

                arr = new Arr((len * 3 / 4) - placeHolders)

                // if there are placeholders, only get up to the last complete 4 chars
                l = placeHolders > 0 ? len - 4 : len

                var L = 0

                for (i = 0; i < l; i += 4) {
                    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
                    arr[L++] = (tmp >> 16) & 0xFF
                    arr[L++] = (tmp >> 8) & 0xFF
                    arr[L++] = tmp & 0xFF
                }

                if (placeHolders === 2) {
                    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
                    arr[L++] = tmp & 0xFF
                } else if (placeHolders === 1) {
                    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
                    arr[L++] = (tmp >> 8) & 0xFF
                    arr[L++] = tmp & 0xFF
                }

                return arr
            }

            function tripletToBase64(num) {
                return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
            }

            function encodeChunk(uint8, start, end) {
                var tmp
                var output = []
                for (var i = start; i < end; i += 3) {
                    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
                    output.push(tripletToBase64(tmp))
                }
                return output.join('')
            }

            function fromByteArray(uint8) {
                var tmp
                var len = uint8.length
                var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
                var output = ''
                var parts = []
                var maxChunkLength = 16383 // must be multiple of 3

                // go through the array every three bytes, we'll deal with trailing stuff later
                for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
                    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
                }

                // pad the end with zeros, but make sure to not forget the extra bytes
                if (extraBytes === 1) {
                    tmp = uint8[len - 1]
                    output += lookup[tmp >> 2]
                    output += lookup[(tmp << 4) & 0x3F]
                    output += '=='
                } else if (extraBytes === 2) {
                    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
                    output += lookup[tmp >> 10]
                    output += lookup[(tmp >> 4) & 0x3F]
                    output += lookup[(tmp << 2) & 0x3F]
                    output += '='
                }

                parts.push(output)

                return parts.join('')
            }

        }, {}],
        20: [function (require, module, exports) {
            (function (module, exports) {
                'use strict';

                // Utils
                function assert(val, msg) {
                    if (!val) throw new Error(msg || 'Assertion failed');
                }

                // Could use `inherits` module, but don't want to move from single file
                // architecture yet.
                function inherits(ctor, superCtor) {
                    ctor.super_ = superCtor;
                    var TempCtor = function () {
                    };
                    TempCtor.prototype = superCtor.prototype;
                    ctor.prototype = new TempCtor();
                    ctor.prototype.constructor = ctor;
                }

                // BN

                function BN(number, base, endian) {
                    if (BN.isBN(number)) {
                        return number;
                    }

                    this.negative = 0;
                    this.words = null;
                    this.length = 0;

                    // Reduction context
                    this.red = null;

                    if (number !== null) {
                        if (base === 'le' || base === 'be') {
                            endian = base;
                            base = 10;
                        }

                        this._init(number || 0, base || 10, endian || 'be');
                    }
                }

                if (typeof module === 'object') {
                    module.exports = BN;
                } else {
                    exports.BN = BN;
                }

                BN.BN = BN;
                BN.wordSize = 26;

                var Buffer;
                try {
                    // Obfuscate that we require Buffer, to reduce size
                    Buffer = require('buf' + 'fer').Buffer;
                } catch (e) {
                }

                BN.isBN = function isBN(num) {
                    if (num instanceof BN) {
                        return true;
                    }

                    return num !== null && typeof num === 'object' &&
                        num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
                };

                BN.max = function max(left, right) {
                    if (left.cmp(right) > 0) return left;
                    return right;
                };

                BN.min = function min(left, right) {
                    if (left.cmp(right) < 0) return left;
                    return right;
                };

                BN.prototype._init = function init(number, base, endian) {
                    if (typeof number === 'number') {
                        return this._initNumber(number, base, endian);
                    }

                    if (typeof number === 'object') {
                        return this._initArray(number, base, endian);
                    }

                    if (base === 'hex') {
                        base = 16;
                    }
                    assert(base === (base | 0) && base >= 2 && base <= 36);

                    number = number.toString().replace(/\s+/g, '');
                    var start = 0;
                    if (number[0] === '-') {
                        start++;
                    }

                    if (base === 16) {
                        this._parseHex(number, start);
                    } else {
                        this._parseBase(number, base, start);
                    }

                    if (number[0] === '-') {
                        this.negative = 1;
                    }

                    this.strip();

                    if (endian !== 'le') return;

                    this._initArray(this.toArray(), base, endian);
                };

                BN.prototype._initNumber = function _initNumber(number, base, endian) {
                    if (number < 0) {
                        this.negative = 1;
                        number = -number;
                    }
                    if (number < 0x4000000) {
                        this.words = [number & 0x3ffffff];
                        this.length = 1;
                    } else if (number < 0x10000000000000) {
                        this.words = [
                            number & 0x3ffffff,
                            (number / 0x4000000) & 0x3ffffff
                        ];
                        this.length = 2;
                    } else {
                        assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
                        this.words = [
                            number & 0x3ffffff,
                            (number / 0x4000000) & 0x3ffffff,
                            1
                        ];
                        this.length = 3;
                    }

                    if (endian !== 'le') return;

                    // Reverse the bytes
                    this._initArray(this.toArray(), base, endian);
                };

                BN.prototype._initArray = function _initArray(number, base, endian) {
                    // Perhaps a Uint8Array
                    assert(typeof number.length === 'number');
                    if (number.length <= 0) {
                        this.words = [0];
                        this.length = 1;
                        return this;
                    }

                    this.length = Math.ceil(number.length / 3);
                    this.words = new Array(this.length);
                    for (var i = 0; i < this.length; i++) {
                        this.words[i] = 0;
                    }

                    var j, w;
                    var off = 0;
                    if (endian === 'be') {
                        for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
                            w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
                            this.words[j] |= (w << off) & 0x3ffffff;
                            this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
                            off += 24;
                            if (off >= 26) {
                                off -= 26;
                                j++;
                            }
                        }
                    } else if (endian === 'le') {
                        for (i = 0, j = 0; i < number.length; i += 3) {
                            w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
                            this.words[j] |= (w << off) & 0x3ffffff;
                            this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
                            off += 24;
                            if (off >= 26) {
                                off -= 26;
                                j++;
                            }
                        }
                    }
                    return this.strip();
                };

                function parseHex(str, start, end) {
                    var r = 0;
                    var len = Math.min(str.length, end);
                    for (var i = start; i < len; i++) {
                        var c = str.charCodeAt(i) - 48;

                        r <<= 4;

                        // 'a' - 'f'
                        if (c >= 49 && c <= 54) {
                            r |= c - 49 + 0xa;

                            // 'A' - 'F'
                        } else if (c >= 17 && c <= 22) {
                            r |= c - 17 + 0xa;

                            // '0' - '9'
                        } else {
                            r |= c & 0xf;
                        }
                    }
                    return r;
                }

                BN.prototype._parseHex = function _parseHex(number, start) {
                    // Create possibly bigger array to ensure that it fits the number
                    this.length = Math.ceil((number.length - start) / 6);
                    this.words = new Array(this.length);
                    for (var i = 0; i < this.length; i++) {
                        this.words[i] = 0;
                    }

                    var j, w;
                    // Scan 24-bit chunks and add them to the number
                    var off = 0;
                    for (i = number.length - 6, j = 0; i >= start; i -= 6) {
                        w = parseHex(number, i, i + 6);
                        this.words[j] |= (w << off) & 0x3ffffff;
                        // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
                        this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
                        off += 24;
                        if (off >= 26) {
                            off -= 26;
                            j++;
                        }
                    }
                    if (i + 6 !== start) {
                        w = parseHex(number, start, i + 6);
                        this.words[j] |= (w << off) & 0x3ffffff;
                        this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
                    }
                    this.strip();
                };

                function parseBase(str, start, end, mul) {
                    var r = 0;
                    var len = Math.min(str.length, end);
                    for (var i = start; i < len; i++) {
                        var c = str.charCodeAt(i) - 48;

                        r *= mul;

                        // 'a'
                        if (c >= 49) {
                            r += c - 49 + 0xa;

                            // 'A'
                        } else if (c >= 17) {
                            r += c - 17 + 0xa;

                            // '0' - '9'
                        } else {
                            r += c;
                        }
                    }
                    return r;
                }

                BN.prototype._parseBase = function _parseBase(number, base, start) {
                    // Initialize as zero
                    this.words = [0];
                    this.length = 1;

                    // Find length of limb in base
                    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
                        limbLen++;
                    }
                    limbLen--;
                    limbPow = (limbPow / base) | 0;

                    var total = number.length - start;
                    var mod = total % limbLen;
                    var end = Math.min(total, total - mod) + start;

                    var word = 0;
                    for (var i = start; i < end; i += limbLen) {
                        word = parseBase(number, i, i + limbLen, base);

                        this.imuln(limbPow);
                        if (this.words[0] + word < 0x4000000) {
                            this.words[0] += word;
                        } else {
                            this._iaddn(word);
                        }
                    }

                    if (mod !== 0) {
                        var pow = 1;
                        word = parseBase(number, i, number.length, base);

                        for (i = 0; i < mod; i++) {
                            pow *= base;
                        }

                        this.imuln(pow);
                        if (this.words[0] + word < 0x4000000) {
                            this.words[0] += word;
                        } else {
                            this._iaddn(word);
                        }
                    }
                };

                BN.prototype.copy = function copy(dest) {
                    dest.words = new Array(this.length);
                    for (var i = 0; i < this.length; i++) {
                        dest.words[i] = this.words[i];
                    }
                    dest.length = this.length;
                    dest.negative = this.negative;
                    dest.red = this.red;
                };

                BN.prototype.clone = function clone() {
                    var r = new BN(null);
                    this.copy(r);
                    return r;
                };

                BN.prototype._expand = function _expand(size) {
                    while (this.length < size) {
                        this.words[this.length++] = 0;
                    }
                    return this;
                };

                // Remove leading `0` from `this`
                BN.prototype.strip = function strip() {
                    while (this.length > 1 && this.words[this.length - 1] === 0) {
                        this.length--;
                    }
                    return this._normSign();
                };

                BN.prototype._normSign = function _normSign() {
                    // -0 = 0
                    if (this.length === 1 && this.words[0] === 0) {
                        this.negative = 0;
                    }
                    return this;
                };

                BN.prototype.inspect = function inspect() {
                    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
                };

                /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

                var zeros = [
                    '',
                    '0',
                    '00',
                    '000',
                    '0000',
                    '00000',
                    '000000',
                    '0000000',
                    '00000000',
                    '000000000',
                    '0000000000',
                    '00000000000',
                    '000000000000',
                    '0000000000000',
                    '00000000000000',
                    '000000000000000',
                    '0000000000000000',
                    '00000000000000000',
                    '000000000000000000',
                    '0000000000000000000',
                    '00000000000000000000',
                    '000000000000000000000',
                    '0000000000000000000000',
                    '00000000000000000000000',
                    '000000000000000000000000',
                    '0000000000000000000000000'
                ];

                var groupSizes = [
                    0, 0,
                    25, 16, 12, 11, 10, 9, 8,
                    8, 7, 7, 7, 7, 6, 6,
                    6, 6, 6, 6, 6, 5, 5,
                    5, 5, 5, 5, 5, 5, 5,
                    5, 5, 5, 5, 5, 5, 5
                ];

                var groupBases = [
                    0, 0,
                    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
                    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
                    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
                    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
                    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
                ];

                BN.prototype.toString = function toString(base, padding) {
                    base = base || 10;
                    padding = padding | 0 || 1;

                    var out;
                    if (base === 16 || base === 'hex') {
                        out = '';
                        var off = 0;
                        var carry = 0;
                        for (var i = 0; i < this.length; i++) {
                            var w = this.words[i];
                            var word = (((w << off) | carry) & 0xffffff).toString(16);
                            carry = (w >>> (24 - off)) & 0xffffff;
                            if (carry !== 0 || i !== this.length - 1) {
                                out = zeros[6 - word.length] + word + out;
                            } else {
                                out = word + out;
                            }
                            off += 2;
                            if (off >= 26) {
                                off -= 26;
                                i--;
                            }
                        }
                        if (carry !== 0) {
                            out = carry.toString(16) + out;
                        }
                        while (out.length % padding !== 0) {
                            out = '0' + out;
                        }
                        if (this.negative !== 0) {
                            out = '-' + out;
                        }
                        return out;
                    }

                    if (base === (base | 0) && base >= 2 && base <= 36) {
                        // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
                        var groupSize = groupSizes[base];
                        // var groupBase = Math.pow(base, groupSize);
                        var groupBase = groupBases[base];
                        out = '';
                        var c = this.clone();
                        c.negative = 0;
                        while (!c.isZero()) {
                            var r = c.modn(groupBase).toString(base);
                            c = c.idivn(groupBase);

                            if (!c.isZero()) {
                                out = zeros[groupSize - r.length] + r + out;
                            } else {
                                out = r + out;
                            }
                        }
                        if (this.isZero()) {
                            out = '0' + out;
                        }
                        while (out.length % padding !== 0) {
                            out = '0' + out;
                        }
                        if (this.negative !== 0) {
                            out = '-' + out;
                        }
                        return out;
                    }

                    assert(false, 'Base should be between 2 and 36');
                };

                BN.prototype.toNumber = function toNumber() {
                    var ret = this.words[0];
                    if (this.length === 2) {
                        ret += this.words[1] * 0x4000000;
                    } else if (this.length === 3 && this.words[2] === 0x01) {
                        // NOTE: at this stage it is known that the top bit is set
                        ret += 0x10000000000000 + (this.words[1] * 0x4000000);
                    } else if (this.length > 2) {
                        assert(false, 'Number can only safely store up to 53 bits');
                    }
                    return (this.negative !== 0) ? -ret : ret;
                };

                BN.prototype.toJSON = function toJSON() {
                    return this.toString(16);
                };

                BN.prototype.toBuffer = function toBuffer(endian, length) {
                    assert(typeof Buffer !== 'undefined');
                    return this.toArrayLike(Buffer, endian, length);
                };

                BN.prototype.toArray = function toArray(endian, length) {
                    return this.toArrayLike(Array, endian, length);
                };

                BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
                    var byteLength = this.byteLength();
                    var reqLength = length || Math.max(1, byteLength);
                    assert(byteLength <= reqLength, 'byte array longer than desired length');
                    assert(reqLength > 0, 'Requested array length <= 0');

                    this.strip();
                    var littleEndian = endian === 'le';
                    var res = new ArrayType(reqLength);

                    var b, i;
                    var q = this.clone();
                    if (!littleEndian) {
                        // Assume big-endian
                        for (i = 0; i < reqLength - byteLength; i++) {
                            res[i] = 0;
                        }

                        for (i = 0; !q.isZero(); i++) {
                            b = q.andln(0xff);
                            q.iushrn(8);

                            res[reqLength - i - 1] = b;
                        }
                    } else {
                        for (i = 0; !q.isZero(); i++) {
                            b = q.andln(0xff);
                            q.iushrn(8);

                            res[i] = b;
                        }

                        for (; i < reqLength; i++) {
                            res[i] = 0;
                        }
                    }

                    return res;
                };

                if (Math.clz32) {
                    BN.prototype._countBits = function _countBits(w) {
                        return 32 - Math.clz32(w);
                    };
                } else {
                    BN.prototype._countBits = function _countBits(w) {
                        var t = w;
                        var r = 0;
                        if (t >= 0x1000) {
                            r += 13;
                            t >>>= 13;
                        }
                        if (t >= 0x40) {
                            r += 7;
                            t >>>= 7;
                        }
                        if (t >= 0x8) {
                            r += 4;
                            t >>>= 4;
                        }
                        if (t >= 0x02) {
                            r += 2;
                            t >>>= 2;
                        }
                        return r + t;
                    };
                }

                BN.prototype._zeroBits = function _zeroBits(w) {
                    // Short-cut
                    if (w === 0) return 26;

                    var t = w;
                    var r = 0;
                    if ((t & 0x1fff) === 0) {
                        r += 13;
                        t >>>= 13;
                    }
                    if ((t & 0x7f) === 0) {
                        r += 7;
                        t >>>= 7;
                    }
                    if ((t & 0xf) === 0) {
                        r += 4;
                        t >>>= 4;
                    }
                    if ((t & 0x3) === 0) {
                        r += 2;
                        t >>>= 2;
                    }
                    if ((t & 0x1) === 0) {
                        r++;
                    }
                    return r;
                };

                // Return number of used bits in a BN
                BN.prototype.bitLength = function bitLength() {
                    var w = this.words[this.length - 1];
                    var hi = this._countBits(w);
                    return (this.length - 1) * 26 + hi;
                };

                function toBitArray(num) {
                    var w = new Array(num.bitLength());

                    for (var bit = 0; bit < w.length; bit++) {
                        var off = (bit / 26) | 0;
                        var wbit = bit % 26;

                        w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
                    }

                    return w;
                }

                // Number of trailing zero bits
                BN.prototype.zeroBits = function zeroBits() {
                    if (this.isZero()) return 0;

                    var r = 0;
                    for (var i = 0; i < this.length; i++) {
                        var b = this._zeroBits(this.words[i]);
                        r += b;
                        if (b !== 26) break;
                    }
                    return r;
                };

                BN.prototype.byteLength = function byteLength() {
                    return Math.ceil(this.bitLength() / 8);
                };

                BN.prototype.toTwos = function toTwos(width) {
                    if (this.negative !== 0) {
                        return this.abs().inotn(width).iaddn(1);
                    }
                    return this.clone();
                };

                BN.prototype.fromTwos = function fromTwos(width) {
                    if (this.testn(width - 1)) {
                        return this.notn(width).iaddn(1).ineg();
                    }
                    return this.clone();
                };

                BN.prototype.isNeg = function isNeg() {
                    return this.negative !== 0;
                };

                // Return negative clone of `this`
                BN.prototype.neg = function neg() {
                    return this.clone().ineg();
                };

                BN.prototype.ineg = function ineg() {
                    if (!this.isZero()) {
                        this.negative ^= 1;
                    }

                    return this;
                };

                // Or `num` with `this` in-place
                BN.prototype.iuor = function iuor(num) {
                    while (this.length < num.length) {
                        this.words[this.length++] = 0;
                    }

                    for (var i = 0; i < num.length; i++) {
                        this.words[i] = this.words[i] | num.words[i];
                    }

                    return this.strip();
                };

                BN.prototype.ior = function ior(num) {
                    assert((this.negative | num.negative) === 0);
                    return this.iuor(num);
                };

                // Or `num` with `this`
                BN.prototype.or = function or(num) {
                    if (this.length > num.length) return this.clone().ior(num);
                    return num.clone().ior(this);
                };

                BN.prototype.uor = function uor(num) {
                    if (this.length > num.length) return this.clone().iuor(num);
                    return num.clone().iuor(this);
                };

                // And `num` with `this` in-place
                BN.prototype.iuand = function iuand(num) {
                    // b = min-length(num, this)
                    var b;
                    if (this.length > num.length) {
                        b = num;
                    } else {
                        b = this;
                    }

                    for (var i = 0; i < b.length; i++) {
                        this.words[i] = this.words[i] & num.words[i];
                    }

                    this.length = b.length;

                    return this.strip();
                };

                BN.prototype.iand = function iand(num) {
                    assert((this.negative | num.negative) === 0);
                    return this.iuand(num);
                };

                // And `num` with `this`
                BN.prototype.and = function and(num) {
                    if (this.length > num.length) return this.clone().iand(num);
                    return num.clone().iand(this);
                };

                BN.prototype.uand = function uand(num) {
                    if (this.length > num.length) return this.clone().iuand(num);
                    return num.clone().iuand(this);
                };

                // Xor `num` with `this` in-place
                BN.prototype.iuxor = function iuxor(num) {
                    // a.length > b.length
                    var a;
                    var b;
                    if (this.length > num.length) {
                        a = this;
                        b = num;
                    } else {
                        a = num;
                        b = this;
                    }

                    for (var i = 0; i < b.length; i++) {
                        this.words[i] = a.words[i] ^ b.words[i];
                    }

                    if (this !== a) {
                        for (; i < a.length; i++) {
                            this.words[i] = a.words[i];
                        }
                    }

                    this.length = a.length;

                    return this.strip();
                };

                BN.prototype.ixor = function ixor(num) {
                    assert((this.negative | num.negative) === 0);
                    return this.iuxor(num);
                };

                // Xor `num` with `this`
                BN.prototype.xor = function xor(num) {
                    if (this.length > num.length) return this.clone().ixor(num);
                    return num.clone().ixor(this);
                };

                BN.prototype.uxor = function uxor(num) {
                    if (this.length > num.length) return this.clone().iuxor(num);
                    return num.clone().iuxor(this);
                };

                // Not ``this`` with ``width`` bitwidth
                BN.prototype.inotn = function inotn(width) {
                    assert(typeof width === 'number' && width >= 0);

                    var bytesNeeded = Math.ceil(width / 26) | 0;
                    var bitsLeft = width % 26;

                    // Extend the buffer with leading zeroes
                    this._expand(bytesNeeded);

                    if (bitsLeft > 0) {
                        bytesNeeded--;
                    }

                    // Handle complete words
                    for (var i = 0; i < bytesNeeded; i++) {
                        this.words[i] = ~this.words[i] & 0x3ffffff;
                    }

                    // Handle the residue
                    if (bitsLeft > 0) {
                        this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
                    }

                    // And remove leading zeroes
                    return this.strip();
                };

                BN.prototype.notn = function notn(width) {
                    return this.clone().inotn(width);
                };

                // Set `bit` of `this`
                BN.prototype.setn = function setn(bit, val) {
                    assert(typeof bit === 'number' && bit >= 0);

                    var off = (bit / 26) | 0;
                    var wbit = bit % 26;

                    this._expand(off + 1);

                    if (val) {
                        this.words[off] = this.words[off] | (1 << wbit);
                    } else {
                        this.words[off] = this.words[off] & ~(1 << wbit);
                    }

                    return this.strip();
                };

                // Add `num` to `this` in-place
                BN.prototype.iadd = function iadd(num) {
                    var r;

                    // negative + positive
                    if (this.negative !== 0 && num.negative === 0) {
                        this.negative = 0;
                        r = this.isub(num);
                        this.negative ^= 1;
                        return this._normSign();

                        // positive + negative
                    } else if (this.negative === 0 && num.negative !== 0) {
                        num.negative = 0;
                        r = this.isub(num);
                        num.negative = 1;
                        return r._normSign();
                    }

                    // a.length > b.length
                    var a, b;
                    if (this.length > num.length) {
                        a = this;
                        b = num;
                    } else {
                        a = num;
                        b = this;
                    }

                    var carry = 0;
                    for (var i = 0; i < b.length; i++) {
                        r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
                        this.words[i] = r & 0x3ffffff;
                        carry = r >>> 26;
                    }
                    for (; carry !== 0 && i < a.length; i++) {
                        r = (a.words[i] | 0) + carry;
                        this.words[i] = r & 0x3ffffff;
                        carry = r >>> 26;
                    }

                    this.length = a.length;
                    if (carry !== 0) {
                        this.words[this.length] = carry;
                        this.length++;
                        // Copy the rest of the words
                    } else if (a !== this) {
                        for (; i < a.length; i++) {
                            this.words[i] = a.words[i];
                        }
                    }

                    return this;
                };

                // Add `num` to `this`
                BN.prototype.add = function add(num) {
                    var res;
                    if (num.negative !== 0 && this.negative === 0) {
                        num.negative = 0;
                        res = this.sub(num);
                        num.negative ^= 1;
                        return res;
                    } else if (num.negative === 0 && this.negative !== 0) {
                        this.negative = 0;
                        res = num.sub(this);
                        this.negative = 1;
                        return res;
                    }

                    if (this.length > num.length) return this.clone().iadd(num);

                    return num.clone().iadd(this);
                };

                // Subtract `num` from `this` in-place
                BN.prototype.isub = function isub(num) {
                    // this - (-num) = this + num
                    if (num.negative !== 0) {
                        num.negative = 0;
                        var r = this.iadd(num);
                        num.negative = 1;
                        return r._normSign();

                        // -this - num = -(this + num)
                    } else if (this.negative !== 0) {
                        this.negative = 0;
                        this.iadd(num);
                        this.negative = 1;
                        return this._normSign();
                    }

                    // At this point both numbers are positive
                    var cmp = this.cmp(num);

                    // Optimization - zeroify
                    if (cmp === 0) {
                        this.negative = 0;
                        this.length = 1;
                        this.words[0] = 0;
                        return this;
                    }

                    // a > b
                    var a, b;
                    if (cmp > 0) {
                        a = this;
                        b = num;
                    } else {
                        a = num;
                        b = this;
                    }

                    var carry = 0;
                    for (var i = 0; i < b.length; i++) {
                        r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
                        carry = r >> 26;
                        this.words[i] = r & 0x3ffffff;
                    }
                    for (; carry !== 0 && i < a.length; i++) {
                        r = (a.words[i] | 0) + carry;
                        carry = r >> 26;
                        this.words[i] = r & 0x3ffffff;
                    }

                    // Copy rest of the words
                    if (carry === 0 && i < a.length && a !== this) {
                        for (; i < a.length; i++) {
                            this.words[i] = a.words[i];
                        }
                    }

                    this.length = Math.max(this.length, i);

                    if (a !== this) {
                        this.negative = 1;
                    }

                    return this.strip();
                };

                // Subtract `num` from `this`
                BN.prototype.sub = function sub(num) {
                    return this.clone().isub(num);
                };

                function smallMulTo(self, num, out) {
                    out.negative = num.negative ^ self.negative;
                    var len = (self.length + num.length) | 0;
                    out.length = len;
                    len = (len - 1) | 0;

                    // Peel one iteration (compiler can't do it, because of code complexity)
                    var a = self.words[0] | 0;
                    var b = num.words[0] | 0;
                    var r = a * b;

                    var lo = r & 0x3ffffff;
                    var carry = (r / 0x4000000) | 0;
                    out.words[0] = lo;

                    for (var k = 1; k < len; k++) {
                        // Sum all words with the same `i + j = k` and accumulate `ncarry`,
                        // note that ncarry could be >= 0x3ffffff
                        var ncarry = carry >>> 26;
                        var rword = carry & 0x3ffffff;
                        var maxJ = Math.min(k, num.length - 1);
                        for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
                            var i = (k - j) | 0;
                            a = self.words[i] | 0;
                            b = num.words[j] | 0;
                            r = a * b + rword;
                            ncarry += (r / 0x4000000) | 0;
                            rword = r & 0x3ffffff;
                        }
                        out.words[k] = rword | 0;
                        carry = ncarry | 0;
                    }
                    if (carry !== 0) {
                        out.words[k] = carry | 0;
                    } else {
                        out.length--;
                    }

                    return out.strip();
                }

                // TODO(indutny): it may be reasonable to omit it for users who don't need
                // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
                // multiplication (like elliptic secp256k1).
                var comb10MulTo = function comb10MulTo(self, num, out) {
                    var a = self.words;
                    var b = num.words;
                    var o = out.words;
                    var c = 0;
                    var lo;
                    var mid;
                    var hi;
                    var a0 = a[0] | 0;
                    var al0 = a0 & 0x1fff;
                    var ah0 = a0 >>> 13;
                    var a1 = a[1] | 0;
                    var al1 = a1 & 0x1fff;
                    var ah1 = a1 >>> 13;
                    var a2 = a[2] | 0;
                    var al2 = a2 & 0x1fff;
                    var ah2 = a2 >>> 13;
                    var a3 = a[3] | 0;
                    var al3 = a3 & 0x1fff;
                    var ah3 = a3 >>> 13;
                    var a4 = a[4] | 0;
                    var al4 = a4 & 0x1fff;
                    var ah4 = a4 >>> 13;
                    var a5 = a[5] | 0;
                    var al5 = a5 & 0x1fff;
                    var ah5 = a5 >>> 13;
                    var a6 = a[6] | 0;
                    var al6 = a6 & 0x1fff;
                    var ah6 = a6 >>> 13;
                    var a7 = a[7] | 0;
                    var al7 = a7 & 0x1fff;
                    var ah7 = a7 >>> 13;
                    var a8 = a[8] | 0;
                    var al8 = a8 & 0x1fff;
                    var ah8 = a8 >>> 13;
                    var a9 = a[9] | 0;
                    var al9 = a9 & 0x1fff;
                    var ah9 = a9 >>> 13;
                    var b0 = b[0] | 0;
                    var bl0 = b0 & 0x1fff;
                    var bh0 = b0 >>> 13;
                    var b1 = b[1] | 0;
                    var bl1 = b1 & 0x1fff;
                    var bh1 = b1 >>> 13;
                    var b2 = b[2] | 0;
                    var bl2 = b2 & 0x1fff;
                    var bh2 = b2 >>> 13;
                    var b3 = b[3] | 0;
                    var bl3 = b3 & 0x1fff;
                    var bh3 = b3 >>> 13;
                    var b4 = b[4] | 0;
                    var bl4 = b4 & 0x1fff;
                    var bh4 = b4 >>> 13;
                    var b5 = b[5] | 0;
                    var bl5 = b5 & 0x1fff;
                    var bh5 = b5 >>> 13;
                    var b6 = b[6] | 0;
                    var bl6 = b6 & 0x1fff;
                    var bh6 = b6 >>> 13;
                    var b7 = b[7] | 0;
                    var bl7 = b7 & 0x1fff;
                    var bh7 = b7 >>> 13;
                    var b8 = b[8] | 0;
                    var bl8 = b8 & 0x1fff;
                    var bh8 = b8 >>> 13;
                    var b9 = b[9] | 0;
                    var bl9 = b9 & 0x1fff;
                    var bh9 = b9 >>> 13;

                    out.negative = self.negative ^ num.negative;
                    out.length = 19;
                    /* k = 0 */
                    lo = Math.imul(al0, bl0);
                    mid = Math.imul(al0, bh0);
                    mid = (mid + Math.imul(ah0, bl0)) | 0;
                    hi = Math.imul(ah0, bh0);
                    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
                    w0 &= 0x3ffffff;
                    /* k = 1 */
                    lo = Math.imul(al1, bl0);
                    mid = Math.imul(al1, bh0);
                    mid = (mid + Math.imul(ah1, bl0)) | 0;
                    hi = Math.imul(ah1, bh0);
                    lo = (lo + Math.imul(al0, bl1)) | 0;
                    mid = (mid + Math.imul(al0, bh1)) | 0;
                    mid = (mid + Math.imul(ah0, bl1)) | 0;
                    hi = (hi + Math.imul(ah0, bh1)) | 0;
                    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
                    w1 &= 0x3ffffff;
                    /* k = 2 */
                    lo = Math.imul(al2, bl0);
                    mid = Math.imul(al2, bh0);
                    mid = (mid + Math.imul(ah2, bl0)) | 0;
                    hi = Math.imul(ah2, bh0);
                    lo = (lo + Math.imul(al1, bl1)) | 0;
                    mid = (mid + Math.imul(al1, bh1)) | 0;
                    mid = (mid + Math.imul(ah1, bl1)) | 0;
                    hi = (hi + Math.imul(ah1, bh1)) | 0;
                    lo = (lo + Math.imul(al0, bl2)) | 0;
                    mid = (mid + Math.imul(al0, bh2)) | 0;
                    mid = (mid + Math.imul(ah0, bl2)) | 0;
                    hi = (hi + Math.imul(ah0, bh2)) | 0;
                    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
                    w2 &= 0x3ffffff;
                    /* k = 3 */
                    lo = Math.imul(al3, bl0);
                    mid = Math.imul(al3, bh0);
                    mid = (mid + Math.imul(ah3, bl0)) | 0;
                    hi = Math.imul(ah3, bh0);
                    lo = (lo + Math.imul(al2, bl1)) | 0;
                    mid = (mid + Math.imul(al2, bh1)) | 0;
                    mid = (mid + Math.imul(ah2, bl1)) | 0;
                    hi = (hi + Math.imul(ah2, bh1)) | 0;
                    lo = (lo + Math.imul(al1, bl2)) | 0;
                    mid = (mid + Math.imul(al1, bh2)) | 0;
                    mid = (mid + Math.imul(ah1, bl2)) | 0;
                    hi = (hi + Math.imul(ah1, bh2)) | 0;
                    lo = (lo + Math.imul(al0, bl3)) | 0;
                    mid = (mid + Math.imul(al0, bh3)) | 0;
                    mid = (mid + Math.imul(ah0, bl3)) | 0;
                    hi = (hi + Math.imul(ah0, bh3)) | 0;
                    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
                    w3 &= 0x3ffffff;
                    /* k = 4 */
                    lo = Math.imul(al4, bl0);
                    mid = Math.imul(al4, bh0);
                    mid = (mid + Math.imul(ah4, bl0)) | 0;
                    hi = Math.imul(ah4, bh0);
                    lo = (lo + Math.imul(al3, bl1)) | 0;
                    mid = (mid + Math.imul(al3, bh1)) | 0;
                    mid = (mid + Math.imul(ah3, bl1)) | 0;
                    hi = (hi + Math.imul(ah3, bh1)) | 0;
                    lo = (lo + Math.imul(al2, bl2)) | 0;
                    mid = (mid + Math.imul(al2, bh2)) | 0;
                    mid = (mid + Math.imul(ah2, bl2)) | 0;
                    hi = (hi + Math.imul(ah2, bh2)) | 0;
                    lo = (lo + Math.imul(al1, bl3)) | 0;
                    mid = (mid + Math.imul(al1, bh3)) | 0;
                    mid = (mid + Math.imul(ah1, bl3)) | 0;
                    hi = (hi + Math.imul(ah1, bh3)) | 0;
                    lo = (lo + Math.imul(al0, bl4)) | 0;
                    mid = (mid + Math.imul(al0, bh4)) | 0;
                    mid = (mid + Math.imul(ah0, bl4)) | 0;
                    hi = (hi + Math.imul(ah0, bh4)) | 0;
                    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
                    w4 &= 0x3ffffff;
                    /* k = 5 */
                    lo = Math.imul(al5, bl0);
                    mid = Math.imul(al5, bh0);
                    mid = (mid + Math.imul(ah5, bl0)) | 0;
                    hi = Math.imul(ah5, bh0);
                    lo = (lo + Math.imul(al4, bl1)) | 0;
                    mid = (mid + Math.imul(al4, bh1)) | 0;
                    mid = (mid + Math.imul(ah4, bl1)) | 0;
                    hi = (hi + Math.imul(ah4, bh1)) | 0;
                    lo = (lo + Math.imul(al3, bl2)) | 0;
                    mid = (mid + Math.imul(al3, bh2)) | 0;
                    mid = (mid + Math.imul(ah3, bl2)) | 0;
                    hi = (hi + Math.imul(ah3, bh2)) | 0;
                    lo = (lo + Math.imul(al2, bl3)) | 0;
                    mid = (mid + Math.imul(al2, bh3)) | 0;
                    mid = (mid + Math.imul(ah2, bl3)) | 0;
                    hi = (hi + Math.imul(ah2, bh3)) | 0;
                    lo = (lo + Math.imul(al1, bl4)) | 0;
                    mid = (mid + Math.imul(al1, bh4)) | 0;
                    mid = (mid + Math.imul(ah1, bl4)) | 0;
                    hi = (hi + Math.imul(ah1, bh4)) | 0;
                    lo = (lo + Math.imul(al0, bl5)) | 0;
                    mid = (mid + Math.imul(al0, bh5)) | 0;
                    mid = (mid + Math.imul(ah0, bl5)) | 0;
                    hi = (hi + Math.imul(ah0, bh5)) | 0;
                    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
                    w5 &= 0x3ffffff;
                    /* k = 6 */
                    lo = Math.imul(al6, bl0);
                    mid = Math.imul(al6, bh0);
                    mid = (mid + Math.imul(ah6, bl0)) | 0;
                    hi = Math.imul(ah6, bh0);
                    lo = (lo + Math.imul(al5, bl1)) | 0;
                    mid = (mid + Math.imul(al5, bh1)) | 0;
                    mid = (mid + Math.imul(ah5, bl1)) | 0;
                    hi = (hi + Math.imul(ah5, bh1)) | 0;
                    lo = (lo + Math.imul(al4, bl2)) | 0;
                    mid = (mid + Math.imul(al4, bh2)) | 0;
                    mid = (mid + Math.imul(ah4, bl2)) | 0;
                    hi = (hi + Math.imul(ah4, bh2)) | 0;
                    lo = (lo + Math.imul(al3, bl3)) | 0;
                    mid = (mid + Math.imul(al3, bh3)) | 0;
                    mid = (mid + Math.imul(ah3, bl3)) | 0;
                    hi = (hi + Math.imul(ah3, bh3)) | 0;
                    lo = (lo + Math.imul(al2, bl4)) | 0;
                    mid = (mid + Math.imul(al2, bh4)) | 0;
                    mid = (mid + Math.imul(ah2, bl4)) | 0;
                    hi = (hi + Math.imul(ah2, bh4)) | 0;
                    lo = (lo + Math.imul(al1, bl5)) | 0;
                    mid = (mid + Math.imul(al1, bh5)) | 0;
                    mid = (mid + Math.imul(ah1, bl5)) | 0;
                    hi = (hi + Math.imul(ah1, bh5)) | 0;
                    lo = (lo + Math.imul(al0, bl6)) | 0;
                    mid = (mid + Math.imul(al0, bh6)) | 0;
                    mid = (mid + Math.imul(ah0, bl6)) | 0;
                    hi = (hi + Math.imul(ah0, bh6)) | 0;
                    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
                    w6 &= 0x3ffffff;
                    /* k = 7 */
                    lo = Math.imul(al7, bl0);
                    mid = Math.imul(al7, bh0);
                    mid = (mid + Math.imul(ah7, bl0)) | 0;
                    hi = Math.imul(ah7, bh0);
                    lo = (lo + Math.imul(al6, bl1)) | 0;
                    mid = (mid + Math.imul(al6, bh1)) | 0;
                    mid = (mid + Math.imul(ah6, bl1)) | 0;
                    hi = (hi + Math.imul(ah6, bh1)) | 0;
                    lo = (lo + Math.imul(al5, bl2)) | 0;
                    mid = (mid + Math.imul(al5, bh2)) | 0;
                    mid = (mid + Math.imul(ah5, bl2)) | 0;
                    hi = (hi + Math.imul(ah5, bh2)) | 0;
                    lo = (lo + Math.imul(al4, bl3)) | 0;
                    mid = (mid + Math.imul(al4, bh3)) | 0;
                    mid = (mid + Math.imul(ah4, bl3)) | 0;
                    hi = (hi + Math.imul(ah4, bh3)) | 0;
                    lo = (lo + Math.imul(al3, bl4)) | 0;
                    mid = (mid + Math.imul(al3, bh4)) | 0;
                    mid = (mid + Math.imul(ah3, bl4)) | 0;
                    hi = (hi + Math.imul(ah3, bh4)) | 0;
                    lo = (lo + Math.imul(al2, bl5)) | 0;
                    mid = (mid + Math.imul(al2, bh5)) | 0;
                    mid = (mid + Math.imul(ah2, bl5)) | 0;
                    hi = (hi + Math.imul(ah2, bh5)) | 0;
                    lo = (lo + Math.imul(al1, bl6)) | 0;
                    mid = (mid + Math.imul(al1, bh6)) | 0;
                    mid = (mid + Math.imul(ah1, bl6)) | 0;
                    hi = (hi + Math.imul(ah1, bh6)) | 0;
                    lo = (lo + Math.imul(al0, bl7)) | 0;
                    mid = (mid + Math.imul(al0, bh7)) | 0;
                    mid = (mid + Math.imul(ah0, bl7)) | 0;
                    hi = (hi + Math.imul(ah0, bh7)) | 0;
                    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
                    w7 &= 0x3ffffff;
                    /* k = 8 */
                    lo = Math.imul(al8, bl0);
                    mid = Math.imul(al8, bh0);
                    mid = (mid + Math.imul(ah8, bl0)) | 0;
                    hi = Math.imul(ah8, bh0);
                    lo = (lo + Math.imul(al7, bl1)) | 0;
                    mid = (mid + Math.imul(al7, bh1)) | 0;
                    mid = (mid + Math.imul(ah7, bl1)) | 0;
                    hi = (hi + Math.imul(ah7, bh1)) | 0;
                    lo = (lo + Math.imul(al6, bl2)) | 0;
                    mid = (mid + Math.imul(al6, bh2)) | 0;
                    mid = (mid + Math.imul(ah6, bl2)) | 0;
                    hi = (hi + Math.imul(ah6, bh2)) | 0;
                    lo = (lo + Math.imul(al5, bl3)) | 0;
                    mid = (mid + Math.imul(al5, bh3)) | 0;
                    mid = (mid + Math.imul(ah5, bl3)) | 0;
                    hi = (hi + Math.imul(ah5, bh3)) | 0;
                    lo = (lo + Math.imul(al4, bl4)) | 0;
                    mid = (mid + Math.imul(al4, bh4)) | 0;
                    mid = (mid + Math.imul(ah4, bl4)) | 0;
                    hi = (hi + Math.imul(ah4, bh4)) | 0;
                    lo = (lo + Math.imul(al3, bl5)) | 0;
                    mid = (mid + Math.imul(al3, bh5)) | 0;
                    mid = (mid + Math.imul(ah3, bl5)) | 0;
                    hi = (hi + Math.imul(ah3, bh5)) | 0;
                    lo = (lo + Math.imul(al2, bl6)) | 0;
                    mid = (mid + Math.imul(al2, bh6)) | 0;
                    mid = (mid + Math.imul(ah2, bl6)) | 0;
                    hi = (hi + Math.imul(ah2, bh6)) | 0;
                    lo = (lo + Math.imul(al1, bl7)) | 0;
                    mid = (mid + Math.imul(al1, bh7)) | 0;
                    mid = (mid + Math.imul(ah1, bl7)) | 0;
                    hi = (hi + Math.imul(ah1, bh7)) | 0;
                    lo = (lo + Math.imul(al0, bl8)) | 0;
                    mid = (mid + Math.imul(al0, bh8)) | 0;
                    mid = (mid + Math.imul(ah0, bl8)) | 0;
                    hi = (hi + Math.imul(ah0, bh8)) | 0;
                    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
                    w8 &= 0x3ffffff;
                    /* k = 9 */
                    lo = Math.imul(al9, bl0);
                    mid = Math.imul(al9, bh0);
                    mid = (mid + Math.imul(ah9, bl0)) | 0;
                    hi = Math.imul(ah9, bh0);
                    lo = (lo + Math.imul(al8, bl1)) | 0;
                    mid = (mid + Math.imul(al8, bh1)) | 0;
                    mid = (mid + Math.imul(ah8, bl1)) | 0;
                    hi = (hi + Math.imul(ah8, bh1)) | 0;
                    lo = (lo + Math.imul(al7, bl2)) | 0;
                    mid = (mid + Math.imul(al7, bh2)) | 0;
                    mid = (mid + Math.imul(ah7, bl2)) | 0;
                    hi = (hi + Math.imul(ah7, bh2)) | 0;
                    lo = (lo + Math.imul(al6, bl3)) | 0;
                    mid = (mid + Math.imul(al6, bh3)) | 0;
                    mid = (mid + Math.imul(ah6, bl3)) | 0;
                    hi = (hi + Math.imul(ah6, bh3)) | 0;
                    lo = (lo + Math.imul(al5, bl4)) | 0;
                    mid = (mid + Math.imul(al5, bh4)) | 0;
                    mid = (mid + Math.imul(ah5, bl4)) | 0;
                    hi = (hi + Math.imul(ah5, bh4)) | 0;
                    lo = (lo + Math.imul(al4, bl5)) | 0;
                    mid = (mid + Math.imul(al4, bh5)) | 0;
                    mid = (mid + Math.imul(ah4, bl5)) | 0;
                    hi = (hi + Math.imul(ah4, bh5)) | 0;
                    lo = (lo + Math.imul(al3, bl6)) | 0;
                    mid = (mid + Math.imul(al3, bh6)) | 0;
                    mid = (mid + Math.imul(ah3, bl6)) | 0;
                    hi = (hi + Math.imul(ah3, bh6)) | 0;
                    lo = (lo + Math.imul(al2, bl7)) | 0;
                    mid = (mid + Math.imul(al2, bh7)) | 0;
                    mid = (mid + Math.imul(ah2, bl7)) | 0;
                    hi = (hi + Math.imul(ah2, bh7)) | 0;
                    lo = (lo + Math.imul(al1, bl8)) | 0;
                    mid = (mid + Math.imul(al1, bh8)) | 0;
                    mid = (mid + Math.imul(ah1, bl8)) | 0;
                    hi = (hi + Math.imul(ah1, bh8)) | 0;
                    lo = (lo + Math.imul(al0, bl9)) | 0;
                    mid = (mid + Math.imul(al0, bh9)) | 0;
                    mid = (mid + Math.imul(ah0, bl9)) | 0;
                    hi = (hi + Math.imul(ah0, bh9)) | 0;
                    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
                    w9 &= 0x3ffffff;
                    /* k = 10 */
                    lo = Math.imul(al9, bl1);
                    mid = Math.imul(al9, bh1);
                    mid = (mid + Math.imul(ah9, bl1)) | 0;
                    hi = Math.imul(ah9, bh1);
                    lo = (lo + Math.imul(al8, bl2)) | 0;
                    mid = (mid + Math.imul(al8, bh2)) | 0;
                    mid = (mid + Math.imul(ah8, bl2)) | 0;
                    hi = (hi + Math.imul(ah8, bh2)) | 0;
                    lo = (lo + Math.imul(al7, bl3)) | 0;
                    mid = (mid + Math.imul(al7, bh3)) | 0;
                    mid = (mid + Math.imul(ah7, bl3)) | 0;
                    hi = (hi + Math.imul(ah7, bh3)) | 0;
                    lo = (lo + Math.imul(al6, bl4)) | 0;
                    mid = (mid + Math.imul(al6, bh4)) | 0;
                    mid = (mid + Math.imul(ah6, bl4)) | 0;
                    hi = (hi + Math.imul(ah6, bh4)) | 0;
                    lo = (lo + Math.imul(al5, bl5)) | 0;
                    mid = (mid + Math.imul(al5, bh5)) | 0;
                    mid = (mid + Math.imul(ah5, bl5)) | 0;
                    hi = (hi + Math.imul(ah5, bh5)) | 0;
                    lo = (lo + Math.imul(al4, bl6)) | 0;
                    mid = (mid + Math.imul(al4, bh6)) | 0;
                    mid = (mid + Math.imul(ah4, bl6)) | 0;
                    hi = (hi + Math.imul(ah4, bh6)) | 0;
                    lo = (lo + Math.imul(al3, bl7)) | 0;
                    mid = (mid + Math.imul(al3, bh7)) | 0;
                    mid = (mid + Math.imul(ah3, bl7)) | 0;
                    hi = (hi + Math.imul(ah3, bh7)) | 0;
                    lo = (lo + Math.imul(al2, bl8)) | 0;
                    mid = (mid + Math.imul(al2, bh8)) | 0;
                    mid = (mid + Math.imul(ah2, bl8)) | 0;
                    hi = (hi + Math.imul(ah2, bh8)) | 0;
                    lo = (lo + Math.imul(al1, bl9)) | 0;
                    mid = (mid + Math.imul(al1, bh9)) | 0;
                    mid = (mid + Math.imul(ah1, bl9)) | 0;
                    hi = (hi + Math.imul(ah1, bh9)) | 0;
                    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
                    w10 &= 0x3ffffff;
                    /* k = 11 */
                    lo = Math.imul(al9, bl2);
                    mid = Math.imul(al9, bh2);
                    mid = (mid + Math.imul(ah9, bl2)) | 0;
                    hi = Math.imul(ah9, bh2);
                    lo = (lo + Math.imul(al8, bl3)) | 0;
                    mid = (mid + Math.imul(al8, bh3)) | 0;
                    mid = (mid + Math.imul(ah8, bl3)) | 0;
                    hi = (hi + Math.imul(ah8, bh3)) | 0;
                    lo = (lo + Math.imul(al7, bl4)) | 0;
                    mid = (mid + Math.imul(al7, bh4)) | 0;
                    mid = (mid + Math.imul(ah7, bl4)) | 0;
                    hi = (hi + Math.imul(ah7, bh4)) | 0;
                    lo = (lo + Math.imul(al6, bl5)) | 0;
                    mid = (mid + Math.imul(al6, bh5)) | 0;
                    mid = (mid + Math.imul(ah6, bl5)) | 0;
                    hi = (hi + Math.imul(ah6, bh5)) | 0;
                    lo = (lo + Math.imul(al5, bl6)) | 0;
                    mid = (mid + Math.imul(al5, bh6)) | 0;
                    mid = (mid + Math.imul(ah5, bl6)) | 0;
                    hi = (hi + Math.imul(ah5, bh6)) | 0;
                    lo = (lo + Math.imul(al4, bl7)) | 0;
                    mid = (mid + Math.imul(al4, bh7)) | 0;
                    mid = (mid + Math.imul(ah4, bl7)) | 0;
                    hi = (hi + Math.imul(ah4, bh7)) | 0;
                    lo = (lo + Math.imul(al3, bl8)) | 0;
                    mid = (mid + Math.imul(al3, bh8)) | 0;
                    mid = (mid + Math.imul(ah3, bl8)) | 0;
                    hi = (hi + Math.imul(ah3, bh8)) | 0;
                    lo = (lo + Math.imul(al2, bl9)) | 0;
                    mid = (mid + Math.imul(al2, bh9)) | 0;
                    mid = (mid + Math.imul(ah2, bl9)) | 0;
                    hi = (hi + Math.imul(ah2, bh9)) | 0;
                    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
                    w11 &= 0x3ffffff;
                    /* k = 12 */
                    lo = Math.imul(al9, bl3);
                    mid = Math.imul(al9, bh3);
                    mid = (mid + Math.imul(ah9, bl3)) | 0;
                    hi = Math.imul(ah9, bh3);
                    lo = (lo + Math.imul(al8, bl4)) | 0;
                    mid = (mid + Math.imul(al8, bh4)) | 0;
                    mid = (mid + Math.imul(ah8, bl4)) | 0;
                    hi = (hi + Math.imul(ah8, bh4)) | 0;
                    lo = (lo + Math.imul(al7, bl5)) | 0;
                    mid = (mid + Math.imul(al7, bh5)) | 0;
                    mid = (mid + Math.imul(ah7, bl5)) | 0;
                    hi = (hi + Math.imul(ah7, bh5)) | 0;
                    lo = (lo + Math.imul(al6, bl6)) | 0;
                    mid = (mid + Math.imul(al6, bh6)) | 0;
                    mid = (mid + Math.imul(ah6, bl6)) | 0;
                    hi = (hi + Math.imul(ah6, bh6)) | 0;
                    lo = (lo + Math.imul(al5, bl7)) | 0;
                    mid = (mid + Math.imul(al5, bh7)) | 0;
                    mid = (mid + Math.imul(ah5, bl7)) | 0;
                    hi = (hi + Math.imul(ah5, bh7)) | 0;
                    lo = (lo + Math.imul(al4, bl8)) | 0;
                    mid = (mid + Math.imul(al4, bh8)) | 0;
                    mid = (mid + Math.imul(ah4, bl8)) | 0;
                    hi = (hi + Math.imul(ah4, bh8)) | 0;
                    lo = (lo + Math.imul(al3, bl9)) | 0;
                    mid = (mid + Math.imul(al3, bh9)) | 0;
                    mid = (mid + Math.imul(ah3, bl9)) | 0;
                    hi = (hi + Math.imul(ah3, bh9)) | 0;
                    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
                    w12 &= 0x3ffffff;
                    /* k = 13 */
                    lo = Math.imul(al9, bl4);
                    mid = Math.imul(al9, bh4);
                    mid = (mid + Math.imul(ah9, bl4)) | 0;
                    hi = Math.imul(ah9, bh4);
                    lo = (lo + Math.imul(al8, bl5)) | 0;
                    mid = (mid + Math.imul(al8, bh5)) | 0;
                    mid = (mid + Math.imul(ah8, bl5)) | 0;
                    hi = (hi + Math.imul(ah8, bh5)) | 0;
                    lo = (lo + Math.imul(al7, bl6)) | 0;
                    mid = (mid + Math.imul(al7, bh6)) | 0;
                    mid = (mid + Math.imul(ah7, bl6)) | 0;
                    hi = (hi + Math.imul(ah7, bh6)) | 0;
                    lo = (lo + Math.imul(al6, bl7)) | 0;
                    mid = (mid + Math.imul(al6, bh7)) | 0;
                    mid = (mid + Math.imul(ah6, bl7)) | 0;
                    hi = (hi + Math.imul(ah6, bh7)) | 0;
                    lo = (lo + Math.imul(al5, bl8)) | 0;
                    mid = (mid + Math.imul(al5, bh8)) | 0;
                    mid = (mid + Math.imul(ah5, bl8)) | 0;
                    hi = (hi + Math.imul(ah5, bh8)) | 0;
                    lo = (lo + Math.imul(al4, bl9)) | 0;
                    mid = (mid + Math.imul(al4, bh9)) | 0;
                    mid = (mid + Math.imul(ah4, bl9)) | 0;
                    hi = (hi + Math.imul(ah4, bh9)) | 0;
                    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
                    w13 &= 0x3ffffff;
                    /* k = 14 */
                    lo = Math.imul(al9, bl5);
                    mid = Math.imul(al9, bh5);
                    mid = (mid + Math.imul(ah9, bl5)) | 0;
                    hi = Math.imul(ah9, bh5);
                    lo = (lo + Math.imul(al8, bl6)) | 0;
                    mid = (mid + Math.imul(al8, bh6)) | 0;
                    mid = (mid + Math.imul(ah8, bl6)) | 0;
                    hi = (hi + Math.imul(ah8, bh6)) | 0;
                    lo = (lo + Math.imul(al7, bl7)) | 0;
                    mid = (mid + Math.imul(al7, bh7)) | 0;
                    mid = (mid + Math.imul(ah7, bl7)) | 0;
                    hi = (hi + Math.imul(ah7, bh7)) | 0;
                    lo = (lo + Math.imul(al6, bl8)) | 0;
                    mid = (mid + Math.imul(al6, bh8)) | 0;
                    mid = (mid + Math.imul(ah6, bl8)) | 0;
                    hi = (hi + Math.imul(ah6, bh8)) | 0;
                    lo = (lo + Math.imul(al5, bl9)) | 0;
                    mid = (mid + Math.imul(al5, bh9)) | 0;
                    mid = (mid + Math.imul(ah5, bl9)) | 0;
                    hi = (hi + Math.imul(ah5, bh9)) | 0;
                    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
                    w14 &= 0x3ffffff;
                    /* k = 15 */
                    lo = Math.imul(al9, bl6);
                    mid = Math.imul(al9, bh6);
                    mid = (mid + Math.imul(ah9, bl6)) | 0;
                    hi = Math.imul(ah9, bh6);
                    lo = (lo + Math.imul(al8, bl7)) | 0;
                    mid = (mid + Math.imul(al8, bh7)) | 0;
                    mid = (mid + Math.imul(ah8, bl7)) | 0;
                    hi = (hi + Math.imul(ah8, bh7)) | 0;
                    lo = (lo + Math.imul(al7, bl8)) | 0;
                    mid = (mid + Math.imul(al7, bh8)) | 0;
                    mid = (mid + Math.imul(ah7, bl8)) | 0;
                    hi = (hi + Math.imul(ah7, bh8)) | 0;
                    lo = (lo + Math.imul(al6, bl9)) | 0;
                    mid = (mid + Math.imul(al6, bh9)) | 0;
                    mid = (mid + Math.imul(ah6, bl9)) | 0;
                    hi = (hi + Math.imul(ah6, bh9)) | 0;
                    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
                    w15 &= 0x3ffffff;
                    /* k = 16 */
                    lo = Math.imul(al9, bl7);
                    mid = Math.imul(al9, bh7);
                    mid = (mid + Math.imul(ah9, bl7)) | 0;
                    hi = Math.imul(ah9, bh7);
                    lo = (lo + Math.imul(al8, bl8)) | 0;
                    mid = (mid + Math.imul(al8, bh8)) | 0;
                    mid = (mid + Math.imul(ah8, bl8)) | 0;
                    hi = (hi + Math.imul(ah8, bh8)) | 0;
                    lo = (lo + Math.imul(al7, bl9)) | 0;
                    mid = (mid + Math.imul(al7, bh9)) | 0;
                    mid = (mid + Math.imul(ah7, bl9)) | 0;
                    hi = (hi + Math.imul(ah7, bh9)) | 0;
                    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
                    w16 &= 0x3ffffff;
                    /* k = 17 */
                    lo = Math.imul(al9, bl8);
                    mid = Math.imul(al9, bh8);
                    mid = (mid + Math.imul(ah9, bl8)) | 0;
                    hi = Math.imul(ah9, bh8);
                    lo = (lo + Math.imul(al8, bl9)) | 0;
                    mid = (mid + Math.imul(al8, bh9)) | 0;
                    mid = (mid + Math.imul(ah8, bl9)) | 0;
                    hi = (hi + Math.imul(ah8, bh9)) | 0;
                    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
                    w17 &= 0x3ffffff;
                    /* k = 18 */
                    lo = Math.imul(al9, bl9);
                    mid = Math.imul(al9, bh9);
                    mid = (mid + Math.imul(ah9, bl9)) | 0;
                    hi = Math.imul(ah9, bh9);
                    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
                    w18 &= 0x3ffffff;
                    o[0] = w0;
                    o[1] = w1;
                    o[2] = w2;
                    o[3] = w3;
                    o[4] = w4;
                    o[5] = w5;
                    o[6] = w6;
                    o[7] = w7;
                    o[8] = w8;
                    o[9] = w9;
                    o[10] = w10;
                    o[11] = w11;
                    o[12] = w12;
                    o[13] = w13;
                    o[14] = w14;
                    o[15] = w15;
                    o[16] = w16;
                    o[17] = w17;
                    o[18] = w18;
                    if (c !== 0) {
                        o[19] = c;
                        out.length++;
                    }
                    return out;
                };

                // Polyfill comb
                if (!Math.imul) {
                    comb10MulTo = smallMulTo;
                }

                function bigMulTo(self, num, out) {
                    out.negative = num.negative ^ self.negative;
                    out.length = self.length + num.length;

                    var carry = 0;
                    var hncarry = 0;
                    for (var k = 0; k < out.length - 1; k++) {
                        // Sum all words with the same `i + j = k` and accumulate `ncarry`,
                        // note that ncarry could be >= 0x3ffffff
                        var ncarry = hncarry;
                        hncarry = 0;
                        var rword = carry & 0x3ffffff;
                        var maxJ = Math.min(k, num.length - 1);
                        for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
                            var i = k - j;
                            var a = self.words[i] | 0;
                            var b = num.words[j] | 0;
                            var r = a * b;

                            var lo = r & 0x3ffffff;
                            ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
                            lo = (lo + rword) | 0;
                            rword = lo & 0x3ffffff;
                            ncarry = (ncarry + (lo >>> 26)) | 0;

                            hncarry += ncarry >>> 26;
                            ncarry &= 0x3ffffff;
                        }
                        out.words[k] = rword;
                        carry = ncarry;
                        ncarry = hncarry;
                    }
                    if (carry !== 0) {
                        out.words[k] = carry;
                    } else {
                        out.length--;
                    }

                    return out.strip();
                }

                function jumboMulTo(self, num, out) {
                    var fftm = new FFTM();
                    return fftm.mulp(self, num, out);
                }

                BN.prototype.mulTo = function mulTo(num, out) {
                    var res;
                    var len = this.length + num.length;
                    if (this.length === 10 && num.length === 10) {
                        res = comb10MulTo(this, num, out);
                    } else if (len < 63) {
                        res = smallMulTo(this, num, out);
                    } else if (len < 1024) {
                        res = bigMulTo(this, num, out);
                    } else {
                        res = jumboMulTo(this, num, out);
                    }

                    return res;
                };

                // Cooley-Tukey algorithm for FFT
                // slightly revisited to rely on looping instead of recursion

                function FFTM(x, y) {
                    this.x = x;
                    this.y = y;
                }

                FFTM.prototype.makeRBT = function makeRBT(N) {
                    var t = new Array(N);
                    var l = BN.prototype._countBits(N) - 1;
                    for (var i = 0; i < N; i++) {
                        t[i] = this.revBin(i, l, N);
                    }

                    return t;
                };

                // Returns binary-reversed representation of `x`
                FFTM.prototype.revBin = function revBin(x, l, N) {
                    if (x === 0 || x === N - 1) return x;

                    var rb = 0;
                    for (var i = 0; i < l; i++) {
                        rb |= (x & 1) << (l - i - 1);
                        x >>= 1;
                    }

                    return rb;
                };

                // Performs "tweedling" phase, therefore 'emulating'
                // behaviour of the recursive algorithm
                FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
                    for (var i = 0; i < N; i++) {
                        rtws[i] = rws[rbt[i]];
                        itws[i] = iws[rbt[i]];
                    }
                };

                FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
                    this.permute(rbt, rws, iws, rtws, itws, N);

                    for (var s = 1; s < N; s <<= 1) {
                        var l = s << 1;

                        var rtwdf = Math.cos(2 * Math.PI / l);
                        var itwdf = Math.sin(2 * Math.PI / l);

                        for (var p = 0; p < N; p += l) {
                            var rtwdf_ = rtwdf;
                            var itwdf_ = itwdf;

                            for (var j = 0; j < s; j++) {
                                var re = rtws[p + j];
                                var ie = itws[p + j];

                                var ro = rtws[p + j + s];
                                var io = itws[p + j + s];

                                var rx = rtwdf_ * ro - itwdf_ * io;

                                io = rtwdf_ * io + itwdf_ * ro;
                                ro = rx;

                                rtws[p + j] = re + ro;
                                itws[p + j] = ie + io;

                                rtws[p + j + s] = re - ro;
                                itws[p + j + s] = ie - io;

                                /* jshint maxdepth : false */
                                if (j !== l) {
                                    rx = rtwdf * rtwdf_ - itwdf * itwdf_;

                                    itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                                    rtwdf_ = rx;
                                }
                            }
                        }
                    }
                };

                FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
                    var N = Math.max(m, n) | 1;
                    var odd = N & 1;
                    var i = 0;
                    for (N = N / 2 | 0; N; N = N >>> 1) {
                        i++;
                    }

                    return 1 << i + 1 + odd;
                };

                FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
                    if (N <= 1) return;

                    for (var i = 0; i < N / 2; i++) {
                        var t = rws[i];

                        rws[i] = rws[N - i - 1];
                        rws[N - i - 1] = t;

                        t = iws[i];

                        iws[i] = -iws[N - i - 1];
                        iws[N - i - 1] = -t;
                    }
                };

                FFTM.prototype.normalize13b = function normalize13b(ws, N) {
                    var carry = 0;
                    for (var i = 0; i < N / 2; i++) {
                        var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
                            Math.round(ws[2 * i] / N) +
                            carry;

                        ws[i] = w & 0x3ffffff;

                        if (w < 0x4000000) {
                            carry = 0;
                        } else {
                            carry = w / 0x4000000 | 0;
                        }
                    }

                    return ws;
                };

                FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
                    var carry = 0;
                    for (var i = 0; i < len; i++) {
                        carry = carry + (ws[i] | 0);

                        rws[2 * i] = carry & 0x1fff;
                        carry = carry >>> 13;
                        rws[2 * i + 1] = carry & 0x1fff;
                        carry = carry >>> 13;
                    }

                    // Pad with zeroes
                    for (i = 2 * len; i < N; ++i) {
                        rws[i] = 0;
                    }

                    assert(carry === 0);
                    assert((carry & ~0x1fff) === 0);
                };

                FFTM.prototype.stub = function stub(N) {
                    var ph = new Array(N);
                    for (var i = 0; i < N; i++) {
                        ph[i] = 0;
                    }

                    return ph;
                };

                FFTM.prototype.mulp = function mulp(x, y, out) {
                    var N = 2 * this.guessLen13b(x.length, y.length);

                    var rbt = this.makeRBT(N);

                    var _ = this.stub(N);

                    var rws = new Array(N);
                    var rwst = new Array(N);
                    var iwst = new Array(N);

                    var nrws = new Array(N);
                    var nrwst = new Array(N);
                    var niwst = new Array(N);

                    var rmws = out.words;
                    rmws.length = N;

                    this.convert13b(x.words, x.length, rws, N);
                    this.convert13b(y.words, y.length, nrws, N);

                    this.transform(rws, _, rwst, iwst, N, rbt);
                    this.transform(nrws, _, nrwst, niwst, N, rbt);

                    for (var i = 0; i < N; i++) {
                        var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
                        iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
                        rwst[i] = rx;
                    }

                    this.conjugate(rwst, iwst, N);
                    this.transform(rwst, iwst, rmws, _, N, rbt);
                    this.conjugate(rmws, _, N);
                    this.normalize13b(rmws, N);

                    out.negative = x.negative ^ y.negative;
                    out.length = x.length + y.length;
                    return out.strip();
                };

                // Multiply `this` by `num`
                BN.prototype.mul = function mul(num) {
                    var out = new BN(null);
                    out.words = new Array(this.length + num.length);
                    return this.mulTo(num, out);
                };

                // Multiply employing FFT
                BN.prototype.mulf = function mulf(num) {
                    var out = new BN(null);
                    out.words = new Array(this.length + num.length);
                    return jumboMulTo(this, num, out);
                };

                // In-place Multiplication
                BN.prototype.imul = function imul(num) {
                    return this.clone().mulTo(num, this);
                };

                BN.prototype.imuln = function imuln(num) {
                    assert(typeof num === 'number');
                    assert(num < 0x4000000);

                    // Carry
                    var carry = 0;
                    for (var i = 0; i < this.length; i++) {
                        var w = (this.words[i] | 0) * num;
                        var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
                        carry >>= 26;
                        carry += (w / 0x4000000) | 0;
                        // NOTE: lo is 27bit maximum
                        carry += lo >>> 26;
                        this.words[i] = lo & 0x3ffffff;
                    }

                    if (carry !== 0) {
                        this.words[i] = carry;
                        this.length++;
                    }

                    return this;
                };

                BN.prototype.muln = function muln(num) {
                    return this.clone().imuln(num);
                };

                // `this` * `this`
                BN.prototype.sqr = function sqr() {
                    return this.mul(this);
                };

                // `this` * `this` in-place
                BN.prototype.isqr = function isqr() {
                    return this.imul(this.clone());
                };

                // Math.pow(`this`, `num`)
                BN.prototype.pow = function pow(num) {
                    var w = toBitArray(num);
                    if (w.length === 0) return new BN(1);

                    // Skip leading zeroes
                    var res = this;
                    for (var i = 0; i < w.length; i++, res = res.sqr()) {
                        if (w[i] !== 0) break;
                    }

                    if (++i < w.length) {
                        for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
                            if (w[i] === 0) continue;

                            res = res.mul(q);
                        }
                    }

                    return res;
                };

                // Shift-left in-place
                BN.prototype.iushln = function iushln(bits) {
                    assert(typeof bits === 'number' && bits >= 0);
                    var r = bits % 26;
                    var s = (bits - r) / 26;
                    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
                    var i;

                    if (r !== 0) {
                        var carry = 0;

                        for (i = 0; i < this.length; i++) {
                            var newCarry = this.words[i] & carryMask;
                            var c = ((this.words[i] | 0) - newCarry) << r;
                            this.words[i] = c | carry;
                            carry = newCarry >>> (26 - r);
                        }

                        if (carry) {
                            this.words[i] = carry;
                            this.length++;
                        }
                    }

                    if (s !== 0) {
                        for (i = this.length - 1; i >= 0; i--) {
                            this.words[i + s] = this.words[i];
                        }

                        for (i = 0; i < s; i++) {
                            this.words[i] = 0;
                        }

                        this.length += s;
                    }

                    return this.strip();
                };

                BN.prototype.ishln = function ishln(bits) {
                    // TODO(indutny): implement me
                    assert(this.negative === 0);
                    return this.iushln(bits);
                };

                // Shift-right in-place
                // NOTE: `hint` is a lowest bit before trailing zeroes
                // NOTE: if `extended` is present - it will be filled with destroyed bits
                BN.prototype.iushrn = function iushrn(bits, hint, extended) {
                    assert(typeof bits === 'number' && bits >= 0);
                    var h;
                    if (hint) {
                        h = (hint - (hint % 26)) / 26;
                    } else {
                        h = 0;
                    }

                    var r = bits % 26;
                    var s = Math.min((bits - r) / 26, this.length);
                    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
                    var maskedWords = extended;

                    h -= s;
                    h = Math.max(0, h);

                    // Extended mode, copy masked part
                    if (maskedWords) {
                        for (var i = 0; i < s; i++) {
                            maskedWords.words[i] = this.words[i];
                        }
                        maskedWords.length = s;
                    }

                    if (s === 0) {
                        // No-op, we should not move anything at all
                    } else if (this.length > s) {
                        this.length -= s;
                        for (i = 0; i < this.length; i++) {
                            this.words[i] = this.words[i + s];
                        }
                    } else {
                        this.words[0] = 0;
                        this.length = 1;
                    }

                    var carry = 0;
                    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
                        var word = this.words[i] | 0;
                        this.words[i] = (carry << (26 - r)) | (word >>> r);
                        carry = word & mask;
                    }

                    // Push carried bits as a mask
                    if (maskedWords && carry !== 0) {
                        maskedWords.words[maskedWords.length++] = carry;
                    }

                    if (this.length === 0) {
                        this.words[0] = 0;
                        this.length = 1;
                    }

                    return this.strip();
                };

                BN.prototype.ishrn = function ishrn(bits, hint, extended) {
                    // TODO(indutny): implement me
                    assert(this.negative === 0);
                    return this.iushrn(bits, hint, extended);
                };

                // Shift-left
                BN.prototype.shln = function shln(bits) {
                    return this.clone().ishln(bits);
                };

                BN.prototype.ushln = function ushln(bits) {
                    return this.clone().iushln(bits);
                };

                // Shift-right
                BN.prototype.shrn = function shrn(bits) {
                    return this.clone().ishrn(bits);
                };

                BN.prototype.ushrn = function ushrn(bits) {
                    return this.clone().iushrn(bits);
                };

                // Test if n bit is set
                BN.prototype.testn = function testn(bit) {
                    assert(typeof bit === 'number' && bit >= 0);
                    var r = bit % 26;
                    var s = (bit - r) / 26;
                    var q = 1 << r;

                    // Fast case: bit is much higher than all existing words
                    if (this.length <= s) return false;

                    // Check bit and return
                    var w = this.words[s];

                    return !!(w & q);
                };

                // Return only lowers bits of number (in-place)
                BN.prototype.imaskn = function imaskn(bits) {
                    assert(typeof bits === 'number' && bits >= 0);
                    var r = bits % 26;
                    var s = (bits - r) / 26;

                    assert(this.negative === 0, 'imaskn works only with positive numbers');

                    if (this.length <= s) {
                        return this;
                    }

                    if (r !== 0) {
                        s++;
                    }
                    this.length = Math.min(s, this.length);

                    if (r !== 0) {
                        var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
                        this.words[this.length - 1] &= mask;
                    }

                    return this.strip();
                };

                // Return only lowers bits of number
                BN.prototype.maskn = function maskn(bits) {
                    return this.clone().imaskn(bits);
                };

                // Add plain number `num` to `this`
                BN.prototype.iaddn = function iaddn(num) {
                    assert(typeof num === 'number');
                    assert(num < 0x4000000);
                    if (num < 0) return this.isubn(-num);

                    // Possible sign change
                    if (this.negative !== 0) {
                        if (this.length === 1 && (this.words[0] | 0) < num) {
                            this.words[0] = num - (this.words[0] | 0);
                            this.negative = 0;
                            return this;
                        }

                        this.negative = 0;
                        this.isubn(num);
                        this.negative = 1;
                        return this;
                    }

                    // Add without checks
                    return this._iaddn(num);
                };

                BN.prototype._iaddn = function _iaddn(num) {
                    this.words[0] += num;

                    // Carry
                    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
                        this.words[i] -= 0x4000000;
                        if (i === this.length - 1) {
                            this.words[i + 1] = 1;
                        } else {
                            this.words[i + 1]++;
                        }
                    }
                    this.length = Math.max(this.length, i + 1);

                    return this;
                };

                // Subtract plain number `num` from `this`
                BN.prototype.isubn = function isubn(num) {
                    assert(typeof num === 'number');
                    assert(num < 0x4000000);
                    if (num < 0) return this.iaddn(-num);

                    if (this.negative !== 0) {
                        this.negative = 0;
                        this.iaddn(num);
                        this.negative = 1;
                        return this;
                    }

                    this.words[0] -= num;

                    if (this.length === 1 && this.words[0] < 0) {
                        this.words[0] = -this.words[0];
                        this.negative = 1;
                    } else {
                        // Carry
                        for (var i = 0; i < this.length && this.words[i] < 0; i++) {
                            this.words[i] += 0x4000000;
                            this.words[i + 1] -= 1;
                        }
                    }

                    return this.strip();
                };

                BN.prototype.addn = function addn(num) {
                    return this.clone().iaddn(num);
                };

                BN.prototype.subn = function subn(num) {
                    return this.clone().isubn(num);
                };

                BN.prototype.iabs = function iabs() {
                    this.negative = 0;

                    return this;
                };

                BN.prototype.abs = function abs() {
                    return this.clone().iabs();
                };

                BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
                    var len = num.length + shift;
                    var i;

                    this._expand(len);

                    var w;
                    var carry = 0;
                    for (i = 0; i < num.length; i++) {
                        w = (this.words[i + shift] | 0) + carry;
                        var right = (num.words[i] | 0) * mul;
                        w -= right & 0x3ffffff;
                        carry = (w >> 26) - ((right / 0x4000000) | 0);
                        this.words[i + shift] = w & 0x3ffffff;
                    }
                    for (; i < this.length - shift; i++) {
                        w = (this.words[i + shift] | 0) + carry;
                        carry = w >> 26;
                        this.words[i + shift] = w & 0x3ffffff;
                    }

                    if (carry === 0) return this.strip();

                    // Subtraction overflow
                    assert(carry === -1);
                    carry = 0;
                    for (i = 0; i < this.length; i++) {
                        w = -(this.words[i] | 0) + carry;
                        carry = w >> 26;
                        this.words[i] = w & 0x3ffffff;
                    }
                    this.negative = 1;

                    return this.strip();
                };

                BN.prototype._wordDiv = function _wordDiv(num, mode) {
                    var shift = this.length - num.length;

                    var a = this.clone();
                    var b = num;

                    // Normalize
                    var bhi = b.words[b.length - 1] | 0;
                    var bhiBits = this._countBits(bhi);
                    shift = 26 - bhiBits;
                    if (shift !== 0) {
                        b = b.ushln(shift);
                        a.iushln(shift);
                        bhi = b.words[b.length - 1] | 0;
                    }

                    // Initialize quotient
                    var m = a.length - b.length;
                    var q;

                    if (mode !== 'mod') {
                        q = new BN(null);
                        q.length = m + 1;
                        q.words = new Array(q.length);
                        for (var i = 0; i < q.length; i++) {
                            q.words[i] = 0;
                        }
                    }

                    var diff = a.clone()._ishlnsubmul(b, 1, m);
                    if (diff.negative === 0) {
                        a = diff;
                        if (q) {
                            q.words[m] = 1;
                        }
                    }

                    for (var j = m - 1; j >= 0; j--) {
                        var qj = (a.words[b.length + j] | 0) * 0x4000000 +
                            (a.words[b.length + j - 1] | 0);

                        // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
                        // (0x7ffffff)
                        qj = Math.min((qj / bhi) | 0, 0x3ffffff);

                        a._ishlnsubmul(b, qj, j);
                        while (a.negative !== 0) {
                            qj--;
                            a.negative = 0;
                            a._ishlnsubmul(b, 1, j);
                            if (!a.isZero()) {
                                a.negative ^= 1;
                            }
                        }
                        if (q) {
                            q.words[j] = qj;
                        }
                    }
                    if (q) {
                        q.strip();
                    }
                    a.strip();

                    // Denormalize
                    if (mode !== 'div' && shift !== 0) {
                        a.iushrn(shift);
                    }

                    return {
                        div: q || null,
                        mod: a
                    };
                };

                // NOTE: 1) `mode` can be set to `mod` to request mod only,
                //       to `div` to request div only, or be absent to
                //       request both div & mod
                //       2) `positive` is true if unsigned mod is requested
                BN.prototype.divmod = function divmod(num, mode, positive) {
                    assert(!num.isZero());

                    if (this.isZero()) {
                        return {
                            div: new BN(0),
                            mod: new BN(0)
                        };
                    }

                    var div, mod, res;
                    if (this.negative !== 0 && num.negative === 0) {
                        res = this.neg().divmod(num, mode);

                        if (mode !== 'mod') {
                            div = res.div.neg();
                        }

                        if (mode !== 'div') {
                            mod = res.mod.neg();
                            if (positive && mod.negative !== 0) {
                                mod.iadd(num);
                            }
                        }

                        return {
                            div: div,
                            mod: mod
                        };
                    }

                    if (this.negative === 0 && num.negative !== 0) {
                        res = this.divmod(num.neg(), mode);

                        if (mode !== 'mod') {
                            div = res.div.neg();
                        }

                        return {
                            div: div,
                            mod: res.mod
                        };
                    }

                    if ((this.negative & num.negative) !== 0) {
                        res = this.neg().divmod(num.neg(), mode);

                        if (mode !== 'div') {
                            mod = res.mod.neg();
                            if (positive && mod.negative !== 0) {
                                mod.isub(num);
                            }
                        }

                        return {
                            div: res.div,
                            mod: mod
                        };
                    }

                    // Both numbers are positive at this point

                    // Strip both numbers to approximate shift value
                    if (num.length > this.length || this.cmp(num) < 0) {
                        return {
                            div: new BN(0),
                            mod: this
                        };
                    }

                    // Very short reduction
                    if (num.length === 1) {
                        if (mode === 'div') {
                            return {
                                div: this.divn(num.words[0]),
                                mod: null
                            };
                        }

                        if (mode === 'mod') {
                            return {
                                div: null,
                                mod: new BN(this.modn(num.words[0]))
                            };
                        }

                        return {
                            div: this.divn(num.words[0]),
                            mod: new BN(this.modn(num.words[0]))
                        };
                    }

                    return this._wordDiv(num, mode);
                };

                // Find `this` / `num`
                BN.prototype.div = function div(num) {
                    return this.divmod(num, 'div', false).div;
                };

                // Find `this` % `num`
                BN.prototype.mod = function mod(num) {
                    return this.divmod(num, 'mod', false).mod;
                };

                BN.prototype.umod = function umod(num) {
                    return this.divmod(num, 'mod', true).mod;
                };

                // Find Round(`this` / `num`)
                BN.prototype.divRound = function divRound(num) {
                    var dm = this.divmod(num);

                    // Fast case - exact division
                    if (dm.mod.isZero()) return dm.div;

                    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

                    var half = num.ushrn(1);
                    var r2 = num.andln(1);
                    var cmp = mod.cmp(half);

                    // Round down
                    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

                    // Round up
                    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
                };

                BN.prototype.modn = function modn(num) {
                    assert(num <= 0x3ffffff);
                    var p = (1 << 26) % num;

                    var acc = 0;
                    for (var i = this.length - 1; i >= 0; i--) {
                        acc = (p * acc + (this.words[i] | 0)) % num;
                    }

                    return acc;
                };

                // In-place division by number
                BN.prototype.idivn = function idivn(num) {
                    assert(num <= 0x3ffffff);

                    var carry = 0;
                    for (var i = this.length - 1; i >= 0; i--) {
                        var w = (this.words[i] | 0) + carry * 0x4000000;
                        this.words[i] = (w / num) | 0;
                        carry = w % num;
                    }

                    return this.strip();
                };

                BN.prototype.divn = function divn(num) {
                    return this.clone().idivn(num);
                };

                BN.prototype.egcd = function egcd(p) {
                    assert(p.negative === 0);
                    assert(!p.isZero());

                    var x = this;
                    var y = p.clone();

                    if (x.negative !== 0) {
                        x = x.umod(p);
                    } else {
                        x = x.clone();
                    }

                    // A * x + B * y = x
                    var A = new BN(1);
                    var B = new BN(0);

                    // C * x + D * y = y
                    var C = new BN(0);
                    var D = new BN(1);

                    var g = 0;

                    while (x.isEven() && y.isEven()) {
                        x.iushrn(1);
                        y.iushrn(1);
                        ++g;
                    }

                    var yp = y.clone();
                    var xp = x.clone();

                    while (!x.isZero()) {
                        for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1) ;
                        if (i > 0) {
                            x.iushrn(i);
                            while (i-- > 0) {
                                if (A.isOdd() || B.isOdd()) {
                                    A.iadd(yp);
                                    B.isub(xp);
                                }

                                A.iushrn(1);
                                B.iushrn(1);
                            }
                        }

                        for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
                        if (j > 0) {
                            y.iushrn(j);
                            while (j-- > 0) {
                                if (C.isOdd() || D.isOdd()) {
                                    C.iadd(yp);
                                    D.isub(xp);
                                }

                                C.iushrn(1);
                                D.iushrn(1);
                            }
                        }

                        if (x.cmp(y) >= 0) {
                            x.isub(y);
                            A.isub(C);
                            B.isub(D);
                        } else {
                            y.isub(x);
                            C.isub(A);
                            D.isub(B);
                        }
                    }

                    return {
                        a: C,
                        b: D,
                        gcd: y.iushln(g)
                    };
                };

                // This is reduced incarnation of the binary EEA
                // above, designated to invert members of the
                // _prime_ fields F(p) at a maximal speed
                BN.prototype._invmp = function _invmp(p) {
                    assert(p.negative === 0);
                    assert(!p.isZero());

                    var a = this;
                    var b = p.clone();

                    if (a.negative !== 0) {
                        a = a.umod(p);
                    } else {
                        a = a.clone();
                    }

                    var x1 = new BN(1);
                    var x2 = new BN(0);

                    var delta = b.clone();

                    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
                        for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1) ;
                        if (i > 0) {
                            a.iushrn(i);
                            while (i-- > 0) {
                                if (x1.isOdd()) {
                                    x1.iadd(delta);
                                }

                                x1.iushrn(1);
                            }
                        }

                        for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
                        if (j > 0) {
                            b.iushrn(j);
                            while (j-- > 0) {
                                if (x2.isOdd()) {
                                    x2.iadd(delta);
                                }

                                x2.iushrn(1);
                            }
                        }

                        if (a.cmp(b) >= 0) {
                            a.isub(b);
                            x1.isub(x2);
                        } else {
                            b.isub(a);
                            x2.isub(x1);
                        }
                    }

                    var res;
                    if (a.cmpn(1) === 0) {
                        res = x1;
                    } else {
                        res = x2;
                    }

                    if (res.cmpn(0) < 0) {
                        res.iadd(p);
                    }

                    return res;
                };

                BN.prototype.gcd = function gcd(num) {
                    if (this.isZero()) return num.abs();
                    if (num.isZero()) return this.abs();

                    var a = this.clone();
                    var b = num.clone();
                    a.negative = 0;
                    b.negative = 0;

                    // Remove common factor of two
                    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
                        a.iushrn(1);
                        b.iushrn(1);
                    }

                    do {
                        while (a.isEven()) {
                            a.iushrn(1);
                        }
                        while (b.isEven()) {
                            b.iushrn(1);
                        }

                        var r = a.cmp(b);
                        if (r < 0) {
                            // Swap `a` and `b` to make `a` always bigger than `b`
                            var t = a;
                            a = b;
                            b = t;
                        } else if (r === 0 || b.cmpn(1) === 0) {
                            break;
                        }

                        a.isub(b);
                    } while (true);

                    return b.iushln(shift);
                };

                // Invert number in the field F(num)
                BN.prototype.invm = function invm(num) {
                    return this.egcd(num).a.umod(num);
                };

                BN.prototype.isEven = function isEven() {
                    return (this.words[0] & 1) === 0;
                };

                BN.prototype.isOdd = function isOdd() {
                    return (this.words[0] & 1) === 1;
                };

                // And first word and num
                BN.prototype.andln = function andln(num) {
                    return this.words[0] & num;
                };

                // Increment at the bit position in-line
                BN.prototype.bincn = function bincn(bit) {
                    assert(typeof bit === 'number');
                    var r = bit % 26;
                    var s = (bit - r) / 26;
                    var q = 1 << r;

                    // Fast case: bit is much higher than all existing words
                    if (this.length <= s) {
                        this._expand(s + 1);
                        this.words[s] |= q;
                        return this;
                    }

                    // Add bit and propagate, if needed
                    var carry = q;
                    for (var i = s; carry !== 0 && i < this.length; i++) {
                        var w = this.words[i] | 0;
                        w += carry;
                        carry = w >>> 26;
                        w &= 0x3ffffff;
                        this.words[i] = w;
                    }
                    if (carry !== 0) {
                        this.words[i] = carry;
                        this.length++;
                    }
                    return this;
                };

                BN.prototype.isZero = function isZero() {
                    return this.length === 1 && this.words[0] === 0;
                };

                BN.prototype.cmpn = function cmpn(num) {
                    var negative = num < 0;

                    if (this.negative !== 0 && !negative) return -1;
                    if (this.negative === 0 && negative) return 1;

                    this.strip();

                    var res;
                    if (this.length > 1) {
                        res = 1;
                    } else {
                        if (negative) {
                            num = -num;
                        }

                        assert(num <= 0x3ffffff, 'Number is too big');

                        var w = this.words[0] | 0;
                        res = w === num ? 0 : w < num ? -1 : 1;
                    }
                    if (this.negative !== 0) return -res | 0;
                    return res;
                };

                // Compare two numbers and return:
                // 1 - if `this` > `num`
                // 0 - if `this` == `num`
                // -1 - if `this` < `num`
                BN.prototype.cmp = function cmp(num) {
                    if (this.negative !== 0 && num.negative === 0) return -1;
                    if (this.negative === 0 && num.negative !== 0) return 1;

                    var res = this.ucmp(num);
                    if (this.negative !== 0) return -res | 0;
                    return res;
                };

                // Unsigned comparison
                BN.prototype.ucmp = function ucmp(num) {
                    // At this point both numbers have the same sign
                    if (this.length > num.length) return 1;
                    if (this.length < num.length) return -1;

                    var res = 0;
                    for (var i = this.length - 1; i >= 0; i--) {
                        var a = this.words[i] | 0;
                        var b = num.words[i] | 0;

                        if (a === b) continue;
                        if (a < b) {
                            res = -1;
                        } else if (a > b) {
                            res = 1;
                        }
                        break;
                    }
                    return res;
                };

                BN.prototype.gtn = function gtn(num) {
                    return this.cmpn(num) === 1;
                };

                BN.prototype.gt = function gt(num) {
                    return this.cmp(num) === 1;
                };

                BN.prototype.gten = function gten(num) {
                    return this.cmpn(num) >= 0;
                };

                BN.prototype.gte = function gte(num) {
                    return this.cmp(num) >= 0;
                };

                BN.prototype.ltn = function ltn(num) {
                    return this.cmpn(num) === -1;
                };

                BN.prototype.lt = function lt(num) {
                    return this.cmp(num) === -1;
                };

                BN.prototype.lten = function lten(num) {
                    return this.cmpn(num) <= 0;
                };

                BN.prototype.lte = function lte(num) {
                    return this.cmp(num) <= 0;
                };

                BN.prototype.eqn = function eqn(num) {
                    return this.cmpn(num) === 0;
                };

                BN.prototype.eq = function eq(num) {
                    return this.cmp(num) === 0;
                };

                //
                // A reduce context, could be using montgomery or something better, depending
                // on the `m` itself.
                //
                BN.red = function red(num) {
                    return new Red(num);
                };

                BN.prototype.toRed = function toRed(ctx) {
                    assert(!this.red, 'Already a number in reduction context');
                    assert(this.negative === 0, 'red works only with positives');
                    return ctx.convertTo(this)._forceRed(ctx);
                };

                BN.prototype.fromRed = function fromRed() {
                    assert(this.red, 'fromRed works only with numbers in reduction context');
                    return this.red.convertFrom(this);
                };

                BN.prototype._forceRed = function _forceRed(ctx) {
                    this.red = ctx;
                    return this;
                };

                BN.prototype.forceRed = function forceRed(ctx) {
                    assert(!this.red, 'Already a number in reduction context');
                    return this._forceRed(ctx);
                };

                BN.prototype.redAdd = function redAdd(num) {
                    assert(this.red, 'redAdd works only with red numbers');
                    return this.red.add(this, num);
                };

                BN.prototype.redIAdd = function redIAdd(num) {
                    assert(this.red, 'redIAdd works only with red numbers');
                    return this.red.iadd(this, num);
                };

                BN.prototype.redSub = function redSub(num) {
                    assert(this.red, 'redSub works only with red numbers');
                    return this.red.sub(this, num);
                };

                BN.prototype.redISub = function redISub(num) {
                    assert(this.red, 'redISub works only with red numbers');
                    return this.red.isub(this, num);
                };

                BN.prototype.redShl = function redShl(num) {
                    assert(this.red, 'redShl works only with red numbers');
                    return this.red.shl(this, num);
                };

                BN.prototype.redMul = function redMul(num) {
                    assert(this.red, 'redMul works only with red numbers');
                    this.red._verify2(this, num);
                    return this.red.mul(this, num);
                };

                BN.prototype.redIMul = function redIMul(num) {
                    assert(this.red, 'redMul works only with red numbers');
                    this.red._verify2(this, num);
                    return this.red.imul(this, num);
                };

                BN.prototype.redSqr = function redSqr() {
                    assert(this.red, 'redSqr works only with red numbers');
                    this.red._verify1(this);
                    return this.red.sqr(this);
                };

                BN.prototype.redISqr = function redISqr() {
                    assert(this.red, 'redISqr works only with red numbers');
                    this.red._verify1(this);
                    return this.red.isqr(this);
                };

                // Square root over p
                BN.prototype.redSqrt = function redSqrt() {
                    assert(this.red, 'redSqrt works only with red numbers');
                    this.red._verify1(this);
                    return this.red.sqrt(this);
                };

                BN.prototype.redInvm = function redInvm() {
                    assert(this.red, 'redInvm works only with red numbers');
                    this.red._verify1(this);
                    return this.red.invm(this);
                };

                // Return negative clone of `this` % `red modulo`
                BN.prototype.redNeg = function redNeg() {
                    assert(this.red, 'redNeg works only with red numbers');
                    this.red._verify1(this);
                    return this.red.neg(this);
                };

                BN.prototype.redPow = function redPow(num) {
                    assert(this.red && !num.red, 'redPow(normalNum)');
                    this.red._verify1(this);
                    return this.red.pow(this, num);
                };

                // Prime numbers with efficient reduction
                var primes = {
                    k256: null,
                    p224: null,
                    p192: null,
                    p25519: null
                };

                // Pseudo-Mersenne prime
                function MPrime(name, p) {
                    // P = 2 ^ N - K
                    this.name = name;
                    this.p = new BN(p, 16);
                    this.n = this.p.bitLength();
                    this.k = new BN(1).iushln(this.n).isub(this.p);

                    this.tmp = this._tmp();
                }

                MPrime.prototype._tmp = function _tmp() {
                    var tmp = new BN(null);
                    tmp.words = new Array(Math.ceil(this.n / 13));
                    return tmp;
                };

                MPrime.prototype.ireduce = function ireduce(num) {
                    // Assumes that `num` is less than `P^2`
                    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
                    var r = num;
                    var rlen;

                    do {
                        this.split(r, this.tmp);
                        r = this.imulK(r);
                        r = r.iadd(this.tmp);
                        rlen = r.bitLength();
                    } while (rlen > this.n);

                    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
                    if (cmp === 0) {
                        r.words[0] = 0;
                        r.length = 1;
                    } else if (cmp > 0) {
                        r.isub(this.p);
                    } else {
                        r.strip();
                    }

                    return r;
                };

                MPrime.prototype.split = function split(input, out) {
                    input.iushrn(this.n, 0, out);
                };

                MPrime.prototype.imulK = function imulK(num) {
                    return num.imul(this.k);
                };

                function K256() {
                    MPrime.call(
                        this,
                        'k256',
                        'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
                }

                inherits(K256, MPrime);

                K256.prototype.split = function split(input, output) {
                    // 256 = 9 * 26 + 22
                    var mask = 0x3fffff;

                    var outLen = Math.min(input.length, 9);
                    for (var i = 0; i < outLen; i++) {
                        output.words[i] = input.words[i];
                    }
                    output.length = outLen;

                    if (input.length <= 9) {
                        input.words[0] = 0;
                        input.length = 1;
                        return;
                    }

                    // Shift by 9 limbs
                    var prev = input.words[9];
                    output.words[output.length++] = prev & mask;

                    for (i = 10; i < input.length; i++) {
                        var next = input.words[i] | 0;
                        input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
                        prev = next;
                    }
                    prev >>>= 22;
                    input.words[i - 10] = prev;
                    if (prev === 0 && input.length > 10) {
                        input.length -= 10;
                    } else {
                        input.length -= 9;
                    }
                };

                K256.prototype.imulK = function imulK(num) {
                    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
                    num.words[num.length] = 0;
                    num.words[num.length + 1] = 0;
                    num.length += 2;

                    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
                    var lo = 0;
                    for (var i = 0; i < num.length; i++) {
                        var w = num.words[i] | 0;
                        lo += w * 0x3d1;
                        num.words[i] = lo & 0x3ffffff;
                        lo = w * 0x40 + ((lo / 0x4000000) | 0);
                    }

                    // Fast length reduction
                    if (num.words[num.length - 1] === 0) {
                        num.length--;
                        if (num.words[num.length - 1] === 0) {
                            num.length--;
                        }
                    }
                    return num;
                };

                function P224() {
                    MPrime.call(
                        this,
                        'p224',
                        'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
                }

                inherits(P224, MPrime);

                function P192() {
                    MPrime.call(
                        this,
                        'p192',
                        'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
                }

                inherits(P192, MPrime);

                function P25519() {
                    // 2 ^ 255 - 19
                    MPrime.call(
                        this,
                        '25519',
                        '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
                }

                inherits(P25519, MPrime);

                P25519.prototype.imulK = function imulK(num) {
                    // K = 0x13
                    var carry = 0;
                    for (var i = 0; i < num.length; i++) {
                        var hi = (num.words[i] | 0) * 0x13 + carry;
                        var lo = hi & 0x3ffffff;
                        hi >>>= 26;

                        num.words[i] = lo;
                        carry = hi;
                    }
                    if (carry !== 0) {
                        num.words[num.length++] = carry;
                    }
                    return num;
                };

                // Exported mostly for testing purposes, use plain name instead
                BN._prime = function prime(name) {
                    // Cached version of prime
                    if (primes[name]) return primes[name];

                    var prime;
                    if (name === 'k256') {
                        prime = new K256();
                    } else if (name === 'p224') {
                        prime = new P224();
                    } else if (name === 'p192') {
                        prime = new P192();
                    } else if (name === 'p25519') {
                        prime = new P25519();
                    } else {
                        throw new Error('Unknown prime ' + name);
                    }
                    primes[name] = prime;

                    return prime;
                };

                //
                // Base reduction engine
                //
                function Red(m) {
                    if (typeof m === 'string') {
                        var prime = BN._prime(m);
                        this.m = prime.p;
                        this.prime = prime;
                    } else {
                        assert(m.gtn(1), 'modulus must be greater than 1');
                        this.m = m;
                        this.prime = null;
                    }
                }

                Red.prototype._verify1 = function _verify1(a) {
                    assert(a.negative === 0, 'red works only with positives');
                    assert(a.red, 'red works only with red numbers');
                };

                Red.prototype._verify2 = function _verify2(a, b) {
                    assert((a.negative | b.negative) === 0, 'red works only with positives');
                    assert(a.red && a.red === b.red,
                        'red works only with red numbers');
                };

                Red.prototype.imod = function imod(a) {
                    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
                    return a.umod(this.m)._forceRed(this);
                };

                Red.prototype.neg = function neg(a) {
                    if (a.isZero()) {
                        return a.clone();
                    }

                    return this.m.sub(a)._forceRed(this);
                };

                Red.prototype.add = function add(a, b) {
                    this._verify2(a, b);

                    var res = a.add(b);
                    if (res.cmp(this.m) >= 0) {
                        res.isub(this.m);
                    }
                    return res._forceRed(this);
                };

                Red.prototype.iadd = function iadd(a, b) {
                    this._verify2(a, b);

                    var res = a.iadd(b);
                    if (res.cmp(this.m) >= 0) {
                        res.isub(this.m);
                    }
                    return res;
                };

                Red.prototype.sub = function sub(a, b) {
                    this._verify2(a, b);

                    var res = a.sub(b);
                    if (res.cmpn(0) < 0) {
                        res.iadd(this.m);
                    }
                    return res._forceRed(this);
                };

                Red.prototype.isub = function isub(a, b) {
                    this._verify2(a, b);

                    var res = a.isub(b);
                    if (res.cmpn(0) < 0) {
                        res.iadd(this.m);
                    }
                    return res;
                };

                Red.prototype.shl = function shl(a, num) {
                    this._verify1(a);
                    return this.imod(a.ushln(num));
                };

                Red.prototype.imul = function imul(a, b) {
                    this._verify2(a, b);
                    return this.imod(a.imul(b));
                };

                Red.prototype.mul = function mul(a, b) {
                    this._verify2(a, b);
                    return this.imod(a.mul(b));
                };

                Red.prototype.isqr = function isqr(a) {
                    return this.imul(a, a.clone());
                };

                Red.prototype.sqr = function sqr(a) {
                    return this.mul(a, a);
                };

                Red.prototype.sqrt = function sqrt(a) {
                    if (a.isZero()) return a.clone();

                    var mod3 = this.m.andln(3);
                    assert(mod3 % 2 === 1);

                    // Fast case
                    if (mod3 === 3) {
                        var pow = this.m.add(new BN(1)).iushrn(2);
                        return this.pow(a, pow);
                    }

                    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
                    //
                    // Find Q and S, that Q * 2 ^ S = (P - 1)
                    var q = this.m.subn(1);
                    var s = 0;
                    while (!q.isZero() && q.andln(1) === 0) {
                        s++;
                        q.iushrn(1);
                    }
                    assert(!q.isZero());

                    var one = new BN(1).toRed(this);
                    var nOne = one.redNeg();

                    // Find quadratic non-residue
                    // NOTE: Max is such because of generalized Riemann hypothesis.
                    var lpow = this.m.subn(1).iushrn(1);
                    var z = this.m.bitLength();
                    z = new BN(2 * z * z).toRed(this);

                    while (this.pow(z, lpow).cmp(nOne) !== 0) {
                        z.redIAdd(nOne);
                    }

                    var c = this.pow(z, q);
                    var r = this.pow(a, q.addn(1).iushrn(1));
                    var t = this.pow(a, q);
                    var m = s;
                    while (t.cmp(one) !== 0) {
                        var tmp = t;
                        for (var i = 0; tmp.cmp(one) !== 0; i++) {
                            tmp = tmp.redSqr();
                        }
                        assert(i < m);
                        var b = this.pow(c, new BN(1).iushln(m - i - 1));

                        r = r.redMul(b);
                        c = b.redSqr();
                        t = t.redMul(c);
                        m = i;
                    }

                    return r;
                };

                Red.prototype.invm = function invm(a) {
                    var inv = a._invmp(this.m);
                    if (inv.negative !== 0) {
                        inv.negative = 0;
                        return this.imod(inv).redNeg();
                    } else {
                        return this.imod(inv);
                    }
                };

                Red.prototype.pow = function pow(a, num) {
                    if (num.isZero()) return new BN(1).toRed(this);
                    if (num.cmpn(1) === 0) return a.clone();

                    var windowSize = 4;
                    var wnd = new Array(1 << windowSize);
                    wnd[0] = new BN(1).toRed(this);
                    wnd[1] = a;
                    for (var i = 2; i < wnd.length; i++) {
                        wnd[i] = this.mul(wnd[i - 1], a);
                    }

                    var res = wnd[0];
                    var current = 0;
                    var currentLen = 0;
                    var start = num.bitLength() % 26;
                    if (start === 0) {
                        start = 26;
                    }

                    for (i = num.length - 1; i >= 0; i--) {
                        var word = num.words[i];
                        for (var j = start - 1; j >= 0; j--) {
                            var bit = (word >> j) & 1;
                            if (res !== wnd[0]) {
                                res = this.sqr(res);
                            }

                            if (bit === 0 && current === 0) {
                                currentLen = 0;
                                continue;
                            }

                            current <<= 1;
                            current |= bit;
                            currentLen++;
                            if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

                            res = this.mul(res, wnd[current]);
                            currentLen = 0;
                            current = 0;
                        }
                        start = 26;
                    }

                    return res;
                };

                Red.prototype.convertTo = function convertTo(num) {
                    var r = num.umod(this.m);

                    return r === num ? r.clone() : r;
                };

                Red.prototype.convertFrom = function convertFrom(num) {
                    var res = num.clone();
                    res.red = null;
                    return res;
                };

                //
                // Montgomery method engine
                //

                BN.mont = function mont(num) {
                    return new Mont(num);
                };

                function Mont(m) {
                    Red.call(this, m);

                    this.shift = this.m.bitLength();
                    if (this.shift % 26 !== 0) {
                        this.shift += 26 - (this.shift % 26);
                    }

                    this.r = new BN(1).iushln(this.shift);
                    this.r2 = this.imod(this.r.sqr());
                    this.rinv = this.r._invmp(this.m);

                    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
                    this.minv = this.minv.umod(this.r);
                    this.minv = this.r.sub(this.minv);
                }

                inherits(Mont, Red);

                Mont.prototype.convertTo = function convertTo(num) {
                    return this.imod(num.ushln(this.shift));
                };

                Mont.prototype.convertFrom = function convertFrom(num) {
                    var r = this.imod(num.mul(this.rinv));
                    r.red = null;
                    return r;
                };

                Mont.prototype.imul = function imul(a, b) {
                    if (a.isZero() || b.isZero()) {
                        a.words[0] = 0;
                        a.length = 1;
                        return a;
                    }

                    var t = a.imul(b);
                    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
                    var u = t.isub(c).iushrn(this.shift);
                    var res = u;

                    if (u.cmp(this.m) >= 0) {
                        res = u.isub(this.m);
                    } else if (u.cmpn(0) < 0) {
                        res = u.iadd(this.m);
                    }

                    return res._forceRed(this);
                };

                Mont.prototype.mul = function mul(a, b) {
                    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

                    var t = a.mul(b);
                    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
                    var u = t.isub(c).iushrn(this.shift);
                    var res = u;
                    if (u.cmp(this.m) >= 0) {
                        res = u.isub(this.m);
                    } else if (u.cmpn(0) < 0) {
                        res = u.iadd(this.m);
                    }

                    return res._forceRed(this);
                };

                Mont.prototype.invm = function invm(a) {
                    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
                    var res = this.imod(a._invmp(this.m).mul(this.r2));
                    return res._forceRed(this);
                };
            })(typeof module === 'undefined' || module, this);

        }, {}],
        21: [function (require, module, exports) {
            var r;

            module.exports = function rand(len) {
                if (!r)
                    r = new Rand(null);

                return r.generate(len);
            };

            function Rand(rand) {
                this.rand = rand;
            }

            module.exports.Rand = Rand;

            Rand.prototype.generate = function generate(len) {
                return this._rand(len);
            };

// Emulate crypto API using randy
            Rand.prototype._rand = function _rand(n) {
                if (this.rand.getBytes)
                    return this.rand.getBytes(n);

                var res = new Uint8Array(n);
                for (var i = 0; i < res.length; i++)
                    res[i] = this.rand.getByte();
                return res;
            };

            if (typeof self === 'object') {
                if (self.crypto && self.crypto.getRandomValues) {
                    // Modern browsers
                    Rand.prototype._rand = function _rand(n) {
                        var arr = new Uint8Array(n);
                        self.crypto.getRandomValues(arr);
                        return arr;
                    };
                } else if (self.msCrypto && self.msCrypto.getRandomValues) {
                    // IE
                    Rand.prototype._rand = function _rand(n) {
                        var arr = new Uint8Array(n);
                        self.msCrypto.getRandomValues(arr);
                        return arr;
                    };

                    // Safari's WebWorkers do not have `crypto`
                } else if (typeof window === 'object') {
                    // Old junk
                    Rand.prototype._rand = function () {
                        throw new Error('Not implemented yet');
                    };
                }
            } else {
                // Node.js or Web worker with no crypto support
                try {
                    var crypto = require('crypto');
                    if (typeof crypto.randomBytes !== 'function')
                        throw new Error('Not supported');

                    Rand.prototype._rand = function _rand(n) {
                        return crypto.randomBytes(n);
                    };
                } catch (e) {
                }
            }

        }, {"crypto": undefined}],
        22: [function (require, module, exports) {

        }, {}],
        23: [function (require, module, exports) {
            (function (Buffer) {
// based on the aes implimentation in triple sec
// https://github.com/keybase/triplesec

// which is in turn based on the one from crypto-js
// https://code.google.com/p/crypto-js/

                var uint_max = Math.pow(2, 32)

                function fixup_uint32(x) {
                    var ret, x_pos
                    ret = x > uint_max || x < 0 ? (x_pos = Math.abs(x) % uint_max, x < 0 ? uint_max - x_pos : x_pos) : x
                    return ret
                }

                function scrub_vec(v) {
                    for (var i = 0; i < v.length; v++) {
                        v[i] = 0
                    }
                    return false
                }

                function Global() {
                    this.SBOX = []
                    this.INV_SBOX = []
                    this.SUB_MIX = [[], [], [], []]
                    this.INV_SUB_MIX = [[], [], [], []]
                    this.init()
                    this.RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]
                }

                Global.prototype.init = function () {
                    var d, i, sx, t, x, x2, x4, x8, xi, _i
                    d = (function () {
                        var _i, _results
                        _results = []
                        for (i = _i = 0; _i < 256; i = ++_i) {
                            if (i < 128) {
                                _results.push(i << 1)
                            } else {
                                _results.push((i << 1) ^ 0x11b)
                            }
                        }
                        return _results
                    })()
                    x = 0
                    xi = 0
                    for (i = _i = 0; _i < 256; i = ++_i) {
                        sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4)
                        sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63
                        this.SBOX[x] = sx
                        this.INV_SBOX[sx] = x
                        x2 = d[x]
                        x4 = d[x2]
                        x8 = d[x4]
                        t = (d[sx] * 0x101) ^ (sx * 0x1010100)
                        this.SUB_MIX[0][x] = (t << 24) | (t >>> 8)
                        this.SUB_MIX[1][x] = (t << 16) | (t >>> 16)
                        this.SUB_MIX[2][x] = (t << 8) | (t >>> 24)
                        this.SUB_MIX[3][x] = t
                        t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100)
                        this.INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8)
                        this.INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16)
                        this.INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24)
                        this.INV_SUB_MIX[3][sx] = t
                        if (x === 0) {
                            x = xi = 1
                        } else {
                            x = x2 ^ d[d[d[x8 ^ x2]]]
                            xi ^= d[d[xi]]
                        }
                    }
                    return true
                }

                var G = new Global()

                AES.blockSize = 4 * 4

                AES.prototype.blockSize = AES.blockSize

                AES.keySize = 256 / 8

                AES.prototype.keySize = AES.keySize

                function bufferToArray(buf) {
                    var len = buf.length / 4
                    var out = new Array(len)
                    var i = -1
                    while (++i < len) {
                        out[i] = buf.readUInt32BE(i * 4)
                    }
                    return out
                }

                function AES(key) {
                    this._key = bufferToArray(key)
                    this._doReset()
                }

                AES.prototype._doReset = function () {
                    var invKsRow, keySize, keyWords, ksRow, ksRows, t
                    keyWords = this._key
                    keySize = keyWords.length
                    this._nRounds = keySize + 6
                    ksRows = (this._nRounds + 1) * 4
                    this._keySchedule = []
                    for (ksRow = 0; ksRow < ksRows; ksRow++) {
                        this._keySchedule[ksRow] = ksRow < keySize ? keyWords[ksRow] : (t = this._keySchedule[ksRow - 1], (ksRow % keySize) === 0 ? (t = (t << 8) | (t >>> 24), t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff], t ^= G.RCON[(ksRow / keySize) | 0] << 24) : keySize > 6 && ksRow % keySize === 4 ? t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff] : void 0, this._keySchedule[ksRow - keySize] ^ t)
                    }
                    this._invKeySchedule = []
                    for (invKsRow = 0; invKsRow < ksRows; invKsRow++) {
                        ksRow = ksRows - invKsRow
                        t = this._keySchedule[ksRow - (invKsRow % 4 ? 0 : 4)]
                        this._invKeySchedule[invKsRow] = invKsRow < 4 || ksRow <= 4 ? t : G.INV_SUB_MIX[0][G.SBOX[t >>> 24]] ^ G.INV_SUB_MIX[1][G.SBOX[(t >>> 16) & 0xff]] ^ G.INV_SUB_MIX[2][G.SBOX[(t >>> 8) & 0xff]] ^ G.INV_SUB_MIX[3][G.SBOX[t & 0xff]]
                    }
                    return true
                }

                AES.prototype.encryptBlock = function (M) {
                    M = bufferToArray(new Buffer(M))
                    var out = this._doCryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX)
                    var buf = new Buffer(16)
                    buf.writeUInt32BE(out[0], 0)
                    buf.writeUInt32BE(out[1], 4)
                    buf.writeUInt32BE(out[2], 8)
                    buf.writeUInt32BE(out[3], 12)
                    return buf
                }

                AES.prototype.decryptBlock = function (M) {
                    M = bufferToArray(new Buffer(M))
                    var temp = [M[3], M[1]]
                    M[1] = temp[0]
                    M[3] = temp[1]
                    var out = this._doCryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX)
                    var buf = new Buffer(16)
                    buf.writeUInt32BE(out[0], 0)
                    buf.writeUInt32BE(out[3], 4)
                    buf.writeUInt32BE(out[2], 8)
                    buf.writeUInt32BE(out[1], 12)
                    return buf
                }

                AES.prototype.scrub = function () {
                    scrub_vec(this._keySchedule)
                    scrub_vec(this._invKeySchedule)
                    scrub_vec(this._key)
                }

                AES.prototype._doCryptBlock = function (M, keySchedule, SUB_MIX, SBOX) {
                    var ksRow, s0, s1, s2, s3, t0, t1, t2, t3

                    s0 = M[0] ^ keySchedule[0]
                    s1 = M[1] ^ keySchedule[1]
                    s2 = M[2] ^ keySchedule[2]
                    s3 = M[3] ^ keySchedule[3]
                    ksRow = 4
                    for (var round = 1; round < this._nRounds; round++) {
                        t0 = SUB_MIX[0][s0 >>> 24] ^ SUB_MIX[1][(s1 >>> 16) & 0xff] ^ SUB_MIX[2][(s2 >>> 8) & 0xff] ^ SUB_MIX[3][s3 & 0xff] ^ keySchedule[ksRow++]
                        t1 = SUB_MIX[0][s1 >>> 24] ^ SUB_MIX[1][(s2 >>> 16) & 0xff] ^ SUB_MIX[2][(s3 >>> 8) & 0xff] ^ SUB_MIX[3][s0 & 0xff] ^ keySchedule[ksRow++]
                        t2 = SUB_MIX[0][s2 >>> 24] ^ SUB_MIX[1][(s3 >>> 16) & 0xff] ^ SUB_MIX[2][(s0 >>> 8) & 0xff] ^ SUB_MIX[3][s1 & 0xff] ^ keySchedule[ksRow++]
                        t3 = SUB_MIX[0][s3 >>> 24] ^ SUB_MIX[1][(s0 >>> 16) & 0xff] ^ SUB_MIX[2][(s1 >>> 8) & 0xff] ^ SUB_MIX[3][s2 & 0xff] ^ keySchedule[ksRow++]
                        s0 = t0
                        s1 = t1
                        s2 = t2
                        s3 = t3
                    }
                    t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++]
                    t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++]
                    t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++]
                    t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++]
                    return [
                        fixup_uint32(t0),
                        fixup_uint32(t1),
                        fixup_uint32(t2),
                        fixup_uint32(t3)
                    ]
                }

                exports.AES = AES

            }).call(this, require("buffer").Buffer)
        }, {"buffer": 57}],
        24: [function (require, module, exports) {
            (function (Buffer) {
                var aes = require('./aes')
                var Transform = require('cipher-base')
                var inherits = require('inherits')
                var GHASH = require('./ghash')
                var xor = require('buffer-xor')
                inherits(StreamCipher, Transform)
                module.exports = StreamCipher

                function StreamCipher(mode, key, iv, decrypt) {
                    if (!(this instanceof StreamCipher)) {
                        return new StreamCipher(mode, key, iv)
                    }
                    Transform.call(this)
                    this._finID = Buffer.concat([iv, new Buffer([0, 0, 0, 1])])
                    iv = Buffer.concat([iv, new Buffer([0, 0, 0, 2])])
                    this._cipher = new aes.AES(key)
                    this._prev = new Buffer(iv.length)
                    this._cache = new Buffer('')
                    this._secCache = new Buffer('')
                    this._decrypt = decrypt
                    this._alen = 0
                    this._len = 0
                    iv.copy(this._prev)
                    this._mode = mode
                    var h = new Buffer(4)
                    h.fill(0)
                    this._ghash = new GHASH(this._cipher.encryptBlock(h))
                    this._authTag = null
                    this._called = false
                }

                StreamCipher.prototype._update = function (chunk) {
                    if (!this._called && this._alen) {
                        var rump = 16 - (this._alen % 16)
                        if (rump < 16) {
                            rump = new Buffer(rump)
                            rump.fill(0)
                            this._ghash.update(rump)
                        }
                    }
                    this._called = true
                    var out = this._mode.encrypt(this, chunk)
                    if (this._decrypt) {
                        this._ghash.update(chunk)
                    } else {
                        this._ghash.update(out)
                    }
                    this._len += chunk.length
                    return out
                }
                StreamCipher.prototype._final = function () {
                    if (this._decrypt && !this._authTag) {
                        throw new Error('Unsupported state or unable to authenticate data')
                    }
                    var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID))
                    if (this._decrypt) {
                        if (xorTest(tag, this._authTag)) {
                            throw new Error('Unsupported state or unable to authenticate data')
                        }
                    } else {
                        this._authTag = tag
                    }
                    this._cipher.scrub()
                }
                StreamCipher.prototype.getAuthTag = function getAuthTag() {
                    if (!this._decrypt && Buffer.isBuffer(this._authTag)) {
                        return this._authTag
                    } else {
                        throw new Error('Attempting to get auth tag in unsupported state')
                    }
                }
                StreamCipher.prototype.setAuthTag = function setAuthTag(tag) {
                    if (this._decrypt) {
                        this._authTag = tag
                    } else {
                        throw new Error('Attempting to set auth tag in unsupported state')
                    }
                }
                StreamCipher.prototype.setAAD = function setAAD(buf) {
                    if (!this._called) {
                        this._ghash.update(buf)
                        this._alen += buf.length
                    } else {
                        throw new Error('Attempting to set AAD in unsupported state')
                    }
                }

                function xorTest(a, b) {
                    var out = 0
                    if (a.length !== b.length) {
                        out++
                    }
                    var len = Math.min(a.length, b.length)
                    var i = -1
                    while (++i < len) {
                        out += (a[i] ^ b[i])
                    }
                    return out
                }

            }).call(this, require("buffer").Buffer)
        }, {"./aes": 23, "./ghash": 28, "buffer": 57, "buffer-xor": 56, "cipher-base": 59, "inherits": 143}],
        25: [function (require, module, exports) {
            var ciphers = require('./encrypter')
            exports.createCipher = exports.Cipher = ciphers.createCipher
            exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv
            var deciphers = require('./decrypter')
            exports.createDecipher = exports.Decipher = deciphers.createDecipher
            exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv
            var modes = require('./modes')

            function getCiphers() {
                return Object.keys(modes)
            }

            exports.listCiphers = exports.getCiphers = getCiphers

        }, {"./decrypter": 26, "./encrypter": 27, "./modes": 29}],
        26: [function (require, module, exports) {
            (function (Buffer) {
                var aes = require('./aes')
                var Transform = require('cipher-base')
                var inherits = require('inherits')
                var modes = require('./modes')
                var StreamCipher = require('./streamCipher')
                var AuthCipher = require('./authCipher')
                var ebtk = require('evp_bytestokey')

                inherits(Decipher, Transform)

                function Decipher(mode, key, iv) {
                    if (!(this instanceof Decipher)) {
                        return new Decipher(mode, key, iv)
                    }
                    Transform.call(this)
                    this._cache = new Splitter()
                    this._last = void 0
                    this._cipher = new aes.AES(key)
                    this._prev = new Buffer(iv.length)
                    iv.copy(this._prev)
                    this._mode = mode
                    this._autopadding = true
                }

                Decipher.prototype._update = function (data) {
                    this._cache.add(data)
                    var chunk
                    var thing
                    var out = []
                    while ((chunk = this._cache.get(this._autopadding))) {
                        thing = this._mode.decrypt(this, chunk)
                        out.push(thing)
                    }
                    return Buffer.concat(out)
                }
                Decipher.prototype._final = function () {
                    var chunk = this._cache.flush()
                    if (this._autopadding) {
                        return unpad(this._mode.decrypt(this, chunk))
                    } else if (chunk) {
                        throw new Error('data not multiple of block length')
                    }
                }
                Decipher.prototype.setAutoPadding = function (setTo) {
                    this._autopadding = !!setTo
                    return this
                }

                function Splitter() {
                    if (!(this instanceof Splitter)) {
                        return new Splitter()
                    }
                    this.cache = new Buffer('')
                }

                Splitter.prototype.add = function (data) {
                    this.cache = Buffer.concat([this.cache, data])
                }

                Splitter.prototype.get = function (autoPadding) {
                    var out
                    if (autoPadding) {
                        if (this.cache.length > 16) {
                            out = this.cache.slice(0, 16)
                            this.cache = this.cache.slice(16)
                            return out
                        }
                    } else {
                        if (this.cache.length >= 16) {
                            out = this.cache.slice(0, 16)
                            this.cache = this.cache.slice(16)
                            return out
                        }
                    }
                    return null
                }
                Splitter.prototype.flush = function () {
                    if (this.cache.length) {
                        return this.cache
                    }
                }

                function unpad(last) {
                    var padded = last[15]
                    var i = -1
                    while (++i < padded) {
                        if (last[(i + (16 - padded))] !== padded) {
                            throw new Error('unable to decrypt data')
                        }
                    }
                    if (padded === 16) {
                        return
                    }
                    return last.slice(0, 16 - padded)
                }

                var modelist = {
                    ECB: require('./modes/ecb'),
                    CBC: require('./modes/cbc'),
                    CFB: require('./modes/cfb'),
                    CFB8: require('./modes/cfb8'),
                    CFB1: require('./modes/cfb1'),
                    OFB: require('./modes/ofb'),
                    CTR: require('./modes/ctr'),
                    GCM: require('./modes/ctr')
                }

                function createDecipheriv(suite, password, iv) {
                    var config = modes[suite.toLowerCase()]
                    if (!config) {
                        throw new TypeError('invalid suite type')
                    }
                    if (typeof iv === 'string') {
                        iv = new Buffer(iv)
                    }
                    if (typeof password === 'string') {
                        password = new Buffer(password)
                    }
                    if (password.length !== config.key / 8) {
                        throw new TypeError('invalid key length ' + password.length)
                    }
                    if (iv.length !== config.iv) {
                        throw new TypeError('invalid iv length ' + iv.length)
                    }
                    if (config.type === 'stream') {
                        return new StreamCipher(modelist[config.mode], password, iv, true)
                    } else if (config.type === 'auth') {
                        return new AuthCipher(modelist[config.mode], password, iv, true)
                    }
                    return new Decipher(modelist[config.mode], password, iv)
                }

                function createDecipher(suite, password) {
                    var config = modes[suite.toLowerCase()]
                    if (!config) {
                        throw new TypeError('invalid suite type')
                    }
                    var keys = ebtk(password, false, config.key, config.iv)
                    return createDecipheriv(suite, keys.key, keys.iv)
                }

                exports.createDecipher = createDecipher
                exports.createDecipheriv = createDecipheriv

            }).call(this, require("buffer").Buffer)
        }, {
            "./aes": 23,
            "./authCipher": 24,
            "./modes": 29,
            "./modes/cbc": 30,
            "./modes/cfb": 31,
            "./modes/cfb1": 32,
            "./modes/cfb8": 33,
            "./modes/ctr": 34,
            "./modes/ecb": 35,
            "./modes/ofb": 36,
            "./streamCipher": 37,
            "buffer": 57,
            "cipher-base": 59,
            "evp_bytestokey": 128,
            "inherits": 143
        }],
        27: [function (require, module, exports) {
            (function (Buffer) {
                var aes = require('./aes')
                var Transform = require('cipher-base')
                var inherits = require('inherits')
                var modes = require('./modes')
                var ebtk = require('evp_bytestokey')
                var StreamCipher = require('./streamCipher')
                var AuthCipher = require('./authCipher')
                inherits(Cipher, Transform)

                function Cipher(mode, key, iv) {
                    if (!(this instanceof Cipher)) {
                        return new Cipher(mode, key, iv)
                    }
                    Transform.call(this)
                    this._cache = new Splitter()
                    this._cipher = new aes.AES(key)
                    this._prev = new Buffer(iv.length)
                    iv.copy(this._prev)
                    this._mode = mode
                    this._autopadding = true
                }

                Cipher.prototype._update = function (data) {
                    this._cache.add(data)
                    var chunk
                    var thing
                    var out = []
                    while ((chunk = this._cache.get())) {
                        thing = this._mode.encrypt(this, chunk)
                        out.push(thing)
                    }
                    return Buffer.concat(out)
                }
                Cipher.prototype._final = function () {
                    var chunk = this._cache.flush()
                    if (this._autopadding) {
                        chunk = this._mode.encrypt(this, chunk)
                        this._cipher.scrub()
                        return chunk
                    } else if (chunk.toString('hex') !== '10101010101010101010101010101010') {
                        this._cipher.scrub()
                        throw new Error('data not multiple of block length')
                    }
                }
                Cipher.prototype.setAutoPadding = function (setTo) {
                    this._autopadding = !!setTo
                    return this
                }

                function Splitter() {
                    if (!(this instanceof Splitter)) {
                        return new Splitter()
                    }
                    this.cache = new Buffer('')
                }

                Splitter.prototype.add = function (data) {
                    this.cache = Buffer.concat([this.cache, data])
                }

                Splitter.prototype.get = function () {
                    if (this.cache.length > 15) {
                        var out = this.cache.slice(0, 16)
                        this.cache = this.cache.slice(16)
                        return out
                    }
                    return null
                }
                Splitter.prototype.flush = function () {
                    var len = 16 - this.cache.length
                    var padBuff = new Buffer(len)

                    var i = -1
                    while (++i < len) {
                        padBuff.writeUInt8(len, i)
                    }
                    var out = Buffer.concat([this.cache, padBuff])
                    return out
                }
                var modelist = {
                    ECB: require('./modes/ecb'),
                    CBC: require('./modes/cbc'),
                    CFB: require('./modes/cfb'),
                    CFB8: require('./modes/cfb8'),
                    CFB1: require('./modes/cfb1'),
                    OFB: require('./modes/ofb'),
                    CTR: require('./modes/ctr'),
                    GCM: require('./modes/ctr')
                }

                function createCipheriv(suite, password, iv) {
                    var config = modes[suite.toLowerCase()]
                    if (!config) {
                        throw new TypeError('invalid suite type')
                    }
                    if (typeof iv === 'string') {
                        iv = new Buffer(iv)
                    }
                    if (typeof password === 'string') {
                        password = new Buffer(password)
                    }
                    if (password.length !== config.key / 8) {
                        throw new TypeError('invalid key length ' + password.length)
                    }
                    if (iv.length !== config.iv) {
                        throw new TypeError('invalid iv length ' + iv.length)
                    }
                    if (config.type === 'stream') {
                        return new StreamCipher(modelist[config.mode], password, iv)
                    } else if (config.type === 'auth') {
                        return new AuthCipher(modelist[config.mode], password, iv)
                    }
                    return new Cipher(modelist[config.mode], password, iv)
                }

                function createCipher(suite, password) {
                    var config = modes[suite.toLowerCase()]
                    if (!config) {
                        throw new TypeError('invalid suite type')
                    }
                    var keys = ebtk(password, false, config.key, config.iv)
                    return createCipheriv(suite, keys.key, keys.iv)
                }

                exports.createCipheriv = createCipheriv
                exports.createCipher = createCipher

            }).call(this, require("buffer").Buffer)
        }, {
            "./aes": 23,
            "./authCipher": 24,
            "./modes": 29,
            "./modes/cbc": 30,
            "./modes/cfb": 31,
            "./modes/cfb1": 32,
            "./modes/cfb8": 33,
            "./modes/ctr": 34,
            "./modes/ecb": 35,
            "./modes/ofb": 36,
            "./streamCipher": 37,
            "buffer": 57,
            "cipher-base": 59,
            "evp_bytestokey": 128,
            "inherits": 143
        }],
        28: [function (require, module, exports) {
            (function (Buffer) {
                var zeros = new Buffer(16)
                zeros.fill(0)
                module.exports = GHASH

                function GHASH(key) {
                    this.h = key
                    this.state = new Buffer(16)
                    this.state.fill(0)
                    this.cache = new Buffer('')
                }

// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho Vähä-Herttua
                GHASH.prototype.ghash = function (block) {
                    var i = -1
                    while (++i < block.length) {
                        this.state[i] ^= block[i]
                    }
                    this._multiply()
                }

                GHASH.prototype._multiply = function () {
                    var Vi = toArray(this.h)
                    var Zi = [0, 0, 0, 0]
                    var j, xi, lsb_Vi
                    var i = -1
                    while (++i < 128) {
                        xi = (this.state[~~(i / 8)] & (1 << (7 - i % 8))) !== 0
                        if (xi) {
                            // Z_i+1 = Z_i ^ V_i
                            Zi = xor(Zi, Vi)
                        }

                        // Store the value of LSB(V_i)
                        lsb_Vi = (Vi[3] & 1) !== 0

                        // V_i+1 = V_i >> 1
                        for (j = 3; j > 0; j--) {
                            Vi[j] = (Vi[j] >>> 1) | ((Vi[j - 1] & 1) << 31)
                        }
                        Vi[0] = Vi[0] >>> 1

                        // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
                        if (lsb_Vi) {
                            Vi[0] = Vi[0] ^ (0xe1 << 24)
                        }
                    }
                    this.state = fromArray(Zi)
                }
                GHASH.prototype.update = function (buf) {
                    this.cache = Buffer.concat([this.cache, buf])
                    var chunk
                    while (this.cache.length >= 16) {
                        chunk = this.cache.slice(0, 16)
                        this.cache = this.cache.slice(16)
                        this.ghash(chunk)
                    }
                }
                GHASH.prototype.final = function (abl, bl) {
                    if (this.cache.length) {
                        this.ghash(Buffer.concat([this.cache, zeros], 16))
                    }
                    this.ghash(fromArray([
                        0, abl,
                        0, bl
                    ]))
                    return this.state
                }

                function toArray(buf) {
                    return [
                        buf.readUInt32BE(0),
                        buf.readUInt32BE(4),
                        buf.readUInt32BE(8),
                        buf.readUInt32BE(12)
                    ]
                }

                function fromArray(out) {
                    out = out.map(fixup_uint32)
                    var buf = new Buffer(16)
                    buf.writeUInt32BE(out[0], 0)
                    buf.writeUInt32BE(out[1], 4)
                    buf.writeUInt32BE(out[2], 8)
                    buf.writeUInt32BE(out[3], 12)
                    return buf
                }

                var uint_max = Math.pow(2, 32)

                function fixup_uint32(x) {
                    var ret, x_pos
                    ret = x > uint_max || x < 0 ? (x_pos = Math.abs(x) % uint_max, x < 0 ? uint_max - x_pos : x_pos) : x
                    return ret
                }

                function xor(a, b) {
                    return [
                        a[0] ^ b[0],
                        a[1] ^ b[1],
                        a[2] ^ b[2],
                        a[3] ^ b[3]
                    ]
                }

            }).call(this, require("buffer").Buffer)
        }, {"buffer": 57}],
        29: [function (require, module, exports) {
            exports['aes-128-ecb'] = {
                cipher: 'AES',
                key: 128,
                iv: 0,
                mode: 'ECB',
                type: 'block'
            }
            exports['aes-192-ecb'] = {
                cipher: 'AES',
                key: 192,
                iv: 0,
                mode: 'ECB',
                type: 'block'
            }
            exports['aes-256-ecb'] = {
                cipher: 'AES',
                key: 256,
                iv: 0,
                mode: 'ECB',
                type: 'block'
            }
            exports['aes-128-cbc'] = {
                cipher: 'AES',
                key: 128,
                iv: 16,
                mode: 'CBC',
                type: 'block'
            }
            exports['aes-192-cbc'] = {
                cipher: 'AES',
                key: 192,
                iv: 16,
                mode: 'CBC',
                type: 'block'
            }
            exports['aes-256-cbc'] = {
                cipher: 'AES',
                key: 256,
                iv: 16,
                mode: 'CBC',
                type: 'block'
            }
            exports['aes128'] = exports['aes-128-cbc']
            exports['aes192'] = exports['aes-192-cbc']
            exports['aes256'] = exports['aes-256-cbc']
            exports['aes-128-cfb'] = {
                cipher: 'AES',
                key: 128,
                iv: 16,
                mode: 'CFB',
                type: 'stream'
            }
            exports['aes-192-cfb'] = {
                cipher: 'AES',
                key: 192,
                iv: 16,
                mode: 'CFB',
                type: 'stream'
            }
            exports['aes-256-cfb'] = {
                cipher: 'AES',
                key: 256,
                iv: 16,
                mode: 'CFB',
                type: 'stream'
            }
            exports['aes-128-cfb8'] = {
                cipher: 'AES',
                key: 128,
                iv: 16,
                mode: 'CFB8',
                type: 'stream'
            }
            exports['aes-192-cfb8'] = {
                cipher: 'AES',
                key: 192,
                iv: 16,
                mode: 'CFB8',
                type: 'stream'
            }
            exports['aes-256-cfb8'] = {
                cipher: 'AES',
                key: 256,
                iv: 16,
                mode: 'CFB8',
                type: 'stream'
            }
            exports['aes-128-cfb1'] = {
                cipher: 'AES',
                key: 128,
                iv: 16,
                mode: 'CFB1',
                type: 'stream'
            }
            exports['aes-192-cfb1'] = {
                cipher: 'AES',
                key: 192,
                iv: 16,
                mode: 'CFB1',
                type: 'stream'
            }
            exports['aes-256-cfb1'] = {
                cipher: 'AES',
                key: 256,
                iv: 16,
                mode: 'CFB1',
                type: 'stream'
            }
            exports['aes-128-ofb'] = {
                cipher: 'AES',
                key: 128,
                iv: 16,
                mode: 'OFB',
                type: 'stream'
            }
            exports['aes-192-ofb'] = {
                cipher: 'AES',
                key: 192,
                iv: 16,
                mode: 'OFB',
                type: 'stream'
            }
            exports['aes-256-ofb'] = {
                cipher: 'AES',
                key: 256,
                iv: 16,
                mode: 'OFB',
                type: 'stream'
            }
            exports['aes-128-ctr'] = {
                cipher: 'AES',
                key: 128,
                iv: 16,
                mode: 'CTR',
                type: 'stream'
            }
            exports['aes-192-ctr'] = {
                cipher: 'AES',
                key: 192,
                iv: 16,
                mode: 'CTR',
                type: 'stream'
            }
            exports['aes-256-ctr'] = {
                cipher: 'AES',
                key: 256,
                iv: 16,
                mode: 'CTR',
                type: 'stream'
            }
            exports['aes-128-gcm'] = {
                cipher: 'AES',
                key: 128,
                iv: 12,
                mode: 'GCM',
                type: 'auth'
            }
            exports['aes-192-gcm'] = {
                cipher: 'AES',
                key: 192,
                iv: 12,
                mode: 'GCM',
                type: 'auth'
            }
            exports['aes-256-gcm'] = {
                cipher: 'AES',
                key: 256,
                iv: 12,
                mode: 'GCM',
                type: 'auth'
            }

        }, {}],
        30: [function (require, module, exports) {
            var xor = require('buffer-xor')

            exports.encrypt = function (self, block) {
                var data = xor(block, self._prev)

                self._prev = self._cipher.encryptBlock(data)
                return self._prev
            }

            exports.decrypt = function (self, block) {
                var pad = self._prev

                self._prev = block
                var out = self._cipher.decryptBlock(block)

                return xor(out, pad)
            }

        }, {"buffer-xor": 56}],
        31: [function (require, module, exports) {
            (function (Buffer) {
                var xor = require('buffer-xor')

                exports.encrypt = function (self, data, decrypt) {
                    var out = new Buffer('')
                    var len

                    while (data.length) {
                        if (self._cache.length === 0) {
                            self._cache = self._cipher.encryptBlock(self._prev)
                            self._prev = new Buffer('')
                        }

                        if (self._cache.length <= data.length) {
                            len = self._cache.length
                            out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)])
                            data = data.slice(len)
                        } else {
                            out = Buffer.concat([out, encryptStart(self, data, decrypt)])
                            break
                        }
                    }

                    return out
                }

                function encryptStart(self, data, decrypt) {
                    var len = data.length
                    var out = xor(data, self._cache)
                    self._cache = self._cache.slice(len)
                    self._prev = Buffer.concat([self._prev, decrypt ? data : out])
                    return out
                }

            }).call(this, require("buffer").Buffer)
        }, {"buffer": 57, "buffer-xor": 56}],
        32: [function (require, module, exports) {
            (function (Buffer) {
                function encryptByte(self, byteParam, decrypt) {
                    var pad
                    var i = -1
                    var len = 8
                    var out = 0
                    var bit, value
                    while (++i < len) {
                        pad = self._cipher.encryptBlock(self._prev)
                        bit = (byteParam & (1 << (7 - i))) ? 0x80 : 0
                        value = pad[0] ^ bit
                        out += ((value & 0x80) >> (i % 8))
                        self._prev = shiftIn(self._prev, decrypt ? bit : value)
                    }
                    return out
                }

                exports.encrypt = function (self, chunk, decrypt) {
                    var len = chunk.length
                    var out = new Buffer(len)
                    var i = -1
                    while (++i < len) {
                        out[i] = encryptByte(self, chunk[i], decrypt)
                    }
                    return out
                }

                function shiftIn(buffer, value) {
                    var len = buffer.length
                    var i = -1
                    var out = new Buffer(buffer.length)
                    buffer = Buffer.concat([buffer, new Buffer([value])])
                    while (++i < len) {
                        out[i] = buffer[i] << 1 | buffer[i + 1] >> (7)
                    }
                    return out
                }

            }).call(this, require("buffer").Buffer)
        }, {"buffer": 57}],
        33: [function (require, module, exports) {
            (function (Buffer) {
                function encryptByte(self, byteParam, decrypt) {
                    var pad = self._cipher.encryptBlock(self._prev)
                    var out = pad[0] ^ byteParam
                    self._prev = Buffer.concat([self._prev.slice(1), new Buffer([decrypt ? byteParam : out])])
                    return out
                }

                exports.encrypt = function (self, chunk, decrypt) {
                    var len = chunk.length
                    var out = new Buffer(len)
                    var i = -1
                    while (++i < len) {
                        out[i] = encryptByte(self, chunk[i], decrypt)
                    }
                    return out
                }

            }).call(this, require("buffer").Buffer)
        }, {"buffer": 57}],
        34: [function (require, module, exports) {
            (function (Buffer) {
                var xor = require('buffer-xor')

                function incr32(iv) {
                    var len = iv.length
                    var item
                    while (len--) {
                        item = iv.readUInt8(len)
                        if (item === 255) {
                            iv.writeUInt8(0, len)
                        } else {
                            item++
                            iv.writeUInt8(item, len)
                            break
                        }
                    }
                }

                function getBlock(self) {
                    var out = self._cipher.encryptBlock(self._prev)
                    incr32(self._prev)
                    return out
                }

                exports.encrypt = function (self, chunk) {
                    while (self._cache.length < chunk.length) {
                        self._cache = Buffer.concat([self._cache, getBlock(self)])
                    }
                    var pad = self._cache.slice(0, chunk.length)
                    self._cache = self._cache.slice(chunk.length)
                    return xor(chunk, pad)
                }

            }).call(this, require("buffer").Buffer)
        }, {"buffer": 57, "buffer-xor": 56}],
        35: [function (require, module, exports) {
            exports.encrypt = function (self, block) {
                return self._cipher.encryptBlock(block)
            }
            exports.decrypt = function (self, block) {
                return self._cipher.decryptBlock(block)
            }

        }, {}],
        36: [function (require, module, exports) {
            (function (Buffer) {
                var xor = require('buffer-xor')

                function getBlock(self) {
                    self._prev = self._cipher.encryptBlock(self._prev)
                    return self._prev
                }

                exports.encrypt = function (self, chunk) {
                    while (self._cache.length < chunk.length) {
                        self._cache = Buffer.concat([self._cache, getBlock(self)])
                    }

                    var pad = self._cache.slice(0, chunk.length)
                    self._cache = self._cache.slice(chunk.length)
                    return xor(chunk, pad)
                }

            }).call(this, require("buffer").Buffer)
        }, {"buffer": 57, "buffer-xor": 56}],
        37: [function (require, module, exports) {
            (function (Buffer) {
                var aes = require('./aes')
                var Transform = require('cipher-base')
                var inherits = require('inherits')

                inherits(StreamCipher, Transform)
                module.exports = StreamCipher

                function StreamCipher(mode, key, iv, decrypt) {
                    if (!(this instanceof StreamCipher)) {
                        return new StreamCipher(mode, key, iv)
                    }
                    Transform.call(this)
                    this._cipher = new aes.AES(key)
                    this._prev = new Buffer(iv.length)
                    this._cache = new Buffer('')
                    this._secCache = new Buffer('')
                    this._decrypt = decrypt
                    iv.copy(this._prev)
                    this._mode = mode
                }

                StreamCipher.prototype._update = function (chunk) {
                    return this._mode.encrypt(this, chunk, this._decrypt)
                }
                StreamCipher.prototype._final = function () {
                    this._cipher.scrub()
                }

            }).call(this, require("buffer").Buffer)
        }, {"./aes": 23, "buffer": 57, "cipher-base": 59, "inherits": 143}],
        38: [function (require, module, exports) {
            var ebtk = require('evp_bytestokey')
            var aes = require('browserify-aes/browser')
            var DES = require('browserify-des')
            var desModes = require('browserify-des/modes')
            var aesModes = require('browserify-aes/modes')

            function createCipher(suite, password) {
                var keyLen, ivLen
                suite = suite.toLowerCase()
                if (aesModes[suite]) {
                    keyLen = aesModes[suite].key
                    ivLen = aesModes[suite].iv
                } else if (desModes[suite]) {
                    keyLen = desModes[suite].key * 8
                    ivLen = desModes[suite].iv
                } else {
                    throw new TypeError('invalid suite type')
                }
                var keys = ebtk(password, false, keyLen, ivLen)
                return createCipheriv(suite, keys.key, keys.iv)
            }

            function createDecipher(suite, password) {
                var keyLen, ivLen
                suite = suite.toLowerCase()
                if (aesModes[suite]) {
                    keyLen = aesModes[suite].key
                    ivLen = aesModes[suite].iv
                } else if (desModes[suite]) {
                    keyLen = desModes[suite].key * 8
                    ivLen = desModes[suite].iv
                } else {
                    throw new TypeError('invalid suite type')
                }
                var keys = ebtk(password, false, keyLen, ivLen)
                return createDecipheriv(suite, keys.key, keys.iv)
            }

            function createCipheriv(suite, key, iv) {
                suite = suite.toLowerCase()
                if (aesModes[suite]) {
                    return aes.createCipheriv(suite, key, iv)
                } else if (desModes[suite]) {
                    return new DES({
                        key: key,
                        iv: iv,
                        mode: suite
                    })
                } else {
                    throw new TypeError('invalid suite type')
                }
            }

            function createDecipheriv(suite, key, iv) {
                suite = suite.toLowerCase()
                if (aesModes[suite]) {
                    return aes.createDecipheriv(suite, key, iv)
                } else if (desModes[suite]) {
                    return new DES({
                        key: key,
                        iv: iv,
                        mode: suite,
                        decrypt: true
                    })
                } else {
                    throw new TypeError('invalid suite type')
                }
            }

            exports.createCipher = exports.Cipher = createCipher
            exports.createCipheriv = exports.Cipheriv = createCipheriv
            exports.createDecipher = exports.Decipher = createDecipher
            exports.createDecipheriv = exports.Decipheriv = createDecipheriv

            function getCiphers() {
                return Object.keys(desModes).concat(aes.getCiphers())
            }

            exports.listCiphers = exports.getCiphers = getCiphers

        }, {
            "browserify-aes/browser": 25,
            "browserify-aes/modes": 29,
            "browserify-des": 39,
            "browserify-des/modes": 40,
            "evp_bytestokey": 128
        }],
        39: [function (require, module, exports) {
            (function (Buffer) {
                var CipherBase = require('cipher-base')
                var des = require('des.js')
                var inherits = require('inherits')

                var modes = {
                    'des-ede3-cbc': des.CBC.instantiate(des.EDE),
                    'des-ede3': des.EDE,
                    'des-ede-cbc': des.CBC.instantiate(des.EDE),
                    'des-ede': des.EDE,
                    'des-cbc': des.CBC.instantiate(des.DES),
                    'des-ecb': des.DES
                }
                modes.des = modes['des-cbc']
                modes.des3 = modes['des-ede3-cbc']
                module.exports = DES
                inherits(DES, CipherBase)

                function DES(opts) {
                    CipherBase.call(this)
                    var modeName = opts.mode.toLowerCase()
                    var mode = modes[modeName]
                    var type
                    if (opts.decrypt) {
                        type = 'decrypt'
                    } else {
                        type = 'encrypt'
                    }
                    var key = opts.key
                    if (modeName === 'des-ede' || modeName === 'des-ede-cbc') {
                        key = Buffer.concat([key, key.slice(0, 8)])
                    }
                    var iv = opts.iv
                    this._des = mode.create({
                        key: key,
                        iv: iv,
                        type: type
                    })
                }

                DES.prototype._update = function (data) {
                    return new Buffer(this._des.update(data))
                }
                DES.prototype._final = function () {
                    return new Buffer(this._des.final())
                }

            }).call(this, require("buffer").Buffer)
        }, {"buffer": 57, "cipher-base": 59, "des.js": 101, "inherits": 143}],
        40: [function (require, module, exports) {
            exports['des-ecb'] = {
                key: 8,
                iv: 0
            }
            exports['des-cbc'] = exports.des = {
                key: 8,
                iv: 8
            }
            exports['des-ede3-cbc'] = exports.des3 = {
                key: 24,
                iv: 8
            }
            exports['des-ede3'] = {
                key: 24,
                iv: 0
            }
            exports['des-ede-cbc'] = {
                key: 16,
                iv: 8
            }
            exports['des-ede'] = {
                key: 16,
                iv: 0
            }

        }, {}],
        41: [function (require, module, exports) {
            (function (Buffer) {
                var bn = require('bn.js');
                var randomBytes = require('randombytes');
                module.exports = crt;

                function blind(priv) {
                    var r = getr(priv);
                    var blinder = r.toRed(bn.mont(priv.modulus))
                        .redPow(new bn(priv.publicExponent)).fromRed();
                    return {
                        blinder: blinder,
                        unblinder: r.invm(priv.modulus)
                    };
                }

                function crt(msg, priv) {
                    var blinds = blind(priv);
                    var len = priv.modulus.byteLength();
                    var mod = bn.mont(priv.modulus);
                    var blinded = new bn(msg).mul(blinds.blinder).umod(priv.modulus);
                    var c1 = blinded.toRed(bn.mont(priv.prime1));
                    var c2 = blinded.toRed(bn.mont(priv.prime2));
                    var qinv = priv.coefficient;
                    var p = priv.prime1;
                    var q = priv.prime2;
                    var m1 = c1.redPow(priv.exponent1);
                    var m2 = c2.redPow(priv.exponent2);
                    m1 = m1.fromRed();
                    m2 = m2.fromRed();
                    var h = m1.isub(m2).imul(qinv).umod(p);
                    h.imul(q);
                    m2.iadd(h);
                    return new Buffer(m2.imul(blinds.unblinder).umod(priv.modulus).toArray(false, len));
                }

                crt.getr = getr;

                function getr(priv) {
                    var len = priv.modulus.byteLength();
                    var r = new bn(randomBytes(len));
                    while (r.cmp(priv.modulus) >= 0 || !r.umod(priv.prime1) || !r.umod(priv.prime2)) {
                        r = new bn(randomBytes(len));
                    }
                    return r;
                }

            }).call(this, require("buffer").Buffer)
        }, {"bn.js": 20, "buffer": 57, "randombytes": 168}],
        42: [function (require, module, exports) {
            module.exports = require('./browser/algorithms.json')

        }, {"./browser/algorithms.json": 43}],
        43: [function (require, module, exports) {
            module.exports = {
                "sha224WithRSAEncryption": {
                    "sign": "rsa",
                    "hash": "sha224",
                    "id": "302d300d06096086480165030402040500041c"
                },
                "RSA-SHA224": {
                    "sign": "ecdsa/rsa",
                    "hash": "sha224",
                    "id": "302d300d06096086480165030402040500041c"
                },
                "sha256WithRSAEncryption": {
                    "sign": "rsa",
                    "hash": "sha256",
                    "id": "3031300d060960864801650304020105000420"
                },
                "RSA-SHA256": {
                    "sign": "ecdsa/rsa",
                    "hash": "sha256",
                    "id": "3031300d060960864801650304020105000420"
                },
                "sha384WithRSAEncryption": {
                    "sign": "rsa",
                    "hash": "sha384",
                    "id": "3041300d060960864801650304020205000430"
                },
                "RSA-SHA384": {
                    "sign": "ecdsa/rsa",
                    "hash": "sha384",
                    "id": "3041300d060960864801650304020205000430"
                },
                "sha512WithRSAEncryption": {
                    "sign": "rsa",
                    "hash": "sha512",
                    "id": "3051300d060960864801650304020305000440"
                },
                "RSA-SHA512": {
                    "sign": "ecdsa/rsa",
                    "hash": "sha512",
                    "id": "3051300d060960864801650304020305000440"
                },
                "RSA-SHA1": {
                    "sign": "rsa",
                    "hash": "sha1",
                    "id": "3021300906052b0e03021a05000414"
                },
                "ecdsa-with-SHA1": {
                    "sign": "ecdsa",
                    "hash": "sha1",
                    "id": ""
                },
                "sha256": {
                    "sign": "ecdsa",
                    "hash": "sha256",
                    "id": ""
                },
                "sha224": {
                    "sign": "ecdsa",
                    "hash": "sha224",
                    "id": ""
                },
                "sha384": {
                    "sign": "ecdsa",
                    "hash": "sha384",
                    "id": ""
                },
                "sha512": {
                    "sign": "ecdsa",
                    "hash": "sha512",
                    "id": ""
                },
                "DSA-SHA": {
                    "sign": "dsa",
                    "hash": "sha1",
                    "id": ""
                },
                "DSA-SHA1": {
                    "sign": "dsa",
                    "hash": "sha1",
                    "id": ""
                },
                "DSA": {
                    "sign": "dsa",
                    "hash": "sha1",
                    "id": ""
                },
                "DSA-WITH-SHA224": {
                    "sign": "dsa",
                    "hash": "sha224",
                    "id": ""
                },
                "DSA-SHA224": {
                    "sign": "dsa",
                    "hash": "sha224",
                    "id": ""
                },
                "DSA-WITH-SHA256": {
                    "sign": "dsa",
                    "hash": "sha256",
                    "id": ""
                },
                "DSA-SHA256": {
                    "sign": "dsa",
                    "hash": "sha256",
                    "id": ""
                },
                "DSA-WITH-SHA384": {
                    "sign": "dsa",
                    "hash": "sha384",
                    "id": ""
                },
                "DSA-SHA384": {
                    "sign": "dsa",
                    "hash": "sha384",
                    "id": ""
                },
                "DSA-WITH-SHA512": {
                    "sign": "dsa",
                    "hash": "sha512",
                    "id": ""
                },
                "DSA-SHA512": {
                    "sign": "dsa",
                    "hash": "sha512",
                    "id": ""
                },
                "DSA-RIPEMD160": {
                    "sign": "dsa",
                    "hash": "rmd160",
                    "id": ""
                },
                "ripemd160WithRSA": {
                    "sign": "rsa",
                    "hash": "rmd160",
                    "id": "3021300906052b2403020105000414"
                },
                "RSA-RIPEMD160": {
                    "sign": "rsa",
                    "hash": "rmd160",
                    "id": "3021300906052b2403020105000414"
                },
                "md5WithRSAEncryption": {
                    "sign": "rsa",
                    "hash": "md5",
                    "id": "3020300c06082a864886f70d020505000410"
                },
                "RSA-MD5": {
                    "sign": "rsa",
                    "hash": "md5",
                    "id": "3020300c06082a864886f70d020505000410"
                }
            }

        }, {}],
        44: [function (require, module, exports) {
            module.exports = {
                "1.3.132.0.10": "secp256k1",
                "1.3.132.0.33": "p224",
                "1.2.840.10045.3.1.1": "p192",
                "1.2.840.10045.3.1.7": "p256",
                "1.3.132.0.34": "p384",
                "1.3.132.0.35": "p521"
            }

        }, {}],
        45: [function (require, module, exports) {
            (function (Buffer) {
                var createHash = require('create-hash')
                var stream = require('stream')
                var inherits = require('inherits')
                var sign = require('./sign')
                var verify = require('./verify')

                var algorithms = require('./algorithms.json')
                Object.keys(algorithms).forEach(function (key) {
                    algorithms[key].id = new Buffer(algorithms[key].id, 'hex')
                    algorithms[key.toLowerCase()] = algorithms[key]
                })

                function Sign(algorithm) {
                    stream.Writable.call(this)

                    var data = algorithms[algorithm]
                    if (!data) throw new Error('Unknown message digest')

                    this._hashType = data.hash
                    this._hash = createHash(data.hash)
                    this._tag = data.id
                    this._signType = data.sign
                }

                inherits(Sign, stream.Writable)

                Sign.prototype._write = function _write(data, _, done) {
                    this._hash.update(data)
                    done()
                }

                Sign.prototype.update = function update(data, enc) {
                    if (typeof data === 'string') data = new Buffer(data, enc)

                    this._hash.update(data)
                    return this
                }

                Sign.prototype.sign = function signMethod(key, enc) {
                    this.end()
                    var hash = this._hash.digest()
                    var sig = sign(hash, key, this._hashType, this._signType, this._tag)

                    return enc ? sig.toString(enc) : sig
                }

                function Verify(algorithm) {
                    stream.Writable.call(this)

                    var data = algorithms[algorithm]
                    if (!data) throw new Error('Unknown message digest')

                    this._hash = createHash(data.hash)
                    this._tag = data.id
                    this._signType = data.sign
                }

                inherits(Verify, stream.Writable)

                Verify.prototype._write = function _write(data, _, done) {
                    this._hash.update(data)
                    done()
                }

                Verify.prototype.update = function update(data, enc) {
                    if (typeof data === 'string') data = new Buffer(data, enc)

                    this._hash.update(data)
                    return this
                }

                Verify.prototype.verify = function verifyMethod(key, sig, enc) {
                    if (typeof sig === 'string') sig = new Buffer(sig, enc)

                    this.end()
                    var hash = this._hash.digest()
                    return verify(sig, hash, key, this._signType, this._tag)
                }

                function createSign(algorithm) {
                    return new Sign(algorithm)
                }

                function createVerify(algorithm) {
                    return new Verify(algorithm)
                }

                module.exports = {
                    Sign: createSign,
                    Verify: createVerify,
                    createSign: createSign,
                    createVerify: createVerify
                }

            }).call(this, require("buffer").Buffer)
        }, {
            "./algorithms.json": 43,
            "./sign": 46,
            "./verify": 47,
            "buffer": 57,
            "create-hash": 62,
            "inherits": 143,
            "stream": 193
        }],
        46: [function (require, module, exports) {
            (function (Buffer) {
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
                var createHmac = require('create-hmac')
                var crt = require('browserify-rsa')
                var EC = require('elliptic').ec
                var BN = require('bn.js')
                var parseKeys = require('parse-asn1')
                var curves = require('./curves.json')

                function sign(hash, key, hashType, signType, tag) {
                    var priv = parseKeys(key)
                    if (priv.curve) {
                        // rsa keys can be interpreted as ecdsa ones in openssl
                        if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
                        return ecSign(hash, priv)
                    } else if (priv.type === 'dsa') {
                        if (signType !== 'dsa') throw new Error('wrong private key type')
                        return dsaSign(hash, priv, hashType)
                    } else {
                        if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
                    }
                    hash = Buffer.concat([tag, hash])
                    var len = priv.modulus.byteLength()
                    var pad = [0, 1]
                    while (hash.length + pad.length + 1 < len) pad.push(0xff)
                    pad.push(0x00)
                    var i = -1
                    while (++i < hash.length) pad.push(hash[i])

                    var out = crt(pad, priv)
                    return out
                }

                function ecSign(hash, priv) {
                    var curveId = curves[priv.curve.join('.')]
                    if (!curveId) throw new Error('unknown curve ' + priv.curve.join('.'))

                    var curve = new EC(curveId)
                    var key = curve.keyFromPrivate(priv.privateKey)
                    var out = key.sign(hash)

                    return new Buffer(out.toDER())
                }

                function dsaSign(hash, priv, algo) {
                    var x = priv.params.priv_key
                    var p = priv.params.p
                    var q = priv.params.q
                    var g = priv.params.g
                    var r = new BN(0)
                    var k
                    var H = bits2int(hash, q).mod(q)
                    var s = false
                    var kv = getKey(x, q, hash, algo)
                    while (s === false) {
                        k = makeKey(q, kv, algo)
                        r = makeR(g, k, p, q)
                        s = k.invm(q).imul(H.add(x.mul(r))).mod(q)
                        if (s.cmpn(0) === 0) {
                            s = false
                            r = new BN(0)
                        }
                    }
                    return toDER(r, s)
                }

                function toDER(r, s) {
                    r = r.toArray()
                    s = s.toArray()

                    // Pad values
                    if (r[0] & 0x80) r = [0].concat(r)
                    if (s[0] & 0x80) s = [0].concat(s)

                    var total = r.length + s.length + 4
                    var res = [0x30, total, 0x02, r.length]
                    res = res.concat(r, [0x02, s.length], s)
                    return new Buffer(res)
                }

                function getKey(x, q, hash, algo) {
                    x = new Buffer(x.toArray())
                    if (x.length < q.byteLength()) {
                        var zeros = new Buffer(q.byteLength() - x.length)
                        zeros.fill(0)
                        x = Buffer.concat([zeros, x])
                    }
                    var hlen = hash.length
                    var hbits = bits2octets(hash, q)
                    var v = new Buffer(hlen)
                    v.fill(1)
                    var k = new Buffer(hlen)
                    k.fill(0)
                    k = createHmac(algo, k).update(v).update(new Buffer([0])).update(x).update(hbits).digest()
                    v = createHmac(algo, k).update(v).digest()
                    k = createHmac(algo, k).update(v).update(new Buffer([1])).update(x).update(hbits).digest()
                    v = createHmac(algo, k).update(v).digest()
                    return {k: k, v: v}
                }

                function bits2int(obits, q) {
                    var bits = new BN(obits)
                    var shift = (obits.length << 3) - q.bitLength()
                    if (shift > 0) bits.ishrn(shift)
                    return bits
                }

                function bits2octets(bits, q) {
                    bits = bits2int(bits, q)
                    bits = bits.mod(q)
                    var out = new Buffer(bits.toArray())
                    if (out.length < q.byteLength()) {
                        var zeros = new Buffer(q.byteLength() - out.length)
                        zeros.fill(0)
                        out = Buffer.concat([zeros, out])
                    }
                    return out
                }

                function makeKey(q, kv, algo) {
                    var t
                    var k

                    do {
                        t = new Buffer(0)

                        while (t.length * 8 < q.bitLength()) {
                            kv.v = createHmac(algo, kv.k).update(kv.v).digest()
                            t = Buffer.concat([t, kv.v])
                        }

                        k = bits2int(t, q)
                        kv.k = createHmac(algo, kv.k).update(kv.v).update(new Buffer([0])).digest()
                        kv.v = createHmac(algo, kv.k).update(kv.v).digest()
                    } while (k.cmp(q) !== -1)

                    return k
                }

                function makeR(g, k, p, q) {
                    return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q)
                }

                module.exports = sign
                module.exports.getKey = getKey
                module.exports.makeKey = makeKey

            }).call(this, require("buffer").Buffer)
        }, {
            "./curves.json": 44,
            "bn.js": 20,
            "browserify-rsa": 41,
            "buffer": 57,
            "create-hmac": 65,
            "elliptic": 111,
            "parse-asn1": 153
        }],
        47: [function (require, module, exports) {
            (function (Buffer) {
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
                var BN = require('bn.js')
                var EC = require('elliptic').ec
                var parseKeys = require('parse-asn1')
                var curves = require('./curves.json')

                function verify(sig, hash, key, signType, tag) {
                    var pub = parseKeys(key)
                    if (pub.type === 'ec') {
                        // rsa keys can be interpreted as ecdsa ones in openssl
                        if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
                        return ecVerify(sig, hash, pub)
                    } else if (pub.type === 'dsa') {
                        if (signType !== 'dsa') throw new Error('wrong public key type')
                        return dsaVerify(sig, hash, pub)
                    } else {
                        if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
                    }
                    hash = Buffer.concat([tag, hash])
                    var len = pub.modulus.byteLength()
                    var pad = [1]
                    var padNum = 0
                    while (hash.length + pad.length + 2 < len) {
                        pad.push(0xff)
                        padNum++
                    }
                    pad.push(0x00)
                    var i = -1
                    while (++i < hash.length) {
                        pad.push(hash[i])
                    }
                    pad = new Buffer(pad)
                    var red = BN.mont(pub.modulus)
                    sig = new BN(sig).toRed(red)

                    sig = sig.redPow(new BN(pub.publicExponent))
                    sig = new Buffer(sig.fromRed().toArray())
                    var out = padNum < 8 ? 1 : 0
                    len = Math.min(sig.length, pad.length)
                    if (sig.length !== pad.length) out = 1

                    i = -1
                    while (++i < len) out |= sig[i] ^ pad[i]
                    return out === 0
                }

                function ecVerify(sig, hash, pub) {
                    var curveId = curves[pub.data.algorithm.curve.join('.')]
                    if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'))

                    var curve = new EC(curveId)
                    var pubkey = pub.data.subjectPrivateKey.data

                    return curve.verify(hash, sig, pubkey)
                }

                function dsaVerify(sig, hash, pub) {
                    var p = pub.data.p
                    var q = pub.data.q
                    var g = pub.data.g
                    var y = pub.data.pub_key
                    var unpacked = parseKeys.signature.decode(sig, 'der')
                    var s = unpacked.s
                    var r = unpacked.r
                    checkValue(s, q)
                    checkValue(r, q)
                    var montp = BN.mont(p)
                    var w = s.invm(q)
                    var v = g.toRed(montp)
                        .redPow(new BN(hash).mul(w).mod(q))
                        .fromRed()
                        .mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed())
                        .mod(p)
                        .mod(q)
                    return v.cmp(r) === 0
                }

                function checkValue(b, q) {
                    if (b.cmpn(0) <= 0) throw new Error('invalid sig')
                    if (b.cmp(q) >= q) throw new Error('invalid sig')
                }

                module.exports = verify

            }).call(this, require("buffer").Buffer)
        }, {"./curves.json": 44, "bn.js": 20, "buffer": 57, "elliptic": 111, "parse-asn1": 153}],
        48: [function (require, module, exports) {

            var indexOf = [].indexOf;

            module.exports = function (arr, obj) {
                if (indexOf) return arr.indexOf(obj);
                for (var i = 0; i < arr.length; ++i) {
                    if (arr[i] === obj) return i;
                }
                return -1;
            };
        }, {}],
        49: [function (require, module, exports) {
// shim for using process in browser
            var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

            var cachedSetTimeout;
            var cachedClearTimeout;

            function defaultSetTimout() {
                throw new Error('setTimeout has not been defined');
            }

            function defaultClearTimeout() {
                throw new Error('clearTimeout has not been defined');
            }

            (function () {
                try {
                    if (typeof setTimeout === 'function') {
                        cachedSetTimeout = setTimeout;
                    } else {
                        cachedSetTimeout = defaultSetTimout;
                    }
                } catch (e) {
                    cachedSetTimeout = defaultSetTimout;
                }
                try {
                    if (typeof clearTimeout === 'function') {
                        cachedClearTimeout = clearTimeout;
                    } else {
                        cachedClearTimeout = defaultClearTimeout;
                    }
                } catch (e) {
                    cachedClearTimeout = defaultClearTimeout;
                }
            }())

            function runTimeout(fun) {
                if (cachedSetTimeout === setTimeout) {
                    //normal enviroments in sane situations
                    return setTimeout(fun, 0);
                }
                // if setTimeout wasn't available but was latter defined
                if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
                    cachedSetTimeout = setTimeout;
                    return setTimeout(fun, 0);
                }
                try {
                    // when when somebody has screwed with setTimeout but no I.E. maddness
                    return cachedSetTimeout(fun, 0);
                } catch (e) {
                    try {
                        // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                        return cachedSetTimeout.call(null, fun, 0);
                    } catch (e) {
                        // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                        return cachedSetTimeout.call(this, fun, 0);
                    }
                }


            }

            function runClearTimeout(marker) {
                if (cachedClearTimeout === clearTimeout) {
                    //normal enviroments in sane situations
                    return clearTimeout(marker);
                }
                // if clearTimeout wasn't available but was latter defined
                if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
                    cachedClearTimeout = clearTimeout;
                    return clearTimeout(marker);
                }
                try {
                    // when when somebody has screwed with setTimeout but no I.E. maddness
                    return cachedClearTimeout(marker);
                } catch (e) {
                    try {
                        // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                        return cachedClearTimeout.call(null, marker);
                    } catch (e) {
                        // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                        // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                        return cachedClearTimeout.call(this, marker);
                    }
                }


            }

            var queue = [];
            var draining = false;
            var currentQueue;
            var queueIndex = -1;

            function cleanUpNextTick() {
                if (!draining || !currentQueue) {
                    return;
                }
                draining = false;
                if (currentQueue.length) {
                    queue = currentQueue.concat(queue);
                } else {
                    queueIndex = -1;
                }
                if (queue.length) {
                    drainQueue();
                }
            }

            function drainQueue() {
                if (draining) {
                    return;
                }
                var timeout = runTimeout(cleanUpNextTick);
                draining = true;

                var len = queue.length;
                while (len) {
                    currentQueue = queue;
                    queue = [];
                    while (++queueIndex < len) {
                        if (currentQueue) {
                            currentQueue[queueIndex].run();
                        }
                    }
                    queueIndex = -1;
                    len = queue.length;
                }
                currentQueue = null;
                draining = false;
                runClearTimeout(timeout);
            }

            process.nextTick = function (fun) {
                var args = new Array(arguments.length - 1);
                if (arguments.length > 1) {
                    for (var i = 1; i < arguments.length; i++) {
                        args[i - 1] = arguments[i];
                    }
                }
                queue.push(new Item(fun, args));
                if (queue.length === 1 && !draining) {
                    runTimeout(drainQueue);
                }
            };

// v8 likes predictible objects
            function Item(fun, array) {
                this.fun = fun;
                this.array = array;
            }

            Item.prototype.run = function () {
                this.fun.apply(null, this.array);
            };
            process.title = 'browser';
            process.browser = true;
            process.env = {};
            process.argv = [];
            process.version = ''; // empty string to avoid regexp issues
            process.versions = {};

            function noop() {
            }

            process.on = noop;
            process.addListener = noop;
            process.once = noop;
            process.off = noop;
            process.removeListener = noop;
            process.removeAllListeners = noop;
            process.emit = noop;
            process.prependListener = noop;
            process.prependOnceListener = noop;

            process.listeners = function (name) {
                return []
            }

            process.binding = function (name) {
                throw new Error('process.binding is not supported');
            };

            process.cwd = function () {
                return '/'
            };
            process.chdir = function (dir) {
                throw new Error('process.chdir is not supported');
            };
            process.umask = function () {
                return 0;
            };

        }, {}],
        50: [function (require, module, exports) {
            'use strict';

            var Buffer = require('safe-buffer').Buffer;

            var isEncoding = Buffer.isEncoding || function (encoding) {
                encoding = '' + encoding;
                switch (encoding && encoding.toLowerCase()) {
                    case 'hex':
                    case 'utf8':
                    case 'utf-8':
                    case 'ascii':
                    case 'binary':
                    case 'base64':
                    case 'ucs2':
                    case 'ucs-2':
                    case 'utf16le':
                    case 'utf-16le':
                    case 'raw':
                        return true;
                    default:
                        return false;
                }
            };

            function _normalizeEncoding(enc) {
                if (!enc) return 'utf8';
                var retried;
                while (true) {
                    switch (enc) {
                        case 'utf8':
                        case 'utf-8':
                            return 'utf8';
                        case 'ucs2':
                        case 'ucs-2':
                        case 'utf16le':
                        case 'utf-16le':
                            return 'utf16le';
                        case 'latin1':
                        case 'binary':
                            return 'latin1';
                        case 'base64':
                        case 'ascii':
                        case 'hex':
                            return enc;
                        default:
                            if (retried) return; // undefined
                            enc = ('' + enc).toLowerCase();
                            retried = true;
                    }
                }
            };

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
            function normalizeEncoding(enc) {
                var nenc = _normalizeEncoding(enc);
                if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
                return nenc || enc;
            }

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
            exports.StringDecoder = StringDecoder;

            function StringDecoder(encoding) {
                this.encoding = normalizeEncoding(encoding);
                var nb;
                switch (this.encoding) {
                    case 'utf16le':
                        this.text = utf16Text;
                        this.end = utf16End;
                        nb = 4;
                        break;
                    case 'utf8':
                        this.fillLast = utf8FillLast;
                        nb = 4;
                        break;
                    case 'base64':
                        this.text = base64Text;
                        this.end = base64End;
                        nb = 3;
                        break;
                    default:
                        this.write = simpleWrite;
                        this.end = simpleEnd;
                        return;
                }
                this.lastNeed = 0;
                this.lastTotal = 0;
                this.lastChar = Buffer.allocUnsafe(nb);
            }

            StringDecoder.prototype.write = function (buf) {
                if (buf.length === 0) return '';
                var r;
                var i;
                if (this.lastNeed) {
                    r = this.fillLast(buf);
                    if (r === undefined) return '';
                    i = this.lastNeed;
                    this.lastNeed = 0;
                } else {
                    i = 0;
                }
                if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
                return r || '';
            };

            StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
            StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
            StringDecoder.prototype.fillLast = function (buf) {
                if (this.lastNeed <= buf.length) {
                    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
                    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
                }
                buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
                this.lastNeed -= buf.length;
            };

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte.
            function utf8CheckByte(byte) {
                if (byte <= 0x7F) return 0; else if (byte >> 5 === 0x06) return 2; else if (byte >> 4 === 0x0E) return 3; else if (byte >> 3 === 0x1E) return 4;
                return -1;
            }

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
            function utf8CheckIncomplete(self, buf, i) {
                var j = buf.length - 1;
                if (j < i) return 0;
                var nb = utf8CheckByte(buf[j]);
                if (nb >= 0) {
                    if (nb > 0) self.lastNeed = nb - 1;
                    return nb;
                }
                if (--j < i) return 0;
                nb = utf8CheckByte(buf[j]);
                if (nb >= 0) {
                    if (nb > 0) self.lastNeed = nb - 2;
                    return nb;
                }
                if (--j < i) return 0;
                nb = utf8CheckByte(buf[j]);
                if (nb >= 0) {
                    if (nb > 0) {
                        if (nb === 2) nb = 0; else self.lastNeed = nb - 3;
                    }
                    return nb;
                }
                return 0;
            }

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// UTF-8 replacement characters ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
            function utf8CheckExtraBytes(self, buf, p) {
                if ((buf[0] & 0xC0) !== 0x80) {
                    self.lastNeed = 0;
                    return '\ufffd'.repeat(p);
                }
                if (self.lastNeed > 1 && buf.length > 1) {
                    if ((buf[1] & 0xC0) !== 0x80) {
                        self.lastNeed = 1;
                        return '\ufffd'.repeat(p + 1);
                    }
                    if (self.lastNeed > 2 && buf.length > 2) {
                        if ((buf[2] & 0xC0) !== 0x80) {
                            self.lastNeed = 2;
                            return '\ufffd'.repeat(p + 2);
                        }
                    }
                }
            }

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
            function utf8FillLast(buf) {
                var p = this.lastTotal - this.lastNeed;
                var r = utf8CheckExtraBytes(this, buf, p);
                if (r !== undefined) return r;
                if (this.lastNeed <= buf.length) {
                    buf.copy(this.lastChar, p, 0, this.lastNeed);
                    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
                }
                buf.copy(this.lastChar, p, 0, buf.length);
                this.lastNeed -= buf.length;
            }

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
            function utf8Text(buf, i) {
                var total = utf8CheckIncomplete(this, buf, i);
                if (!this.lastNeed) return buf.toString('utf8', i);
                this.lastTotal = total;
                var end = buf.length - (total - this.lastNeed);
                buf.copy(this.lastChar, 0, end);
                return buf.toString('utf8', i, end);
            }

// For UTF-8, a replacement character for each buffered byte of a (partial)
// character needs to be added to the output.
            function utf8End(buf) {
                var r = buf && buf.length ? this.write(buf) : '';
                if (this.lastNeed) return r + '\ufffd'.repeat(this.lastTotal - this.lastNeed);
                return r;
            }

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
            function utf16Text(buf, i) {
                if ((buf.length - i) % 2 === 0) {
                    var r = buf.toString('utf16le', i);
                    if (r) {
                        var c = r.charCodeAt(r.length - 1);
                        if (c >= 0xD800 && c <= 0xDBFF) {
                            this.lastNeed = 2;
                            this.lastTotal = 4;
                            this.lastChar[0] = buf[buf.length - 2];
                            this.lastChar[1] = buf[buf.length - 1];
                            return r.slice(0, -1);
                        }
                    }
                    return r;
                }
                this.lastNeed = 1;
                this.lastTotal = 2;
                this.lastChar[0] = buf[buf.length - 1];
                return buf.toString('utf16le', i, buf.length - 1);
            }

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
            function utf16End(buf) {
                var r = buf && buf.length ? this.write(buf) : '';
                if (this.lastNeed) {
                    var end = this.lastTotal - this.lastNeed;
                    return r + this.lastChar.toString('utf16le', 0, end);
                }
                return r;
            }

            function base64Text(buf, i) {
                var n = (buf.length - i) % 3;
                if (n === 0) return buf.toString('base64', i);
                this.lastNeed = 3 - n;
                this.lastTotal = 3;
                if (n === 1) {
                    this.lastChar[0] = buf[buf.length - 1];
                } else {
                    this.lastChar[0] = buf[buf.length - 2];
                    this.lastChar[1] = buf[buf.length - 1];
                }
                return buf.toString('base64', i, buf.length - n);
            }

            function base64End(buf) {
                var r = buf && buf.length ? this.write(buf) : '';
                if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
                return r;
            }

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
            function simpleWrite(buf) {
                return buf.toString(this.encoding);
            }

            function simpleEnd(buf) {
                return buf && buf.length ? this.write(buf) : '';
            }
        }, {"safe-buffer": 184}],
        51: [function (require, module, exports) {
            var nextTick = require('process/browser.js').nextTick;
            var apply = Function.prototype.apply;
            var slice = Array.prototype.slice;
            var immediateIds = {};
            var nextImmediateId = 0;

// DOM APIs, for completeness

            exports.setTimeout = function () {
                return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
            };
            exports.setInterval = function () {
                return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
            };
            exports.clearTimeout =
                exports.clearInterval = function (timeout) {
                    timeout.close();
                };

            function Timeout(id, clearFn) {
                this._id = id;
                this._clearFn = clearFn;
            }

            Timeout.prototype.unref = Timeout.prototype.ref = function () {
            };
            Timeout.prototype.close = function () {
                this._clearFn.call(window, this._id);
            };

// Does not start the time, just sets up the members needed.
            exports.enroll = function (item, msecs) {
                clearTimeout(item._idleTimeoutId);
                item._idleTimeout = msecs;
            };

            exports.unenroll = function (item) {
                clearTimeout(item._idleTimeoutId);
                item._idleTimeout = -1;
            };

            exports._unrefActive = exports.active = function (item) {
                clearTimeout(item._idleTimeoutId);

                var msecs = item._idleTimeout;
                if (msecs >= 0) {
                    item._idleTimeoutId = setTimeout(function onTimeout() {
                        if (item._onTimeout)
                            item._onTimeout();
                    }, msecs);
                }
            };

// That's not how node.js implements it but the exposed api is the same.
            exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function (fn) {
                var id = nextImmediateId++;
                var args = arguments.length < 2 ? false : slice.call(arguments, 1);

                immediateIds[id] = true;

                nextTick(function onNextTick() {
                    if (immediateIds[id]) {
                        // fn.call() is faster so we optimize for the common use-case
                        // @see http://jsperf.com/call-apply-segu
                        if (args) {
                            fn.apply(null, args);
                        } else {
                            fn.call(null);
                        }
                        // Prevent ids from leaking
                        exports.clearImmediate(id);
                    }
                });

                return id;
            };

            exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function (id) {
                delete immediateIds[id];
            };
        }, {"process/browser.js": 49}],
        52: [function (require, module, exports) {
            if (typeof Object.create === 'function') {
                // implementation from standard node.js 'util' module
                module.exports = function inherits(ctor, superCtor) {
                    ctor.super_ = superCtor
                    ctor.prototype = Object.create(superCtor.prototype, {
                        constructor: {
                            value: ctor,
                            enumerable: false,
                            writable: true,
                            configurable: true
                        }
                    });
                };
            } else {
                // old school shim for old browsers
                module.exports = function inherits(ctor, superCtor) {
                    ctor.super_ = superCtor
                    var TempCtor = function () {
                    }
                    TempCtor.prototype = superCtor.prototype
                    ctor.prototype = new TempCtor()
                    ctor.prototype.constructor = ctor
                }
            }

        }, {}],
        53: [function (require, module, exports) {
            module.exports = function isBuffer(arg) {
                return arg && typeof arg === 'object'
                    && typeof arg.copy === 'function'
                    && typeof arg.fill === 'function'
                    && typeof arg.readUInt8 === 'function';
            }
        }, {}],
        54: [function (require, module, exports) {
            (function (process, global) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

                var formatRegExp = /%[sdj%]/g;
                exports.format = function (f) {
                    if (!isString(f)) {
                        var objects = [];
                        for (var i = 0; i < arguments.length; i++) {
                            objects.push(inspect(arguments[i]));
                        }
                        return objects.join(' ');
                    }

                    var i = 1;
                    var args = arguments;
                    var len = args.length;
                    var str = String(f).replace(formatRegExp, function (x) {
                        if (x === '%%') return '%';
                        if (i >= len) return x;
                        switch (x) {
                            case '%s':
                                return String(args[i++]);
                            case '%d':
                                return Number(args[i++]);
                            case '%j':
                                try {
                                    return JSON.stringify(args[i++]);
                                } catch (_) {
                                    return '[Circular]';
                                }
                            default:
                                return x;
                        }
                    });
                    for (var x = args[i]; i < len; x = args[++i]) {
                        if (isNull(x) || !isObject(x)) {
                            str += ' ' + x;
                        } else {
                            str += ' ' + inspect(x);
                        }
                    }
                    return str;
                };


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
                exports.deprecate = function (fn, msg) {
                    // Allow for deprecating things in the process of starting up.
                    if (isUndefined(global.process)) {
                        return function () {
                            return exports.deprecate(fn, msg).apply(this, arguments);
                        };
                    }

                    if (process.noDeprecation === true) {
                        return fn;
                    }

                    var warned = false;

                    function deprecated() {
                        if (!warned) {
                            if (process.throwDeprecation) {
                                throw new Error(msg);
                            } else if (process.traceDeprecation) {
                                console.trace(msg);
                            } else {
                                console.error(msg);
                            }
                            warned = true;
                        }
                        return fn.apply(this, arguments);
                    }

                    return deprecated;
                };


                var debugs = {};
                var debugEnviron;
                exports.debuglog = function (set) {
                    if (isUndefined(debugEnviron))
                        debugEnviron = process.env.NODE_DEBUG || '';
                    set = set.toUpperCase();
                    if (!debugs[set]) {
                        if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
                            var pid = process.pid;
                            debugs[set] = function () {
                                var msg = exports.format.apply(exports, arguments);
                                console.error('%s %d: %s', set, pid, msg);
                            };
                        } else {
                            debugs[set] = function () {
                            };
                        }
                    }
                    return debugs[set];
                };


                /**
                 * Echos the value of a value. Trys to print the value out
                 * in the best way possible given the different types.
                 *
                 * @param {Object} obj The object to print out.
                 * @param {Object} opts Optional options object that alters the output.
                 */

                /* legacy: obj, showHidden, depth, colors*/
                function inspect(obj, opts) {
                    // default options
                    var ctx = {
                        seen: [],
                        stylize: stylizeNoColor
                    };
                    // legacy...
                    if (arguments.length >= 3) ctx.depth = arguments[2];
                    if (arguments.length >= 4) ctx.colors = arguments[3];
                    if (isBoolean(opts)) {
                        // legacy...
                        ctx.showHidden = opts;
                    } else if (opts) {
                        // got an "options" object
                        exports._extend(ctx, opts);
                    }
                    // set default options
                    if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
                    if (isUndefined(ctx.depth)) ctx.depth = 2;
                    if (isUndefined(ctx.colors)) ctx.colors = false;
                    if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
                    if (ctx.colors) ctx.stylize = stylizeWithColor;
                    return formatValue(ctx, obj, ctx.depth);
                }

                exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
                inspect.colors = {
                    'bold': [1, 22],
                    'italic': [3, 23],
                    'underline': [4, 24],
                    'inverse': [7, 27],
                    'white': [37, 39],
                    'grey': [90, 39],
                    'black': [30, 39],
                    'blue': [34, 39],
                    'cyan': [36, 39],
                    'green': [32, 39],
                    'magenta': [35, 39],
                    'red': [31, 39],
                    'yellow': [33, 39]
                };

// Don't use 'blue' not visible on cmd.exe
                inspect.styles = {
                    'special': 'cyan',
                    'number': 'yellow',
                    'boolean': 'yellow',
                    'undefined': 'grey',
                    'null': 'bold',
                    'string': 'green',
                    'date': 'magenta',
                    // "name": intentionally not styling
                    'regexp': 'red'
                };


                function stylizeWithColor(str, styleType) {
                    var style = inspect.styles[styleType];

                    if (style) {
                        return '\u001b[' + inspect.colors[style][0] + 'm' + str +
                            '\u001b[' + inspect.colors[style][1] + 'm';
                    } else {
                        return str;
                    }
                }


                function stylizeNoColor(str, styleType) {
                    return str;
                }


                function arrayToHash(array) {
                    var hash = {};

                    array.forEach(function (val, idx) {
                        hash[val] = true;
                    });

                    return hash;
                }


                function formatValue(ctx, value, recurseTimes) {
                    // Provide a hook for user-specified inspect functions.
                    // Check that value is an object with an inspect function on it
                    if (ctx.customInspect &&
                        value &&
                        isFunction(value.inspect) &&
                        // Filter out the util module, it's inspect function is special
                        value.inspect !== exports.inspect &&
                        // Also filter out any prototype objects using the circular check.
                        !(value.constructor && value.constructor.prototype === value)) {
                        var ret = value.inspect(recurseTimes, ctx);
                        if (!isString(ret)) {
                            ret = formatValue(ctx, ret, recurseTimes);
                        }
                        return ret;
                    }

                    // Primitive types cannot have properties
                    var primitive = formatPrimitive(ctx, value);
                    if (primitive) {
                        return primitive;
                    }

                    // Look up the keys of the object.
                    var keys = Object.keys(value);
                    var visibleKeys = arrayToHash(keys);

                    if (ctx.showHidden) {
                        keys = Object.getOwnPropertyNames(value);
                    }

                    // IE doesn't make error fields non-enumerable
                    // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
                    if (isError(value)
                        && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
                        return formatError(value);
                    }

                    // Some type of object without properties can be shortcutted.
                    if (keys.length === 0) {
                        if (isFunction(value)) {
                            var name = value.name ? ': ' + value.name : '';
                            return ctx.stylize('[Function' + name + ']', 'special');
                        }
                        if (isRegExp(value)) {
                            return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
                        }
                        if (isDate(value)) {
                            return ctx.stylize(Date.prototype.toString.call(value), 'date');
                        }
                        if (isError(value)) {
                            return formatError(value);
                        }
                    }

                    var base = '', array = false, braces = ['{', '}'];

                    // Make Array say that they are Array
                    if (isArray(value)) {
                        array = true;
                        braces = ['[', ']'];
                    }

                    // Make functions say that they are functions
                    if (isFunction(value)) {
                        var n = value.name ? ': ' + value.name : '';
                        base = ' [Function' + n + ']';
                    }

                    // Make RegExps say that they are RegExps
                    if (isRegExp(value)) {
                        base = ' ' + RegExp.prototype.toString.call(value);
                    }

                    // Make dates with properties first say the date
                    if (isDate(value)) {
                        base = ' ' + Date.prototype.toUTCString.call(value);
                    }

                    // Make error with message first say the error
                    if (isError(value)) {
                        base = ' ' + formatError(value);
                    }

                    if (keys.length === 0 && (!array || value.length == 0)) {
                        return braces[0] + base + braces[1];
                    }

                    if (recurseTimes < 0) {
                        if (isRegExp(value)) {
                            return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
                        } else {
                            return ctx.stylize('[Object]', 'special');
                        }
                    }

                    ctx.seen.push(value);

                    var output;
                    if (array) {
                        output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
                    } else {
                        output = keys.map(function (key) {
                            return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
                        });
                    }

                    ctx.seen.pop();

                    return reduceToSingleString(output, base, braces);
                }


                function formatPrimitive(ctx, value) {
                    if (isUndefined(value))
                        return ctx.stylize('undefined', 'undefined');
                    if (isString(value)) {
                        var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                            .replace(/'/g, "\\'")
                            .replace(/\\"/g, '"') + '\'';
                        return ctx.stylize(simple, 'string');
                    }
                    if (isNumber(value))
                        return ctx.stylize('' + value, 'number');
                    if (isBoolean(value))
                        return ctx.stylize('' + value, 'boolean');
                    // For some reason typeof null is "object", so special case here.
                    if (isNull(value))
                        return ctx.stylize('null', 'null');
                }


                function formatError(value) {
                    return '[' + Error.prototype.toString.call(value) + ']';
                }


                function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
                    var output = [];
                    for (var i = 0, l = value.length; i < l; ++i) {
                        if (hasOwnProperty(value, String(i))) {
                            output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
                                String(i), true));
                        } else {
                            output.push('');
                        }
                    }
                    keys.forEach(function (key) {
                        if (!key.match(/^\d+$/)) {
                            output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
                                key, true));
                        }
                    });
                    return output;
                }


                function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
                    var name, str, desc;
                    desc = Object.getOwnPropertyDescriptor(value, key) || {value: value[key]};
                    if (desc.get) {
                        if (desc.set) {
                            str = ctx.stylize('[Getter/Setter]', 'special');
                        } else {
                            str = ctx.stylize('[Getter]', 'special');
                        }
                    } else {
                        if (desc.set) {
                            str = ctx.stylize('[Setter]', 'special');
                        }
                    }
                    if (!hasOwnProperty(visibleKeys, key)) {
                        name = '[' + key + ']';
                    }
                    if (!str) {
                        if (ctx.seen.indexOf(desc.value) < 0) {
                            if (isNull(recurseTimes)) {
                                str = formatValue(ctx, desc.value, null);
                            } else {
                                str = formatValue(ctx, desc.value, recurseTimes - 1);
                            }
                            if (str.indexOf('\n') > -1) {
                                if (array) {
                                    str = str.split('\n').map(function (line) {
                                        return '  ' + line;
                                    }).join('\n').substr(2);
                                } else {
                                    str = '\n' + str.split('\n').map(function (line) {
                                        return '   ' + line;
                                    }).join('\n');
                                }
                            }
                        } else {
                            str = ctx.stylize('[Circular]', 'special');
                        }
                    }
                    if (isUndefined(name)) {
                        if (array && key.match(/^\d+$/)) {
                            return str;
                        }
                        name = JSON.stringify('' + key);
                        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
                            name = name.substr(1, name.length - 2);
                            name = ctx.stylize(name, 'name');
                        } else {
                            name = name.replace(/'/g, "\\'")
                                .replace(/\\"/g, '"')
                                .replace(/(^"|"$)/g, "'");
                            name = ctx.stylize(name, 'string');
                        }
                    }

                    return name + ': ' + str;
                }


                function reduceToSingleString(output, base, braces) {
                    var numLinesEst = 0;
                    var length = output.reduce(function (prev, cur) {
                        numLinesEst++;
                        if (cur.indexOf('\n') >= 0) numLinesEst++;
                        return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
                    }, 0);

                    if (length > 60) {
                        return braces[0] +
                            (base === '' ? '' : base + '\n ') +
                            ' ' +
                            output.join(',\n  ') +
                            ' ' +
                            braces[1];
                    }

                    return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
                }


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
                function isArray(ar) {
                    return Array.isArray(ar);
                }

                exports.isArray = isArray;

                function isBoolean(arg) {
                    return typeof arg === 'boolean';
                }

                exports.isBoolean = isBoolean;

                function isNull(arg) {
                    return arg === null;
                }

                exports.isNull = isNull;

                function isNullOrUndefined(arg) {
                    return arg == null;
                }

                exports.isNullOrUndefined = isNullOrUndefined;

                function isNumber(arg) {
                    return typeof arg === 'number';
                }

                exports.isNumber = isNumber;

                function isString(arg) {
                    return typeof arg === 'string';
                }

                exports.isString = isString;

                function isSymbol(arg) {
                    return typeof arg === 'symbol';
                }

                exports.isSymbol = isSymbol;

                function isUndefined(arg) {
                    return arg === void 0;
                }

                exports.isUndefined = isUndefined;

                function isRegExp(re) {
                    return isObject(re) && objectToString(re) === '[object RegExp]';
                }

                exports.isRegExp = isRegExp;

                function isObject(arg) {
                    return typeof arg === 'object' && arg !== null;
                }

                exports.isObject = isObject;

                function isDate(d) {
                    return isObject(d) && objectToString(d) === '[object Date]';
                }

                exports.isDate = isDate;

                function isError(e) {
                    return isObject(e) &&
                        (objectToString(e) === '[object Error]' || e instanceof Error);
                }

                exports.isError = isError;

                function isFunction(arg) {
                    return typeof arg === 'function';
                }

                exports.isFunction = isFunction;

                function isPrimitive(arg) {
                    return arg === null ||
                        typeof arg === 'boolean' ||
                        typeof arg === 'number' ||
                        typeof arg === 'string' ||
                        typeof arg === 'symbol' ||  // ES6 symbol
                        typeof arg === 'undefined';
                }

                exports.isPrimitive = isPrimitive;

                exports.isBuffer = require('./support/isBuffer');

                function objectToString(o) {
                    return Object.prototype.toString.call(o);
                }


                function pad(n) {
                    return n < 10 ? '0' + n.toString(10) : n.toString(10);
                }


                var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
                    'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
                function timestamp() {
                    var d = new Date();
                    var time = [pad(d.getHours()),
                        pad(d.getMinutes()),
                        pad(d.getSeconds())].join(':');
                    return [d.getDate(), months[d.getMonth()], time].join(' ');
                }


// log is just a thin wrapper to console.log that prepends a timestamp
                exports.log = function () {
                    console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
                };


                /**
                 * Inherit the prototype methods from one constructor into another.
                 *
                 * The Function.prototype.inherits from lang.js rewritten as a standalone
                 * function (not on Function.prototype). NOTE: If this file is to be loaded
                 * during bootstrapping this function needs to be rewritten using some native
                 * functions as prototype setup using normal JavaScript does not work as
                 * expected during bootstrapping (see mirror.js in r114903).
                 *
                 * @param {function} ctor Constructor function which needs to inherit the
                 *     prototype.
                 * @param {function} superCtor Constructor function to inherit prototype from.
                 */
                exports.inherits = require('inherits');

                exports._extend = function (origin, add) {
                    // Don't do anything if add isn't an object
                    if (!add || !isObject(add)) return origin;

                    var keys = Object.keys(add);
                    var i = keys.length;
                    while (i--) {
                        origin[keys[i]] = add[keys[i]];
                    }
                    return origin;
                };

                function hasOwnProperty(obj, prop) {
                    return Object.prototype.hasOwnProperty.call(obj, prop);
                }

            }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
        }, {"./support/isBuffer": 53, "_process": 49, "inherits": 52}],
        55: [function (require, module, exports) {
            var indexOf = require('indexof');

            var Object_keys = function (obj) {
                if (Object.keys) return Object.keys(obj)
                else {
                    var res = [];
                    for (var key in obj) res.push(key)
                    return res;
                }
            };

            var forEach = function (xs, fn) {
                if (xs.forEach) return xs.forEach(fn)
                else for (var i = 0; i < xs.length; i++) {
                    fn(xs[i], i, xs);
                }
            };

            var defineProp = (function () {
                try {
                    Object.defineProperty({}, '_', {});
                    return function (obj, name, value) {
                        Object.defineProperty(obj, name, {
                            writable: true,
                            enumerable: false,
                            configurable: true,
                            value: value
                        })
                    };
                } catch (e) {
                    return function (obj, name, value) {
                        obj[name] = value;
                    };
                }
            }());

            var globals = ['Array', 'Boolean', 'Date', 'Error', 'EvalError', 'Function',
                'Infinity', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'RangeError',
                'ReferenceError', 'RegExp', 'String', 'SyntaxError', 'TypeError', 'URIError',
                'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'escape',
                'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'unescape'];

            function Context() {
            }

            Context.prototype = {};

            var Script = exports.Script = function NodeScript(code) {
                if (!(this instanceof Script)) return new Script(code);
                this.code = code;
            };

            Script.prototype.runInContext = function (context) {
                if (!(context instanceof Context)) {
                    throw new TypeError("needs a 'context' argument.");
                }

                var iframe = document.createElement('iframe');
                if (!iframe.style) iframe.style = {};
                iframe.style.display = 'none';

                document.body.appendChild(iframe);

                var win = iframe.contentWindow;
                var wEval = win.eval, wExecScript = win.execScript;

                if (!wEval && wExecScript) {
                    // win.eval() magically appears when this is called in IE:
                    wExecScript.call(win, 'null');
                    wEval = win.eval;
                }

                forEach(Object_keys(context), function (key) {
                    win[key] = context[key];
                });
                forEach(globals, function (key) {
                    if (context[key]) {
                        win[key] = context[key];
                    }
                });

                var winKeys = Object_keys(win);

                var res = wEval.call(win, this.code);

                forEach(Object_keys(win), function (key) {
                    // Avoid copying circular objects like `top` and `window` by only
                    // updating existing context properties or new properties in the `win`
                    // that was only introduced after the eval.
                    if (key in context || indexOf(winKeys, key) === -1) {
                        context[key] = win[key];
                    }
                });

                forEach(globals, function (key) {
                    if (!(key in context)) {
                        defineProp(context, key, win[key]);
                    }
                });

                document.body.removeChild(iframe);

                return res;
            };

            Script.prototype.runInThisContext = function () {
                return eval(this.code); // maybe...
            };

            Script.prototype.runInNewContext = function (context) {
                var ctx = Script.createContext(context);
                var res = this.runInContext(ctx);

                forEach(Object_keys(ctx), function (key) {
                    context[key] = ctx[key];
                });

                return res;
            };

            forEach(Object_keys(Script.prototype), function (name) {
                exports[name] = Script[name] = function (code) {
                    var s = Script(code);
                    return s[name].apply(s, [].slice.call(arguments, 1));
                };
            });

            exports.createScript = function (code) {
                return exports.Script(code);
            };

            exports.createContext = Script.createContext = function (context) {
                var copy = new Context();
                if (typeof context === 'object') {
                    forEach(Object_keys(context), function (key) {
                        copy[key] = context[key];
                    });
                }
                return copy;
            };

        }, {"indexof": 48}],
        56: [function (require, module, exports) {
            (function (Buffer) {
                module.exports = function xor(a, b) {
                    var length = Math.min(a.length, b.length)
                    var buffer = new Buffer(length)

                    for (var i = 0; i < length; ++i) {
                        buffer[i] = a[i] ^ b[i]
                    }

                    return buffer
                }

            }).call(this, require("buffer").Buffer)
        }, {"buffer": 57}],
        57: [function (require, module, exports) {
            /*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
            /* eslint-disable no-proto */

            'use strict'

            var base64 = require('base64-js')
            var ieee754 = require('ieee754')

            exports.Buffer = Buffer
            exports.SlowBuffer = SlowBuffer
            exports.INSPECT_MAX_BYTES = 50

            var K_MAX_LENGTH = 0x7fffffff
            exports.kMaxLength = K_MAX_LENGTH

            /**
             * If `Buffer.TYPED_ARRAY_SUPPORT`:
             *   === true    Use Uint8Array implementation (fastest)
             *   === false   Print warning and recommend using `buffer` v4.x which has an Object
             *               implementation (most compatible, even IE6)
             *
             * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
             * Opera 11.6+, iOS 4.2+.
             *
             * We report that the browser does not support typed arrays if the are not subclassable
             * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
             * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
             * for __proto__ and has a buggy typed array implementation.
             */
            Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

            if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
                typeof console.error === 'function') {
                console.error(
                    'This browser lacks typed array (Uint8Array) support which is required by ' +
                    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
                )
            }

            function typedArraySupport() {
                // Can typed array instances can be augmented?
                try {
                    var arr = new Uint8Array(1)
                    arr.__proto__ = {
                        __proto__: Uint8Array.prototype, foo: function () {
                            return 42
                        }
                    }
                    return arr.foo() === 42
                } catch (e) {
                    return false
                }
            }

            function createBuffer(length) {
                if (length > K_MAX_LENGTH) {
                    throw new RangeError('Invalid typed array length')
                }
                // Return an augmented `Uint8Array` instance
                var buf = new Uint8Array(length)
                buf.__proto__ = Buffer.prototype
                return buf
            }

            /**
             * The Buffer constructor returns instances of `Uint8Array` that have their
             * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
             * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
             * and the `Uint8Array` methods. Square bracket notation works as expected -- it
             * returns a single octet.
             *
             * The `Uint8Array` prototype remains unmodified.
             */

            function Buffer(arg, encodingOrOffset, length) {
                // Common case.
                if (typeof arg === 'number') {
                    if (typeof encodingOrOffset === 'string') {
                        throw new Error(
                            'If encoding is specified then the first argument must be a string'
                        )
                    }
                    return allocUnsafe(arg)
                }
                return from(arg, encodingOrOffset, length)
            }

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
            if (typeof Symbol !== 'undefined' && Symbol.species &&
                Buffer[Symbol.species] === Buffer) {
                Object.defineProperty(Buffer, Symbol.species, {
                    value: null,
                    configurable: true,
                    enumerable: false,
                    writable: false
                })
            }

            Buffer.poolSize = 8192 // not used by this implementation

            function from(value, encodingOrOffset, length) {
                if (typeof value === 'number') {
                    throw new TypeError('"value" argument must not be a number')
                }

                if (isArrayBuffer(value)) {
                    return fromArrayBuffer(value, encodingOrOffset, length)
                }

                if (typeof value === 'string') {
                    return fromString(value, encodingOrOffset)
                }

                return fromObject(value)
            }

            /**
             * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
             * if value is a number.
             * Buffer.from(str[, encoding])
             * Buffer.from(array)
             * Buffer.from(buffer)
             * Buffer.from(arrayBuffer[, byteOffset[, length]])
             **/
            Buffer.from = function (value, encodingOrOffset, length) {
                return from(value, encodingOrOffset, length)
            }

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
            Buffer.prototype.__proto__ = Uint8Array.prototype
            Buffer.__proto__ = Uint8Array

            function assertSize(size) {
                if (typeof size !== 'number') {
                    throw new TypeError('"size" argument must be a number')
                } else if (size < 0) {
                    throw new RangeError('"size" argument must not be negative')
                }
            }

            function alloc(size, fill, encoding) {
                assertSize(size)
                if (size <= 0) {
                    return createBuffer(size)
                }
                if (fill !== undefined) {
                    // Only pay attention to encoding if it's a string. This
                    // prevents accidentally sending in a number that would
                    // be interpretted as a start offset.
                    return typeof encoding === 'string'
                        ? createBuffer(size).fill(fill, encoding)
                        : createBuffer(size).fill(fill)
                }
                return createBuffer(size)
            }

            /**
             * Creates a new filled Buffer instance.
             * alloc(size[, fill[, encoding]])
             **/
            Buffer.alloc = function (size, fill, encoding) {
                return alloc(size, fill, encoding)
            }

            function allocUnsafe(size) {
                assertSize(size)
                return createBuffer(size < 0 ? 0 : checked(size) | 0)
            }

            /**
             * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
             * */
            Buffer.allocUnsafe = function (size) {
                return allocUnsafe(size)
            }
            /**
             * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
             */
            Buffer.allocUnsafeSlow = function (size) {
                return allocUnsafe(size)
            }

            function fromString(string, encoding) {
                if (typeof encoding !== 'string' || encoding === '') {
                    encoding = 'utf8'
                }

                if (!Buffer.isEncoding(encoding)) {
                    throw new TypeError('"encoding" must be a valid string encoding')
                }

                var length = byteLength(string, encoding) | 0
                var buf = createBuffer(length)

                var actual = buf.write(string, encoding)

                if (actual !== length) {
                    // Writing a hex string, for example, that contains invalid characters will
                    // cause everything after the first invalid character to be ignored. (e.g.
                    // 'abxxcd' will be treated as 'ab')
                    buf = buf.slice(0, actual)
                }

                return buf
            }

            function fromArrayLike(array) {
                var length = array.length < 0 ? 0 : checked(array.length) | 0
                var buf = createBuffer(length)
                for (var i = 0; i < length; i += 1) {
                    buf[i] = array[i] & 255
                }
                return buf
            }

            function fromArrayBuffer(array, byteOffset, length) {
                if (byteOffset < 0 || array.byteLength < byteOffset) {
                    throw new RangeError('\'offset\' is out of bounds')
                }

                if (array.byteLength < byteOffset + (length || 0)) {
                    throw new RangeError('\'length\' is out of bounds')
                }

                var buf
                if (byteOffset === undefined && length === undefined) {
                    buf = new Uint8Array(array)
                } else if (length === undefined) {
                    buf = new Uint8Array(array, byteOffset)
                } else {
                    buf = new Uint8Array(array, byteOffset, length)
                }

                // Return an augmented `Uint8Array` instance
                buf.__proto__ = Buffer.prototype
                return buf
            }

            function fromObject(obj) {
                if (Buffer.isBuffer(obj)) {
                    var len = checked(obj.length) | 0
                    var buf = createBuffer(len)

                    if (buf.length === 0) {
                        return buf
                    }

                    obj.copy(buf, 0, 0, len)
                    return buf
                }

                if (obj) {
                    if (isArrayBufferView(obj) || 'length' in obj) {
                        if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
                            return createBuffer(0)
                        }
                        return fromArrayLike(obj)
                    }

                    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
                        return fromArrayLike(obj.data)
                    }
                }

                throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
            }

            function checked(length) {
                // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
                // length is NaN (which is otherwise coerced to zero.)
                if (length >= K_MAX_LENGTH) {
                    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                        'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
                }
                return length | 0
            }

            function SlowBuffer(length) {
                if (+length != length) { // eslint-disable-line eqeqeq
                    length = 0
                }
                return Buffer.alloc(+length)
            }

            Buffer.isBuffer = function isBuffer(b) {
                return b != null && b._isBuffer === true
            }

            Buffer.compare = function compare(a, b) {
                if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
                    throw new TypeError('Arguments must be Buffers')
                }

                if (a === b) return 0

                var x = a.length
                var y = b.length

                for (var i = 0, len = Math.min(x, y); i < len; ++i) {
                    if (a[i] !== b[i]) {
                        x = a[i]
                        y = b[i]
                        break
                    }
                }

                if (x < y) return -1
                if (y < x) return 1
                return 0
            }

            Buffer.isEncoding = function isEncoding(encoding) {
                switch (String(encoding).toLowerCase()) {
                    case 'hex':
                    case 'utf8':
                    case 'utf-8':
                    case 'ascii':
                    case 'latin1':
                    case 'binary':
                    case 'base64':
                    case 'ucs2':
                    case 'ucs-2':
                    case 'utf16le':
                    case 'utf-16le':
                        return true
                    default:
                        return false
                }
            }

            Buffer.concat = function concat(list, length) {
                if (!Array.isArray(list)) {
                    throw new TypeError('"list" argument must be an Array of Buffers')
                }

                if (list.length === 0) {
                    return Buffer.alloc(0)
                }

                var i
                if (length === undefined) {
                    length = 0
                    for (i = 0; i < list.length; ++i) {
                        length += list[i].length
                    }
                }

                var buffer = Buffer.allocUnsafe(length)
                var pos = 0
                for (i = 0; i < list.length; ++i) {
                    var buf = list[i]
                    if (!Buffer.isBuffer(buf)) {
                        throw new TypeError('"list" argument must be an Array of Buffers')
                    }
                    buf.copy(buffer, pos)
                    pos += buf.length
                }
                return buffer
            }

            function byteLength(string, encoding) {
                if (Buffer.isBuffer(string)) {
                    return string.length
                }
                if (isArrayBufferView(string) || isArrayBuffer(string)) {
                    return string.byteLength
                }
                if (typeof string !== 'string') {
                    string = '' + string
                }

                var len = string.length
                if (len === 0) return 0

                // Use a for loop to avoid recursion
                var loweredCase = false
                for (; ;) {
                    switch (encoding) {
                        case 'ascii':
                        case 'latin1':
                        case 'binary':
                            return len
                        case 'utf8':
                        case 'utf-8':
                        case undefined:
                            return utf8ToBytes(string).length
                        case 'ucs2':
                        case 'ucs-2':
                        case 'utf16le':
                        case 'utf-16le':
                            return len * 2
                        case 'hex':
                            return len >>> 1
                        case 'base64':
                            return base64ToBytes(string).length
                        default:
                            if (loweredCase) return utf8ToBytes(string).length // assume utf8
                            encoding = ('' + encoding).toLowerCase()
                            loweredCase = true
                    }
                }
            }

            Buffer.byteLength = byteLength

            function slowToString(encoding, start, end) {
                var loweredCase = false

                // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
                // property of a typed array.

                // This behaves neither like String nor Uint8Array in that we set start/end
                // to their upper/lower bounds if the value passed is out of range.
                // undefined is handled specially as per ECMA-262 6th Edition,
                // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
                if (start === undefined || start < 0) {
                    start = 0
                }
                // Return early if start > this.length. Done here to prevent potential uint32
                // coercion fail below.
                if (start > this.length) {
                    return ''
                }

                if (end === undefined || end > this.length) {
                    end = this.length
                }

                if (end <= 0) {
                    return ''
                }

                // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
                end >>>= 0
                start >>>= 0

                if (end <= start) {
                    return ''
                }

                if (!encoding) encoding = 'utf8'

                while (true) {
                    switch (encoding) {
                        case 'hex':
                            return hexSlice(this, start, end)

                        case 'utf8':
                        case 'utf-8':
                            return utf8Slice(this, start, end)

                        case 'ascii':
                            return asciiSlice(this, start, end)

                        case 'latin1':
                        case 'binary':
                            return latin1Slice(this, start, end)

                        case 'base64':
                            return base64Slice(this, start, end)

                        case 'ucs2':
                        case 'ucs-2':
                        case 'utf16le':
                        case 'utf-16le':
                            return utf16leSlice(this, start, end)

                        default:
                            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
                            encoding = (encoding + '').toLowerCase()
                            loweredCase = true
                    }
                }
            }

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
            Buffer.prototype._isBuffer = true

            function swap(b, n, m) {
                var i = b[n]
                b[n] = b[m]
                b[m] = i
            }

            Buffer.prototype.swap16 = function swap16() {
                var len = this.length
                if (len % 2 !== 0) {
                    throw new RangeError('Buffer size must be a multiple of 16-bits')
                }
                for (var i = 0; i < len; i += 2) {
                    swap(this, i, i + 1)
                }
                return this
            }

            Buffer.prototype.swap32 = function swap32() {
                var len = this.length
                if (len % 4 !== 0) {
                    throw new RangeError('Buffer size must be a multiple of 32-bits')
                }
                for (var i = 0; i < len; i += 4) {
                    swap(this, i, i + 3)
                    swap(this, i + 1, i + 2)
                }
                return this
            }

            Buffer.prototype.swap64 = function swap64() {
                var len = this.length
                if (len % 8 !== 0) {
                    throw new RangeError('Buffer size must be a multiple of 64-bits')
                }
                for (var i = 0; i < len; i += 8) {
                    swap(this, i, i + 7)
                    swap(this, i + 1, i + 6)
                    swap(this, i + 2, i + 5)
                    swap(this, i + 3, i + 4)
                }
                return this
            }

            Buffer.prototype.toString = function toString() {
                var length = this.length
                if (length === 0) return ''
                if (arguments.length === 0) return utf8Slice(this, 0, length)
                return slowToString.apply(this, arguments)
            }

            Buffer.prototype.equals = function equals(b) {
                if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
                if (this === b) return true
                return Buffer.compare(this, b) === 0
            }

            Buffer.prototype.inspect = function inspect() {
                var str = ''
                var max = exports.INSPECT_MAX_BYTES
                if (this.length > 0) {
                    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
                    if (this.length > max) str += ' ... '
                }
                return '<Buffer ' + str + '>'
            }

            Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
                if (!Buffer.isBuffer(target)) {
                    throw new TypeError('Argument must be a Buffer')
                }

                if (start === undefined) {
                    start = 0
                }
                if (end === undefined) {
                    end = target ? target.length : 0
                }
                if (thisStart === undefined) {
                    thisStart = 0
                }
                if (thisEnd === undefined) {
                    thisEnd = this.length
                }

                if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
                    throw new RangeError('out of range index')
                }

                if (thisStart >= thisEnd && start >= end) {
                    return 0
                }
                if (thisStart >= thisEnd) {
                    return -1
                }
                if (start >= end) {
                    return 1
                }

                start >>>= 0
                end >>>= 0
                thisStart >>>= 0
                thisEnd >>>= 0

                if (this === target) return 0

                var x = thisEnd - thisStart
                var y = end - start
                var len = Math.min(x, y)

                var thisCopy = this.slice(thisStart, thisEnd)
                var targetCopy = target.slice(start, end)

                for (var i = 0; i < len; ++i) {
                    if (thisCopy[i] !== targetCopy[i]) {
                        x = thisCopy[i]
                        y = targetCopy[i]
                        break
                    }
                }

                if (x < y) return -1
                if (y < x) return 1
                return 0
            }

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
            function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
                // Empty buffer means no match
                if (buffer.length === 0) return -1

                // Normalize byteOffset
                if (typeof byteOffset === 'string') {
                    encoding = byteOffset
                    byteOffset = 0
                } else if (byteOffset > 0x7fffffff) {
                    byteOffset = 0x7fffffff
                } else if (byteOffset < -0x80000000) {
                    byteOffset = -0x80000000
                }
                byteOffset = +byteOffset  // Coerce to Number.
                if (numberIsNaN(byteOffset)) {
                    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
                    byteOffset = dir ? 0 : (buffer.length - 1)
                }

                // Normalize byteOffset: negative offsets start from the end of the buffer
                if (byteOffset < 0) byteOffset = buffer.length + byteOffset
                if (byteOffset >= buffer.length) {
                    if (dir) return -1
                    else byteOffset = buffer.length - 1
                } else if (byteOffset < 0) {
                    if (dir) byteOffset = 0
                    else return -1
                }

                // Normalize val
                if (typeof val === 'string') {
                    val = Buffer.from(val, encoding)
                }

                // Finally, search either indexOf (if dir is true) or lastIndexOf
                if (Buffer.isBuffer(val)) {
                    // Special case: looking for empty string/buffer always fails
                    if (val.length === 0) {
                        return -1
                    }
                    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
                } else if (typeof val === 'number') {
                    val = val & 0xFF // Search for a byte value [0-255]
                    if (typeof Uint8Array.prototype.indexOf === 'function') {
                        if (dir) {
                            return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
                        } else {
                            return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
                        }
                    }
                    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)
                }

                throw new TypeError('val must be string, number or Buffer')
            }

            function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
                var indexSize = 1
                var arrLength = arr.length
                var valLength = val.length

                if (encoding !== undefined) {
                    encoding = String(encoding).toLowerCase()
                    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
                        encoding === 'utf16le' || encoding === 'utf-16le') {
                        if (arr.length < 2 || val.length < 2) {
                            return -1
                        }
                        indexSize = 2
                        arrLength /= 2
                        valLength /= 2
                        byteOffset /= 2
                    }
                }

                function read(buf, i) {
                    if (indexSize === 1) {
                        return buf[i]
                    } else {
                        return buf.readUInt16BE(i * indexSize)
                    }
                }

                var i
                if (dir) {
                    var foundIndex = -1
                    for (i = byteOffset; i < arrLength; i++) {
                        if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
                            if (foundIndex === -1) foundIndex = i
                            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
                        } else {
                            if (foundIndex !== -1) i -= i - foundIndex
                            foundIndex = -1
                        }
                    }
                } else {
                    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
                    for (i = byteOffset; i >= 0; i--) {
                        var found = true
                        for (var j = 0; j < valLength; j++) {
                            if (read(arr, i + j) !== read(val, j)) {
                                found = false
                                break
                            }
                        }
                        if (found) return i
                    }
                }

                return -1
            }

            Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
                return this.indexOf(val, byteOffset, encoding) !== -1
            }

            Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
                return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
            }

            Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
                return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
            }

            function hexWrite(buf, string, offset, length) {
                offset = Number(offset) || 0
                var remaining = buf.length - offset
                if (!length) {
                    length = remaining
                } else {
                    length = Number(length)
                    if (length > remaining) {
                        length = remaining
                    }
                }

                // must be an even number of digits
                var strLen = string.length
                if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

                if (length > strLen / 2) {
                    length = strLen / 2
                }
                for (var i = 0; i < length; ++i) {
                    var parsed = parseInt(string.substr(i * 2, 2), 16)
                    if (numberIsNaN(parsed)) return i
                    buf[offset + i] = parsed
                }
                return i
            }

            function utf8Write(buf, string, offset, length) {
                return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
            }

            function asciiWrite(buf, string, offset, length) {
                return blitBuffer(asciiToBytes(string), buf, offset, length)
            }

            function latin1Write(buf, string, offset, length) {
                return asciiWrite(buf, string, offset, length)
            }

            function base64Write(buf, string, offset, length) {
                return blitBuffer(base64ToBytes(string), buf, offset, length)
            }

            function ucs2Write(buf, string, offset, length) {
                return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
            }

            Buffer.prototype.write = function write(string, offset, length, encoding) {
                // Buffer#write(string)
                if (offset === undefined) {
                    encoding = 'utf8'
                    length = this.length
                    offset = 0
                    // Buffer#write(string, encoding)
                } else if (length === undefined && typeof offset === 'string') {
                    encoding = offset
                    length = this.length
                    offset = 0
                    // Buffer#write(string, offset[, length][, encoding])
                } else if (isFinite(offset)) {
                    offset = offset >>> 0
                    if (isFinite(length)) {
                        length = length >>> 0
                        if (encoding === undefined) encoding = 'utf8'
                    } else {
                        encoding = length
                        length = undefined
                    }
                } else {
                    throw new Error(
                        'Buffer.write(string, encoding, offset[, length]) is no longer supported'
                    )
                }

                var remaining = this.length - offset
                if (length === undefined || length > remaining) length = remaining

                if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
                    throw new RangeError('Attempt to write outside buffer bounds')
                }

                if (!encoding) encoding = 'utf8'

                var loweredCase = false
                for (; ;) {
                    switch (encoding) {
                        case 'hex':
                            return hexWrite(this, string, offset, length)

                        case 'utf8':
                        case 'utf-8':
                            return utf8Write(this, string, offset, length)

                        case 'ascii':
                            return asciiWrite(this, string, offset, length)

                        case 'latin1':
                        case 'binary':
                            return latin1Write(this, string, offset, length)

                        case 'base64':
                            // Warning: maxLength not taken into account in base64Write
                            return base64Write(this, string, offset, length)

                        case 'ucs2':
                        case 'ucs-2':
                        case 'utf16le':
                        case 'utf-16le':
                            return ucs2Write(this, string, offset, length)

                        default:
                            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
                            encoding = ('' + encoding).toLowerCase()
                            loweredCase = true
                    }
                }
            }

            Buffer.prototype.toJSON = function toJSON() {
                return {
                    type: 'Buffer',
                    data: Array.prototype.slice.call(this._arr || this, 0)
                }
            }

            function base64Slice(buf, start, end) {
                if (start === 0 && end === buf.length) {
                    return base64.fromByteArray(buf)
                } else {
                    return base64.fromByteArray(buf.slice(start, end))
                }
            }

            function utf8Slice(buf, start, end) {
                end = Math.min(buf.length, end)
                var res = []

                var i = start
                while (i < end) {
                    var firstByte = buf[i]
                    var codePoint = null
                    var bytesPerSequence = (firstByte > 0xEF) ? 4
                        : (firstByte > 0xDF) ? 3
                            : (firstByte > 0xBF) ? 2
                                : 1

                    if (i + bytesPerSequence <= end) {
                        var secondByte, thirdByte, fourthByte, tempCodePoint

                        switch (bytesPerSequence) {
                            case 1:
                                if (firstByte < 0x80) {
                                    codePoint = firstByte
                                }
                                break
                            case 2:
                                secondByte = buf[i + 1]
                                if ((secondByte & 0xC0) === 0x80) {
                                    tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
                                    if (tempCodePoint > 0x7F) {
                                        codePoint = tempCodePoint
                                    }
                                }
                                break
                            case 3:
                                secondByte = buf[i + 1]
                                thirdByte = buf[i + 2]
                                if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                                    tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
                                    if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                                        codePoint = tempCodePoint
                                    }
                                }
                                break
                            case 4:
                                secondByte = buf[i + 1]
                                thirdByte = buf[i + 2]
                                fourthByte = buf[i + 3]
                                if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                                    tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
                                    if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                                        codePoint = tempCodePoint
                                    }
                                }
                        }
                    }

                    if (codePoint === null) {
                        // we did not generate a valid codePoint so insert a
                        // replacement char (U+FFFD) and advance only 1 byte
                        codePoint = 0xFFFD
                        bytesPerSequence = 1
                    } else if (codePoint > 0xFFFF) {
                        // encode to utf16 (surrogate pair dance)
                        codePoint -= 0x10000
                        res.push(codePoint >>> 10 & 0x3FF | 0xD800)
                        codePoint = 0xDC00 | codePoint & 0x3FF
                    }

                    res.push(codePoint)
                    i += bytesPerSequence
                }

                return decodeCodePointsArray(res)
            }

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
            var MAX_ARGUMENTS_LENGTH = 0x1000

            function decodeCodePointsArray(codePoints) {
                var len = codePoints.length
                if (len <= MAX_ARGUMENTS_LENGTH) {
                    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
                }

                // Decode in chunks to avoid "call stack size exceeded".
                var res = ''
                var i = 0
                while (i < len) {
                    res += String.fromCharCode.apply(
                        String,
                        codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
                    )
                }
                return res
            }

            function asciiSlice(buf, start, end) {
                var ret = ''
                end = Math.min(buf.length, end)

                for (var i = start; i < end; ++i) {
                    ret += String.fromCharCode(buf[i] & 0x7F)
                }
                return ret
            }

            function latin1Slice(buf, start, end) {
                var ret = ''
                end = Math.min(buf.length, end)

                for (var i = start; i < end; ++i) {
                    ret += String.fromCharCode(buf[i])
                }
                return ret
            }

            function hexSlice(buf, start, end) {
                var len = buf.length

                if (!start || start < 0) start = 0
                if (!end || end < 0 || end > len) end = len

                var out = ''
                for (var i = start; i < end; ++i) {
                    out += toHex(buf[i])
                }
                return out
            }

            function utf16leSlice(buf, start, end) {
                var bytes = buf.slice(start, end)
                var res = ''
                for (var i = 0; i < bytes.length; i += 2) {
                    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
                }
                return res
            }

            Buffer.prototype.slice = function slice(start, end) {
                var len = this.length
                start = ~~start
                end = end === undefined ? len : ~~end

                if (start < 0) {
                    start += len
                    if (start < 0) start = 0
                } else if (start > len) {
                    start = len
                }

                if (end < 0) {
                    end += len
                    if (end < 0) end = 0
                } else if (end > len) {
                    end = len
                }

                if (end < start) end = start

                var newBuf = this.subarray(start, end)
                // Return an augmented `Uint8Array` instance
                newBuf.__proto__ = Buffer.prototype
                return newBuf
            }

            /*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
            function checkOffset(offset, ext, length) {
                if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
                if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
            }

            Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
                offset = offset >>> 0
                byteLength = byteLength >>> 0
                if (!noAssert) checkOffset(offset, byteLength, this.length)

                var val = this[offset]
                var mul = 1
                var i = 0
                while (++i < byteLength && (mul *= 0x100)) {
                    val += this[offset + i] * mul
                }

                return val
            }

            Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
                offset = offset >>> 0
                byteLength = byteLength >>> 0
                if (!noAssert) {
                    checkOffset(offset, byteLength, this.length)
                }

                var val = this[offset + --byteLength]
                var mul = 1
                while (byteLength > 0 && (mul *= 0x100)) {
                    val += this[offset + --byteLength] * mul
                }

                return val
            }

            Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
                offset = offset >>> 0
                if (!noAssert) checkOffset(offset, 1, this.length)
                return this[offset]
            }

            Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
                offset = offset >>> 0
                if (!noAssert) checkOffset(offset, 2, this.length)
                return this[offset] | (this[offset + 1] << 8)
            }

            Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
                offset = offset >>> 0
                if (!noAssert) checkOffset(offset, 2, this.length)
                return (this[offset] << 8) | this[offset + 1]
            }

            Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
                offset = offset >>> 0
                if (!noAssert) checkOffset(offset, 4, this.length)

                return ((this[offset]) |
                    (this[offset + 1] << 8) |
                    (this[offset + 2] << 16)) +
                    (this[offset + 3] * 0x1000000)
            }

            Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
                offset = offset >>> 0
                if (!noAssert) checkOffset(offset, 4, this.length)

                return (this[offset] * 0x1000000) +
                    ((this[offset + 1] << 16) |
                        (this[offset + 2] << 8) |
                        this[offset + 3])
            }

            Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
                offset = offset >>> 0
                byteLength = byteLength >>> 0
                if (!noAssert) checkOffset(offset, byteLength, this.length)

                var val = this[offset]
                var mul = 1
                var i = 0
                while (++i < byteLength && (mul *= 0x100)) {
                    val += this[offset + i] * mul
                }
                mul *= 0x80

                if (val >= mul) val -= Math.pow(2, 8 * byteLength)

                return val
            }

            Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
                offset = offset >>> 0
                byteLength = byteLength >>> 0
                if (!noAssert) checkOffset(offset, byteLength, this.length)

                var i = byteLength
                var mul = 1
                var val = this[offset + --i]
                while (i > 0 && (mul *= 0x100)) {
                    val += this[offset + --i] * mul
                }
                mul *= 0x80

                if (val >= mul) val -= Math.pow(2, 8 * byteLength)

                return val
            }

            Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
                offset = offset >>> 0
                if (!noAssert) checkOffset(offset, 1, this.length)
                if (!(this[offset] & 0x80)) return (this[offset])
                return ((0xff - this[offset] + 1) * -1)
            }

            Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
                offset = offset >>> 0
                if (!noAssert) checkOffset(offset, 2, this.length)
                var val = this[offset] | (this[offset + 1] << 8)
                return (val & 0x8000) ? val | 0xFFFF0000 : val
            }

            Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
                offset = offset >>> 0
                if (!noAssert) checkOffset(offset, 2, this.length)
                var val = this[offset + 1] | (this[offset] << 8)
                return (val & 0x8000) ? val | 0xFFFF0000 : val
            }

            Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
                offset = offset >>> 0
                if (!noAssert) checkOffset(offset, 4, this.length)

                return (this[offset]) |
                    (this[offset + 1] << 8) |
                    (this[offset + 2] << 16) |
                    (this[offset + 3] << 24)
            }

            Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
                offset = offset >>> 0
                if (!noAssert) checkOffset(offset, 4, this.length)

                return (this[offset] << 24) |
                    (this[offset + 1] << 16) |
                    (this[offset + 2] << 8) |
                    (this[offset + 3])
            }

            Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
                offset = offset >>> 0
                if (!noAssert) checkOffset(offset, 4, this.length)
                return ieee754.read(this, offset, true, 23, 4)
            }

            Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
                offset = offset >>> 0
                if (!noAssert) checkOffset(offset, 4, this.length)
                return ieee754.read(this, offset, false, 23, 4)
            }

            Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
                offset = offset >>> 0
                if (!noAssert) checkOffset(offset, 8, this.length)
                return ieee754.read(this, offset, true, 52, 8)
            }

            Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
                offset = offset >>> 0
                if (!noAssert) checkOffset(offset, 8, this.length)
                return ieee754.read(this, offset, false, 52, 8)
            }

            function checkInt(buf, value, offset, ext, max, min) {
                if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
                if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
                if (offset + ext > buf.length) throw new RangeError('Index out of range')
            }

            Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
                value = +value
                offset = offset >>> 0
                byteLength = byteLength >>> 0
                if (!noAssert) {
                    var maxBytes = Math.pow(2, 8 * byteLength) - 1
                    checkInt(this, value, offset, byteLength, maxBytes, 0)
                }

                var mul = 1
                var i = 0
                this[offset] = value & 0xFF
                while (++i < byteLength && (mul *= 0x100)) {
                    this[offset + i] = (value / mul) & 0xFF
                }

                return offset + byteLength
            }

            Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
                value = +value
                offset = offset >>> 0
                byteLength = byteLength >>> 0
                if (!noAssert) {
                    var maxBytes = Math.pow(2, 8 * byteLength) - 1
                    checkInt(this, value, offset, byteLength, maxBytes, 0)
                }

                var i = byteLength - 1
                var mul = 1
                this[offset + i] = value & 0xFF
                while (--i >= 0 && (mul *= 0x100)) {
                    this[offset + i] = (value / mul) & 0xFF
                }

                return offset + byteLength
            }

            Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
                value = +value
                offset = offset >>> 0
                if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
                this[offset] = (value & 0xff)
                return offset + 1
            }

            Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
                value = +value
                offset = offset >>> 0
                if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
                this[offset] = (value & 0xff)
                this[offset + 1] = (value >>> 8)
                return offset + 2
            }

            Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
                value = +value
                offset = offset >>> 0
                if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
                this[offset] = (value >>> 8)
                this[offset + 1] = (value & 0xff)
                return offset + 2
            }

            Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
                value = +value
                offset = offset >>> 0
                if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
                this[offset + 3] = (value >>> 24)
                this[offset + 2] = (value >>> 16)
                this[offset + 1] = (value >>> 8)
                this[offset] = (value & 0xff)
                return offset + 4
            }

            Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
                value = +value
                offset = offset >>> 0
                if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
                this[offset] = (value >>> 24)
                this[offset + 1] = (value >>> 16)
                this[offset + 2] = (value >>> 8)
                this[offset + 3] = (value & 0xff)
                return offset + 4
            }

            Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
                value = +value
                offset = offset >>> 0
                if (!noAssert) {
                    var limit = Math.pow(2, (8 * byteLength) - 1)

                    checkInt(this, value, offset, byteLength, limit - 1, -limit)
                }

                var i = 0
                var mul = 1
                var sub = 0
                this[offset] = value & 0xFF
                while (++i < byteLength && (mul *= 0x100)) {
                    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
                        sub = 1
                    }
                    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
                }

                return offset + byteLength
            }

            Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
                value = +value
                offset = offset >>> 0
                if (!noAssert) {
                    var limit = Math.pow(2, (8 * byteLength) - 1)

                    checkInt(this, value, offset, byteLength, limit - 1, -limit)
                }

                var i = byteLength - 1
                var mul = 1
                var sub = 0
                this[offset + i] = value & 0xFF
                while (--i >= 0 && (mul *= 0x100)) {
                    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
                        sub = 1
                    }
                    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
                }

                return offset + byteLength
            }

            Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
                value = +value
                offset = offset >>> 0
                if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
                if (value < 0) value = 0xff + value + 1
                this[offset] = (value & 0xff)
                return offset + 1
            }

            Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
                value = +value
                offset = offset >>> 0
                if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
                this[offset] = (value & 0xff)
                this[offset + 1] = (value >>> 8)
                return offset + 2
            }

            Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
                value = +value
                offset = offset >>> 0
                if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
                this[offset] = (value >>> 8)
                this[offset + 1] = (value & 0xff)
                return offset + 2
            }

            Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
                value = +value
                offset = offset >>> 0
                if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
                this[offset] = (value & 0xff)
                this[offset + 1] = (value >>> 8)
                this[offset + 2] = (value >>> 16)
                this[offset + 3] = (value >>> 24)
                return offset + 4
            }

            Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
                value = +value
                offset = offset >>> 0
                if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
                if (value < 0) value = 0xffffffff + value + 1
                this[offset] = (value >>> 24)
                this[offset + 1] = (value >>> 16)
                this[offset + 2] = (value >>> 8)
                this[offset + 3] = (value & 0xff)
                return offset + 4
            }

            function checkIEEE754(buf, value, offset, ext, max, min) {
                if (offset + ext > buf.length) throw new RangeError('Index out of range')
                if (offset < 0) throw new RangeError('Index out of range')
            }

            function writeFloat(buf, value, offset, littleEndian, noAssert) {
                value = +value
                offset = offset >>> 0
                if (!noAssert) {
                    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
                }
                ieee754.write(buf, value, offset, littleEndian, 23, 4)
                return offset + 4
            }

            Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
                return writeFloat(this, value, offset, true, noAssert)
            }

            Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
                return writeFloat(this, value, offset, false, noAssert)
            }

            function writeDouble(buf, value, offset, littleEndian, noAssert) {
                value = +value
                offset = offset >>> 0
                if (!noAssert) {
                    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
                }
                ieee754.write(buf, value, offset, littleEndian, 52, 8)
                return offset + 8
            }

            Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
                return writeDouble(this, value, offset, true, noAssert)
            }

            Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
                return writeDouble(this, value, offset, false, noAssert)
            }

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
            Buffer.prototype.copy = function copy(target, targetStart, start, end) {
                if (!start) start = 0
                if (!end && end !== 0) end = this.length
                if (targetStart >= target.length) targetStart = target.length
                if (!targetStart) targetStart = 0
                if (end > 0 && end < start) end = start

                // Copy 0 bytes; we're done
                if (end === start) return 0
                if (target.length === 0 || this.length === 0) return 0

                // Fatal error conditions
                if (targetStart < 0) {
                    throw new RangeError('targetStart out of bounds')
                }
                if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
                if (end < 0) throw new RangeError('sourceEnd out of bounds')

                // Are we oob?
                if (end > this.length) end = this.length
                if (target.length - targetStart < end - start) {
                    end = target.length - targetStart + start
                }

                var len = end - start
                var i

                if (this === target && start < targetStart && targetStart < end) {
                    // descending copy from end
                    for (i = len - 1; i >= 0; --i) {
                        target[i + targetStart] = this[i + start]
                    }
                } else if (len < 1000) {
                    // ascending copy from start
                    for (i = 0; i < len; ++i) {
                        target[i + targetStart] = this[i + start]
                    }
                } else {
                    Uint8Array.prototype.set.call(
                        target,
                        this.subarray(start, start + len),
                        targetStart
                    )
                }

                return len
            }

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
            Buffer.prototype.fill = function fill(val, start, end, encoding) {
                // Handle string cases:
                if (typeof val === 'string') {
                    if (typeof start === 'string') {
                        encoding = start
                        start = 0
                        end = this.length
                    } else if (typeof end === 'string') {
                        encoding = end
                        end = this.length
                    }
                    if (val.length === 1) {
                        var code = val.charCodeAt(0)
                        if (code < 256) {
                            val = code
                        }
                    }
                    if (encoding !== undefined && typeof encoding !== 'string') {
                        throw new TypeError('encoding must be a string')
                    }
                    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
                        throw new TypeError('Unknown encoding: ' + encoding)
                    }
                } else if (typeof val === 'number') {
                    val = val & 255
                }

                // Invalid ranges are not set to a default, so can range check early.
                if (start < 0 || this.length < start || this.length < end) {
                    throw new RangeError('Out of range index')
                }

                if (end <= start) {
                    return this
                }

                start = start >>> 0
                end = end === undefined ? this.length : end >>> 0

                if (!val) val = 0

                var i
                if (typeof val === 'number') {
                    for (i = start; i < end; ++i) {
                        this[i] = val
                    }
                } else {
                    var bytes = Buffer.isBuffer(val)
                        ? val
                        : new Buffer(val, encoding)
                    var len = bytes.length
                    for (i = 0; i < end - start; ++i) {
                        this[i + start] = bytes[i % len]
                    }
                }

                return this
            }

// HELPER FUNCTIONS
// ================

            var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

            function base64clean(str) {
                // Node strips out invalid characters like \n and \t from the string, base64-js does not
                str = str.trim().replace(INVALID_BASE64_RE, '')
                // Node converts strings with length < 2 to ''
                if (str.length < 2) return ''
                // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
                while (str.length % 4 !== 0) {
                    str = str + '='
                }
                return str
            }

            function toHex(n) {
                if (n < 16) return '0' + n.toString(16)
                return n.toString(16)
            }

            function utf8ToBytes(string, units) {
                units = units || Infinity
                var codePoint
                var length = string.length
                var leadSurrogate = null
                var bytes = []

                for (var i = 0; i < length; ++i) {
                    codePoint = string.charCodeAt(i)

                    // is surrogate component
                    if (codePoint > 0xD7FF && codePoint < 0xE000) {
                        // last char was a lead
                        if (!leadSurrogate) {
                            // no lead yet
                            if (codePoint > 0xDBFF) {
                                // unexpected trail
                                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                                continue
                            } else if (i + 1 === length) {
                                // unpaired lead
                                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                                continue
                            }

                            // valid lead
                            leadSurrogate = codePoint

                            continue
                        }

                        // 2 leads in a row
                        if (codePoint < 0xDC00) {
                            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                            leadSurrogate = codePoint
                            continue
                        }

                        // valid surrogate pair
                        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
                    } else if (leadSurrogate) {
                        // valid bmp char, but last char was a lead
                        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                    }

                    leadSurrogate = null

                    // encode utf8
                    if (codePoint < 0x80) {
                        if ((units -= 1) < 0) break
                        bytes.push(codePoint)
                    } else if (codePoint < 0x800) {
                        if ((units -= 2) < 0) break
                        bytes.push(
                            codePoint >> 0x6 | 0xC0,
                            codePoint & 0x3F | 0x80
                        )
                    } else if (codePoint < 0x10000) {
                        if ((units -= 3) < 0) break
                        bytes.push(
                            codePoint >> 0xC | 0xE0,
                            codePoint >> 0x6 & 0x3F | 0x80,
                            codePoint & 0x3F | 0x80
                        )
                    } else if (codePoint < 0x110000) {
                        if ((units -= 4) < 0) break
                        bytes.push(
                            codePoint >> 0x12 | 0xF0,
                            codePoint >> 0xC & 0x3F | 0x80,
                            codePoint >> 0x6 & 0x3F | 0x80,
                            codePoint & 0x3F | 0x80
                        )
                    } else {
                        throw new Error('Invalid code point')
                    }
                }

                return bytes
            }

            function asciiToBytes(str) {
                var byteArray = []
                for (var i = 0; i < str.length; ++i) {
                    // Node's code seems to be doing this and not & 0x7F..
                    byteArray.push(str.charCodeAt(i) & 0xFF)
                }
                return byteArray
            }

            function utf16leToBytes(str, units) {
                var c, hi, lo
                var byteArray = []
                for (var i = 0; i < str.length; ++i) {
                    if ((units -= 2) < 0) break

                    c = str.charCodeAt(i)
                    hi = c >> 8
                    lo = c % 256
                    byteArray.push(lo)
                    byteArray.push(hi)
                }

                return byteArray
            }

            function base64ToBytes(str) {
                return base64.toByteArray(base64clean(str))
            }

            function blitBuffer(src, dst, offset, length) {
                for (var i = 0; i < length; ++i) {
                    if ((i + offset >= dst.length) || (i >= src.length)) break
                    dst[i + offset] = src[i]
                }
                return i
            }

// ArrayBuffers from another context (i.e. an iframe) do not pass the `instanceof` check
// but they should be treated as valid. See: https://github.com/feross/buffer/issues/166
            function isArrayBuffer(obj) {
                return obj instanceof ArrayBuffer ||
                    (obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' &&
                        typeof obj.byteLength === 'number')
            }

// Node 0.10 supports `ArrayBuffer` but lacks `ArrayBuffer.isView`
            function isArrayBufferView(obj) {
                return (typeof ArrayBuffer.isView === 'function') && ArrayBuffer.isView(obj)
            }

            function numberIsNaN(obj) {
                return obj !== obj // eslint-disable-line no-self-compare
            }

        }, {"base64-js": 19, "ieee754": 58}],
        58: [function (require, module, exports) {
            exports.read = function (buffer, offset, isLE, mLen, nBytes) {
                var e, m
                var eLen = nBytes * 8 - mLen - 1
                var eMax = (1 << eLen) - 1
                var eBias = eMax >> 1
                var nBits = -7
                var i = isLE ? (nBytes - 1) : 0
                var d = isLE ? -1 : 1
                var s = buffer[offset + i]

                i += d

                e = s & ((1 << (-nBits)) - 1)
                s >>= (-nBits)
                nBits += eLen
                for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {
                }

                m = e & ((1 << (-nBits)) - 1)
                e >>= (-nBits)
                nBits += mLen
                for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {
                }

                if (e === 0) {
                    e = 1 - eBias
                } else if (e === eMax) {
                    return m ? NaN : ((s ? -1 : 1) * Infinity)
                } else {
                    m = m + Math.pow(2, mLen)
                    e = e - eBias
                }
                return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
            }

            exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
                var e, m, c
                var eLen = nBytes * 8 - mLen - 1
                var eMax = (1 << eLen) - 1
                var eBias = eMax >> 1
                var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
                var i = isLE ? 0 : (nBytes - 1)
                var d = isLE ? 1 : -1
                var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

                value = Math.abs(value)

                if (isNaN(value) || value === Infinity) {
                    m = isNaN(value) ? 1 : 0
                    e = eMax
                } else {
                    e = Math.floor(Math.log(value) / Math.LN2)
                    if (value * (c = Math.pow(2, -e)) < 1) {
                        e--
                        c *= 2
                    }
                    if (e + eBias >= 1) {
                        value += rt / c
                    } else {
                        value += rt * Math.pow(2, 1 - eBias)
                    }
                    if (value * c >= 2) {
                        e++
                        c /= 2
                    }

                    if (e + eBias >= eMax) {
                        m = 0
                        e = eMax
                    } else if (e + eBias >= 1) {
                        m = (value * c - 1) * Math.pow(2, mLen)
                        e = e + eBias
                    } else {
                        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
                        e = 0
                    }
                }

                for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {
                }

                e = (e << mLen) | m
                eLen += mLen
                for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {
                }

                buffer[offset + i - d] |= s * 128
            }

        }, {}],
        59: [function (require, module, exports) {
            var Buffer = require('safe-buffer').Buffer
            var Transform = require('stream').Transform
            var StringDecoder = require('string_decoder').StringDecoder
            var inherits = require('inherits')

            function CipherBase(hashMode) {
                Transform.call(this)
                this.hashMode = typeof hashMode === 'string'
                if (this.hashMode) {
                    this[hashMode] = this._finalOrDigest
                } else {
                    this.final = this._finalOrDigest
                }
                if (this._final) {
                    this.__final = this._final
                    this._final = null
                }
                this._decoder = null
                this._encoding = null
            }

            inherits(CipherBase, Transform)

            CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
                if (typeof data === 'string') {
                    data = Buffer.from(data, inputEnc)
                }

                var outData = this._update(data)
                if (this.hashMode) return this

                if (outputEnc) {
                    outData = this._toString(outData, outputEnc)
                }

                return outData
            }

            CipherBase.prototype.setAutoPadding = function () {
            }
            CipherBase.prototype.getAuthTag = function () {
                throw new Error('trying to get auth tag in unsupported state')
            }

            CipherBase.prototype.setAuthTag = function () {
                throw new Error('trying to set auth tag in unsupported state')
            }

            CipherBase.prototype.setAAD = function () {
                throw new Error('trying to set aad in unsupported state')
            }

            CipherBase.prototype._transform = function (data, _, next) {
                var err
                try {
                    if (this.hashMode) {
                        this._update(data)
                    } else {
                        this.push(this._update(data))
                    }
                } catch (e) {
                    err = e
                } finally {
                    next(err)
                }
            }
            CipherBase.prototype._flush = function (done) {
                var err
                try {
                    this.push(this.__final())
                } catch (e) {
                    err = e
                }

                done(err)
            }
            CipherBase.prototype._finalOrDigest = function (outputEnc) {
                var outData = this.__final() || Buffer.alloc(0)
                if (outputEnc) {
                    outData = this._toString(outData, outputEnc, true)
                }
                return outData
            }

            CipherBase.prototype._toString = function (value, enc, fin) {
                if (!this._decoder) {
                    this._decoder = new StringDecoder(enc)
                    this._encoding = enc
                }

                if (this._encoding !== enc) throw new Error('can\'t switch encodings')

                var out = this._decoder.write(value)
                if (fin) {
                    out += this._decoder.end()
                }

                return out
            }

            module.exports = CipherBase

        }, {"inherits": 143, "safe-buffer": 184, "stream": 193, "string_decoder": 50}],
        60: [function (require, module, exports) {
            (function (Buffer) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

                function isArray(arg) {
                    if (Array.isArray) {
                        return Array.isArray(arg);
                    }
                    return objectToString(arg) === '[object Array]';
                }

                exports.isArray = isArray;

                function isBoolean(arg) {
                    return typeof arg === 'boolean';
                }

                exports.isBoolean = isBoolean;

                function isNull(arg) {
                    return arg === null;
                }

                exports.isNull = isNull;

                function isNullOrUndefined(arg) {
                    return arg == null;
                }

                exports.isNullOrUndefined = isNullOrUndefined;

                function isNumber(arg) {
                    return typeof arg === 'number';
                }

                exports.isNumber = isNumber;

                function isString(arg) {
                    return typeof arg === 'string';
                }

                exports.isString = isString;

                function isSymbol(arg) {
                    return typeof arg === 'symbol';
                }

                exports.isSymbol = isSymbol;

                function isUndefined(arg) {
                    return arg === void 0;
                }

                exports.isUndefined = isUndefined;

                function isRegExp(re) {
                    return objectToString(re) === '[object RegExp]';
                }

                exports.isRegExp = isRegExp;

                function isObject(arg) {
                    return typeof arg === 'object' && arg !== null;
                }

                exports.isObject = isObject;

                function isDate(d) {
                    return objectToString(d) === '[object Date]';
                }

                exports.isDate = isDate;

                function isError(e) {
                    return (objectToString(e) === '[object Error]' || e instanceof Error);
                }

                exports.isError = isError;

                function isFunction(arg) {
                    return typeof arg === 'function';
                }

                exports.isFunction = isFunction;

                function isPrimitive(arg) {
                    return arg === null ||
                        typeof arg === 'boolean' ||
                        typeof arg === 'number' ||
                        typeof arg === 'string' ||
                        typeof arg === 'symbol' ||  // ES6 symbol
                        typeof arg === 'undefined';
                }

                exports.isPrimitive = isPrimitive;

                exports.isBuffer = Buffer.isBuffer;

                function objectToString(o) {
                    return Object.prototype.toString.call(o);
                }

            }).call(this, {"isBuffer": require("../../insert-module-globals/node_modules/is-buffer/index.js")})
        }, {"../../insert-module-globals/node_modules/is-buffer/index.js": 144}],
        61: [function (require, module, exports) {
            (function (Buffer) {
                var elliptic = require('elliptic');
                var BN = require('bn.js');

                module.exports = function createECDH(curve) {
                    return new ECDH(curve);
                };

                var aliases = {
                    secp256k1: {
                        name: 'secp256k1',
                        byteLength: 32
                    },
                    secp224r1: {
                        name: 'p224',
                        byteLength: 28
                    },
                    prime256v1: {
                        name: 'p256',
                        byteLength: 32
                    },
                    prime192v1: {
                        name: 'p192',
                        byteLength: 24
                    },
                    ed25519: {
                        name: 'ed25519',
                        byteLength: 32
                    },
                    secp384r1: {
                        name: 'p384',
                        byteLength: 48
                    },
                    secp521r1: {
                        name: 'p521',
                        byteLength: 66
                    }
                };

                aliases.p224 = aliases.secp224r1;
                aliases.p256 = aliases.secp256r1 = aliases.prime256v1;
                aliases.p192 = aliases.secp192r1 = aliases.prime192v1;
                aliases.p384 = aliases.secp384r1;
                aliases.p521 = aliases.secp521r1;

                function ECDH(curve) {
                    this.curveType = aliases[curve];
                    if (!this.curveType) {
                        this.curveType = {
                            name: curve
                        };
                    }
                    this.curve = new elliptic.ec(this.curveType.name);
                    this.keys = void 0;
                }

                ECDH.prototype.generateKeys = function (enc, format) {
                    this.keys = this.curve.genKeyPair();
                    return this.getPublicKey(enc, format);
                };

                ECDH.prototype.computeSecret = function (other, inenc, enc) {
                    inenc = inenc || 'utf8';
                    if (!Buffer.isBuffer(other)) {
                        other = new Buffer(other, inenc);
                    }
                    var otherPub = this.curve.keyFromPublic(other).getPublic();
                    var out = otherPub.mul(this.keys.getPrivate()).getX();
                    return formatReturnValue(out, enc, this.curveType.byteLength);
                };

                ECDH.prototype.getPublicKey = function (enc, format) {
                    var key = this.keys.getPublic(format === 'compressed', true);
                    if (format === 'hybrid') {
                        if (key[key.length - 1] % 2) {
                            key[0] = 7;
                        } else {
                            key [0] = 6;
                        }
                    }
                    return formatReturnValue(key, enc);
                };

                ECDH.prototype.getPrivateKey = function (enc) {
                    return formatReturnValue(this.keys.getPrivate(), enc);
                };

                ECDH.prototype.setPublicKey = function (pub, enc) {
                    enc = enc || 'utf8';
                    if (!Buffer.isBuffer(pub)) {
                        pub = new Buffer(pub, enc);
                    }
                    this.keys._importPublic(pub);
                    return this;
                };

                ECDH.prototype.setPrivateKey = function (priv, enc) {
                    enc = enc || 'utf8';
                    if (!Buffer.isBuffer(priv)) {
                        priv = new Buffer(priv, enc);
                    }
                    var _priv = new BN(priv);
                    _priv = _priv.toString(16);
                    this.keys._importPrivate(_priv);
                    return this;
                };

                function formatReturnValue(bn, enc, len) {
                    if (!Array.isArray(bn)) {
                        bn = bn.toArray();
                    }
                    var buf = new Buffer(bn);
                    if (len && buf.length < len) {
                        var zeros = new Buffer(len - buf.length);
                        zeros.fill(0);
                        buf = Buffer.concat([zeros, buf]);
                    }
                    if (!enc) {
                        return buf;
                    } else {
                        return buf.toString(enc);
                    }
                }

            }).call(this, require("buffer").Buffer)
        }, {"bn.js": 20, "buffer": 57, "elliptic": 111}],
        62: [function (require, module, exports) {
            (function (Buffer) {
                'use strict'
                var inherits = require('inherits')
                var md5 = require('./md5')
                var RIPEMD160 = require('ripemd160')
                var sha = require('sha.js')

                var Base = require('cipher-base')

                function HashNoConstructor(hash) {
                    Base.call(this, 'digest')

                    this._hash = hash
                    this.buffers = []
                }

                inherits(HashNoConstructor, Base)

                HashNoConstructor.prototype._update = function (data) {
                    this.buffers.push(data)
                }

                HashNoConstructor.prototype._final = function () {
                    var buf = Buffer.concat(this.buffers)
                    var r = this._hash(buf)
                    this.buffers = null

                    return r
                }

                function Hash(hash) {
                    Base.call(this, 'digest')

                    this._hash = hash
                }

                inherits(Hash, Base)

                Hash.prototype._update = function (data) {
                    this._hash.update(data)
                }

                Hash.prototype._final = function () {
                    return this._hash.digest()
                }

                module.exports = function createHash(alg) {
                    alg = alg.toLowerCase()
                    if (alg === 'md5') return new HashNoConstructor(md5)
                    if (alg === 'rmd160' || alg === 'ripemd160') return new Hash(new RIPEMD160())

                    return new Hash(sha(alg))
                }

            }).call(this, require("buffer").Buffer)
        }, {"./md5": 64, "buffer": 57, "cipher-base": 59, "inherits": 143, "ripemd160": 183, "sha.js": 186}],
        63: [function (require, module, exports) {
            (function (Buffer) {
                'use strict'
                var intSize = 4
                var zeroBuffer = new Buffer(intSize)
                zeroBuffer.fill(0)

                var charSize = 8
                var hashSize = 16

                function toArray(buf) {
                    if ((buf.length % intSize) !== 0) {
                        var len = buf.length + (intSize - (buf.length % intSize))
                        buf = Buffer.concat([buf, zeroBuffer], len)
                    }

                    var arr = new Array(buf.length >>> 2)
                    for (var i = 0, j = 0; i < buf.length; i += intSize, j++) {
                        arr[j] = buf.readInt32LE(i)
                    }

                    return arr
                }

                module.exports = function hash(buf, fn) {
                    var arr = fn(toArray(buf), buf.length * charSize)
                    buf = new Buffer(hashSize)
                    for (var i = 0; i < arr.length; i++) {
                        buf.writeInt32LE(arr[i], i << 2, true)
                    }
                    return buf
                }

            }).call(this, require("buffer").Buffer)
        }, {"buffer": 57}],
        64: [function (require, module, exports) {
            'use strict'
            /*
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */

            var makeHash = require('./make-hash')

            /*
 * Calculate the MD5 of an array of little-endian words, and a bit length
 */
            function core_md5(x, len) {
                /* append padding */
                x[len >> 5] |= 0x80 << ((len) % 32)
                x[(((len + 64) >>> 9) << 4) + 14] = len

                var a = 1732584193
                var b = -271733879
                var c = -1732584194
                var d = 271733878

                for (var i = 0; i < x.length; i += 16) {
                    var olda = a
                    var oldb = b
                    var oldc = c
                    var oldd = d

                    a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936)
                    d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586)
                    c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819)
                    b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330)
                    a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897)
                    d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426)
                    c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341)
                    b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983)
                    a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416)
                    d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417)
                    c = md5_ff(c, d, a, b, x[i + 10], 17, -42063)
                    b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162)
                    a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682)
                    d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101)
                    c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290)
                    b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329)

                    a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510)
                    d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632)
                    c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713)
                    b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302)
                    a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691)
                    d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083)
                    c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335)
                    b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848)
                    a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438)
                    d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690)
                    c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961)
                    b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501)
                    a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467)
                    d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784)
                    c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473)
                    b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734)

                    a = md5_hh(a, b, c, d, x[i + 5], 4, -378558)
                    d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463)
                    c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562)
                    b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556)
                    a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060)
                    d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353)
                    c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632)
                    b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640)
                    a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174)
                    d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222)
                    c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979)
                    b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189)
                    a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487)
                    d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835)
                    c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520)
                    b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651)

                    a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844)
                    d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415)
                    c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905)
                    b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055)
                    a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571)
                    d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606)
                    c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523)
                    b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799)
                    a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359)
                    d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744)
                    c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380)
                    b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649)
                    a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070)
                    d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379)
                    c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259)
                    b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551)

                    a = safe_add(a, olda)
                    b = safe_add(b, oldb)
                    c = safe_add(c, oldc)
                    d = safe_add(d, oldd)
                }

                return [a, b, c, d]
            }

            /*
 * These functions implement the four basic operations the algorithm uses.
 */
            function md5_cmn(q, a, b, x, s, t) {
                return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b)
            }

            function md5_ff(a, b, c, d, x, s, t) {
                return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t)
            }

            function md5_gg(a, b, c, d, x, s, t) {
                return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t)
            }

            function md5_hh(a, b, c, d, x, s, t) {
                return md5_cmn(b ^ c ^ d, a, b, x, s, t)
            }

            function md5_ii(a, b, c, d, x, s, t) {
                return md5_cmn(c ^ (b | (~d)), a, b, x, s, t)
            }

            /*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */
            function safe_add(x, y) {
                var lsw = (x & 0xFFFF) + (y & 0xFFFF)
                var msw = (x >> 16) + (y >> 16) + (lsw >> 16)
                return (msw << 16) | (lsw & 0xFFFF)
            }

            /*
 * Bitwise rotate a 32-bit number to the left.
 */
            function bit_rol(num, cnt) {
                return (num << cnt) | (num >>> (32 - cnt))
            }

            module.exports = function md5(buf) {
                return makeHash(buf, core_md5)
            }

        }, {"./make-hash": 63}],
        65: [function (require, module, exports) {
            'use strict'
            var inherits = require('inherits')
            var Legacy = require('./legacy')
            var Base = require('cipher-base')
            var Buffer = require('safe-buffer').Buffer
            var md5 = require('create-hash/md5')
            var RIPEMD160 = require('ripemd160')

            var sha = require('sha.js')

            var ZEROS = Buffer.alloc(128)

            function Hmac(alg, key) {
                Base.call(this, 'digest')
                if (typeof key === 'string') {
                    key = Buffer.from(key)
                }

                var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

                this._alg = alg
                this._key = key
                if (key.length > blocksize) {
                    var hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
                    key = hash.update(key).digest()
                } else if (key.length < blocksize) {
                    key = Buffer.concat([key, ZEROS], blocksize)
                }

                var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
                var opad = this._opad = Buffer.allocUnsafe(blocksize)

                for (var i = 0; i < blocksize; i++) {
                    ipad[i] = key[i] ^ 0x36
                    opad[i] = key[i] ^ 0x5C
                }
                this._hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
                this._hash.update(ipad)
            }

            inherits(Hmac, Base)

            Hmac.prototype._update = function (data) {
                this._hash.update(data)
            }

            Hmac.prototype._final = function () {
                var h = this._hash.digest()
                var hash = this._alg === 'rmd160' ? new RIPEMD160() : sha(this._alg)
                return hash.update(this._opad).update(h).digest()
            }

            module.exports = function createHmac(alg, key) {
                alg = alg.toLowerCase()
                if (alg === 'rmd160' || alg === 'ripemd160') {
                    return new Hmac('rmd160', key)
                }
                if (alg === 'md5') {
                    return new Legacy(md5, key)
                }
                return new Hmac(alg, key)
            }

        }, {
            "./legacy": 66,
            "cipher-base": 59,
            "create-hash/md5": 64,
            "inherits": 143,
            "ripemd160": 183,
            "safe-buffer": 184,
            "sha.js": 186
        }],
        66: [function (require, module, exports) {
            'use strict'
            var inherits = require('inherits')
            var Buffer = require('safe-buffer').Buffer

            var Base = require('cipher-base')

            var ZEROS = Buffer.alloc(128)
            var blocksize = 64

            function Hmac(alg, key) {
                Base.call(this, 'digest')
                if (typeof key === 'string') {
                    key = Buffer.from(key)
                }

                this._alg = alg
                this._key = key

                if (key.length > blocksize) {
                    key = alg(key)
                } else if (key.length < blocksize) {
                    key = Buffer.concat([key, ZEROS], blocksize)
                }

                var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
                var opad = this._opad = Buffer.allocUnsafe(blocksize)

                for (var i = 0; i < blocksize; i++) {
                    ipad[i] = key[i] ^ 0x36
                    opad[i] = key[i] ^ 0x5C
                }

                this._hash = [ipad]
            }

            inherits(Hmac, Base)

            Hmac.prototype._update = function (data) {
                this._hash.push(data)
            }

            Hmac.prototype._final = function () {
                var h = this._alg(Buffer.concat(this._hash))
                return this._alg(Buffer.concat([this._opad, h]))
            }
            module.exports = Hmac

        }, {"cipher-base": 59, "inherits": 143, "safe-buffer": 184}],
        67: [function (require, module, exports) {
            ;(function (root, factory, undef) {
                if (typeof exports === "object") {
                    // CommonJS
                    module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
                }
                else if (typeof define === "function" && define.amd) {
                    // AMD
                    define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
                }
                else {
                    // Global (browser)
                    factory(root.CryptoJS);
                }
            }(this, function (CryptoJS) {

                (function () {
                    // Shortcuts
                    var C = CryptoJS;
                    var C_lib = C.lib;
                    var BlockCipher = C_lib.BlockCipher;
                    var C_algo = C.algo;

                    // Lookup tables
                    var SBOX = [];
                    var INV_SBOX = [];
                    var SUB_MIX_0 = [];
                    var SUB_MIX_1 = [];
                    var SUB_MIX_2 = [];
                    var SUB_MIX_3 = [];
                    var INV_SUB_MIX_0 = [];
                    var INV_SUB_MIX_1 = [];
                    var INV_SUB_MIX_2 = [];
                    var INV_SUB_MIX_3 = [];

                    // Compute lookup tables
                    (function () {
                        // Compute double table
                        var d = [];
                        for (var i = 0; i < 256; i++) {
                            if (i < 128) {
                                d[i] = i << 1;
                            } else {
                                d[i] = (i << 1) ^ 0x11b;
                            }
                        }

                        // Walk GF(2^8)
                        var x = 0;
                        var xi = 0;
                        for (var i = 0; i < 256; i++) {
                            // Compute sbox
                            var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);
                            sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;
                            SBOX[x] = sx;
                            INV_SBOX[sx] = x;

                            // Compute multiplication
                            var x2 = d[x];
                            var x4 = d[x2];
                            var x8 = d[x4];

                            // Compute sub bytes, mix columns tables
                            var t = (d[sx] * 0x101) ^ (sx * 0x1010100);
                            SUB_MIX_0[x] = (t << 24) | (t >>> 8);
                            SUB_MIX_1[x] = (t << 16) | (t >>> 16);
                            SUB_MIX_2[x] = (t << 8) | (t >>> 24);
                            SUB_MIX_3[x] = t;

                            // Compute inv sub bytes, inv mix columns tables
                            var t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);
                            INV_SUB_MIX_0[sx] = (t << 24) | (t >>> 8);
                            INV_SUB_MIX_1[sx] = (t << 16) | (t >>> 16);
                            INV_SUB_MIX_2[sx] = (t << 8) | (t >>> 24);
                            INV_SUB_MIX_3[sx] = t;

                            // Compute next counter
                            if (!x) {
                                x = xi = 1;
                            } else {
                                x = x2 ^ d[d[d[x8 ^ x2]]];
                                xi ^= d[d[xi]];
                            }
                        }
                    }());

                    // Precomputed Rcon lookup
                    var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];

                    /**
                     * AES block cipher algorithm.
                     */
                    var AES = C_algo.AES = BlockCipher.extend({
                        _doReset: function () {
                            // Skip reset of nRounds has been set before and key did not change
                            if (this._nRounds && this._keyPriorReset === this._key) {
                                return;
                            }

                            // Shortcuts
                            var key = this._keyPriorReset = this._key;
                            var keyWords = key.words;
                            var keySize = key.sigBytes / 4;

                            // Compute number of rounds
                            var nRounds = this._nRounds = keySize + 6;

                            // Compute number of key schedule rows
                            var ksRows = (nRounds + 1) * 4;

                            // Compute key schedule
                            var keySchedule = this._keySchedule = [];
                            for (var ksRow = 0; ksRow < ksRows; ksRow++) {
                                if (ksRow < keySize) {
                                    keySchedule[ksRow] = keyWords[ksRow];
                                } else {
                                    var t = keySchedule[ksRow - 1];

                                    if (!(ksRow % keySize)) {
                                        // Rot word
                                        t = (t << 8) | (t >>> 24);

                                        // Sub word
                                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];

                                        // Mix Rcon
                                        t ^= RCON[(ksRow / keySize) | 0] << 24;
                                    } else if (keySize > 6 && ksRow % keySize == 4) {
                                        // Sub word
                                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];
                                    }

                                    keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;
                                }
                            }

                            // Compute inv key schedule
                            var invKeySchedule = this._invKeySchedule = [];
                            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {
                                var ksRow = ksRows - invKsRow;

                                if (invKsRow % 4) {
                                    var t = keySchedule[ksRow];
                                } else {
                                    var t = keySchedule[ksRow - 4];
                                }

                                if (invKsRow < 4 || ksRow <= 4) {
                                    invKeySchedule[invKsRow] = t;
                                } else {
                                    invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[(t >>> 16) & 0xff]] ^
                                        INV_SUB_MIX_2[SBOX[(t >>> 8) & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];
                                }
                            }
                        },

                        encryptBlock: function (M, offset) {
                            this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
                        },

                        decryptBlock: function (M, offset) {
                            // Swap 2nd and 4th rows
                            var t = M[offset + 1];
                            M[offset + 1] = M[offset + 3];
                            M[offset + 3] = t;

                            this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);

                            // Inv swap 2nd and 4th rows
                            var t = M[offset + 1];
                            M[offset + 1] = M[offset + 3];
                            M[offset + 3] = t;
                        },

                        _doCryptBlock: function (M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {
                            // Shortcut
                            var nRounds = this._nRounds;

                            // Get input, add round key
                            var s0 = M[offset] ^ keySchedule[0];
                            var s1 = M[offset + 1] ^ keySchedule[1];
                            var s2 = M[offset + 2] ^ keySchedule[2];
                            var s3 = M[offset + 3] ^ keySchedule[3];

                            // Key schedule row counter
                            var ksRow = 4;

                            // Rounds
                            for (var round = 1; round < nRounds; round++) {
                                // Shift rows, sub bytes, mix columns, add round key
                                var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[(s1 >>> 16) & 0xff] ^ SUB_MIX_2[(s2 >>> 8) & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];
                                var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[(s2 >>> 16) & 0xff] ^ SUB_MIX_2[(s3 >>> 8) & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];
                                var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[(s3 >>> 16) & 0xff] ^ SUB_MIX_2[(s0 >>> 8) & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];
                                var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[(s0 >>> 16) & 0xff] ^ SUB_MIX_2[(s1 >>> 8) & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];

                                // Update state
                                s0 = t0;
                                s1 = t1;
                                s2 = t2;
                                s3 = t3;
                            }

                            // Shift rows, sub bytes, add round key
                            var t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
                            var t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
                            var t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
                            var t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];

                            // Set output
                            M[offset] = t0;
                            M[offset + 1] = t1;
                            M[offset + 2] = t2;
                            M[offset + 3] = t3;
                        },

                        keySize: 256 / 32
                    });

                    /**
                     * Shortcut functions to the cipher's object interface.
                     *
                     * @example
                     *
                     *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);
                     *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);
                     */
                    C.AES = BlockCipher._createHelper(AES);
                }());


                return CryptoJS.AES;

            }));
        }, {"./cipher-core": 68, "./core": 69, "./enc-base64": 70, "./evpkdf": 72, "./md5": 77}],
        68: [function (require, module, exports) {
            ;(function (root, factory, undef) {
                if (typeof exports === "object") {
                    // CommonJS
                    module.exports = exports = factory(require("./core"), require("./evpkdf"));
                }
                else if (typeof define === "function" && define.amd) {
                    // AMD
                    define(["./core", "./evpkdf"], factory);
                }
                else {
                    // Global (browser)
                    factory(root.CryptoJS);
                }
            }(this, function (CryptoJS) {

                /**
                 * Cipher core components.
                 */
                CryptoJS.lib.Cipher || (function (undefined) {
                    // Shortcuts
                    var C = CryptoJS;
                    var C_lib = C.lib;
                    var Base = C_lib.Base;
                    var WordArray = C_lib.WordArray;
                    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
                    var C_enc = C.enc;
                    var Utf8 = C_enc.Utf8;
                    var Base64 = C_enc.Base64;
                    var C_algo = C.algo;
                    var EvpKDF = C_algo.EvpKDF;

                    /**
                     * Abstract base cipher template.
                     *
                     * @property {number} keySize This cipher's key size. Default: 4 (128 bits)
                     * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)
                     * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.
                     * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.
                     */
                    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
                        /**
                         * Configuration options.
                         *
                         * @property {WordArray} iv The IV to use for this operation.
                         */
                        cfg: Base.extend(),

                        /**
                         * Creates this cipher in encryption mode.
                         *
                         * @param {WordArray} key The key.
                         * @param {Object} cfg (Optional) The configuration options to use for this operation.
                         *
                         * @return {Cipher} A cipher instance.
                         *
                         * @static
                         *
                         * @example
                         *
                         *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });
                         */
                        createEncryptor: function (key, cfg) {
                            return this.create(this._ENC_XFORM_MODE, key, cfg);
                        },

                        /**
                         * Creates this cipher in decryption mode.
                         *
                         * @param {WordArray} key The key.
                         * @param {Object} cfg (Optional) The configuration options to use for this operation.
                         *
                         * @return {Cipher} A cipher instance.
                         *
                         * @static
                         *
                         * @example
                         *
                         *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });
                         */
                        createDecryptor: function (key, cfg) {
                            return this.create(this._DEC_XFORM_MODE, key, cfg);
                        },

                        /**
                         * Initializes a newly created cipher.
                         *
                         * @param {number} xformMode Either the encryption or decryption transormation mode constant.
                         * @param {WordArray} key The key.
                         * @param {Object} cfg (Optional) The configuration options to use for this operation.
                         *
                         * @example
                         *
                         *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
                         */
                        init: function (xformMode, key, cfg) {
                            // Apply config defaults
                            this.cfg = this.cfg.extend(cfg);

                            // Store transform mode and key
                            this._xformMode = xformMode;
                            this._key = key;

                            // Set initial values
                            this.reset();
                        },

                        /**
                         * Resets this cipher to its initial state.
                         *
                         * @example
                         *
                         *     cipher.reset();
                         */
                        reset: function () {
                            // Reset data buffer
                            BufferedBlockAlgorithm.reset.call(this);

                            // Perform concrete-cipher logic
                            this._doReset();
                        },

                        /**
                         * Adds data to be encrypted or decrypted.
                         *
                         * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.
                         *
                         * @return {WordArray} The data after processing.
                         *
                         * @example
                         *
                         *     var encrypted = cipher.process('data');
                         *     var encrypted = cipher.process(wordArray);
                         */
                        process: function (dataUpdate) {
                            // Append
                            this._append(dataUpdate);

                            // Process available blocks
                            return this._process();
                        },

                        /**
                         * Finalizes the encryption or decryption process.
                         * Note that the finalize operation is effectively a destructive, read-once operation.
                         *
                         * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.
                         *
                         * @return {WordArray} The data after final processing.
                         *
                         * @example
                         *
                         *     var encrypted = cipher.finalize();
                         *     var encrypted = cipher.finalize('data');
                         *     var encrypted = cipher.finalize(wordArray);
                         */
                        finalize: function (dataUpdate) {
                            // Final data update
                            if (dataUpdate) {
                                this._append(dataUpdate);
                            }

                            // Perform concrete-cipher logic
                            var finalProcessedData = this._doFinalize();

                            return finalProcessedData;
                        },

                        keySize: 128 / 32,

                        ivSize: 128 / 32,

                        _ENC_XFORM_MODE: 1,

                        _DEC_XFORM_MODE: 2,

                        /**
                         * Creates shortcut functions to a cipher's object interface.
                         *
                         * @param {Cipher} cipher The cipher to create a helper for.
                         *
                         * @return {Object} An object with encrypt and decrypt shortcut functions.
                         *
                         * @static
                         *
                         * @example
                         *
                         *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);
                         */
                        _createHelper: (function () {
                            function selectCipherStrategy(key) {
                                if (typeof key == 'string') {
                                    return PasswordBasedCipher;
                                } else {
                                    return SerializableCipher;
                                }
                            }

                            return function (cipher) {
                                return {
                                    encrypt: function (message, key, cfg) {
                                        return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);
                                    },

                                    decrypt: function (ciphertext, key, cfg) {
                                        return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
                                    }
                                };
                            };
                        }())
                    });

                    /**
                     * Abstract base stream cipher template.
                     *
                     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)
                     */
                    var StreamCipher = C_lib.StreamCipher = Cipher.extend({
                        _doFinalize: function () {
                            // Process partial blocks
                            var finalProcessedBlocks = this._process(!!'flush');

                            return finalProcessedBlocks;
                        },

                        blockSize: 1
                    });

                    /**
                     * Mode namespace.
                     */
                    var C_mode = C.mode = {};

                    /**
                     * Abstract base block cipher mode template.
                     */
                    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
                        /**
                         * Creates this mode for encryption.
                         *
                         * @param {Cipher} cipher A block cipher instance.
                         * @param {Array} iv The IV words.
                         *
                         * @static
                         *
                         * @example
                         *
                         *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);
                         */
                        createEncryptor: function (cipher, iv) {
                            return this.Encryptor.create(cipher, iv);
                        },

                        /**
                         * Creates this mode for decryption.
                         *
                         * @param {Cipher} cipher A block cipher instance.
                         * @param {Array} iv The IV words.
                         *
                         * @static
                         *
                         * @example
                         *
                         *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);
                         */
                        createDecryptor: function (cipher, iv) {
                            return this.Decryptor.create(cipher, iv);
                        },

                        /**
                         * Initializes a newly created mode.
                         *
                         * @param {Cipher} cipher A block cipher instance.
                         * @param {Array} iv The IV words.
                         *
                         * @example
                         *
                         *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);
                         */
                        init: function (cipher, iv) {
                            this._cipher = cipher;
                            this._iv = iv;
                        }
                    });

                    /**
                     * Cipher Block Chaining mode.
                     */
                    var CBC = C_mode.CBC = (function () {
                        /**
                         * Abstract base CBC mode.
                         */
                        var CBC = BlockCipherMode.extend();

                        /**
                         * CBC encryptor.
                         */
                        CBC.Encryptor = CBC.extend({
                            /**
                             * Processes the data block at offset.
                             *
                             * @param {Array} words The data words to operate on.
                             * @param {number} offset The offset where the block starts.
                             *
                             * @example
                             *
                             *     mode.processBlock(data.words, offset);
                             */
                            processBlock: function (words, offset) {
                                // Shortcuts
                                var cipher = this._cipher;
                                var blockSize = cipher.blockSize;

                                // XOR and encrypt
                                xorBlock.call(this, words, offset, blockSize);
                                cipher.encryptBlock(words, offset);

                                // Remember this block to use with next block
                                this._prevBlock = words.slice(offset, offset + blockSize);
                            }
                        });

                        /**
                         * CBC decryptor.
                         */
                        CBC.Decryptor = CBC.extend({
                            /**
                             * Processes the data block at offset.
                             *
                             * @param {Array} words The data words to operate on.
                             * @param {number} offset The offset where the block starts.
                             *
                             * @example
                             *
                             *     mode.processBlock(data.words, offset);
                             */
                            processBlock: function (words, offset) {
                                // Shortcuts
                                var cipher = this._cipher;
                                var blockSize = cipher.blockSize;

                                // Remember this block to use with next block
                                var thisBlock = words.slice(offset, offset + blockSize);

                                // Decrypt and XOR
                                cipher.decryptBlock(words, offset);
                                xorBlock.call(this, words, offset, blockSize);

                                // This block becomes the previous block
                                this._prevBlock = thisBlock;
                            }
                        });

                        function xorBlock(words, offset, blockSize) {
                            // Shortcut
                            var iv = this._iv;

                            // Choose mixing block
                            if (iv) {
                                var block = iv;

                                // Remove IV for subsequent blocks
                                this._iv = undefined;
                            } else {
                                var block = this._prevBlock;
                            }

                            // XOR blocks
                            for (var i = 0; i < blockSize; i++) {
                                words[offset + i] ^= block[i];
                            }
                        }

                        return CBC;
                    }());

                    /**
                     * Padding namespace.
                     */
                    var C_pad = C.pad = {};

                    /**
                     * PKCS #5/7 padding strategy.
                     */
                    var Pkcs7 = C_pad.Pkcs7 = {
                        /**
                         * Pads data using the algorithm defined in PKCS #5/7.
                         *
                         * @param {WordArray} data The data to pad.
                         * @param {number} blockSize The multiple that the data should be padded to.
                         *
                         * @static
                         *
                         * @example
                         *
                         *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);
                         */
                        pad: function (data, blockSize) {
                            // Shortcut
                            var blockSizeBytes = blockSize * 4;

                            // Count padding bytes
                            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;

                            // Create padding word
                            var paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;

                            // Create padding
                            var paddingWords = [];
                            for (var i = 0; i < nPaddingBytes; i += 4) {
                                paddingWords.push(paddingWord);
                            }
                            var padding = WordArray.create(paddingWords, nPaddingBytes);

                            // Add padding
                            data.concat(padding);
                        },

                        /**
                         * Unpads data that had been padded using the algorithm defined in PKCS #5/7.
                         *
                         * @param {WordArray} data The data to unpad.
                         *
                         * @static
                         *
                         * @example
                         *
                         *     CryptoJS.pad.Pkcs7.unpad(wordArray);
                         */
                        unpad: function (data) {
                            // Get number of padding bytes from last byte
                            var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;

                            // Remove padding
                            data.sigBytes -= nPaddingBytes;
                        }
                    };

                    /**
                     * Abstract base block cipher template.
                     *
                     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)
                     */
                    var BlockCipher = C_lib.BlockCipher = Cipher.extend({
                        /**
                         * Configuration options.
                         *
                         * @property {Mode} mode The block mode to use. Default: CBC
                         * @property {Padding} padding The padding strategy to use. Default: Pkcs7
                         */
                        cfg: Cipher.cfg.extend({
                            mode: CBC,
                            padding: Pkcs7
                        }),

                        reset: function () {
                            // Reset cipher
                            Cipher.reset.call(this);

                            // Shortcuts
                            var cfg = this.cfg;
                            var iv = cfg.iv;
                            var mode = cfg.mode;

                            // Reset block mode
                            if (this._xformMode == this._ENC_XFORM_MODE) {
                                var modeCreator = mode.createEncryptor;
                            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {
                                var modeCreator = mode.createDecryptor;
                                // Keep at least one block in the buffer for unpadding
                                this._minBufferSize = 1;
                            }

                            if (this._mode && this._mode.__creator == modeCreator) {
                                this._mode.init(this, iv && iv.words);
                            } else {
                                this._mode = modeCreator.call(mode, this, iv && iv.words);
                                this._mode.__creator = modeCreator;
                            }
                        },

                        _doProcessBlock: function (words, offset) {
                            this._mode.processBlock(words, offset);
                        },

                        _doFinalize: function () {
                            // Shortcut
                            var padding = this.cfg.padding;

                            // Finalize
                            if (this._xformMode == this._ENC_XFORM_MODE) {
                                // Pad data
                                padding.pad(this._data, this.blockSize);

                                // Process final blocks
                                var finalProcessedBlocks = this._process(!!'flush');
                            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {
                                // Process final blocks
                                var finalProcessedBlocks = this._process(!!'flush');

                                // Unpad data
                                padding.unpad(finalProcessedBlocks);
                            }

                            return finalProcessedBlocks;
                        },

                        blockSize: 128 / 32
                    });

                    /**
                     * A collection of cipher parameters.
                     *
                     * @property {WordArray} ciphertext The raw ciphertext.
                     * @property {WordArray} key The key to this ciphertext.
                     * @property {WordArray} iv The IV used in the ciphering operation.
                     * @property {WordArray} salt The salt used with a key derivation function.
                     * @property {Cipher} algorithm The cipher algorithm.
                     * @property {Mode} mode The block mode used in the ciphering operation.
                     * @property {Padding} padding The padding scheme used in the ciphering operation.
                     * @property {number} blockSize The block size of the cipher.
                     * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.
                     */
                    var CipherParams = C_lib.CipherParams = Base.extend({
                        /**
                         * Initializes a newly created cipher params object.
                         *
                         * @param {Object} cipherParams An object with any of the possible cipher parameters.
                         *
                         * @example
                         *
                         *     var cipherParams = CryptoJS.lib.CipherParams.create({
	         *         ciphertext: ciphertextWordArray,
	         *         key: keyWordArray,
	         *         iv: ivWordArray,
	         *         salt: saltWordArray,
	         *         algorithm: CryptoJS.algo.AES,
	         *         mode: CryptoJS.mode.CBC,
	         *         padding: CryptoJS.pad.PKCS7,
	         *         blockSize: 4,
	         *         formatter: CryptoJS.format.OpenSSL
	         *     });
                         */
                        init: function (cipherParams) {
                            this.mixIn(cipherParams);
                        },

                        /**
                         * Converts this cipher params object to a string.
                         *
                         * @param {Format} formatter (Optional) The formatting strategy to use.
                         *
                         * @return {string} The stringified cipher params.
                         *
                         * @throws Error If neither the formatter nor the default formatter is set.
                         *
                         * @example
                         *
                         *     var string = cipherParams + '';
                         *     var string = cipherParams.toString();
                         *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);
                         */
                        toString: function (formatter) {
                            return (formatter || this.formatter).stringify(this);
                        }
                    });

                    /**
                     * Format namespace.
                     */
                    var C_format = C.format = {};

                    /**
                     * OpenSSL formatting strategy.
                     */
                    var OpenSSLFormatter = C_format.OpenSSL = {
                        /**
                         * Converts a cipher params object to an OpenSSL-compatible string.
                         *
                         * @param {CipherParams} cipherParams The cipher params object.
                         *
                         * @return {string} The OpenSSL-compatible string.
                         *
                         * @static
                         *
                         * @example
                         *
                         *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);
                         */
                        stringify: function (cipherParams) {
                            // Shortcuts
                            var ciphertext = cipherParams.ciphertext;
                            var salt = cipherParams.salt;

                            // Format
                            if (salt) {
                                var wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);
                            } else {
                                var wordArray = ciphertext;
                            }

                            return wordArray.toString(Base64);
                        },

                        /**
                         * Converts an OpenSSL-compatible string to a cipher params object.
                         *
                         * @param {string} openSSLStr The OpenSSL-compatible string.
                         *
                         * @return {CipherParams} The cipher params object.
                         *
                         * @static
                         *
                         * @example
                         *
                         *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);
                         */
                        parse: function (openSSLStr) {
                            // Parse base64
                            var ciphertext = Base64.parse(openSSLStr);

                            // Shortcut
                            var ciphertextWords = ciphertext.words;

                            // Test for salt
                            if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {
                                // Extract salt
                                var salt = WordArray.create(ciphertextWords.slice(2, 4));

                                // Remove salt from ciphertext
                                ciphertextWords.splice(0, 4);
                                ciphertext.sigBytes -= 16;
                            }

                            return CipherParams.create({ciphertext: ciphertext, salt: salt});
                        }
                    };

                    /**
                     * A cipher wrapper that returns ciphertext as a serializable cipher params object.
                     */
                    var SerializableCipher = C_lib.SerializableCipher = Base.extend({
                        /**
                         * Configuration options.
                         *
                         * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
                         */
                        cfg: Base.extend({
                            format: OpenSSLFormatter
                        }),

                        /**
                         * Encrypts a message.
                         *
                         * @param {Cipher} cipher The cipher algorithm to use.
                         * @param {WordArray|string} message The message to encrypt.
                         * @param {WordArray} key The key.
                         * @param {Object} cfg (Optional) The configuration options to use for this operation.
                         *
                         * @return {CipherParams} A cipher params object.
                         *
                         * @static
                         *
                         * @example
                         *
                         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);
                         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
                         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
                         */
                        encrypt: function (cipher, message, key, cfg) {
                            // Apply config defaults
                            cfg = this.cfg.extend(cfg);

                            // Encrypt
                            var encryptor = cipher.createEncryptor(key, cfg);
                            var ciphertext = encryptor.finalize(message);

                            // Shortcut
                            var cipherCfg = encryptor.cfg;

                            // Create and return serializable cipher params
                            return CipherParams.create({
                                ciphertext: ciphertext,
                                key: key,
                                iv: cipherCfg.iv,
                                algorithm: cipher,
                                mode: cipherCfg.mode,
                                padding: cipherCfg.padding,
                                blockSize: cipher.blockSize,
                                formatter: cfg.format
                            });
                        },

                        /**
                         * Decrypts serialized ciphertext.
                         *
                         * @param {Cipher} cipher The cipher algorithm to use.
                         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
                         * @param {WordArray} key The key.
                         * @param {Object} cfg (Optional) The configuration options to use for this operation.
                         *
                         * @return {WordArray} The plaintext.
                         *
                         * @static
                         *
                         * @example
                         *
                         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
                         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
                         */
                        decrypt: function (cipher, ciphertext, key, cfg) {
                            // Apply config defaults
                            cfg = this.cfg.extend(cfg);

                            // Convert string to CipherParams
                            ciphertext = this._parse(ciphertext, cfg.format);

                            // Decrypt
                            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);

                            return plaintext;
                        },

                        /**
                         * Converts serialized ciphertext to CipherParams,
                         * else assumed CipherParams already and returns ciphertext unchanged.
                         *
                         * @param {CipherParams|string} ciphertext The ciphertext.
                         * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.
                         *
                         * @return {CipherParams} The unserialized ciphertext.
                         *
                         * @static
                         *
                         * @example
                         *
                         *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);
                         */
                        _parse: function (ciphertext, format) {
                            if (typeof ciphertext == 'string') {
                                return format.parse(ciphertext, this);
                            } else {
                                return ciphertext;
                            }
                        }
                    });

                    /**
                     * Key derivation function namespace.
                     */
                    var C_kdf = C.kdf = {};

                    /**
                     * OpenSSL key derivation function.
                     */
                    var OpenSSLKdf = C_kdf.OpenSSL = {
                        /**
                         * Derives a key and IV from a password.
                         *
                         * @param {string} password The password to derive from.
                         * @param {number} keySize The size in words of the key to generate.
                         * @param {number} ivSize The size in words of the IV to generate.
                         * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
                         *
                         * @return {CipherParams} A cipher params object with the key, IV, and salt.
                         *
                         * @static
                         *
                         * @example
                         *
                         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);
                         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');
                         */
                        execute: function (password, keySize, ivSize, salt) {
                            // Generate random salt
                            if (!salt) {
                                salt = WordArray.random(64 / 8);
                            }

                            // Derive key and IV
                            var key = EvpKDF.create({keySize: keySize + ivSize}).compute(password, salt);

                            // Separate key and IV
                            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
                            key.sigBytes = keySize * 4;

                            // Return params
                            return CipherParams.create({key: key, iv: iv, salt: salt});
                        }
                    };

                    /**
                     * A serializable cipher wrapper that derives the key from a password,
                     * and returns ciphertext as a serializable cipher params object.
                     */
                    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
                        /**
                         * Configuration options.
                         *
                         * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
                         */
                        cfg: SerializableCipher.cfg.extend({
                            kdf: OpenSSLKdf
                        }),

                        /**
                         * Encrypts a message using a password.
                         *
                         * @param {Cipher} cipher The cipher algorithm to use.
                         * @param {WordArray|string} message The message to encrypt.
                         * @param {string} password The password.
                         * @param {Object} cfg (Optional) The configuration options to use for this operation.
                         *
                         * @return {CipherParams} A cipher params object.
                         *
                         * @static
                         *
                         * @example
                         *
                         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
                         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
                         */
                        encrypt: function (cipher, message, password, cfg) {
                            // Apply config defaults
                            cfg = this.cfg.extend(cfg);

                            // Derive key and other params
                            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);

                            // Add IV to config
                            cfg.iv = derivedParams.iv;

                            // Encrypt
                            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);

                            // Mix in derived params
                            ciphertext.mixIn(derivedParams);

                            return ciphertext;
                        },

                        /**
                         * Decrypts serialized ciphertext using a password.
                         *
                         * @param {Cipher} cipher The cipher algorithm to use.
                         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
                         * @param {string} password The password.
                         * @param {Object} cfg (Optional) The configuration options to use for this operation.
                         *
                         * @return {WordArray} The plaintext.
                         *
                         * @static
                         *
                         * @example
                         *
                         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
                         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
                         */
                        decrypt: function (cipher, ciphertext, password, cfg) {
                            // Apply config defaults
                            cfg = this.cfg.extend(cfg);

                            // Convert string to CipherParams
                            ciphertext = this._parse(ciphertext, cfg.format);

                            // Derive key and other params
                            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);

                            // Add IV to config
                            cfg.iv = derivedParams.iv;

                            // Decrypt
                            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);

                            return plaintext;
                        }
                    });
                }());


            }));
        }, {"./core": 69, "./evpkdf": 72}],
        69: [function (require, module, exports) {
            ;(function (root, factory) {
                if (typeof exports === "object") {
                    // CommonJS
                    module.exports = exports = factory();
                }
                else if (typeof define === "function" && define.amd) {
                    // AMD
                    define([], factory);
                }
                else {
                    // Global (browser)
                    root.CryptoJS = factory();
                }
            }(this, function () {

                /**
                 * CryptoJS core components.
                 */
                var CryptoJS = CryptoJS || (function (Math, undefined) {
                    /*
	     * Local polyfil of Object.create
	     */
                    var create = Object.create || (function () {
                        function F() {
                        };

                        return function (obj) {
                            var subtype;

                            F.prototype = obj;

                            subtype = new F();

                            F.prototype = null;

                            return subtype;
                        };
                    }())

                    /**
                     * CryptoJS namespace.
                     */
                    var C = {};

                    /**
                     * Library namespace.
                     */
                    var C_lib = C.lib = {};

                    /**
                     * Base object for prototypal inheritance.
                     */
                    var Base = C_lib.Base = (function () {


                        return {
                            /**
                             * Creates a new object that inherits from this object.
                             *
                             * @param {Object} overrides Properties to copy into the new object.
                             *
                             * @return {Object} The new object.
                             *
                             * @static
                             *
                             * @example
                             *
                             *     var MyType = CryptoJS.lib.Base.extend({
	             *         field: 'value',
	             *
	             *         method: function () {
	             *         }
	             *     });
                             */
                            extend: function (overrides) {
                                // Spawn
                                var subtype = create(this);

                                // Augment
                                if (overrides) {
                                    subtype.mixIn(overrides);
                                }

                                // Create default initializer
                                if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {
                                    subtype.init = function () {
                                        subtype.$super.init.apply(this, arguments);
                                    };
                                }

                                // Initializer's prototype is the subtype object
                                subtype.init.prototype = subtype;

                                // Reference supertype
                                subtype.$super = this;

                                return subtype;
                            },

                            /**
                             * Extends this object and runs the init method.
                             * Arguments to create() will be passed to init().
                             *
                             * @return {Object} The new object.
                             *
                             * @static
                             *
                             * @example
                             *
                             *     var instance = MyType.create();
                             */
                            create: function () {
                                var instance = this.extend();
                                instance.init.apply(instance, arguments);

                                return instance;
                            },

                            /**
                             * Initializes a newly created object.
                             * Override this method to add some logic when your objects are created.
                             *
                             * @example
                             *
                             *     var MyType = CryptoJS.lib.Base.extend({
	             *         init: function () {
	             *             // ...
	             *         }
	             *     });
                             */
                            init: function () {
                            },

                            /**
                             * Copies properties into this object.
                             *
                             * @param {Object} properties The properties to mix in.
                             *
                             * @example
                             *
                             *     MyType.mixIn({
	             *         field: 'value'
	             *     });
                             */
                            mixIn: function (properties) {
                                for (var propertyName in properties) {
                                    if (properties.hasOwnProperty(propertyName)) {
                                        this[propertyName] = properties[propertyName];
                                    }
                                }

                                // IE won't copy toString using the loop above
                                if (properties.hasOwnProperty('toString')) {
                                    this.toString = properties.toString;
                                }
                            },

                            /**
                             * Creates a copy of this object.
                             *
                             * @return {Object} The clone.
                             *
                             * @example
                             *
                             *     var clone = instance.clone();
                             */
                            clone: function () {
                                return this.init.prototype.extend(this);
                            }
                        };
                    }());

                    /**
                     * An array of 32-bit words.
                     *
                     * @property {Array} words The array of 32-bit words.
                     * @property {number} sigBytes The number of significant bytes in this word array.
                     */
                    var WordArray = C_lib.WordArray = Base.extend({
                        /**
                         * Initializes a newly created word array.
                         *
                         * @param {Array} words (Optional) An array of 32-bit words.
                         * @param {number} sigBytes (Optional) The number of significant bytes in the words.
                         *
                         * @example
                         *
                         *     var wordArray = CryptoJS.lib.WordArray.create();
                         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
                         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
                         */
                        init: function (words, sigBytes) {
                            words = this.words = words || [];

                            if (sigBytes != undefined) {
                                this.sigBytes = sigBytes;
                            } else {
                                this.sigBytes = words.length * 4;
                            }
                        },

                        /**
                         * Converts this word array to a string.
                         *
                         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
                         *
                         * @return {string} The stringified word array.
                         *
                         * @example
                         *
                         *     var string = wordArray + '';
                         *     var string = wordArray.toString();
                         *     var string = wordArray.toString(CryptoJS.enc.Utf8);
                         */
                        toString: function (encoder) {
                            return (encoder || Hex).stringify(this);
                        },

                        /**
                         * Concatenates a word array to this word array.
                         *
                         * @param {WordArray} wordArray The word array to append.
                         *
                         * @return {WordArray} This word array.
                         *
                         * @example
                         *
                         *     wordArray1.concat(wordArray2);
                         */
                        concat: function (wordArray) {
                            // Shortcuts
                            var thisWords = this.words;
                            var thatWords = wordArray.words;
                            var thisSigBytes = this.sigBytes;
                            var thatSigBytes = wordArray.sigBytes;

                            // Clamp excess bits
                            this.clamp();

                            // Concat
                            if (thisSigBytes % 4) {
                                // Copy one byte at a time
                                for (var i = 0; i < thatSigBytes; i++) {
                                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
                                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);
                                }
                            } else {
                                // Copy one word at a time
                                for (var i = 0; i < thatSigBytes; i += 4) {
                                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];
                                }
                            }
                            this.sigBytes += thatSigBytes;

                            // Chainable
                            return this;
                        },

                        /**
                         * Removes insignificant bits.
                         *
                         * @example
                         *
                         *     wordArray.clamp();
                         */
                        clamp: function () {
                            // Shortcuts
                            var words = this.words;
                            var sigBytes = this.sigBytes;

                            // Clamp
                            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);
                            words.length = Math.ceil(sigBytes / 4);
                        },

                        /**
                         * Creates a copy of this word array.
                         *
                         * @return {WordArray} The clone.
                         *
                         * @example
                         *
                         *     var clone = wordArray.clone();
                         */
                        clone: function () {
                            var clone = Base.clone.call(this);
                            clone.words = this.words.slice(0);

                            return clone;
                        },

                        /**
                         * Creates a word array filled with random bytes.
                         *
                         * @param {number} nBytes The number of random bytes to generate.
                         *
                         * @return {WordArray} The random word array.
                         *
                         * @static
                         *
                         * @example
                         *
                         *     var wordArray = CryptoJS.lib.WordArray.random(16);
                         */
                        random: function (nBytes) {
                            var words = [];

                            var r = (function (m_w) {
                                var m_w = m_w;
                                var m_z = 0x3ade68b1;
                                var mask = 0xffffffff;

                                return function () {
                                    m_z = (0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10)) & mask;
                                    m_w = (0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10)) & mask;
                                    var result = ((m_z << 0x10) + m_w) & mask;
                                    result /= 0x100000000;
                                    result += 0.5;
                                    return result * (Math.random() > .5 ? 1 : -1);
                                }
                            });

                            for (var i = 0, rcache; i < nBytes; i += 4) {
                                var _r = r((rcache || Math.random()) * 0x100000000);

                                rcache = _r() * 0x3ade67b7;
                                words.push((_r() * 0x100000000) | 0);
                            }

                            return new WordArray.init(words, nBytes);
                        }
                    });

                    /**
                     * Encoder namespace.
                     */
                    var C_enc = C.enc = {};

                    /**
                     * Hex encoding strategy.
                     */
                    var Hex = C_enc.Hex = {
                        /**
                         * Converts a word array to a hex string.
                         *
                         * @param {WordArray} wordArray The word array.
                         *
                         * @return {string} The hex string.
                         *
                         * @static
                         *
                         * @example
                         *
                         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
                         */
                        stringify: function (wordArray) {
                            // Shortcuts
                            var words = wordArray.words;
                            var sigBytes = wordArray.sigBytes;

                            // Convert
                            var hexChars = [];
                            for (var i = 0; i < sigBytes; i++) {
                                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
                                hexChars.push((bite >>> 4).toString(16));
                                hexChars.push((bite & 0x0f).toString(16));
                            }

                            return hexChars.join('');
                        },

                        /**
                         * Converts a hex string to a word array.
                         *
                         * @param {string} hexStr The hex string.
                         *
                         * @return {WordArray} The word array.
                         *
                         * @static
                         *
                         * @example
                         *
                         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
                         */
                        parse: function (hexStr) {
                            // Shortcut
                            var hexStrLength = hexStr.length;

                            // Convert
                            var words = [];
                            for (var i = 0; i < hexStrLength; i += 2) {
                                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);
                            }

                            return new WordArray.init(words, hexStrLength / 2);
                        }
                    };

                    /**
                     * Latin1 encoding strategy.
                     */
                    var Latin1 = C_enc.Latin1 = {
                        /**
                         * Converts a word array to a Latin1 string.
                         *
                         * @param {WordArray} wordArray The word array.
                         *
                         * @return {string} The Latin1 string.
                         *
                         * @static
                         *
                         * @example
                         *
                         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
                         */
                        stringify: function (wordArray) {
                            // Shortcuts
                            var words = wordArray.words;
                            var sigBytes = wordArray.sigBytes;

                            // Convert
                            var latin1Chars = [];
                            for (var i = 0; i < sigBytes; i++) {
                                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
                                latin1Chars.push(String.fromCharCode(bite));
                            }

                            return latin1Chars.join('');
                        },

                        /**
                         * Converts a Latin1 string to a word array.
                         *
                         * @param {string} latin1Str The Latin1 string.
                         *
                         * @return {WordArray} The word array.
                         *
                         * @static
                         *
                         * @example
                         *
                         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
                         */
                        parse: function (latin1Str) {
                            // Shortcut
                            var latin1StrLength = latin1Str.length;

                            // Convert
                            var words = [];
                            for (var i = 0; i < latin1StrLength; i++) {
                                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);
                            }

                            return new WordArray.init(words, latin1StrLength);
                        }
                    };

                    /**
                     * UTF-8 encoding strategy.
                     */
                    var Utf8 = C_enc.Utf8 = {
                        /**
                         * Converts a word array to a UTF-8 string.
                         *
                         * @param {WordArray} wordArray The word array.
                         *
                         * @return {string} The UTF-8 string.
                         *
                         * @static
                         *
                         * @example
                         *
                         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
                         */
                        stringify: function (wordArray) {
                            try {
                                return decodeURIComponent(escape(Latin1.stringify(wordArray)));
                            } catch (e) {
                                throw new Error('Malformed UTF-8 data');
                            }
                        },

                        /**
                         * Converts a UTF-8 string to a word array.
                         *
                         * @param {string} utf8Str The UTF-8 string.
                         *
                         * @return {WordArray} The word array.
                         *
                         * @static
                         *
                         * @example
                         *
                         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
                         */
                        parse: function (utf8Str) {
                            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
                        }
                    };

                    /**
                     * Abstract buffered block algorithm template.
                     *
                     * The property blockSize must be implemented in a concrete subtype.
                     *
                     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
                     */
                    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
                        /**
                         * Resets this block algorithm's data buffer to its initial state.
                         *
                         * @example
                         *
                         *     bufferedBlockAlgorithm.reset();
                         */
                        reset: function () {
                            // Initial values
                            this._data = new WordArray.init();
                            this._nDataBytes = 0;
                        },

                        /**
                         * Adds new data to this block algorithm's buffer.
                         *
                         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
                         *
                         * @example
                         *
                         *     bufferedBlockAlgorithm._append('data');
                         *     bufferedBlockAlgorithm._append(wordArray);
                         */
                        _append: function (data) {
                            // Convert string to WordArray, else assume WordArray already
                            if (typeof data == 'string') {
                                data = Utf8.parse(data);
                            }

                            // Append
                            this._data.concat(data);
                            this._nDataBytes += data.sigBytes;
                        },

                        /**
                         * Processes available data blocks.
                         *
                         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
                         *
                         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
                         *
                         * @return {WordArray} The processed data.
                         *
                         * @example
                         *
                         *     var processedData = bufferedBlockAlgorithm._process();
                         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
                         */
                        _process: function (doFlush) {
                            // Shortcuts
                            var data = this._data;
                            var dataWords = data.words;
                            var dataSigBytes = data.sigBytes;
                            var blockSize = this.blockSize;
                            var blockSizeBytes = blockSize * 4;

                            // Count blocks ready
                            var nBlocksReady = dataSigBytes / blockSizeBytes;
                            if (doFlush) {
                                // Round up to include partial blocks
                                nBlocksReady = Math.ceil(nBlocksReady);
                            } else {
                                // Round down to include only full blocks,
                                // less the number of blocks that must remain in the buffer
                                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
                            }

                            // Count words ready
                            var nWordsReady = nBlocksReady * blockSize;

                            // Count bytes ready
                            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);

                            // Process blocks
                            if (nWordsReady) {
                                for (var offset = 0; offset < nWordsReady; offset += blockSize) {
                                    // Perform concrete-algorithm logic
                                    this._doProcessBlock(dataWords, offset);
                                }

                                // Remove processed words
                                var processedWords = dataWords.splice(0, nWordsReady);
                                data.sigBytes -= nBytesReady;
                            }

                            // Return processed words
                            return new WordArray.init(processedWords, nBytesReady);
                        },

                        /**
                         * Creates a copy of this object.
                         *
                         * @return {Object} The clone.
                         *
                         * @example
                         *
                         *     var clone = bufferedBlockAlgorithm.clone();
                         */
                        clone: function () {
                            var clone = Base.clone.call(this);
                            clone._data = this._data.clone();

                            return clone;
                        },

                        _minBufferSize: 0
                    });

                    /**
                     * Abstract hasher template.
                     *
                     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)
                     */
                    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
                        /**
                         * Configuration options.
                         */
                        cfg: Base.extend(),

                        /**
                         * Initializes a newly created hasher.
                         *
                         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
                         *
                         * @example
                         *
                         *     var hasher = CryptoJS.algo.SHA256.create();
                         */
                        init: function (cfg) {
                            // Apply config defaults
                            this.cfg = this.cfg.extend(cfg);

                            // Set initial values
                            this.reset();
                        },

                        /**
                         * Resets this hasher to its initial state.
                         *
                         * @example
                         *
                         *     hasher.reset();
                         */
                        reset: function () {
                            // Reset data buffer
                            BufferedBlockAlgorithm.reset.call(this);

                            // Perform concrete-hasher logic
                            this._doReset();
                        },

                        /**
                         * Updates this hasher with a message.
                         *
                         * @param {WordArray|string} messageUpdate The message to append.
                         *
                         * @return {Hasher} This hasher.
                         *
                         * @example
                         *
                         *     hasher.update('message');
                         *     hasher.update(wordArray);
                         */
                        update: function (messageUpdate) {
                            // Append
                            this._append(messageUpdate);

                            // Update the hash
                            this._process();

                            // Chainable
                            return this;
                        },

                        /**
                         * Finalizes the hash computation.
                         * Note that the finalize operation is effectively a destructive, read-once operation.
                         *
                         * @param {WordArray|string} messageUpdate (Optional) A final message update.
                         *
                         * @return {WordArray} The hash.
                         *
                         * @example
                         *
                         *     var hash = hasher.finalize();
                         *     var hash = hasher.finalize('message');
                         *     var hash = hasher.finalize(wordArray);
                         */
                        finalize: function (messageUpdate) {
                            // Final message update
                            if (messageUpdate) {
                                this._append(messageUpdate);
                            }

                            // Perform concrete-hasher logic
                            var hash = this._doFinalize();

                            return hash;
                        },

                        blockSize: 512 / 32,

                        /**
                         * Creates a shortcut function to a hasher's object interface.
                         *
                         * @param {Hasher} hasher The hasher to create a helper for.
                         *
                         * @return {Function} The shortcut function.
                         *
                         * @static
                         *
                         * @example
                         *
                         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
                         */
                        _createHelper: function (hasher) {
                            return function (message, cfg) {
                                return new hasher.init(cfg).finalize(message);
                            };
                        },

                        /**
                         * Creates a shortcut function to the HMAC's object interface.
                         *
                         * @param {Hasher} hasher The hasher to use in this HMAC helper.
                         *
                         * @return {Function} The shortcut function.
                         *
                         * @static
                         *
                         * @example
                         *
                         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
                         */
                        _createHmacHelper: function (hasher) {
                            return function (message, key) {
                                return new C_algo.HMAC.init(hasher, key).finalize(message);
                            };
                        }
                    });

                    /**
                     * Algorithm namespace.
                     */
                    var C_algo = C.algo = {};

                    return C;
                }(Math));


                return CryptoJS;

            }));
        }, {}],
        70: [function (require, module, exports) {
            ;(function (root, factory) {
                if (typeof exports === "object") {
                    // CommonJS
                    module.exports = exports = factory(require("./core"));
                }
                else if (typeof define === "function" && define.amd) {
                    // AMD
                    define(["./core"], factory);
                }
                else {
                    // Global (browser)
                    factory(root.CryptoJS);
                }
            }(this, function (CryptoJS) {

                (function () {
                    // Shortcuts
                    var C = CryptoJS;
                    var C_lib = C.lib;
                    var WordArray = C_lib.WordArray;
                    var C_enc = C.enc;

                    /**
                     * Base64 encoding strategy.
                     */
                    var Base64 = C_enc.Base64 = {
                        /**
                         * Converts a word array to a Base64 string.
                         *
                         * @param {WordArray} wordArray The word array.
                         *
                         * @return {string} The Base64 string.
                         *
                         * @static
                         *
                         * @example
                         *
                         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
                         */
                        stringify: function (wordArray) {
                            // Shortcuts
                            var words = wordArray.words;
                            var sigBytes = wordArray.sigBytes;
                            var map = this._map;

                            // Clamp excess bits
                            wordArray.clamp();

                            // Convert
                            var base64Chars = [];
                            for (var i = 0; i < sigBytes; i += 3) {
                                var byte1 = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
                                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;
                                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;

                                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;

                                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {
                                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));
                                }
                            }

                            // Add padding
                            var paddingChar = map.charAt(64);
                            if (paddingChar) {
                                while (base64Chars.length % 4) {
                                    base64Chars.push(paddingChar);
                                }
                            }

                            return base64Chars.join('');
                        },

                        /**
                         * Converts a Base64 string to a word array.
                         *
                         * @param {string} base64Str The Base64 string.
                         *
                         * @return {WordArray} The word array.
                         *
                         * @static
                         *
                         * @example
                         *
                         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
                         */
                        parse: function (base64Str) {
                            // Shortcuts
                            var base64StrLength = base64Str.length;
                            var map = this._map;
                            var reverseMap = this._reverseMap;

                            if (!reverseMap) {
                                reverseMap = this._reverseMap = [];
                                for (var j = 0; j < map.length; j++) {
                                    reverseMap[map.charCodeAt(j)] = j;
                                }
                            }

                            // Ignore padding
                            var paddingChar = map.charAt(64);
                            if (paddingChar) {
                                var paddingIndex = base64Str.indexOf(paddingChar);
                                if (paddingIndex !== -1) {
                                    base64StrLength = paddingIndex;
                                }
                            }

                            // Convert
                            return parseLoop(base64Str, base64StrLength, reverseMap);

                        },

                        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='
                    };

                    function parseLoop(base64Str, base64StrLength, reverseMap) {
                        var words = [];
                        var nBytes = 0;
                        for (var i = 0; i < base64StrLength; i++) {
                            if (i % 4) {
                                var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);
                                var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);
                                words[nBytes >>> 2] |= (bits1 | bits2) << (24 - (nBytes % 4) * 8);
                                nBytes++;
                            }
                        }
                        return WordArray.create(words, nBytes);
                    }
                }());


                return CryptoJS.enc.Base64;

            }));
        }, {"./core": 69}],
        71: [function (require, module, exports) {
            ;(function (root, factory) {
                if (typeof exports === "object") {
                    // CommonJS
                    module.exports = exports = factory(require("./core"));
                }
                else if (typeof define === "function" && define.amd) {
                    // AMD
                    define(["./core"], factory);
                }
                else {
                    // Global (browser)
                    factory(root.CryptoJS);
                }
            }(this, function (CryptoJS) {

                (function () {
                    // Shortcuts
                    var C = CryptoJS;
                    var C_lib = C.lib;
                    var WordArray = C_lib.WordArray;
                    var C_enc = C.enc;

                    /**
                     * UTF-16 BE encoding strategy.
                     */
                    var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {
                        /**
                         * Converts a word array to a UTF-16 BE string.
                         *
                         * @param {WordArray} wordArray The word array.
                         *
                         * @return {string} The UTF-16 BE string.
                         *
                         * @static
                         *
                         * @example
                         *
                         *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);
                         */
                        stringify: function (wordArray) {
                            // Shortcuts
                            var words = wordArray.words;
                            var sigBytes = wordArray.sigBytes;

                            // Convert
                            var utf16Chars = [];
                            for (var i = 0; i < sigBytes; i += 2) {
                                var codePoint = (words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff;
                                utf16Chars.push(String.fromCharCode(codePoint));
                            }

                            return utf16Chars.join('');
                        },

                        /**
                         * Converts a UTF-16 BE string to a word array.
                         *
                         * @param {string} utf16Str The UTF-16 BE string.
                         *
                         * @return {WordArray} The word array.
                         *
                         * @static
                         *
                         * @example
                         *
                         *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);
                         */
                        parse: function (utf16Str) {
                            // Shortcut
                            var utf16StrLength = utf16Str.length;

                            // Convert
                            var words = [];
                            for (var i = 0; i < utf16StrLength; i++) {
                                words[i >>> 1] |= utf16Str.charCodeAt(i) << (16 - (i % 2) * 16);
                            }

                            return WordArray.create(words, utf16StrLength * 2);
                        }
                    };

                    /**
                     * UTF-16 LE encoding strategy.
                     */
                    C_enc.Utf16LE = {
                        /**
                         * Converts a word array to a UTF-16 LE string.
                         *
                         * @param {WordArray} wordArray The word array.
                         *
                         * @return {string} The UTF-16 LE string.
                         *
                         * @static
                         *
                         * @example
                         *
                         *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);
                         */
                        stringify: function (wordArray) {
                            // Shortcuts
                            var words = wordArray.words;
                            var sigBytes = wordArray.sigBytes;

                            // Convert
                            var utf16Chars = [];
                            for (var i = 0; i < sigBytes; i += 2) {
                                var codePoint = swapEndian((words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff);
                                utf16Chars.push(String.fromCharCode(codePoint));
                            }

                            return utf16Chars.join('');
                        },

                        /**
                         * Converts a UTF-16 LE string to a word array.
                         *
                         * @param {string} utf16Str The UTF-16 LE string.
                         *
                         * @return {WordArray} The word array.
                         *
                         * @static
                         *
                         * @example
                         *
                         *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);
                         */
                        parse: function (utf16Str) {
                            // Shortcut
                            var utf16StrLength = utf16Str.length;

                            // Convert
                            var words = [];
                            for (var i = 0; i < utf16StrLength; i++) {
                                words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << (16 - (i % 2) * 16));
                            }

                            return WordArray.create(words, utf16StrLength * 2);
                        }
                    };

                    function swapEndian(word) {
                        return ((word << 8) & 0xff00ff00) | ((word >>> 8) & 0x00ff00ff);
                    }
                }());


                return CryptoJS.enc.Utf16;

            }));
        }, {"./core": 69}],
        72: [function (require, module, exports) {
            ;(function (root, factory, undef) {
                if (typeof exports === "object") {
                    // CommonJS
                    module.exports = exports = factory(require("./core"), require("./sha1"), require("./hmac"));
                }
                else if (typeof define === "function" && define.amd) {
                    // AMD
                    define(["./core", "./sha1", "./hmac"], factory);
                }
                else {
                    // Global (browser)
                    factory(root.CryptoJS);
                }
            }(this, function (CryptoJS) {

                (function () {
                    // Shortcuts
                    var C = CryptoJS;
                    var C_lib = C.lib;
                    var Base = C_lib.Base;
                    var WordArray = C_lib.WordArray;
                    var C_algo = C.algo;
                    var MD5 = C_algo.MD5;

                    /**
                     * This key derivation function is meant to conform with EVP_BytesToKey.
                     * www.openssl.org/docs/crypto/EVP_BytesToKey.html
                     */
                    var EvpKDF = C_algo.EvpKDF = Base.extend({
                        /**
                         * Configuration options.
                         *
                         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
                         * @property {Hasher} hasher The hash algorithm to use. Default: MD5
                         * @property {number} iterations The number of iterations to perform. Default: 1
                         */
                        cfg: Base.extend({
                            keySize: 128 / 32,
                            hasher: MD5,
                            iterations: 1
                        }),

                        /**
                         * Initializes a newly created key derivation function.
                         *
                         * @param {Object} cfg (Optional) The configuration options to use for the derivation.
                         *
                         * @example
                         *
                         *     var kdf = CryptoJS.algo.EvpKDF.create();
                         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });
                         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });
                         */
                        init: function (cfg) {
                            this.cfg = this.cfg.extend(cfg);
                        },

                        /**
                         * Derives a key from a password.
                         *
                         * @param {WordArray|string} password The password.
                         * @param {WordArray|string} salt A salt.
                         *
                         * @return {WordArray} The derived key.
                         *
                         * @example
                         *
                         *     var key = kdf.compute(password, salt);
                         */
                        compute: function (password, salt) {
                            // Shortcut
                            var cfg = this.cfg;

                            // Init hasher
                            var hasher = cfg.hasher.create();

                            // Initial values
                            var derivedKey = WordArray.create();

                            // Shortcuts
                            var derivedKeyWords = derivedKey.words;
                            var keySize = cfg.keySize;
                            var iterations = cfg.iterations;

                            // Generate key
                            while (derivedKeyWords.length < keySize) {
                                if (block) {
                                    hasher.update(block);
                                }
                                var block = hasher.update(password).finalize(salt);
                                hasher.reset();

                                // Iterations
                                for (var i = 1; i < iterations; i++) {
                                    block = hasher.finalize(block);
                                    hasher.reset();
                                }

                                derivedKey.concat(block);
                            }
                            derivedKey.sigBytes = keySize * 4;

                            return derivedKey;
                        }
                    });

                    /**
                     * Derives a key from a password.
                     *
                     * @param {WordArray|string} password The password.
                     * @param {WordArray|string} salt A salt.
                     * @param {Object} cfg (Optional) The configuration options to use for this computation.
                     *
                     * @return {WordArray} The derived key.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var key = CryptoJS.EvpKDF(password, salt);
                     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });
                     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });
                     */
                    C.EvpKDF = function (password, salt, cfg) {
                        return EvpKDF.create(cfg).compute(password, salt);
                    };
                }());


                return CryptoJS.EvpKDF;

            }));
        }, {"./core": 69, "./hmac": 74, "./sha1": 93}],
        73: [function (require, module, exports) {
            ;(function (root, factory, undef) {
                if (typeof exports === "object") {
                    // CommonJS
                    module.exports = exports = factory(require("./core"), require("./cipher-core"));
                }
                else if (typeof define === "function" && define.amd) {
                    // AMD
                    define(["./core", "./cipher-core"], factory);
                }
                else {
                    // Global (browser)
                    factory(root.CryptoJS);
                }
            }(this, function (CryptoJS) {

                (function (undefined) {
                    // Shortcuts
                    var C = CryptoJS;
                    var C_lib = C.lib;
                    var CipherParams = C_lib.CipherParams;
                    var C_enc = C.enc;
                    var Hex = C_enc.Hex;
                    var C_format = C.format;

                    var HexFormatter = C_format.Hex = {
                        /**
                         * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.
                         *
                         * @param {CipherParams} cipherParams The cipher params object.
                         *
                         * @return {string} The hexadecimally encoded string.
                         *
                         * @static
                         *
                         * @example
                         *
                         *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);
                         */
                        stringify: function (cipherParams) {
                            return cipherParams.ciphertext.toString(Hex);
                        },

                        /**
                         * Converts a hexadecimally encoded ciphertext string to a cipher params object.
                         *
                         * @param {string} input The hexadecimally encoded string.
                         *
                         * @return {CipherParams} The cipher params object.
                         *
                         * @static
                         *
                         * @example
                         *
                         *     var cipherParams = CryptoJS.format.Hex.parse(hexString);
                         */
                        parse: function (input) {
                            var ciphertext = Hex.parse(input);
                            return CipherParams.create({ciphertext: ciphertext});
                        }
                    };
                }());


                return CryptoJS.format.Hex;

            }));
        }, {"./cipher-core": 68, "./core": 69}],
        74: [function (require, module, exports) {
            ;(function (root, factory) {
                if (typeof exports === "object") {
                    // CommonJS
                    module.exports = exports = factory(require("./core"));
                }
                else if (typeof define === "function" && define.amd) {
                    // AMD
                    define(["./core"], factory);
                }
                else {
                    // Global (browser)
                    factory(root.CryptoJS);
                }
            }(this, function (CryptoJS) {

                (function () {
                    // Shortcuts
                    var C = CryptoJS;
                    var C_lib = C.lib;
                    var Base = C_lib.Base;
                    var C_enc = C.enc;
                    var Utf8 = C_enc.Utf8;
                    var C_algo = C.algo;

                    /**
                     * HMAC algorithm.
                     */
                    var HMAC = C_algo.HMAC = Base.extend({
                        /**
                         * Initializes a newly created HMAC.
                         *
                         * @param {Hasher} hasher The hash algorithm to use.
                         * @param {WordArray|string} key The secret key.
                         *
                         * @example
                         *
                         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);
                         */
                        init: function (hasher, key) {
                            // Init hasher
                            hasher = this._hasher = new hasher.init();

                            // Convert string to WordArray, else assume WordArray already
                            if (typeof key == 'string') {
                                key = Utf8.parse(key);
                            }

                            // Shortcuts
                            var hasherBlockSize = hasher.blockSize;
                            var hasherBlockSizeBytes = hasherBlockSize * 4;

                            // Allow arbitrary length keys
                            if (key.sigBytes > hasherBlockSizeBytes) {
                                key = hasher.finalize(key);
                            }

                            // Clamp excess bits
                            key.clamp();

                            // Clone key for inner and outer pads
                            var oKey = this._oKey = key.clone();
                            var iKey = this._iKey = key.clone();

                            // Shortcuts
                            var oKeyWords = oKey.words;
                            var iKeyWords = iKey.words;

                            // XOR keys with pad constants
                            for (var i = 0; i < hasherBlockSize; i++) {
                                oKeyWords[i] ^= 0x5c5c5c5c;
                                iKeyWords[i] ^= 0x36363636;
                            }
                            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;

                            // Set initial values
                            this.reset();
                        },

                        /**
                         * Resets this HMAC to its initial state.
                         *
                         * @example
                         *
                         *     hmacHasher.reset();
                         */
                        reset: function () {
                            // Shortcut
                            var hasher = this._hasher;

                            // Reset
                            hasher.reset();
                            hasher.update(this._iKey);
                        },

                        /**
                         * Updates this HMAC with a message.
                         *
                         * @param {WordArray|string} messageUpdate The message to append.
                         *
                         * @return {HMAC} This HMAC instance.
                         *
                         * @example
                         *
                         *     hmacHasher.update('message');
                         *     hmacHasher.update(wordArray);
                         */
                        update: function (messageUpdate) {
                            this._hasher.update(messageUpdate);

                            // Chainable
                            return this;
                        },

                        /**
                         * Finalizes the HMAC computation.
                         * Note that the finalize operation is effectively a destructive, read-once operation.
                         *
                         * @param {WordArray|string} messageUpdate (Optional) A final message update.
                         *
                         * @return {WordArray} The HMAC.
                         *
                         * @example
                         *
                         *     var hmac = hmacHasher.finalize();
                         *     var hmac = hmacHasher.finalize('message');
                         *     var hmac = hmacHasher.finalize(wordArray);
                         */
                        finalize: function (messageUpdate) {
                            // Shortcut
                            var hasher = this._hasher;

                            // Compute HMAC
                            var innerHash = hasher.finalize(messageUpdate);
                            hasher.reset();
                            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));

                            return hmac;
                        }
                    });
                }());


            }));
        }, {"./core": 69}],
        75: [function (require, module, exports) {
            ;(function (root, factory, undef) {
                if (typeof exports === "object") {
                    // CommonJS
                    module.exports = exports = factory(require("./core"), require("./x64-core"), require("./lib-typedarrays"), require("./enc-utf16"), require("./enc-base64"), require("./md5"), require("./sha1"), require("./sha256"), require("./sha224"), require("./sha512"), require("./sha384"), require("./sha3"), require("./ripemd160"), require("./hmac"), require("./pbkdf2"), require("./evpkdf"), require("./cipher-core"), require("./mode-cfb"), require("./mode-ctr"), require("./mode-ctr-gladman"), require("./mode-ofb"), require("./mode-ecb"), require("./pad-ansix923"), require("./pad-iso10126"), require("./pad-iso97971"), require("./pad-zeropadding"), require("./pad-nopadding"), require("./format-hex"), require("./aes"), require("./tripledes"), require("./rc4"), require("./rabbit"), require("./rabbit-legacy"));
                }
                else if (typeof define === "function" && define.amd) {
                    // AMD
                    define(["./core", "./x64-core", "./lib-typedarrays", "./enc-utf16", "./enc-base64", "./md5", "./sha1", "./sha256", "./sha224", "./sha512", "./sha384", "./sha3", "./ripemd160", "./hmac", "./pbkdf2", "./evpkdf", "./cipher-core", "./mode-cfb", "./mode-ctr", "./mode-ctr-gladman", "./mode-ofb", "./mode-ecb", "./pad-ansix923", "./pad-iso10126", "./pad-iso97971", "./pad-zeropadding", "./pad-nopadding", "./format-hex", "./aes", "./tripledes", "./rc4", "./rabbit", "./rabbit-legacy"], factory);
                }
                else {
                    // Global (browser)
                    root.CryptoJS = factory(root.CryptoJS);
                }
            }(this, function (CryptoJS) {

                return CryptoJS;

            }));
        }, {
            "./aes": 67,
            "./cipher-core": 68,
            "./core": 69,
            "./enc-base64": 70,
            "./enc-utf16": 71,
            "./evpkdf": 72,
            "./format-hex": 73,
            "./hmac": 74,
            "./lib-typedarrays": 76,
            "./md5": 77,
            "./mode-cfb": 78,
            "./mode-ctr": 80,
            "./mode-ctr-gladman": 79,
            "./mode-ecb": 81,
            "./mode-ofb": 82,
            "./pad-ansix923": 83,
            "./pad-iso10126": 84,
            "./pad-iso97971": 85,
            "./pad-nopadding": 86,
            "./pad-zeropadding": 87,
            "./pbkdf2": 88,
            "./rabbit": 90,
            "./rabbit-legacy": 89,
            "./rc4": 91,
            "./ripemd160": 92,
            "./sha1": 93,
            "./sha224": 94,
            "./sha256": 95,
            "./sha3": 96,
            "./sha384": 97,
            "./sha512": 98,
            "./tripledes": 99,
            "./x64-core": 100
        }],
        76: [function (require, module, exports) {
            ;(function (root, factory) {
                if (typeof exports === "object") {
                    // CommonJS
                    module.exports = exports = factory(require("./core"));
                }
                else if (typeof define === "function" && define.amd) {
                    // AMD
                    define(["./core"], factory);
                }
                else {
                    // Global (browser)
                    factory(root.CryptoJS);
                }
            }(this, function (CryptoJS) {

                (function () {
                    // Check if typed arrays are supported
                    if (typeof ArrayBuffer != 'function') {
                        return;
                    }

                    // Shortcuts
                    var C = CryptoJS;
                    var C_lib = C.lib;
                    var WordArray = C_lib.WordArray;

                    // Reference original init
                    var superInit = WordArray.init;

                    // Augment WordArray.init to handle typed arrays
                    var subInit = WordArray.init = function (typedArray) {
                        // Convert buffers to uint8
                        if (typedArray instanceof ArrayBuffer) {
                            typedArray = new Uint8Array(typedArray);
                        }

                        // Convert other array views to uint8
                        if (
                            typedArray instanceof Int8Array ||
                            (typeof Uint8ClampedArray !== "undefined" && typedArray instanceof Uint8ClampedArray) ||
                            typedArray instanceof Int16Array ||
                            typedArray instanceof Uint16Array ||
                            typedArray instanceof Int32Array ||
                            typedArray instanceof Uint32Array ||
                            typedArray instanceof Float32Array ||
                            typedArray instanceof Float64Array
                        ) {
                            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);
                        }

                        // Handle Uint8Array
                        if (typedArray instanceof Uint8Array) {
                            // Shortcut
                            var typedArrayByteLength = typedArray.byteLength;

                            // Extract bytes
                            var words = [];
                            for (var i = 0; i < typedArrayByteLength; i++) {
                                words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);
                            }

                            // Initialize this word array
                            superInit.call(this, words, typedArrayByteLength);
                        } else {
                            // Else call normal init
                            superInit.apply(this, arguments);
                        }
                    };

                    subInit.prototype = WordArray;
                }());


                return CryptoJS.lib.WordArray;

            }));
        }, {"./core": 69}],
        77: [function (require, module, exports) {
            ;(function (root, factory) {
                if (typeof exports === "object") {
                    // CommonJS
                    module.exports = exports = factory(require("./core"));
                }
                else if (typeof define === "function" && define.amd) {
                    // AMD
                    define(["./core"], factory);
                }
                else {
                    // Global (browser)
                    factory(root.CryptoJS);
                }
            }(this, function (CryptoJS) {

                (function (Math) {
                    // Shortcuts
                    var C = CryptoJS;
                    var C_lib = C.lib;
                    var WordArray = C_lib.WordArray;
                    var Hasher = C_lib.Hasher;
                    var C_algo = C.algo;

                    // Constants table
                    var T = [];

                    // Compute constants
                    (function () {
                        for (var i = 0; i < 64; i++) {
                            T[i] = (Math.abs(Math.sin(i + 1)) * 0x100000000) | 0;
                        }
                    }());

                    /**
                     * MD5 hash algorithm.
                     */
                    var MD5 = C_algo.MD5 = Hasher.extend({
                        _doReset: function () {
                            this._hash = new WordArray.init([
                                0x67452301, 0xefcdab89,
                                0x98badcfe, 0x10325476
                            ]);
                        },

                        _doProcessBlock: function (M, offset) {
                            // Swap endian
                            for (var i = 0; i < 16; i++) {
                                // Shortcuts
                                var offset_i = offset + i;
                                var M_offset_i = M[offset_i];

                                M[offset_i] = (
                                    (((M_offset_i << 8) | (M_offset_i >>> 24)) & 0x00ff00ff) |
                                    (((M_offset_i << 24) | (M_offset_i >>> 8)) & 0xff00ff00)
                                );
                            }

                            // Shortcuts
                            var H = this._hash.words;

                            var M_offset_0 = M[offset + 0];
                            var M_offset_1 = M[offset + 1];
                            var M_offset_2 = M[offset + 2];
                            var M_offset_3 = M[offset + 3];
                            var M_offset_4 = M[offset + 4];
                            var M_offset_5 = M[offset + 5];
                            var M_offset_6 = M[offset + 6];
                            var M_offset_7 = M[offset + 7];
                            var M_offset_8 = M[offset + 8];
                            var M_offset_9 = M[offset + 9];
                            var M_offset_10 = M[offset + 10];
                            var M_offset_11 = M[offset + 11];
                            var M_offset_12 = M[offset + 12];
                            var M_offset_13 = M[offset + 13];
                            var M_offset_14 = M[offset + 14];
                            var M_offset_15 = M[offset + 15];

                            // Working varialbes
                            var a = H[0];
                            var b = H[1];
                            var c = H[2];
                            var d = H[3];

                            // Computation
                            a = FF(a, b, c, d, M_offset_0, 7, T[0]);
                            d = FF(d, a, b, c, M_offset_1, 12, T[1]);
                            c = FF(c, d, a, b, M_offset_2, 17, T[2]);
                            b = FF(b, c, d, a, M_offset_3, 22, T[3]);
                            a = FF(a, b, c, d, M_offset_4, 7, T[4]);
                            d = FF(d, a, b, c, M_offset_5, 12, T[5]);
                            c = FF(c, d, a, b, M_offset_6, 17, T[6]);
                            b = FF(b, c, d, a, M_offset_7, 22, T[7]);
                            a = FF(a, b, c, d, M_offset_8, 7, T[8]);
                            d = FF(d, a, b, c, M_offset_9, 12, T[9]);
                            c = FF(c, d, a, b, M_offset_10, 17, T[10]);
                            b = FF(b, c, d, a, M_offset_11, 22, T[11]);
                            a = FF(a, b, c, d, M_offset_12, 7, T[12]);
                            d = FF(d, a, b, c, M_offset_13, 12, T[13]);
                            c = FF(c, d, a, b, M_offset_14, 17, T[14]);
                            b = FF(b, c, d, a, M_offset_15, 22, T[15]);

                            a = GG(a, b, c, d, M_offset_1, 5, T[16]);
                            d = GG(d, a, b, c, M_offset_6, 9, T[17]);
                            c = GG(c, d, a, b, M_offset_11, 14, T[18]);
                            b = GG(b, c, d, a, M_offset_0, 20, T[19]);
                            a = GG(a, b, c, d, M_offset_5, 5, T[20]);
                            d = GG(d, a, b, c, M_offset_10, 9, T[21]);
                            c = GG(c, d, a, b, M_offset_15, 14, T[22]);
                            b = GG(b, c, d, a, M_offset_4, 20, T[23]);
                            a = GG(a, b, c, d, M_offset_9, 5, T[24]);
                            d = GG(d, a, b, c, M_offset_14, 9, T[25]);
                            c = GG(c, d, a, b, M_offset_3, 14, T[26]);
                            b = GG(b, c, d, a, M_offset_8, 20, T[27]);
                            a = GG(a, b, c, d, M_offset_13, 5, T[28]);
                            d = GG(d, a, b, c, M_offset_2, 9, T[29]);
                            c = GG(c, d, a, b, M_offset_7, 14, T[30]);
                            b = GG(b, c, d, a, M_offset_12, 20, T[31]);

                            a = HH(a, b, c, d, M_offset_5, 4, T[32]);
                            d = HH(d, a, b, c, M_offset_8, 11, T[33]);
                            c = HH(c, d, a, b, M_offset_11, 16, T[34]);
                            b = HH(b, c, d, a, M_offset_14, 23, T[35]);
                            a = HH(a, b, c, d, M_offset_1, 4, T[36]);
                            d = HH(d, a, b, c, M_offset_4, 11, T[37]);
                            c = HH(c, d, a, b, M_offset_7, 16, T[38]);
                            b = HH(b, c, d, a, M_offset_10, 23, T[39]);
                            a = HH(a, b, c, d, M_offset_13, 4, T[40]);
                            d = HH(d, a, b, c, M_offset_0, 11, T[41]);
                            c = HH(c, d, a, b, M_offset_3, 16, T[42]);
                            b = HH(b, c, d, a, M_offset_6, 23, T[43]);
                            a = HH(a, b, c, d, M_offset_9, 4, T[44]);
                            d = HH(d, a, b, c, M_offset_12, 11, T[45]);
                            c = HH(c, d, a, b, M_offset_15, 16, T[46]);
                            b = HH(b, c, d, a, M_offset_2, 23, T[47]);

                            a = II(a, b, c, d, M_offset_0, 6, T[48]);
                            d = II(d, a, b, c, M_offset_7, 10, T[49]);
                            c = II(c, d, a, b, M_offset_14, 15, T[50]);
                            b = II(b, c, d, a, M_offset_5, 21, T[51]);
                            a = II(a, b, c, d, M_offset_12, 6, T[52]);
                            d = II(d, a, b, c, M_offset_3, 10, T[53]);
                            c = II(c, d, a, b, M_offset_10, 15, T[54]);
                            b = II(b, c, d, a, M_offset_1, 21, T[55]);
                            a = II(a, b, c, d, M_offset_8, 6, T[56]);
                            d = II(d, a, b, c, M_offset_15, 10, T[57]);
                            c = II(c, d, a, b, M_offset_6, 15, T[58]);
                            b = II(b, c, d, a, M_offset_13, 21, T[59]);
                            a = II(a, b, c, d, M_offset_4, 6, T[60]);
                            d = II(d, a, b, c, M_offset_11, 10, T[61]);
                            c = II(c, d, a, b, M_offset_2, 15, T[62]);
                            b = II(b, c, d, a, M_offset_9, 21, T[63]);

                            // Intermediate hash value
                            H[0] = (H[0] + a) | 0;
                            H[1] = (H[1] + b) | 0;
                            H[2] = (H[2] + c) | 0;
                            H[3] = (H[3] + d) | 0;
                        },

                        _doFinalize: function () {
                            // Shortcuts
                            var data = this._data;
                            var dataWords = data.words;

                            var nBitsTotal = this._nDataBytes * 8;
                            var nBitsLeft = data.sigBytes * 8;

                            // Add padding
                            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);

                            var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);
                            var nBitsTotalL = nBitsTotal;
                            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = (
                                (((nBitsTotalH << 8) | (nBitsTotalH >>> 24)) & 0x00ff00ff) |
                                (((nBitsTotalH << 24) | (nBitsTotalH >>> 8)) & 0xff00ff00)
                            );
                            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
                                (((nBitsTotalL << 8) | (nBitsTotalL >>> 24)) & 0x00ff00ff) |
                                (((nBitsTotalL << 24) | (nBitsTotalL >>> 8)) & 0xff00ff00)
                            );

                            data.sigBytes = (dataWords.length + 1) * 4;

                            // Hash final blocks
                            this._process();

                            // Shortcuts
                            var hash = this._hash;
                            var H = hash.words;

                            // Swap endian
                            for (var i = 0; i < 4; i++) {
                                // Shortcut
                                var H_i = H[i];

                                H[i] = (((H_i << 8) | (H_i >>> 24)) & 0x00ff00ff) |
                                    (((H_i << 24) | (H_i >>> 8)) & 0xff00ff00);
                            }

                            // Return final computed hash
                            return hash;
                        },

                        clone: function () {
                            var clone = Hasher.clone.call(this);
                            clone._hash = this._hash.clone();

                            return clone;
                        }
                    });

                    function FF(a, b, c, d, x, s, t) {
                        var n = a + ((b & c) | (~b & d)) + x + t;
                        return ((n << s) | (n >>> (32 - s))) + b;
                    }

                    function GG(a, b, c, d, x, s, t) {
                        var n = a + ((b & d) | (c & ~d)) + x + t;
                        return ((n << s) | (n >>> (32 - s))) + b;
                    }

                    function HH(a, b, c, d, x, s, t) {
                        var n = a + (b ^ c ^ d) + x + t;
                        return ((n << s) | (n >>> (32 - s))) + b;
                    }

                    function II(a, b, c, d, x, s, t) {
                        var n = a + (c ^ (b | ~d)) + x + t;
                        return ((n << s) | (n >>> (32 - s))) + b;
                    }

                    /**
                     * Shortcut function to the hasher's object interface.
                     *
                     * @param {WordArray|string} message The message to hash.
                     *
                     * @return {WordArray} The hash.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var hash = CryptoJS.MD5('message');
                     *     var hash = CryptoJS.MD5(wordArray);
                     */
                    C.MD5 = Hasher._createHelper(MD5);

                    /**
                     * Shortcut function to the HMAC's object interface.
                     *
                     * @param {WordArray|string} message The message to hash.
                     * @param {WordArray|string} key The secret key.
                     *
                     * @return {WordArray} The HMAC.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var hmac = CryptoJS.HmacMD5(message, key);
                     */
                    C.HmacMD5 = Hasher._createHmacHelper(MD5);
                }(Math));


                return CryptoJS.MD5;

            }));
        }, {"./core": 69}],
        78: [function (require, module, exports) {
            ;(function (root, factory, undef) {
                if (typeof exports === "object") {
                    // CommonJS
                    module.exports = exports = factory(require("./core"), require("./cipher-core"));
                }
                else if (typeof define === "function" && define.amd) {
                    // AMD
                    define(["./core", "./cipher-core"], factory);
                }
                else {
                    // Global (browser)
                    factory(root.CryptoJS);
                }
            }(this, function (CryptoJS) {

                /**
                 * Cipher Feedback block mode.
                 */
                CryptoJS.mode.CFB = (function () {
                    var CFB = CryptoJS.lib.BlockCipherMode.extend();

                    CFB.Encryptor = CFB.extend({
                        processBlock: function (words, offset) {
                            // Shortcuts
                            var cipher = this._cipher;
                            var blockSize = cipher.blockSize;

                            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);

                            // Remember this block to use with next block
                            this._prevBlock = words.slice(offset, offset + blockSize);
                        }
                    });

                    CFB.Decryptor = CFB.extend({
                        processBlock: function (words, offset) {
                            // Shortcuts
                            var cipher = this._cipher;
                            var blockSize = cipher.blockSize;

                            // Remember this block to use with next block
                            var thisBlock = words.slice(offset, offset + blockSize);

                            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);

                            // This block becomes the previous block
                            this._prevBlock = thisBlock;
                        }
                    });

                    function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {
                        // Shortcut
                        var iv = this._iv;

                        // Generate keystream
                        if (iv) {
                            var keystream = iv.slice(0);

                            // Remove IV for subsequent blocks
                            this._iv = undefined;
                        } else {
                            var keystream = this._prevBlock;
                        }
                        cipher.encryptBlock(keystream, 0);

                        // Encrypt
                        for (var i = 0; i < blockSize; i++) {
                            words[offset + i] ^= keystream[i];
                        }
                    }

                    return CFB;
                }());


                return CryptoJS.mode.CFB;

            }));
        }, {"./cipher-core": 68, "./core": 69}],
        79: [function (require, module, exports) {
            ;(function (root, factory, undef) {
                if (typeof exports === "object") {
                    // CommonJS
                    module.exports = exports = factory(require("./core"), require("./cipher-core"));
                }
                else if (typeof define === "function" && define.amd) {
                    // AMD
                    define(["./core", "./cipher-core"], factory);
                }
                else {
                    // Global (browser)
                    factory(root.CryptoJS);
                }
            }(this, function (CryptoJS) {

                /** @preserve
                 * Counter block mode compatible with  Dr Brian Gladman fileenc.c
                 * derived from CryptoJS.mode.CTR
                 * Jan Hruby jhruby.web@gmail.com
                 */
                CryptoJS.mode.CTRGladman = (function () {
                    var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();

                    function incWord(word) {
                        if (((word >> 24) & 0xff) === 0xff) { //overflow
                            var b1 = (word >> 16) & 0xff;
                            var b2 = (word >> 8) & 0xff;
                            var b3 = word & 0xff;

                            if (b1 === 0xff) // overflow b1
                            {
                                b1 = 0;
                                if (b2 === 0xff) {
                                    b2 = 0;
                                    if (b3 === 0xff) {
                                        b3 = 0;
                                    }
                                    else {
                                        ++b3;
                                    }
                                }
                                else {
                                    ++b2;
                                }
                            }
                            else {
                                ++b1;
                            }

                            word = 0;
                            word += (b1 << 16);
                            word += (b2 << 8);
                            word += b3;
                        }
                        else {
                            word += (0x01 << 24);
                        }
                        return word;
                    }

                    function incCounter(counter) {
                        if ((counter[0] = incWord(counter[0])) === 0) {
                            // encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8
                            counter[1] = incWord(counter[1]);
                        }
                        return counter;
                    }

                    var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({
                        processBlock: function (words, offset) {
                            // Shortcuts
                            var cipher = this._cipher
                            var blockSize = cipher.blockSize;
                            var iv = this._iv;
                            var counter = this._counter;

                            // Generate keystream
                            if (iv) {
                                counter = this._counter = iv.slice(0);

                                // Remove IV for subsequent blocks
                                this._iv = undefined;
                            }

                            incCounter(counter);

                            var keystream = counter.slice(0);
                            cipher.encryptBlock(keystream, 0);

                            // Encrypt
                            for (var i = 0; i < blockSize; i++) {
                                words[offset + i] ^= keystream[i];
                            }
                        }
                    });

                    CTRGladman.Decryptor = Encryptor;

                    return CTRGladman;
                }());


                return CryptoJS.mode.CTRGladman;

            }));
        }, {"./cipher-core": 68, "./core": 69}],
        80: [function (require, module, exports) {
            ;(function (root, factory, undef) {
                if (typeof exports === "object") {
                    // CommonJS
                    module.exports = exports = factory(require("./core"), require("./cipher-core"));
                }
                else if (typeof define === "function" && define.amd) {
                    // AMD
                    define(["./core", "./cipher-core"], factory);
                }
                else {
                    // Global (browser)
                    factory(root.CryptoJS);
                }
            }(this, function (CryptoJS) {

                /**
                 * Counter block mode.
                 */
                CryptoJS.mode.CTR = (function () {
                    var CTR = CryptoJS.lib.BlockCipherMode.extend();

                    var Encryptor = CTR.Encryptor = CTR.extend({
                        processBlock: function (words, offset) {
                            // Shortcuts
                            var cipher = this._cipher
                            var blockSize = cipher.blockSize;
                            var iv = this._iv;
                            var counter = this._counter;

                            // Generate keystream
                            if (iv) {
                                counter = this._counter = iv.slice(0);

                                // Remove IV for subsequent blocks
                                this._iv = undefined;
                            }
                            var keystream = counter.slice(0);
                            cipher.encryptBlock(keystream, 0);

                            // Increment counter
                            counter[blockSize - 1] = (counter[blockSize - 1] + 1) | 0

                            // Encrypt
                            for (var i = 0; i < blockSize; i++) {
                                words[offset + i] ^= keystream[i];
                            }
                        }
                    });

                    CTR.Decryptor = Encryptor;

                    return CTR;
                }());


                return CryptoJS.mode.CTR;

            }));
        }, {"./cipher-core": 68, "./core": 69}],
        81: [function (require, module, exports) {
            ;(function (root, factory, undef) {
                if (typeof exports === "object") {
                    // CommonJS
                    module.exports = exports = factory(require("./core"), require("./cipher-core"));
                }
                else if (typeof define === "function" && define.amd) {
                    // AMD
                    define(["./core", "./cipher-core"], factory);
                }
                else {
                    // Global (browser)
                    factory(root.CryptoJS);
                }
            }(this, function (CryptoJS) {

                /**
                 * Electronic Codebook block mode.
                 */
                CryptoJS.mode.ECB = (function () {
                    var ECB = CryptoJS.lib.BlockCipherMode.extend();

                    ECB.Encryptor = ECB.extend({
                        processBlock: function (words, offset) {
                            this._cipher.encryptBlock(words, offset);
                        }
                    });

                    ECB.Decryptor = ECB.extend({
                        processBlock: function (words, offset) {
                            this._cipher.decryptBlock(words, offset);
                        }
                    });

                    return ECB;
                }());


                return CryptoJS.mode.ECB;

            }));
        }, {"./cipher-core": 68, "./core": 69}],
        82: [function (require, module, exports) {
            ;(function (root, factory, undef) {
                if (typeof exports === "object") {
                    // CommonJS
                    module.exports = exports = factory(require("./core"), require("./cipher-core"));
                }
                else if (typeof define === "function" && define.amd) {
                    // AMD
                    define(["./core", "./cipher-core"], factory);
                }
                else {
                    // Global (browser)
                    factory(root.CryptoJS);
                }
            }(this, function (CryptoJS) {

                /**
                 * Output Feedback block mode.
                 */
                CryptoJS.mode.OFB = (function () {
                    var OFB = CryptoJS.lib.BlockCipherMode.extend();

                    var Encryptor = OFB.Encryptor = OFB.extend({
                        processBlock: function (words, offset) {
                            // Shortcuts
                            var cipher = this._cipher
                            var blockSize = cipher.blockSize;
                            var iv = this._iv;
                            var keystream = this._keystream;

                            // Generate keystream
                            if (iv) {
                                keystream = this._keystream = iv.slice(0);

                                // Remove IV for subsequent blocks
                                this._iv = undefined;
                            }
                            cipher.encryptBlock(keystream, 0);

                            // Encrypt
                            for (var i = 0; i < blockSize; i++) {
                                words[offset + i] ^= keystream[i];
                            }
                        }
                    });

                    OFB.Decryptor = Encryptor;

                    return OFB;
                }());


                return CryptoJS.mode.OFB;

            }));
        }, {"./cipher-core": 68, "./core": 69}],
        83: [function (require, module, exports) {
            ;(function (root, factory, undef) {
                if (typeof exports === "object") {
                    // CommonJS
                    module.exports = exports = factory(require("./core"), require("./cipher-core"));
                }
                else if (typeof define === "function" && define.amd) {
                    // AMD
                    define(["./core", "./cipher-core"], factory);
                }
                else {
                    // Global (browser)
                    factory(root.CryptoJS);
                }
            }(this, function (CryptoJS) {

                /**
                 * ANSI X.923 padding strategy.
                 */
                CryptoJS.pad.AnsiX923 = {
                    pad: function (data, blockSize) {
                        // Shortcuts
                        var dataSigBytes = data.sigBytes;
                        var blockSizeBytes = blockSize * 4;

                        // Count padding bytes
                        var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;

                        // Compute last byte position
                        var lastBytePos = dataSigBytes + nPaddingBytes - 1;

                        // Pad
                        data.clamp();
                        data.words[lastBytePos >>> 2] |= nPaddingBytes << (24 - (lastBytePos % 4) * 8);
                        data.sigBytes += nPaddingBytes;
                    },

                    unpad: function (data) {
                        // Get number of padding bytes from last byte
                        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;

                        // Remove padding
                        data.sigBytes -= nPaddingBytes;
                    }
                };


                return CryptoJS.pad.Ansix923;

            }));
        }, {"./cipher-core": 68, "./core": 69}],
        84: [function (require, module, exports) {
            ;(function (root, factory, undef) {
                if (typeof exports === "object") {
                    // CommonJS
                    module.exports = exports = factory(require("./core"), require("./cipher-core"));
                }
                else if (typeof define === "function" && define.amd) {
                    // AMD
                    define(["./core", "./cipher-core"], factory);
                }
                else {
                    // Global (browser)
                    factory(root.CryptoJS);
                }
            }(this, function (CryptoJS) {

                /**
                 * ISO 10126 padding strategy.
                 */
                CryptoJS.pad.Iso10126 = {
                    pad: function (data, blockSize) {
                        // Shortcut
                        var blockSizeBytes = blockSize * 4;

                        // Count padding bytes
                        var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;

                        // Pad
                        data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).concat(CryptoJS.lib.WordArray.create([nPaddingBytes << 24], 1));
                    },

                    unpad: function (data) {
                        // Get number of padding bytes from last byte
                        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;

                        // Remove padding
                        data.sigBytes -= nPaddingBytes;
                    }
                };


                return CryptoJS.pad.Iso10126;

            }));
        }, {"./cipher-core": 68, "./core": 69}],
        85: [function (require, module, exports) {
            ;(function (root, factory, undef) {
                if (typeof exports === "object") {
                    // CommonJS
                    module.exports = exports = factory(require("./core"), require("./cipher-core"));
                }
                else if (typeof define === "function" && define.amd) {
                    // AMD
                    define(["./core", "./cipher-core"], factory);
                }
                else {
                    // Global (browser)
                    factory(root.CryptoJS);
                }
            }(this, function (CryptoJS) {

                /**
                 * ISO/IEC 9797-1 Padding Method 2.
                 */
                CryptoJS.pad.Iso97971 = {
                    pad: function (data, blockSize) {
                        // Add 0x80 byte
                        data.concat(CryptoJS.lib.WordArray.create([0x80000000], 1));

                        // Zero pad the rest
                        CryptoJS.pad.ZeroPadding.pad(data, blockSize);
                    },

                    unpad: function (data) {
                        // Remove zero padding
                        CryptoJS.pad.ZeroPadding.unpad(data);

                        // Remove one more byte -- the 0x80 byte
                        data.sigBytes--;
                    }
                };


                return CryptoJS.pad.Iso97971;

            }));
        }, {"./cipher-core": 68, "./core": 69}],
        86: [function (require, module, exports) {
            ;(function (root, factory, undef) {
                if (typeof exports === "object") {
                    // CommonJS
                    module.exports = exports = factory(require("./core"), require("./cipher-core"));
                }
                else if (typeof define === "function" && define.amd) {
                    // AMD
                    define(["./core", "./cipher-core"], factory);
                }
                else {
                    // Global (browser)
                    factory(root.CryptoJS);
                }
            }(this, function (CryptoJS) {

                /**
                 * A noop padding strategy.
                 */
                CryptoJS.pad.NoPadding = {
                    pad: function () {
                    },

                    unpad: function () {
                    }
                };


                return CryptoJS.pad.NoPadding;

            }));
        }, {"./cipher-core": 68, "./core": 69}],
        87: [function (require, module, exports) {
            ;(function (root, factory, undef) {
                if (typeof exports === "object") {
                    // CommonJS
                    module.exports = exports = factory(require("./core"), require("./cipher-core"));
                }
                else if (typeof define === "function" && define.amd) {
                    // AMD
                    define(["./core", "./cipher-core"], factory);
                }
                else {
                    // Global (browser)
                    factory(root.CryptoJS);
                }
            }(this, function (CryptoJS) {

                /**
                 * Zero padding strategy.
                 */
                CryptoJS.pad.ZeroPadding = {
                    pad: function (data, blockSize) {
                        // Shortcut
                        var blockSizeBytes = blockSize * 4;

                        // Pad
                        data.clamp();
                        data.sigBytes += blockSizeBytes - ((data.sigBytes % blockSizeBytes) || blockSizeBytes);
                    },

                    unpad: function (data) {
                        // Shortcut
                        var dataWords = data.words;

                        // Unpad
                        var i = data.sigBytes - 1;
                        while (!((dataWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff)) {
                            i--;
                        }
                        data.sigBytes = i + 1;
                    }
                };


                return CryptoJS.pad.ZeroPadding;

            }));
        }, {"./cipher-core": 68, "./core": 69}],
        88: [function (require, module, exports) {
            ;(function (root, factory, undef) {
                if (typeof exports === "object") {
                    // CommonJS
                    module.exports = exports = factory(require("./core"), require("./sha1"), require("./hmac"));
                }
                else if (typeof define === "function" && define.amd) {
                    // AMD
                    define(["./core", "./sha1", "./hmac"], factory);
                }
                else {
                    // Global (browser)
                    factory(root.CryptoJS);
                }
            }(this, function (CryptoJS) {

                (function () {
                    // Shortcuts
                    var C = CryptoJS;
                    var C_lib = C.lib;
                    var Base = C_lib.Base;
                    var WordArray = C_lib.WordArray;
                    var C_algo = C.algo;
                    var SHA1 = C_algo.SHA1;
                    var HMAC = C_algo.HMAC;

                    /**
                     * Password-Based Key Derivation Function 2 algorithm.
                     */
                    var PBKDF2 = C_algo.PBKDF2 = Base.extend({
                        /**
                         * Configuration options.
                         *
                         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
                         * @property {Hasher} hasher The hasher to use. Default: SHA1
                         * @property {number} iterations The number of iterations to perform. Default: 1
                         */
                        cfg: Base.extend({
                            keySize: 128 / 32,
                            hasher: SHA1,
                            iterations: 1
                        }),

                        /**
                         * Initializes a newly created key derivation function.
                         *
                         * @param {Object} cfg (Optional) The configuration options to use for the derivation.
                         *
                         * @example
                         *
                         *     var kdf = CryptoJS.algo.PBKDF2.create();
                         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });
                         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });
                         */
                        init: function (cfg) {
                            this.cfg = this.cfg.extend(cfg);
                        },

                        /**
                         * Computes the Password-Based Key Derivation Function 2.
                         *
                         * @param {WordArray|string} password The password.
                         * @param {WordArray|string} salt A salt.
                         *
                         * @return {WordArray} The derived key.
                         *
                         * @example
                         *
                         *     var key = kdf.compute(password, salt);
                         */
                        compute: function (password, salt) {
                            // Shortcut
                            var cfg = this.cfg;

                            // Init HMAC
                            var hmac = HMAC.create(cfg.hasher, password);

                            // Initial values
                            var derivedKey = WordArray.create();
                            var blockIndex = WordArray.create([0x00000001]);

                            // Shortcuts
                            var derivedKeyWords = derivedKey.words;
                            var blockIndexWords = blockIndex.words;
                            var keySize = cfg.keySize;
                            var iterations = cfg.iterations;

                            // Generate key
                            while (derivedKeyWords.length < keySize) {
                                var block = hmac.update(salt).finalize(blockIndex);
                                hmac.reset();

                                // Shortcuts
                                var blockWords = block.words;
                                var blockWordsLength = blockWords.length;

                                // Iterations
                                var intermediate = block;
                                for (var i = 1; i < iterations; i++) {
                                    intermediate = hmac.finalize(intermediate);
                                    hmac.reset();

                                    // Shortcut
                                    var intermediateWords = intermediate.words;

                                    // XOR intermediate with block
                                    for (var j = 0; j < blockWordsLength; j++) {
                                        blockWords[j] ^= intermediateWords[j];
                                    }
                                }

                                derivedKey.concat(block);
                                blockIndexWords[0]++;
                            }
                            derivedKey.sigBytes = keySize * 4;

                            return derivedKey;
                        }
                    });

                    /**
                     * Computes the Password-Based Key Derivation Function 2.
                     *
                     * @param {WordArray|string} password The password.
                     * @param {WordArray|string} salt A salt.
                     * @param {Object} cfg (Optional) The configuration options to use for this computation.
                     *
                     * @return {WordArray} The derived key.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var key = CryptoJS.PBKDF2(password, salt);
                     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });
                     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });
                     */
                    C.PBKDF2 = function (password, salt, cfg) {
                        return PBKDF2.create(cfg).compute(password, salt);
                    };
                }());


                return CryptoJS.PBKDF2;

            }));
        }, {"./core": 69, "./hmac": 74, "./sha1": 93}],
        89: [function (require, module, exports) {
            ;(function (root, factory, undef) {
                if (typeof exports === "object") {
                    // CommonJS
                    module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
                }
                else if (typeof define === "function" && define.amd) {
                    // AMD
                    define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
                }
                else {
                    // Global (browser)
                    factory(root.CryptoJS);
                }
            }(this, function (CryptoJS) {

                (function () {
                    // Shortcuts
                    var C = CryptoJS;
                    var C_lib = C.lib;
                    var StreamCipher = C_lib.StreamCipher;
                    var C_algo = C.algo;

                    // Reusable objects
                    var S = [];
                    var C_ = [];
                    var G = [];

                    /**
                     * Rabbit stream cipher algorithm.
                     *
                     * This is a legacy version that neglected to convert the key to little-endian.
                     * This error doesn't affect the cipher's security,
                     * but it does affect its compatibility with other implementations.
                     */
                    var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({
                        _doReset: function () {
                            // Shortcuts
                            var K = this._key.words;
                            var iv = this.cfg.iv;

                            // Generate initial state values
                            var X = this._X = [
                                K[0], (K[3] << 16) | (K[2] >>> 16),
                                K[1], (K[0] << 16) | (K[3] >>> 16),
                                K[2], (K[1] << 16) | (K[0] >>> 16),
                                K[3], (K[2] << 16) | (K[1] >>> 16)
                            ];

                            // Generate initial counter values
                            var C = this._C = [
                                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),
                                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),
                                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),
                                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)
                            ];

                            // Carry bit
                            this._b = 0;

                            // Iterate the system four times
                            for (var i = 0; i < 4; i++) {
                                nextState.call(this);
                            }

                            // Modify the counters
                            for (var i = 0; i < 8; i++) {
                                C[i] ^= X[(i + 4) & 7];
                            }

                            // IV setup
                            if (iv) {
                                // Shortcuts
                                var IV = iv.words;
                                var IV_0 = IV[0];
                                var IV_1 = IV[1];

                                // Generate four subvectors
                                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);
                                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);
                                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);
                                var i3 = (i2 << 16) | (i0 & 0x0000ffff);

                                // Modify counter values
                                C[0] ^= i0;
                                C[1] ^= i1;
                                C[2] ^= i2;
                                C[3] ^= i3;
                                C[4] ^= i0;
                                C[5] ^= i1;
                                C[6] ^= i2;
                                C[7] ^= i3;

                                // Iterate the system four times
                                for (var i = 0; i < 4; i++) {
                                    nextState.call(this);
                                }
                            }
                        },

                        _doProcessBlock: function (M, offset) {
                            // Shortcut
                            var X = this._X;

                            // Iterate the system
                            nextState.call(this);

                            // Generate four keystream words
                            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);
                            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);
                            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);
                            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);

                            for (var i = 0; i < 4; i++) {
                                // Swap endian
                                S[i] = (((S[i] << 8) | (S[i] >>> 24)) & 0x00ff00ff) |
                                    (((S[i] << 24) | (S[i] >>> 8)) & 0xff00ff00);

                                // Encrypt
                                M[offset + i] ^= S[i];
                            }
                        },

                        blockSize: 128 / 32,

                        ivSize: 64 / 32
                    });

                    function nextState() {
                        // Shortcuts
                        var X = this._X;
                        var C = this._C;

                        // Save old counter values
                        for (var i = 0; i < 8; i++) {
                            C_[i] = C[i];
                        }

                        // Calculate new counter values
                        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;
                        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;
                        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;
                        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;
                        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;
                        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;
                        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;
                        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;
                        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;

                        // Calculate the g-values
                        for (var i = 0; i < 8; i++) {
                            var gx = X[i] + C[i];

                            // Construct high and low argument for squaring
                            var ga = gx & 0xffff;
                            var gb = gx >>> 16;

                            // Calculate high and low result of squaring
                            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;
                            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);

                            // High XOR low
                            G[i] = gh ^ gl;
                        }

                        // Calculate new state values
                        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;
                        X[1] = (G[1] + ((G[0] << 8) | (G[0] >>> 24)) + G[7]) | 0;
                        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;
                        X[3] = (G[3] + ((G[2] << 8) | (G[2] >>> 24)) + G[1]) | 0;
                        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;
                        X[5] = (G[5] + ((G[4] << 8) | (G[4] >>> 24)) + G[3]) | 0;
                        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;
                        X[7] = (G[7] + ((G[6] << 8) | (G[6] >>> 24)) + G[5]) | 0;
                    }

                    /**
                     * Shortcut functions to the cipher's object interface.
                     *
                     * @example
                     *
                     *     var ciphertext = CryptoJS.RabbitLegacy.encrypt(message, key, cfg);
                     *     var plaintext  = CryptoJS.RabbitLegacy.decrypt(ciphertext, key, cfg);
                     */
                    C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);
                }());


                return CryptoJS.RabbitLegacy;

            }));
        }, {"./cipher-core": 68, "./core": 69, "./enc-base64": 70, "./evpkdf": 72, "./md5": 77}],
        90: [function (require, module, exports) {
            ;(function (root, factory, undef) {
                if (typeof exports === "object") {
                    // CommonJS
                    module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
                }
                else if (typeof define === "function" && define.amd) {
                    // AMD
                    define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
                }
                else {
                    // Global (browser)
                    factory(root.CryptoJS);
                }
            }(this, function (CryptoJS) {

                (function () {
                    // Shortcuts
                    var C = CryptoJS;
                    var C_lib = C.lib;
                    var StreamCipher = C_lib.StreamCipher;
                    var C_algo = C.algo;

                    // Reusable objects
                    var S = [];
                    var C_ = [];
                    var G = [];

                    /**
                     * Rabbit stream cipher algorithm
                     */
                    var Rabbit = C_algo.Rabbit = StreamCipher.extend({
                        _doReset: function () {
                            // Shortcuts
                            var K = this._key.words;
                            var iv = this.cfg.iv;

                            // Swap endian
                            for (var i = 0; i < 4; i++) {
                                K[i] = (((K[i] << 8) | (K[i] >>> 24)) & 0x00ff00ff) |
                                    (((K[i] << 24) | (K[i] >>> 8)) & 0xff00ff00);
                            }

                            // Generate initial state values
                            var X = this._X = [
                                K[0], (K[3] << 16) | (K[2] >>> 16),
                                K[1], (K[0] << 16) | (K[3] >>> 16),
                                K[2], (K[1] << 16) | (K[0] >>> 16),
                                K[3], (K[2] << 16) | (K[1] >>> 16)
                            ];

                            // Generate initial counter values
                            var C = this._C = [
                                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),
                                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),
                                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),
                                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)
                            ];

                            // Carry bit
                            this._b = 0;

                            // Iterate the system four times
                            for (var i = 0; i < 4; i++) {
                                nextState.call(this);
                            }

                            // Modify the counters
                            for (var i = 0; i < 8; i++) {
                                C[i] ^= X[(i + 4) & 7];
                            }

                            // IV setup
                            if (iv) {
                                // Shortcuts
                                var IV = iv.words;
                                var IV_0 = IV[0];
                                var IV_1 = IV[1];

                                // Generate four subvectors
                                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);
                                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);
                                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);
                                var i3 = (i2 << 16) | (i0 & 0x0000ffff);

                                // Modify counter values
                                C[0] ^= i0;
                                C[1] ^= i1;
                                C[2] ^= i2;
                                C[3] ^= i3;
                                C[4] ^= i0;
                                C[5] ^= i1;
                                C[6] ^= i2;
                                C[7] ^= i3;

                                // Iterate the system four times
                                for (var i = 0; i < 4; i++) {
                                    nextState.call(this);
                                }
                            }
                        },

                        _doProcessBlock: function (M, offset) {
                            // Shortcut
                            var X = this._X;

                            // Iterate the system
                            nextState.call(this);

                            // Generate four keystream words
                            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);
                            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);
                            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);
                            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);

                            for (var i = 0; i < 4; i++) {
                                // Swap endian
                                S[i] = (((S[i] << 8) | (S[i] >>> 24)) & 0x00ff00ff) |
                                    (((S[i] << 24) | (S[i] >>> 8)) & 0xff00ff00);

                                // Encrypt
                                M[offset + i] ^= S[i];
                            }
                        },

                        blockSize: 128 / 32,

                        ivSize: 64 / 32
                    });

                    function nextState() {
                        // Shortcuts
                        var X = this._X;
                        var C = this._C;

                        // Save old counter values
                        for (var i = 0; i < 8; i++) {
                            C_[i] = C[i];
                        }

                        // Calculate new counter values
                        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;
                        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;
                        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;
                        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;
                        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;
                        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;
                        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;
                        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;
                        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;

                        // Calculate the g-values
                        for (var i = 0; i < 8; i++) {
                            var gx = X[i] + C[i];

                            // Construct high and low argument for squaring
                            var ga = gx & 0xffff;
                            var gb = gx >>> 16;

                            // Calculate high and low result of squaring
                            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;
                            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);

                            // High XOR low
                            G[i] = gh ^ gl;
                        }

                        // Calculate new state values
                        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;
                        X[1] = (G[1] + ((G[0] << 8) | (G[0] >>> 24)) + G[7]) | 0;
                        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;
                        X[3] = (G[3] + ((G[2] << 8) | (G[2] >>> 24)) + G[1]) | 0;
                        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;
                        X[5] = (G[5] + ((G[4] << 8) | (G[4] >>> 24)) + G[3]) | 0;
                        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;
                        X[7] = (G[7] + ((G[6] << 8) | (G[6] >>> 24)) + G[5]) | 0;
                    }

                    /**
                     * Shortcut functions to the cipher's object interface.
                     *
                     * @example
                     *
                     *     var ciphertext = CryptoJS.Rabbit.encrypt(message, key, cfg);
                     *     var plaintext  = CryptoJS.Rabbit.decrypt(ciphertext, key, cfg);
                     */
                    C.Rabbit = StreamCipher._createHelper(Rabbit);
                }());


                return CryptoJS.Rabbit;

            }));
        }, {"./cipher-core": 68, "./core": 69, "./enc-base64": 70, "./evpkdf": 72, "./md5": 77}],
        91: [function (require, module, exports) {
            ;(function (root, factory, undef) {
                if (typeof exports === "object") {
                    // CommonJS
                    module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
                }
                else if (typeof define === "function" && define.amd) {
                    // AMD
                    define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
                }
                else {
                    // Global (browser)
                    factory(root.CryptoJS);
                }
            }(this, function (CryptoJS) {

                (function () {
                    // Shortcuts
                    var C = CryptoJS;
                    var C_lib = C.lib;
                    var StreamCipher = C_lib.StreamCipher;
                    var C_algo = C.algo;

                    /**
                     * RC4 stream cipher algorithm.
                     */
                    var RC4 = C_algo.RC4 = StreamCipher.extend({
                        _doReset: function () {
                            // Shortcuts
                            var key = this._key;
                            var keyWords = key.words;
                            var keySigBytes = key.sigBytes;

                            // Init sbox
                            var S = this._S = [];
                            for (var i = 0; i < 256; i++) {
                                S[i] = i;
                            }

                            // Key setup
                            for (var i = 0, j = 0; i < 256; i++) {
                                var keyByteIndex = i % keySigBytes;
                                var keyByte = (keyWords[keyByteIndex >>> 2] >>> (24 - (keyByteIndex % 4) * 8)) & 0xff;

                                j = (j + S[i] + keyByte) % 256;

                                // Swap
                                var t = S[i];
                                S[i] = S[j];
                                S[j] = t;
                            }

                            // Counters
                            this._i = this._j = 0;
                        },

                        _doProcessBlock: function (M, offset) {
                            M[offset] ^= generateKeystreamWord.call(this);
                        },

                        keySize: 256 / 32,

                        ivSize: 0
                    });

                    function generateKeystreamWord() {
                        // Shortcuts
                        var S = this._S;
                        var i = this._i;
                        var j = this._j;

                        // Generate keystream word
                        var keystreamWord = 0;
                        for (var n = 0; n < 4; n++) {
                            i = (i + 1) % 256;
                            j = (j + S[i]) % 256;

                            // Swap
                            var t = S[i];
                            S[i] = S[j];
                            S[j] = t;

                            keystreamWord |= S[(S[i] + S[j]) % 256] << (24 - n * 8);
                        }

                        // Update counters
                        this._i = i;
                        this._j = j;

                        return keystreamWord;
                    }

                    /**
                     * Shortcut functions to the cipher's object interface.
                     *
                     * @example
                     *
                     *     var ciphertext = CryptoJS.RC4.encrypt(message, key, cfg);
                     *     var plaintext  = CryptoJS.RC4.decrypt(ciphertext, key, cfg);
                     */
                    C.RC4 = StreamCipher._createHelper(RC4);

                    /**
                     * Modified RC4 stream cipher algorithm.
                     */
                    var RC4Drop = C_algo.RC4Drop = RC4.extend({
                        /**
                         * Configuration options.
                         *
                         * @property {number} drop The number of keystream words to drop. Default 192
                         */
                        cfg: RC4.cfg.extend({
                            drop: 192
                        }),

                        _doReset: function () {
                            RC4._doReset.call(this);

                            // Drop
                            for (var i = this.cfg.drop; i > 0; i--) {
                                generateKeystreamWord.call(this);
                            }
                        }
                    });

                    /**
                     * Shortcut functions to the cipher's object interface.
                     *
                     * @example
                     *
                     *     var ciphertext = CryptoJS.RC4Drop.encrypt(message, key, cfg);
                     *     var plaintext  = CryptoJS.RC4Drop.decrypt(ciphertext, key, cfg);
                     */
                    C.RC4Drop = StreamCipher._createHelper(RC4Drop);
                }());


                return CryptoJS.RC4;

            }));
        }, {"./cipher-core": 68, "./core": 69, "./enc-base64": 70, "./evpkdf": 72, "./md5": 77}],
        92: [function (require, module, exports) {
            ;(function (root, factory) {
                if (typeof exports === "object") {
                    // CommonJS
                    module.exports = exports = factory(require("./core"));
                }
                else if (typeof define === "function" && define.amd) {
                    // AMD
                    define(["./core"], factory);
                }
                else {
                    // Global (browser)
                    factory(root.CryptoJS);
                }
            }(this, function (CryptoJS) {

                /** @preserve
                 (c) 2012 by Cédric Mesnil. All rights reserved.

                 Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

                 - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
                 - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

                 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                 */

                (function (Math) {
                    // Shortcuts
                    var C = CryptoJS;
                    var C_lib = C.lib;
                    var WordArray = C_lib.WordArray;
                    var Hasher = C_lib.Hasher;
                    var C_algo = C.algo;

                    // Constants table
                    var _zl = WordArray.create([
                        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                        7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
                        3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
                        1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
                        4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13]);
                    var _zr = WordArray.create([
                        5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
                        6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
                        15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
                        8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
                        12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11]);
                    var _sl = WordArray.create([
                        11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
                        7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
                        11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
                        11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
                        9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6]);
                    var _sr = WordArray.create([
                        8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
                        9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
                        9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
                        15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
                        8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11]);

                    var _hl = WordArray.create([0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]);
                    var _hr = WordArray.create([0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]);

                    /**
                     * RIPEMD160 hash algorithm.
                     */
                    var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({
                        _doReset: function () {
                            this._hash = WordArray.create([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]);
                        },

                        _doProcessBlock: function (M, offset) {

                            // Swap endian
                            for (var i = 0; i < 16; i++) {
                                // Shortcuts
                                var offset_i = offset + i;
                                var M_offset_i = M[offset_i];

                                // Swap
                                M[offset_i] = (
                                    (((M_offset_i << 8) | (M_offset_i >>> 24)) & 0x00ff00ff) |
                                    (((M_offset_i << 24) | (M_offset_i >>> 8)) & 0xff00ff00)
                                );
                            }
                            // Shortcut
                            var H = this._hash.words;
                            var hl = _hl.words;
                            var hr = _hr.words;
                            var zl = _zl.words;
                            var zr = _zr.words;
                            var sl = _sl.words;
                            var sr = _sr.words;

                            // Working variables
                            var al, bl, cl, dl, el;
                            var ar, br, cr, dr, er;

                            ar = al = H[0];
                            br = bl = H[1];
                            cr = cl = H[2];
                            dr = dl = H[3];
                            er = el = H[4];
                            // Computation
                            var t;
                            for (var i = 0; i < 80; i += 1) {
                                t = (al + M[offset + zl[i]]) | 0;
                                if (i < 16) {
                                    t += f1(bl, cl, dl) + hl[0];
                                } else if (i < 32) {
                                    t += f2(bl, cl, dl) + hl[1];
                                } else if (i < 48) {
                                    t += f3(bl, cl, dl) + hl[2];
                                } else if (i < 64) {
                                    t += f4(bl, cl, dl) + hl[3];
                                } else {// if (i<80) {
                                    t += f5(bl, cl, dl) + hl[4];
                                }
                                t = t | 0;
                                t = rotl(t, sl[i]);
                                t = (t + el) | 0;
                                al = el;
                                el = dl;
                                dl = rotl(cl, 10);
                                cl = bl;
                                bl = t;

                                t = (ar + M[offset + zr[i]]) | 0;
                                if (i < 16) {
                                    t += f5(br, cr, dr) + hr[0];
                                } else if (i < 32) {
                                    t += f4(br, cr, dr) + hr[1];
                                } else if (i < 48) {
                                    t += f3(br, cr, dr) + hr[2];
                                } else if (i < 64) {
                                    t += f2(br, cr, dr) + hr[3];
                                } else {// if (i<80) {
                                    t += f1(br, cr, dr) + hr[4];
                                }
                                t = t | 0;
                                t = rotl(t, sr[i]);
                                t = (t + er) | 0;
                                ar = er;
                                er = dr;
                                dr = rotl(cr, 10);
                                cr = br;
                                br = t;
                            }
                            // Intermediate hash value
                            t = (H[1] + cl + dr) | 0;
                            H[1] = (H[2] + dl + er) | 0;
                            H[2] = (H[3] + el + ar) | 0;
                            H[3] = (H[4] + al + br) | 0;
                            H[4] = (H[0] + bl + cr) | 0;
                            H[0] = t;
                        },

                        _doFinalize: function () {
                            // Shortcuts
                            var data = this._data;
                            var dataWords = data.words;

                            var nBitsTotal = this._nDataBytes * 8;
                            var nBitsLeft = data.sigBytes * 8;

                            // Add padding
                            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
                            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
                                (((nBitsTotal << 8) | (nBitsTotal >>> 24)) & 0x00ff00ff) |
                                (((nBitsTotal << 24) | (nBitsTotal >>> 8)) & 0xff00ff00)
                            );
                            data.sigBytes = (dataWords.length + 1) * 4;

                            // Hash final blocks
                            this._process();

                            // Shortcuts
                            var hash = this._hash;
                            var H = hash.words;

                            // Swap endian
                            for (var i = 0; i < 5; i++) {
                                // Shortcut
                                var H_i = H[i];

                                // Swap
                                H[i] = (((H_i << 8) | (H_i >>> 24)) & 0x00ff00ff) |
                                    (((H_i << 24) | (H_i >>> 8)) & 0xff00ff00);
                            }

                            // Return final computed hash
                            return hash;
                        },

                        clone: function () {
                            var clone = Hasher.clone.call(this);
                            clone._hash = this._hash.clone();

                            return clone;
                        }
                    });


                    function f1(x, y, z) {
                        return ((x) ^ (y) ^ (z));

                    }

                    function f2(x, y, z) {
                        return (((x) & (y)) | ((~x) & (z)));
                    }

                    function f3(x, y, z) {
                        return (((x) | (~(y))) ^ (z));
                    }

                    function f4(x, y, z) {
                        return (((x) & (z)) | ((y) & (~(z))));
                    }

                    function f5(x, y, z) {
                        return ((x) ^ ((y) | (~(z))));

                    }

                    function rotl(x, n) {
                        return (x << n) | (x >>> (32 - n));
                    }


                    /**
                     * Shortcut function to the hasher's object interface.
                     *
                     * @param {WordArray|string} message The message to hash.
                     *
                     * @return {WordArray} The hash.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var hash = CryptoJS.RIPEMD160('message');
                     *     var hash = CryptoJS.RIPEMD160(wordArray);
                     */
                    C.RIPEMD160 = Hasher._createHelper(RIPEMD160);

                    /**
                     * Shortcut function to the HMAC's object interface.
                     *
                     * @param {WordArray|string} message The message to hash.
                     * @param {WordArray|string} key The secret key.
                     *
                     * @return {WordArray} The HMAC.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var hmac = CryptoJS.HmacRIPEMD160(message, key);
                     */
                    C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);
                }(Math));


                return CryptoJS.RIPEMD160;

            }));
        }, {"./core": 69}],
        93: [function (require, module, exports) {
            ;(function (root, factory) {
                if (typeof exports === "object") {
                    // CommonJS
                    module.exports = exports = factory(require("./core"));
                }
                else if (typeof define === "function" && define.amd) {
                    // AMD
                    define(["./core"], factory);
                }
                else {
                    // Global (browser)
                    factory(root.CryptoJS);
                }
            }(this, function (CryptoJS) {

                (function () {
                    // Shortcuts
                    var C = CryptoJS;
                    var C_lib = C.lib;
                    var WordArray = C_lib.WordArray;
                    var Hasher = C_lib.Hasher;
                    var C_algo = C.algo;

                    // Reusable object
                    var W = [];

                    /**
                     * SHA-1 hash algorithm.
                     */
                    var SHA1 = C_algo.SHA1 = Hasher.extend({
                        _doReset: function () {
                            this._hash = new WordArray.init([
                                0x67452301, 0xefcdab89,
                                0x98badcfe, 0x10325476,
                                0xc3d2e1f0
                            ]);
                        },

                        _doProcessBlock: function (M, offset) {
                            // Shortcut
                            var H = this._hash.words;

                            // Working variables
                            var a = H[0];
                            var b = H[1];
                            var c = H[2];
                            var d = H[3];
                            var e = H[4];

                            // Computation
                            for (var i = 0; i < 80; i++) {
                                if (i < 16) {
                                    W[i] = M[offset + i] | 0;
                                } else {
                                    var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
                                    W[i] = (n << 1) | (n >>> 31);
                                }

                                var t = ((a << 5) | (a >>> 27)) + e + W[i];
                                if (i < 20) {
                                    t += ((b & c) | (~b & d)) + 0x5a827999;
                                } else if (i < 40) {
                                    t += (b ^ c ^ d) + 0x6ed9eba1;
                                } else if (i < 60) {
                                    t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;
                                } else /* if (i < 80) */ {
                                    t += (b ^ c ^ d) - 0x359d3e2a;
                                }

                                e = d;
                                d = c;
                                c = (b << 30) | (b >>> 2);
                                b = a;
                                a = t;
                            }

                            // Intermediate hash value
                            H[0] = (H[0] + a) | 0;
                            H[1] = (H[1] + b) | 0;
                            H[2] = (H[2] + c) | 0;
                            H[3] = (H[3] + d) | 0;
                            H[4] = (H[4] + e) | 0;
                        },

                        _doFinalize: function () {
                            // Shortcuts
                            var data = this._data;
                            var dataWords = data.words;

                            var nBitsTotal = this._nDataBytes * 8;
                            var nBitsLeft = data.sigBytes * 8;

                            // Add padding
                            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
                            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
                            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;
                            data.sigBytes = dataWords.length * 4;

                            // Hash final blocks
                            this._process();

                            // Return final computed hash
                            return this._hash;
                        },

                        clone: function () {
                            var clone = Hasher.clone.call(this);
                            clone._hash = this._hash.clone();

                            return clone;
                        }
                    });

                    /**
                     * Shortcut function to the hasher's object interface.
                     *
                     * @param {WordArray|string} message The message to hash.
                     *
                     * @return {WordArray} The hash.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var hash = CryptoJS.SHA1('message');
                     *     var hash = CryptoJS.SHA1(wordArray);
                     */
                    C.SHA1 = Hasher._createHelper(SHA1);

                    /**
                     * Shortcut function to the HMAC's object interface.
                     *
                     * @param {WordArray|string} message The message to hash.
                     * @param {WordArray|string} key The secret key.
                     *
                     * @return {WordArray} The HMAC.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var hmac = CryptoJS.HmacSHA1(message, key);
                     */
                    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);
                }());


                return CryptoJS.SHA1;

            }));
        }, {"./core": 69}],
        94: [function (require, module, exports) {
            ;(function (root, factory, undef) {
                if (typeof exports === "object") {
                    // CommonJS
                    module.exports = exports = factory(require("./core"), require("./sha256"));
                }
                else if (typeof define === "function" && define.amd) {
                    // AMD
                    define(["./core", "./sha256"], factory);
                }
                else {
                    // Global (browser)
                    factory(root.CryptoJS);
                }
            }(this, function (CryptoJS) {

                (function () {
                    // Shortcuts
                    var C = CryptoJS;
                    var C_lib = C.lib;
                    var WordArray = C_lib.WordArray;
                    var C_algo = C.algo;
                    var SHA256 = C_algo.SHA256;

                    /**
                     * SHA-224 hash algorithm.
                     */
                    var SHA224 = C_algo.SHA224 = SHA256.extend({
                        _doReset: function () {
                            this._hash = new WordArray.init([
                                0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
                                0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4
                            ]);
                        },

                        _doFinalize: function () {
                            var hash = SHA256._doFinalize.call(this);

                            hash.sigBytes -= 4;

                            return hash;
                        }
                    });

                    /**
                     * Shortcut function to the hasher's object interface.
                     *
                     * @param {WordArray|string} message The message to hash.
                     *
                     * @return {WordArray} The hash.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var hash = CryptoJS.SHA224('message');
                     *     var hash = CryptoJS.SHA224(wordArray);
                     */
                    C.SHA224 = SHA256._createHelper(SHA224);

                    /**
                     * Shortcut function to the HMAC's object interface.
                     *
                     * @param {WordArray|string} message The message to hash.
                     * @param {WordArray|string} key The secret key.
                     *
                     * @return {WordArray} The HMAC.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var hmac = CryptoJS.HmacSHA224(message, key);
                     */
                    C.HmacSHA224 = SHA256._createHmacHelper(SHA224);
                }());


                return CryptoJS.SHA224;

            }));
        }, {"./core": 69, "./sha256": 95}],
        95: [function (require, module, exports) {
            ;(function (root, factory) {
                if (typeof exports === "object") {
                    // CommonJS
                    module.exports = exports = factory(require("./core"));
                }
                else if (typeof define === "function" && define.amd) {
                    // AMD
                    define(["./core"], factory);
                }
                else {
                    // Global (browser)
                    factory(root.CryptoJS);
                }
            }(this, function (CryptoJS) {

                (function (Math) {
                    // Shortcuts
                    var C = CryptoJS;
                    var C_lib = C.lib;
                    var WordArray = C_lib.WordArray;
                    var Hasher = C_lib.Hasher;
                    var C_algo = C.algo;

                    // Initialization and round constants tables
                    var H = [];
                    var K = [];

                    // Compute constants
                    (function () {
                        function isPrime(n) {
                            var sqrtN = Math.sqrt(n);
                            for (var factor = 2; factor <= sqrtN; factor++) {
                                if (!(n % factor)) {
                                    return false;
                                }
                            }

                            return true;
                        }

                        function getFractionalBits(n) {
                            return ((n - (n | 0)) * 0x100000000) | 0;
                        }

                        var n = 2;
                        var nPrime = 0;
                        while (nPrime < 64) {
                            if (isPrime(n)) {
                                if (nPrime < 8) {
                                    H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));
                                }
                                K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));

                                nPrime++;
                            }

                            n++;
                        }
                    }());

                    // Reusable object
                    var W = [];

                    /**
                     * SHA-256 hash algorithm.
                     */
                    var SHA256 = C_algo.SHA256 = Hasher.extend({
                        _doReset: function () {
                            this._hash = new WordArray.init(H.slice(0));
                        },

                        _doProcessBlock: function (M, offset) {
                            // Shortcut
                            var H = this._hash.words;

                            // Working variables
                            var a = H[0];
                            var b = H[1];
                            var c = H[2];
                            var d = H[3];
                            var e = H[4];
                            var f = H[5];
                            var g = H[6];
                            var h = H[7];

                            // Computation
                            for (var i = 0; i < 64; i++) {
                                if (i < 16) {
                                    W[i] = M[offset + i] | 0;
                                } else {
                                    var gamma0x = W[i - 15];
                                    var gamma0 = ((gamma0x << 25) | (gamma0x >>> 7)) ^
                                        ((gamma0x << 14) | (gamma0x >>> 18)) ^
                                        (gamma0x >>> 3);

                                    var gamma1x = W[i - 2];
                                    var gamma1 = ((gamma1x << 15) | (gamma1x >>> 17)) ^
                                        ((gamma1x << 13) | (gamma1x >>> 19)) ^
                                        (gamma1x >>> 10);

                                    W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
                                }

                                var ch = (e & f) ^ (~e & g);
                                var maj = (a & b) ^ (a & c) ^ (b & c);

                                var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));
                                var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7) | (e >>> 25));

                                var t1 = h + sigma1 + ch + K[i] + W[i];
                                var t2 = sigma0 + maj;

                                h = g;
                                g = f;
                                f = e;
                                e = (d + t1) | 0;
                                d = c;
                                c = b;
                                b = a;
                                a = (t1 + t2) | 0;
                            }

                            // Intermediate hash value
                            H[0] = (H[0] + a) | 0;
                            H[1] = (H[1] + b) | 0;
                            H[2] = (H[2] + c) | 0;
                            H[3] = (H[3] + d) | 0;
                            H[4] = (H[4] + e) | 0;
                            H[5] = (H[5] + f) | 0;
                            H[6] = (H[6] + g) | 0;
                            H[7] = (H[7] + h) | 0;
                        },

                        _doFinalize: function () {
                            // Shortcuts
                            var data = this._data;
                            var dataWords = data.words;

                            var nBitsTotal = this._nDataBytes * 8;
                            var nBitsLeft = data.sigBytes * 8;

                            // Add padding
                            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
                            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
                            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;
                            data.sigBytes = dataWords.length * 4;

                            // Hash final blocks
                            this._process();

                            // Return final computed hash
                            return this._hash;
                        },

                        clone: function () {
                            var clone = Hasher.clone.call(this);
                            clone._hash = this._hash.clone();

                            return clone;
                        }
                    });

                    /**
                     * Shortcut function to the hasher's object interface.
                     *
                     * @param {WordArray|string} message The message to hash.
                     *
                     * @return {WordArray} The hash.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var hash = CryptoJS.SHA256('message');
                     *     var hash = CryptoJS.SHA256(wordArray);
                     */
                    C.SHA256 = Hasher._createHelper(SHA256);

                    /**
                     * Shortcut function to the HMAC's object interface.
                     *
                     * @param {WordArray|string} message The message to hash.
                     * @param {WordArray|string} key The secret key.
                     *
                     * @return {WordArray} The HMAC.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var hmac = CryptoJS.HmacSHA256(message, key);
                     */
                    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
                }(Math));


                return CryptoJS.SHA256;

            }));
        }, {"./core": 69}],
        96: [function (require, module, exports) {
            ;(function (root, factory, undef) {
                if (typeof exports === "object") {
                    // CommonJS
                    module.exports = exports = factory(require("./core"), require("./x64-core"));
                }
                else if (typeof define === "function" && define.amd) {
                    // AMD
                    define(["./core", "./x64-core"], factory);
                }
                else {
                    // Global (browser)
                    factory(root.CryptoJS);
                }
            }(this, function (CryptoJS) {

                (function (Math) {
                    // Shortcuts
                    var C = CryptoJS;
                    var C_lib = C.lib;
                    var WordArray = C_lib.WordArray;
                    var Hasher = C_lib.Hasher;
                    var C_x64 = C.x64;
                    var X64Word = C_x64.Word;
                    var C_algo = C.algo;

                    // Constants tables
                    var RHO_OFFSETS = [];
                    var PI_INDEXES = [];
                    var ROUND_CONSTANTS = [];

                    // Compute Constants
                    (function () {
                        // Compute rho offset constants
                        var x = 1, y = 0;
                        for (var t = 0; t < 24; t++) {
                            RHO_OFFSETS[x + 5 * y] = ((t + 1) * (t + 2) / 2) % 64;

                            var newX = y % 5;
                            var newY = (2 * x + 3 * y) % 5;
                            x = newX;
                            y = newY;
                        }

                        // Compute pi index constants
                        for (var x = 0; x < 5; x++) {
                            for (var y = 0; y < 5; y++) {
                                PI_INDEXES[x + 5 * y] = y + ((2 * x + 3 * y) % 5) * 5;
                            }
                        }

                        // Compute round constants
                        var LFSR = 0x01;
                        for (var i = 0; i < 24; i++) {
                            var roundConstantMsw = 0;
                            var roundConstantLsw = 0;

                            for (var j = 0; j < 7; j++) {
                                if (LFSR & 0x01) {
                                    var bitPosition = (1 << j) - 1;
                                    if (bitPosition < 32) {
                                        roundConstantLsw ^= 1 << bitPosition;
                                    } else /* if (bitPosition >= 32) */ {
                                        roundConstantMsw ^= 1 << (bitPosition - 32);
                                    }
                                }

                                // Compute next LFSR
                                if (LFSR & 0x80) {
                                    // Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1
                                    LFSR = (LFSR << 1) ^ 0x71;
                                } else {
                                    LFSR <<= 1;
                                }
                            }

                            ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);
                        }
                    }());

                    // Reusable objects for temporary values
                    var T = [];
                    (function () {
                        for (var i = 0; i < 25; i++) {
                            T[i] = X64Word.create();
                        }
                    }());

                    /**
                     * SHA-3 hash algorithm.
                     */
                    var SHA3 = C_algo.SHA3 = Hasher.extend({
                        /**
                         * Configuration options.
                         *
                         * @property {number} outputLength
                         *   The desired number of bits in the output hash.
                         *   Only values permitted are: 224, 256, 384, 512.
                         *   Default: 512
                         */
                        cfg: Hasher.cfg.extend({
                            outputLength: 512
                        }),

                        _doReset: function () {
                            var state = this._state = []
                            for (var i = 0; i < 25; i++) {
                                state[i] = new X64Word.init();
                            }

                            this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
                        },

                        _doProcessBlock: function (M, offset) {
                            // Shortcuts
                            var state = this._state;
                            var nBlockSizeLanes = this.blockSize / 2;

                            // Absorb
                            for (var i = 0; i < nBlockSizeLanes; i++) {
                                // Shortcuts
                                var M2i = M[offset + 2 * i];
                                var M2i1 = M[offset + 2 * i + 1];

                                // Swap endian
                                M2i = (
                                    (((M2i << 8) | (M2i >>> 24)) & 0x00ff00ff) |
                                    (((M2i << 24) | (M2i >>> 8)) & 0xff00ff00)
                                );
                                M2i1 = (
                                    (((M2i1 << 8) | (M2i1 >>> 24)) & 0x00ff00ff) |
                                    (((M2i1 << 24) | (M2i1 >>> 8)) & 0xff00ff00)
                                );

                                // Absorb message into state
                                var lane = state[i];
                                lane.high ^= M2i1;
                                lane.low ^= M2i;
                            }

                            // Rounds
                            for (var round = 0; round < 24; round++) {
                                // Theta
                                for (var x = 0; x < 5; x++) {
                                    // Mix column lanes
                                    var tMsw = 0, tLsw = 0;
                                    for (var y = 0; y < 5; y++) {
                                        var lane = state[x + 5 * y];
                                        tMsw ^= lane.high;
                                        tLsw ^= lane.low;
                                    }

                                    // Temporary values
                                    var Tx = T[x];
                                    Tx.high = tMsw;
                                    Tx.low = tLsw;
                                }
                                for (var x = 0; x < 5; x++) {
                                    // Shortcuts
                                    var Tx4 = T[(x + 4) % 5];
                                    var Tx1 = T[(x + 1) % 5];
                                    var Tx1Msw = Tx1.high;
                                    var Tx1Lsw = Tx1.low;

                                    // Mix surrounding columns
                                    var tMsw = Tx4.high ^ ((Tx1Msw << 1) | (Tx1Lsw >>> 31));
                                    var tLsw = Tx4.low ^ ((Tx1Lsw << 1) | (Tx1Msw >>> 31));
                                    for (var y = 0; y < 5; y++) {
                                        var lane = state[x + 5 * y];
                                        lane.high ^= tMsw;
                                        lane.low ^= tLsw;
                                    }
                                }

                                // Rho Pi
                                for (var laneIndex = 1; laneIndex < 25; laneIndex++) {
                                    // Shortcuts
                                    var lane = state[laneIndex];
                                    var laneMsw = lane.high;
                                    var laneLsw = lane.low;
                                    var rhoOffset = RHO_OFFSETS[laneIndex];

                                    // Rotate lanes
                                    if (rhoOffset < 32) {
                                        var tMsw = (laneMsw << rhoOffset) | (laneLsw >>> (32 - rhoOffset));
                                        var tLsw = (laneLsw << rhoOffset) | (laneMsw >>> (32 - rhoOffset));
                                    } else /* if (rhoOffset >= 32) */ {
                                        var tMsw = (laneLsw << (rhoOffset - 32)) | (laneMsw >>> (64 - rhoOffset));
                                        var tLsw = (laneMsw << (rhoOffset - 32)) | (laneLsw >>> (64 - rhoOffset));
                                    }

                                    // Transpose lanes
                                    var TPiLane = T[PI_INDEXES[laneIndex]];
                                    TPiLane.high = tMsw;
                                    TPiLane.low = tLsw;
                                }

                                // Rho pi at x = y = 0
                                var T0 = T[0];
                                var state0 = state[0];
                                T0.high = state0.high;
                                T0.low = state0.low;

                                // Chi
                                for (var x = 0; x < 5; x++) {
                                    for (var y = 0; y < 5; y++) {
                                        // Shortcuts
                                        var laneIndex = x + 5 * y;
                                        var lane = state[laneIndex];
                                        var TLane = T[laneIndex];
                                        var Tx1Lane = T[((x + 1) % 5) + 5 * y];
                                        var Tx2Lane = T[((x + 2) % 5) + 5 * y];

                                        // Mix rows
                                        lane.high = TLane.high ^ (~Tx1Lane.high & Tx2Lane.high);
                                        lane.low = TLane.low ^ (~Tx1Lane.low & Tx2Lane.low);
                                    }
                                }

                                // Iota
                                var lane = state[0];
                                var roundConstant = ROUND_CONSTANTS[round];
                                lane.high ^= roundConstant.high;
                                lane.low ^= roundConstant.low;
                                ;
                            }
                        },

                        _doFinalize: function () {
                            // Shortcuts
                            var data = this._data;
                            var dataWords = data.words;
                            var nBitsTotal = this._nDataBytes * 8;
                            var nBitsLeft = data.sigBytes * 8;
                            var blockSizeBits = this.blockSize * 32;

                            // Add padding
                            dataWords[nBitsLeft >>> 5] |= 0x1 << (24 - nBitsLeft % 32);
                            dataWords[((Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits) >>> 5) - 1] |= 0x80;
                            data.sigBytes = dataWords.length * 4;

                            // Hash final blocks
                            this._process();

                            // Shortcuts
                            var state = this._state;
                            var outputLengthBytes = this.cfg.outputLength / 8;
                            var outputLengthLanes = outputLengthBytes / 8;

                            // Squeeze
                            var hashWords = [];
                            for (var i = 0; i < outputLengthLanes; i++) {
                                // Shortcuts
                                var lane = state[i];
                                var laneMsw = lane.high;
                                var laneLsw = lane.low;

                                // Swap endian
                                laneMsw = (
                                    (((laneMsw << 8) | (laneMsw >>> 24)) & 0x00ff00ff) |
                                    (((laneMsw << 24) | (laneMsw >>> 8)) & 0xff00ff00)
                                );
                                laneLsw = (
                                    (((laneLsw << 8) | (laneLsw >>> 24)) & 0x00ff00ff) |
                                    (((laneLsw << 24) | (laneLsw >>> 8)) & 0xff00ff00)
                                );

                                // Squeeze state to retrieve hash
                                hashWords.push(laneLsw);
                                hashWords.push(laneMsw);
                            }

                            // Return final computed hash
                            return new WordArray.init(hashWords, outputLengthBytes);
                        },

                        clone: function () {
                            var clone = Hasher.clone.call(this);

                            var state = clone._state = this._state.slice(0);
                            for (var i = 0; i < 25; i++) {
                                state[i] = state[i].clone();
                            }

                            return clone;
                        }
                    });

                    /**
                     * Shortcut function to the hasher's object interface.
                     *
                     * @param {WordArray|string} message The message to hash.
                     *
                     * @return {WordArray} The hash.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var hash = CryptoJS.SHA3('message');
                     *     var hash = CryptoJS.SHA3(wordArray);
                     */
                    C.SHA3 = Hasher._createHelper(SHA3);

                    /**
                     * Shortcut function to the HMAC's object interface.
                     *
                     * @param {WordArray|string} message The message to hash.
                     * @param {WordArray|string} key The secret key.
                     *
                     * @return {WordArray} The HMAC.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var hmac = CryptoJS.HmacSHA3(message, key);
                     */
                    C.HmacSHA3 = Hasher._createHmacHelper(SHA3);
                }(Math));


                return CryptoJS.SHA3;

            }));
        }, {"./core": 69, "./x64-core": 100}],
        97: [function (require, module, exports) {
            ;(function (root, factory, undef) {
                if (typeof exports === "object") {
                    // CommonJS
                    module.exports = exports = factory(require("./core"), require("./x64-core"), require("./sha512"));
                }
                else if (typeof define === "function" && define.amd) {
                    // AMD
                    define(["./core", "./x64-core", "./sha512"], factory);
                }
                else {
                    // Global (browser)
                    factory(root.CryptoJS);
                }
            }(this, function (CryptoJS) {

                (function () {
                    // Shortcuts
                    var C = CryptoJS;
                    var C_x64 = C.x64;
                    var X64Word = C_x64.Word;
                    var X64WordArray = C_x64.WordArray;
                    var C_algo = C.algo;
                    var SHA512 = C_algo.SHA512;

                    /**
                     * SHA-384 hash algorithm.
                     */
                    var SHA384 = C_algo.SHA384 = SHA512.extend({
                        _doReset: function () {
                            this._hash = new X64WordArray.init([
                                new X64Word.init(0xcbbb9d5d, 0xc1059ed8), new X64Word.init(0x629a292a, 0x367cd507),
                                new X64Word.init(0x9159015a, 0x3070dd17), new X64Word.init(0x152fecd8, 0xf70e5939),
                                new X64Word.init(0x67332667, 0xffc00b31), new X64Word.init(0x8eb44a87, 0x68581511),
                                new X64Word.init(0xdb0c2e0d, 0x64f98fa7), new X64Word.init(0x47b5481d, 0xbefa4fa4)
                            ]);
                        },

                        _doFinalize: function () {
                            var hash = SHA512._doFinalize.call(this);

                            hash.sigBytes -= 16;

                            return hash;
                        }
                    });

                    /**
                     * Shortcut function to the hasher's object interface.
                     *
                     * @param {WordArray|string} message The message to hash.
                     *
                     * @return {WordArray} The hash.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var hash = CryptoJS.SHA384('message');
                     *     var hash = CryptoJS.SHA384(wordArray);
                     */
                    C.SHA384 = SHA512._createHelper(SHA384);

                    /**
                     * Shortcut function to the HMAC's object interface.
                     *
                     * @param {WordArray|string} message The message to hash.
                     * @param {WordArray|string} key The secret key.
                     *
                     * @return {WordArray} The HMAC.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var hmac = CryptoJS.HmacSHA384(message, key);
                     */
                    C.HmacSHA384 = SHA512._createHmacHelper(SHA384);
                }());


                return CryptoJS.SHA384;

            }));
        }, {"./core": 69, "./sha512": 98, "./x64-core": 100}],
        98: [function (require, module, exports) {
            ;(function (root, factory, undef) {
                if (typeof exports === "object") {
                    // CommonJS
                    module.exports = exports = factory(require("./core"), require("./x64-core"));
                }
                else if (typeof define === "function" && define.amd) {
                    // AMD
                    define(["./core", "./x64-core"], factory);
                }
                else {
                    // Global (browser)
                    factory(root.CryptoJS);
                }
            }(this, function (CryptoJS) {

                (function () {
                    // Shortcuts
                    var C = CryptoJS;
                    var C_lib = C.lib;
                    var Hasher = C_lib.Hasher;
                    var C_x64 = C.x64;
                    var X64Word = C_x64.Word;
                    var X64WordArray = C_x64.WordArray;
                    var C_algo = C.algo;

                    function X64Word_create() {
                        return X64Word.create.apply(X64Word, arguments);
                    }

                    // Constants
                    var K = [
                        X64Word_create(0x428a2f98, 0xd728ae22), X64Word_create(0x71374491, 0x23ef65cd),
                        X64Word_create(0xb5c0fbcf, 0xec4d3b2f), X64Word_create(0xe9b5dba5, 0x8189dbbc),
                        X64Word_create(0x3956c25b, 0xf348b538), X64Word_create(0x59f111f1, 0xb605d019),
                        X64Word_create(0x923f82a4, 0xaf194f9b), X64Word_create(0xab1c5ed5, 0xda6d8118),
                        X64Word_create(0xd807aa98, 0xa3030242), X64Word_create(0x12835b01, 0x45706fbe),
                        X64Word_create(0x243185be, 0x4ee4b28c), X64Word_create(0x550c7dc3, 0xd5ffb4e2),
                        X64Word_create(0x72be5d74, 0xf27b896f), X64Word_create(0x80deb1fe, 0x3b1696b1),
                        X64Word_create(0x9bdc06a7, 0x25c71235), X64Word_create(0xc19bf174, 0xcf692694),
                        X64Word_create(0xe49b69c1, 0x9ef14ad2), X64Word_create(0xefbe4786, 0x384f25e3),
                        X64Word_create(0x0fc19dc6, 0x8b8cd5b5), X64Word_create(0x240ca1cc, 0x77ac9c65),
                        X64Word_create(0x2de92c6f, 0x592b0275), X64Word_create(0x4a7484aa, 0x6ea6e483),
                        X64Word_create(0x5cb0a9dc, 0xbd41fbd4), X64Word_create(0x76f988da, 0x831153b5),
                        X64Word_create(0x983e5152, 0xee66dfab), X64Word_create(0xa831c66d, 0x2db43210),
                        X64Word_create(0xb00327c8, 0x98fb213f), X64Word_create(0xbf597fc7, 0xbeef0ee4),
                        X64Word_create(0xc6e00bf3, 0x3da88fc2), X64Word_create(0xd5a79147, 0x930aa725),
                        X64Word_create(0x06ca6351, 0xe003826f), X64Word_create(0x14292967, 0x0a0e6e70),
                        X64Word_create(0x27b70a85, 0x46d22ffc), X64Word_create(0x2e1b2138, 0x5c26c926),
                        X64Word_create(0x4d2c6dfc, 0x5ac42aed), X64Word_create(0x53380d13, 0x9d95b3df),
                        X64Word_create(0x650a7354, 0x8baf63de), X64Word_create(0x766a0abb, 0x3c77b2a8),
                        X64Word_create(0x81c2c92e, 0x47edaee6), X64Word_create(0x92722c85, 0x1482353b),
                        X64Word_create(0xa2bfe8a1, 0x4cf10364), X64Word_create(0xa81a664b, 0xbc423001),
                        X64Word_create(0xc24b8b70, 0xd0f89791), X64Word_create(0xc76c51a3, 0x0654be30),
                        X64Word_create(0xd192e819, 0xd6ef5218), X64Word_create(0xd6990624, 0x5565a910),
                        X64Word_create(0xf40e3585, 0x5771202a), X64Word_create(0x106aa070, 0x32bbd1b8),
                        X64Word_create(0x19a4c116, 0xb8d2d0c8), X64Word_create(0x1e376c08, 0x5141ab53),
                        X64Word_create(0x2748774c, 0xdf8eeb99), X64Word_create(0x34b0bcb5, 0xe19b48a8),
                        X64Word_create(0x391c0cb3, 0xc5c95a63), X64Word_create(0x4ed8aa4a, 0xe3418acb),
                        X64Word_create(0x5b9cca4f, 0x7763e373), X64Word_create(0x682e6ff3, 0xd6b2b8a3),
                        X64Word_create(0x748f82ee, 0x5defb2fc), X64Word_create(0x78a5636f, 0x43172f60),
                        X64Word_create(0x84c87814, 0xa1f0ab72), X64Word_create(0x8cc70208, 0x1a6439ec),
                        X64Word_create(0x90befffa, 0x23631e28), X64Word_create(0xa4506ceb, 0xde82bde9),
                        X64Word_create(0xbef9a3f7, 0xb2c67915), X64Word_create(0xc67178f2, 0xe372532b),
                        X64Word_create(0xca273ece, 0xea26619c), X64Word_create(0xd186b8c7, 0x21c0c207),
                        X64Word_create(0xeada7dd6, 0xcde0eb1e), X64Word_create(0xf57d4f7f, 0xee6ed178),
                        X64Word_create(0x06f067aa, 0x72176fba), X64Word_create(0x0a637dc5, 0xa2c898a6),
                        X64Word_create(0x113f9804, 0xbef90dae), X64Word_create(0x1b710b35, 0x131c471b),
                        X64Word_create(0x28db77f5, 0x23047d84), X64Word_create(0x32caab7b, 0x40c72493),
                        X64Word_create(0x3c9ebe0a, 0x15c9bebc), X64Word_create(0x431d67c4, 0x9c100d4c),
                        X64Word_create(0x4cc5d4be, 0xcb3e42b6), X64Word_create(0x597f299c, 0xfc657e2a),
                        X64Word_create(0x5fcb6fab, 0x3ad6faec), X64Word_create(0x6c44198c, 0x4a475817)
                    ];

                    // Reusable objects
                    var W = [];
                    (function () {
                        for (var i = 0; i < 80; i++) {
                            W[i] = X64Word_create();
                        }
                    }());

                    /**
                     * SHA-512 hash algorithm.
                     */
                    var SHA512 = C_algo.SHA512 = Hasher.extend({
                        _doReset: function () {
                            this._hash = new X64WordArray.init([
                                new X64Word.init(0x6a09e667, 0xf3bcc908), new X64Word.init(0xbb67ae85, 0x84caa73b),
                                new X64Word.init(0x3c6ef372, 0xfe94f82b), new X64Word.init(0xa54ff53a, 0x5f1d36f1),
                                new X64Word.init(0x510e527f, 0xade682d1), new X64Word.init(0x9b05688c, 0x2b3e6c1f),
                                new X64Word.init(0x1f83d9ab, 0xfb41bd6b), new X64Word.init(0x5be0cd19, 0x137e2179)
                            ]);
                        },

                        _doProcessBlock: function (M, offset) {
                            // Shortcuts
                            var H = this._hash.words;

                            var H0 = H[0];
                            var H1 = H[1];
                            var H2 = H[2];
                            var H3 = H[3];
                            var H4 = H[4];
                            var H5 = H[5];
                            var H6 = H[6];
                            var H7 = H[7];

                            var H0h = H0.high;
                            var H0l = H0.low;
                            var H1h = H1.high;
                            var H1l = H1.low;
                            var H2h = H2.high;
                            var H2l = H2.low;
                            var H3h = H3.high;
                            var H3l = H3.low;
                            var H4h = H4.high;
                            var H4l = H4.low;
                            var H5h = H5.high;
                            var H5l = H5.low;
                            var H6h = H6.high;
                            var H6l = H6.low;
                            var H7h = H7.high;
                            var H7l = H7.low;

                            // Working variables
                            var ah = H0h;
                            var al = H0l;
                            var bh = H1h;
                            var bl = H1l;
                            var ch = H2h;
                            var cl = H2l;
                            var dh = H3h;
                            var dl = H3l;
                            var eh = H4h;
                            var el = H4l;
                            var fh = H5h;
                            var fl = H5l;
                            var gh = H6h;
                            var gl = H6l;
                            var hh = H7h;
                            var hl = H7l;

                            // Rounds
                            for (var i = 0; i < 80; i++) {
                                // Shortcut
                                var Wi = W[i];

                                // Extend message
                                if (i < 16) {
                                    var Wih = Wi.high = M[offset + i * 2] | 0;
                                    var Wil = Wi.low = M[offset + i * 2 + 1] | 0;
                                } else {
                                    // Gamma0
                                    var gamma0x = W[i - 15];
                                    var gamma0xh = gamma0x.high;
                                    var gamma0xl = gamma0x.low;
                                    var gamma0h = ((gamma0xh >>> 1) | (gamma0xl << 31)) ^ ((gamma0xh >>> 8) | (gamma0xl << 24)) ^ (gamma0xh >>> 7);
                                    var gamma0l = ((gamma0xl >>> 1) | (gamma0xh << 31)) ^ ((gamma0xl >>> 8) | (gamma0xh << 24)) ^ ((gamma0xl >>> 7) | (gamma0xh << 25));

                                    // Gamma1
                                    var gamma1x = W[i - 2];
                                    var gamma1xh = gamma1x.high;
                                    var gamma1xl = gamma1x.low;
                                    var gamma1h = ((gamma1xh >>> 19) | (gamma1xl << 13)) ^ ((gamma1xh << 3) | (gamma1xl >>> 29)) ^ (gamma1xh >>> 6);
                                    var gamma1l = ((gamma1xl >>> 19) | (gamma1xh << 13)) ^ ((gamma1xl << 3) | (gamma1xh >>> 29)) ^ ((gamma1xl >>> 6) | (gamma1xh << 26));

                                    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
                                    var Wi7 = W[i - 7];
                                    var Wi7h = Wi7.high;
                                    var Wi7l = Wi7.low;

                                    var Wi16 = W[i - 16];
                                    var Wi16h = Wi16.high;
                                    var Wi16l = Wi16.low;

                                    var Wil = gamma0l + Wi7l;
                                    var Wih = gamma0h + Wi7h + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0);
                                    var Wil = Wil + gamma1l;
                                    var Wih = Wih + gamma1h + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0);
                                    var Wil = Wil + Wi16l;
                                    var Wih = Wih + Wi16h + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0);

                                    Wi.high = Wih;
                                    Wi.low = Wil;
                                }

                                var chh = (eh & fh) ^ (~eh & gh);
                                var chl = (el & fl) ^ (~el & gl);
                                var majh = (ah & bh) ^ (ah & ch) ^ (bh & ch);
                                var majl = (al & bl) ^ (al & cl) ^ (bl & cl);

                                var sigma0h = ((ah >>> 28) | (al << 4)) ^ ((ah << 30) | (al >>> 2)) ^ ((ah << 25) | (al >>> 7));
                                var sigma0l = ((al >>> 28) | (ah << 4)) ^ ((al << 30) | (ah >>> 2)) ^ ((al << 25) | (ah >>> 7));
                                var sigma1h = ((eh >>> 14) | (el << 18)) ^ ((eh >>> 18) | (el << 14)) ^ ((eh << 23) | (el >>> 9));
                                var sigma1l = ((el >>> 14) | (eh << 18)) ^ ((el >>> 18) | (eh << 14)) ^ ((el << 23) | (eh >>> 9));

                                // t1 = h + sigma1 + ch + K[i] + W[i]
                                var Ki = K[i];
                                var Kih = Ki.high;
                                var Kil = Ki.low;

                                var t1l = hl + sigma1l;
                                var t1h = hh + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0);
                                var t1l = t1l + chl;
                                var t1h = t1h + chh + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0);
                                var t1l = t1l + Kil;
                                var t1h = t1h + Kih + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0);
                                var t1l = t1l + Wil;
                                var t1h = t1h + Wih + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0);

                                // t2 = sigma0 + maj
                                var t2l = sigma0l + majl;
                                var t2h = sigma0h + majh + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0);

                                // Update working variables
                                hh = gh;
                                hl = gl;
                                gh = fh;
                                gl = fl;
                                fh = eh;
                                fl = el;
                                el = (dl + t1l) | 0;
                                eh = (dh + t1h + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;
                                dh = ch;
                                dl = cl;
                                ch = bh;
                                cl = bl;
                                bh = ah;
                                bl = al;
                                al = (t1l + t2l) | 0;
                                ah = (t1h + t2h + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0;
                            }

                            // Intermediate hash value
                            H0l = H0.low = (H0l + al);
                            H0.high = (H0h + ah + ((H0l >>> 0) < (al >>> 0) ? 1 : 0));
                            H1l = H1.low = (H1l + bl);
                            H1.high = (H1h + bh + ((H1l >>> 0) < (bl >>> 0) ? 1 : 0));
                            H2l = H2.low = (H2l + cl);
                            H2.high = (H2h + ch + ((H2l >>> 0) < (cl >>> 0) ? 1 : 0));
                            H3l = H3.low = (H3l + dl);
                            H3.high = (H3h + dh + ((H3l >>> 0) < (dl >>> 0) ? 1 : 0));
                            H4l = H4.low = (H4l + el);
                            H4.high = (H4h + eh + ((H4l >>> 0) < (el >>> 0) ? 1 : 0));
                            H5l = H5.low = (H5l + fl);
                            H5.high = (H5h + fh + ((H5l >>> 0) < (fl >>> 0) ? 1 : 0));
                            H6l = H6.low = (H6l + gl);
                            H6.high = (H6h + gh + ((H6l >>> 0) < (gl >>> 0) ? 1 : 0));
                            H7l = H7.low = (H7l + hl);
                            H7.high = (H7h + hh + ((H7l >>> 0) < (hl >>> 0) ? 1 : 0));
                        },

                        _doFinalize: function () {
                            // Shortcuts
                            var data = this._data;
                            var dataWords = data.words;

                            var nBitsTotal = this._nDataBytes * 8;
                            var nBitsLeft = data.sigBytes * 8;

                            // Add padding
                            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
                            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 30] = Math.floor(nBitsTotal / 0x100000000);
                            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 31] = nBitsTotal;
                            data.sigBytes = dataWords.length * 4;

                            // Hash final blocks
                            this._process();

                            // Convert hash to 32-bit word array before returning
                            var hash = this._hash.toX32();

                            // Return final computed hash
                            return hash;
                        },

                        clone: function () {
                            var clone = Hasher.clone.call(this);
                            clone._hash = this._hash.clone();

                            return clone;
                        },

                        blockSize: 1024 / 32
                    });

                    /**
                     * Shortcut function to the hasher's object interface.
                     *
                     * @param {WordArray|string} message The message to hash.
                     *
                     * @return {WordArray} The hash.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var hash = CryptoJS.SHA512('message');
                     *     var hash = CryptoJS.SHA512(wordArray);
                     */
                    C.SHA512 = Hasher._createHelper(SHA512);

                    /**
                     * Shortcut function to the HMAC's object interface.
                     *
                     * @param {WordArray|string} message The message to hash.
                     * @param {WordArray|string} key The secret key.
                     *
                     * @return {WordArray} The HMAC.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var hmac = CryptoJS.HmacSHA512(message, key);
                     */
                    C.HmacSHA512 = Hasher._createHmacHelper(SHA512);
                }());


                return CryptoJS.SHA512;

            }));
        }, {"./core": 69, "./x64-core": 100}],
        99: [function (require, module, exports) {
            ;(function (root, factory, undef) {
                if (typeof exports === "object") {
                    // CommonJS
                    module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
                }
                else if (typeof define === "function" && define.amd) {
                    // AMD
                    define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
                }
                else {
                    // Global (browser)
                    factory(root.CryptoJS);
                }
            }(this, function (CryptoJS) {

                (function () {
                    // Shortcuts
                    var C = CryptoJS;
                    var C_lib = C.lib;
                    var WordArray = C_lib.WordArray;
                    var BlockCipher = C_lib.BlockCipher;
                    var C_algo = C.algo;

                    // Permuted Choice 1 constants
                    var PC1 = [
                        57, 49, 41, 33, 25, 17, 9, 1,
                        58, 50, 42, 34, 26, 18, 10, 2,
                        59, 51, 43, 35, 27, 19, 11, 3,
                        60, 52, 44, 36, 63, 55, 47, 39,
                        31, 23, 15, 7, 62, 54, 46, 38,
                        30, 22, 14, 6, 61, 53, 45, 37,
                        29, 21, 13, 5, 28, 20, 12, 4
                    ];

                    // Permuted Choice 2 constants
                    var PC2 = [
                        14, 17, 11, 24, 1, 5,
                        3, 28, 15, 6, 21, 10,
                        23, 19, 12, 4, 26, 8,
                        16, 7, 27, 20, 13, 2,
                        41, 52, 31, 37, 47, 55,
                        30, 40, 51, 45, 33, 48,
                        44, 49, 39, 56, 34, 53,
                        46, 42, 50, 36, 29, 32
                    ];

                    // Cumulative bit shift constants
                    var BIT_SHIFTS = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];

                    // SBOXes and round permutation constants
                    var SBOX_P = [
                        {
                            0x0: 0x808200,
                            0x10000000: 0x8000,
                            0x20000000: 0x808002,
                            0x30000000: 0x2,
                            0x40000000: 0x200,
                            0x50000000: 0x808202,
                            0x60000000: 0x800202,
                            0x70000000: 0x800000,
                            0x80000000: 0x202,
                            0x90000000: 0x800200,
                            0xa0000000: 0x8200,
                            0xb0000000: 0x808000,
                            0xc0000000: 0x8002,
                            0xd0000000: 0x800002,
                            0xe0000000: 0x0,
                            0xf0000000: 0x8202,
                            0x8000000: 0x0,
                            0x18000000: 0x808202,
                            0x28000000: 0x8202,
                            0x38000000: 0x8000,
                            0x48000000: 0x808200,
                            0x58000000: 0x200,
                            0x68000000: 0x808002,
                            0x78000000: 0x2,
                            0x88000000: 0x800200,
                            0x98000000: 0x8200,
                            0xa8000000: 0x808000,
                            0xb8000000: 0x800202,
                            0xc8000000: 0x800002,
                            0xd8000000: 0x8002,
                            0xe8000000: 0x202,
                            0xf8000000: 0x800000,
                            0x1: 0x8000,
                            0x10000001: 0x2,
                            0x20000001: 0x808200,
                            0x30000001: 0x800000,
                            0x40000001: 0x808002,
                            0x50000001: 0x8200,
                            0x60000001: 0x200,
                            0x70000001: 0x800202,
                            0x80000001: 0x808202,
                            0x90000001: 0x808000,
                            0xa0000001: 0x800002,
                            0xb0000001: 0x8202,
                            0xc0000001: 0x202,
                            0xd0000001: 0x800200,
                            0xe0000001: 0x8002,
                            0xf0000001: 0x0,
                            0x8000001: 0x808202,
                            0x18000001: 0x808000,
                            0x28000001: 0x800000,
                            0x38000001: 0x200,
                            0x48000001: 0x8000,
                            0x58000001: 0x800002,
                            0x68000001: 0x2,
                            0x78000001: 0x8202,
                            0x88000001: 0x8002,
                            0x98000001: 0x800202,
                            0xa8000001: 0x202,
                            0xb8000001: 0x808200,
                            0xc8000001: 0x800200,
                            0xd8000001: 0x0,
                            0xe8000001: 0x8200,
                            0xf8000001: 0x808002
                        },
                        {
                            0x0: 0x40084010,
                            0x1000000: 0x4000,
                            0x2000000: 0x80000,
                            0x3000000: 0x40080010,
                            0x4000000: 0x40000010,
                            0x5000000: 0x40084000,
                            0x6000000: 0x40004000,
                            0x7000000: 0x10,
                            0x8000000: 0x84000,
                            0x9000000: 0x40004010,
                            0xa000000: 0x40000000,
                            0xb000000: 0x84010,
                            0xc000000: 0x80010,
                            0xd000000: 0x0,
                            0xe000000: 0x4010,
                            0xf000000: 0x40080000,
                            0x800000: 0x40004000,
                            0x1800000: 0x84010,
                            0x2800000: 0x10,
                            0x3800000: 0x40004010,
                            0x4800000: 0x40084010,
                            0x5800000: 0x40000000,
                            0x6800000: 0x80000,
                            0x7800000: 0x40080010,
                            0x8800000: 0x80010,
                            0x9800000: 0x0,
                            0xa800000: 0x4000,
                            0xb800000: 0x40080000,
                            0xc800000: 0x40000010,
                            0xd800000: 0x84000,
                            0xe800000: 0x40084000,
                            0xf800000: 0x4010,
                            0x10000000: 0x0,
                            0x11000000: 0x40080010,
                            0x12000000: 0x40004010,
                            0x13000000: 0x40084000,
                            0x14000000: 0x40080000,
                            0x15000000: 0x10,
                            0x16000000: 0x84010,
                            0x17000000: 0x4000,
                            0x18000000: 0x4010,
                            0x19000000: 0x80000,
                            0x1a000000: 0x80010,
                            0x1b000000: 0x40000010,
                            0x1c000000: 0x84000,
                            0x1d000000: 0x40004000,
                            0x1e000000: 0x40000000,
                            0x1f000000: 0x40084010,
                            0x10800000: 0x84010,
                            0x11800000: 0x80000,
                            0x12800000: 0x40080000,
                            0x13800000: 0x4000,
                            0x14800000: 0x40004000,
                            0x15800000: 0x40084010,
                            0x16800000: 0x10,
                            0x17800000: 0x40000000,
                            0x18800000: 0x40084000,
                            0x19800000: 0x40000010,
                            0x1a800000: 0x40004010,
                            0x1b800000: 0x80010,
                            0x1c800000: 0x0,
                            0x1d800000: 0x4010,
                            0x1e800000: 0x40080010,
                            0x1f800000: 0x84000
                        },
                        {
                            0x0: 0x104,
                            0x100000: 0x0,
                            0x200000: 0x4000100,
                            0x300000: 0x10104,
                            0x400000: 0x10004,
                            0x500000: 0x4000004,
                            0x600000: 0x4010104,
                            0x700000: 0x4010000,
                            0x800000: 0x4000000,
                            0x900000: 0x4010100,
                            0xa00000: 0x10100,
                            0xb00000: 0x4010004,
                            0xc00000: 0x4000104,
                            0xd00000: 0x10000,
                            0xe00000: 0x4,
                            0xf00000: 0x100,
                            0x80000: 0x4010100,
                            0x180000: 0x4010004,
                            0x280000: 0x0,
                            0x380000: 0x4000100,
                            0x480000: 0x4000004,
                            0x580000: 0x10000,
                            0x680000: 0x10004,
                            0x780000: 0x104,
                            0x880000: 0x4,
                            0x980000: 0x100,
                            0xa80000: 0x4010000,
                            0xb80000: 0x10104,
                            0xc80000: 0x10100,
                            0xd80000: 0x4000104,
                            0xe80000: 0x4010104,
                            0xf80000: 0x4000000,
                            0x1000000: 0x4010100,
                            0x1100000: 0x10004,
                            0x1200000: 0x10000,
                            0x1300000: 0x4000100,
                            0x1400000: 0x100,
                            0x1500000: 0x4010104,
                            0x1600000: 0x4000004,
                            0x1700000: 0x0,
                            0x1800000: 0x4000104,
                            0x1900000: 0x4000000,
                            0x1a00000: 0x4,
                            0x1b00000: 0x10100,
                            0x1c00000: 0x4010000,
                            0x1d00000: 0x104,
                            0x1e00000: 0x10104,
                            0x1f00000: 0x4010004,
                            0x1080000: 0x4000000,
                            0x1180000: 0x104,
                            0x1280000: 0x4010100,
                            0x1380000: 0x0,
                            0x1480000: 0x10004,
                            0x1580000: 0x4000100,
                            0x1680000: 0x100,
                            0x1780000: 0x4010004,
                            0x1880000: 0x10000,
                            0x1980000: 0x4010104,
                            0x1a80000: 0x10104,
                            0x1b80000: 0x4000004,
                            0x1c80000: 0x4000104,
                            0x1d80000: 0x4010000,
                            0x1e80000: 0x4,
                            0x1f80000: 0x10100
                        },
                        {
                            0x0: 0x80401000,
                            0x10000: 0x80001040,
                            0x20000: 0x401040,
                            0x30000: 0x80400000,
                            0x40000: 0x0,
                            0x50000: 0x401000,
                            0x60000: 0x80000040,
                            0x70000: 0x400040,
                            0x80000: 0x80000000,
                            0x90000: 0x400000,
                            0xa0000: 0x40,
                            0xb0000: 0x80001000,
                            0xc0000: 0x80400040,
                            0xd0000: 0x1040,
                            0xe0000: 0x1000,
                            0xf0000: 0x80401040,
                            0x8000: 0x80001040,
                            0x18000: 0x40,
                            0x28000: 0x80400040,
                            0x38000: 0x80001000,
                            0x48000: 0x401000,
                            0x58000: 0x80401040,
                            0x68000: 0x0,
                            0x78000: 0x80400000,
                            0x88000: 0x1000,
                            0x98000: 0x80401000,
                            0xa8000: 0x400000,
                            0xb8000: 0x1040,
                            0xc8000: 0x80000000,
                            0xd8000: 0x400040,
                            0xe8000: 0x401040,
                            0xf8000: 0x80000040,
                            0x100000: 0x400040,
                            0x110000: 0x401000,
                            0x120000: 0x80000040,
                            0x130000: 0x0,
                            0x140000: 0x1040,
                            0x150000: 0x80400040,
                            0x160000: 0x80401000,
                            0x170000: 0x80001040,
                            0x180000: 0x80401040,
                            0x190000: 0x80000000,
                            0x1a0000: 0x80400000,
                            0x1b0000: 0x401040,
                            0x1c0000: 0x80001000,
                            0x1d0000: 0x400000,
                            0x1e0000: 0x40,
                            0x1f0000: 0x1000,
                            0x108000: 0x80400000,
                            0x118000: 0x80401040,
                            0x128000: 0x0,
                            0x138000: 0x401000,
                            0x148000: 0x400040,
                            0x158000: 0x80000000,
                            0x168000: 0x80001040,
                            0x178000: 0x40,
                            0x188000: 0x80000040,
                            0x198000: 0x1000,
                            0x1a8000: 0x80001000,
                            0x1b8000: 0x80400040,
                            0x1c8000: 0x1040,
                            0x1d8000: 0x80401000,
                            0x1e8000: 0x400000,
                            0x1f8000: 0x401040
                        },
                        {
                            0x0: 0x80,
                            0x1000: 0x1040000,
                            0x2000: 0x40000,
                            0x3000: 0x20000000,
                            0x4000: 0x20040080,
                            0x5000: 0x1000080,
                            0x6000: 0x21000080,
                            0x7000: 0x40080,
                            0x8000: 0x1000000,
                            0x9000: 0x20040000,
                            0xa000: 0x20000080,
                            0xb000: 0x21040080,
                            0xc000: 0x21040000,
                            0xd000: 0x0,
                            0xe000: 0x1040080,
                            0xf000: 0x21000000,
                            0x800: 0x1040080,
                            0x1800: 0x21000080,
                            0x2800: 0x80,
                            0x3800: 0x1040000,
                            0x4800: 0x40000,
                            0x5800: 0x20040080,
                            0x6800: 0x21040000,
                            0x7800: 0x20000000,
                            0x8800: 0x20040000,
                            0x9800: 0x0,
                            0xa800: 0x21040080,
                            0xb800: 0x1000080,
                            0xc800: 0x20000080,
                            0xd800: 0x21000000,
                            0xe800: 0x1000000,
                            0xf800: 0x40080,
                            0x10000: 0x40000,
                            0x11000: 0x80,
                            0x12000: 0x20000000,
                            0x13000: 0x21000080,
                            0x14000: 0x1000080,
                            0x15000: 0x21040000,
                            0x16000: 0x20040080,
                            0x17000: 0x1000000,
                            0x18000: 0x21040080,
                            0x19000: 0x21000000,
                            0x1a000: 0x1040000,
                            0x1b000: 0x20040000,
                            0x1c000: 0x40080,
                            0x1d000: 0x20000080,
                            0x1e000: 0x0,
                            0x1f000: 0x1040080,
                            0x10800: 0x21000080,
                            0x11800: 0x1000000,
                            0x12800: 0x1040000,
                            0x13800: 0x20040080,
                            0x14800: 0x20000000,
                            0x15800: 0x1040080,
                            0x16800: 0x80,
                            0x17800: 0x21040000,
                            0x18800: 0x40080,
                            0x19800: 0x21040080,
                            0x1a800: 0x0,
                            0x1b800: 0x21000000,
                            0x1c800: 0x1000080,
                            0x1d800: 0x40000,
                            0x1e800: 0x20040000,
                            0x1f800: 0x20000080
                        },
                        {
                            0x0: 0x10000008,
                            0x100: 0x2000,
                            0x200: 0x10200000,
                            0x300: 0x10202008,
                            0x400: 0x10002000,
                            0x500: 0x200000,
                            0x600: 0x200008,
                            0x700: 0x10000000,
                            0x800: 0x0,
                            0x900: 0x10002008,
                            0xa00: 0x202000,
                            0xb00: 0x8,
                            0xc00: 0x10200008,
                            0xd00: 0x202008,
                            0xe00: 0x2008,
                            0xf00: 0x10202000,
                            0x80: 0x10200000,
                            0x180: 0x10202008,
                            0x280: 0x8,
                            0x380: 0x200000,
                            0x480: 0x202008,
                            0x580: 0x10000008,
                            0x680: 0x10002000,
                            0x780: 0x2008,
                            0x880: 0x200008,
                            0x980: 0x2000,
                            0xa80: 0x10002008,
                            0xb80: 0x10200008,
                            0xc80: 0x0,
                            0xd80: 0x10202000,
                            0xe80: 0x202000,
                            0xf80: 0x10000000,
                            0x1000: 0x10002000,
                            0x1100: 0x10200008,
                            0x1200: 0x10202008,
                            0x1300: 0x2008,
                            0x1400: 0x200000,
                            0x1500: 0x10000000,
                            0x1600: 0x10000008,
                            0x1700: 0x202000,
                            0x1800: 0x202008,
                            0x1900: 0x0,
                            0x1a00: 0x8,
                            0x1b00: 0x10200000,
                            0x1c00: 0x2000,
                            0x1d00: 0x10002008,
                            0x1e00: 0x10202000,
                            0x1f00: 0x200008,
                            0x1080: 0x8,
                            0x1180: 0x202000,
                            0x1280: 0x200000,
                            0x1380: 0x10000008,
                            0x1480: 0x10002000,
                            0x1580: 0x2008,
                            0x1680: 0x10202008,
                            0x1780: 0x10200000,
                            0x1880: 0x10202000,
                            0x1980: 0x10200008,
                            0x1a80: 0x2000,
                            0x1b80: 0x202008,
                            0x1c80: 0x200008,
                            0x1d80: 0x0,
                            0x1e80: 0x10000000,
                            0x1f80: 0x10002008
                        },
                        {
                            0x0: 0x100000,
                            0x10: 0x2000401,
                            0x20: 0x400,
                            0x30: 0x100401,
                            0x40: 0x2100401,
                            0x50: 0x0,
                            0x60: 0x1,
                            0x70: 0x2100001,
                            0x80: 0x2000400,
                            0x90: 0x100001,
                            0xa0: 0x2000001,
                            0xb0: 0x2100400,
                            0xc0: 0x2100000,
                            0xd0: 0x401,
                            0xe0: 0x100400,
                            0xf0: 0x2000000,
                            0x8: 0x2100001,
                            0x18: 0x0,
                            0x28: 0x2000401,
                            0x38: 0x2100400,
                            0x48: 0x100000,
                            0x58: 0x2000001,
                            0x68: 0x2000000,
                            0x78: 0x401,
                            0x88: 0x100401,
                            0x98: 0x2000400,
                            0xa8: 0x2100000,
                            0xb8: 0x100001,
                            0xc8: 0x400,
                            0xd8: 0x2100401,
                            0xe8: 0x1,
                            0xf8: 0x100400,
                            0x100: 0x2000000,
                            0x110: 0x100000,
                            0x120: 0x2000401,
                            0x130: 0x2100001,
                            0x140: 0x100001,
                            0x150: 0x2000400,
                            0x160: 0x2100400,
                            0x170: 0x100401,
                            0x180: 0x401,
                            0x190: 0x2100401,
                            0x1a0: 0x100400,
                            0x1b0: 0x1,
                            0x1c0: 0x0,
                            0x1d0: 0x2100000,
                            0x1e0: 0x2000001,
                            0x1f0: 0x400,
                            0x108: 0x100400,
                            0x118: 0x2000401,
                            0x128: 0x2100001,
                            0x138: 0x1,
                            0x148: 0x2000000,
                            0x158: 0x100000,
                            0x168: 0x401,
                            0x178: 0x2100400,
                            0x188: 0x2000001,
                            0x198: 0x2100000,
                            0x1a8: 0x0,
                            0x1b8: 0x2100401,
                            0x1c8: 0x100401,
                            0x1d8: 0x400,
                            0x1e8: 0x2000400,
                            0x1f8: 0x100001
                        },
                        {
                            0x0: 0x8000820,
                            0x1: 0x20000,
                            0x2: 0x8000000,
                            0x3: 0x20,
                            0x4: 0x20020,
                            0x5: 0x8020820,
                            0x6: 0x8020800,
                            0x7: 0x800,
                            0x8: 0x8020000,
                            0x9: 0x8000800,
                            0xa: 0x20800,
                            0xb: 0x8020020,
                            0xc: 0x820,
                            0xd: 0x0,
                            0xe: 0x8000020,
                            0xf: 0x20820,
                            0x80000000: 0x800,
                            0x80000001: 0x8020820,
                            0x80000002: 0x8000820,
                            0x80000003: 0x8000000,
                            0x80000004: 0x8020000,
                            0x80000005: 0x20800,
                            0x80000006: 0x20820,
                            0x80000007: 0x20,
                            0x80000008: 0x8000020,
                            0x80000009: 0x820,
                            0x8000000a: 0x20020,
                            0x8000000b: 0x8020800,
                            0x8000000c: 0x0,
                            0x8000000d: 0x8020020,
                            0x8000000e: 0x8000800,
                            0x8000000f: 0x20000,
                            0x10: 0x20820,
                            0x11: 0x8020800,
                            0x12: 0x20,
                            0x13: 0x800,
                            0x14: 0x8000800,
                            0x15: 0x8000020,
                            0x16: 0x8020020,
                            0x17: 0x20000,
                            0x18: 0x0,
                            0x19: 0x20020,
                            0x1a: 0x8020000,
                            0x1b: 0x8000820,
                            0x1c: 0x8020820,
                            0x1d: 0x20800,
                            0x1e: 0x820,
                            0x1f: 0x8000000,
                            0x80000010: 0x20000,
                            0x80000011: 0x800,
                            0x80000012: 0x8020020,
                            0x80000013: 0x20820,
                            0x80000014: 0x20,
                            0x80000015: 0x8020000,
                            0x80000016: 0x8000000,
                            0x80000017: 0x8000820,
                            0x80000018: 0x8020820,
                            0x80000019: 0x8000020,
                            0x8000001a: 0x8000800,
                            0x8000001b: 0x0,
                            0x8000001c: 0x20800,
                            0x8000001d: 0x820,
                            0x8000001e: 0x20020,
                            0x8000001f: 0x8020800
                        }
                    ];

                    // Masks that select the SBOX input
                    var SBOX_MASK = [
                        0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000,
                        0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f
                    ];

                    /**
                     * DES block cipher algorithm.
                     */
                    var DES = C_algo.DES = BlockCipher.extend({
                        _doReset: function () {
                            // Shortcuts
                            var key = this._key;
                            var keyWords = key.words;

                            // Select 56 bits according to PC1
                            var keyBits = [];
                            for (var i = 0; i < 56; i++) {
                                var keyBitPos = PC1[i] - 1;
                                keyBits[i] = (keyWords[keyBitPos >>> 5] >>> (31 - keyBitPos % 32)) & 1;
                            }

                            // Assemble 16 subkeys
                            var subKeys = this._subKeys = [];
                            for (var nSubKey = 0; nSubKey < 16; nSubKey++) {
                                // Create subkey
                                var subKey = subKeys[nSubKey] = [];

                                // Shortcut
                                var bitShift = BIT_SHIFTS[nSubKey];

                                // Select 48 bits according to PC2
                                for (var i = 0; i < 24; i++) {
                                    // Select from the left 28 key bits
                                    subKey[(i / 6) | 0] |= keyBits[((PC2[i] - 1) + bitShift) % 28] << (31 - i % 6);

                                    // Select from the right 28 key bits
                                    subKey[4 + ((i / 6) | 0)] |= keyBits[28 + (((PC2[i + 24] - 1) + bitShift) % 28)] << (31 - i % 6);
                                }

                                // Since each subkey is applied to an expanded 32-bit input,
                                // the subkey can be broken into 8 values scaled to 32-bits,
                                // which allows the key to be used without expansion
                                subKey[0] = (subKey[0] << 1) | (subKey[0] >>> 31);
                                for (var i = 1; i < 7; i++) {
                                    subKey[i] = subKey[i] >>> ((i - 1) * 4 + 3);
                                }
                                subKey[7] = (subKey[7] << 5) | (subKey[7] >>> 27);
                            }

                            // Compute inverse subkeys
                            var invSubKeys = this._invSubKeys = [];
                            for (var i = 0; i < 16; i++) {
                                invSubKeys[i] = subKeys[15 - i];
                            }
                        },

                        encryptBlock: function (M, offset) {
                            this._doCryptBlock(M, offset, this._subKeys);
                        },

                        decryptBlock: function (M, offset) {
                            this._doCryptBlock(M, offset, this._invSubKeys);
                        },

                        _doCryptBlock: function (M, offset, subKeys) {
                            // Get input
                            this._lBlock = M[offset];
                            this._rBlock = M[offset + 1];

                            // Initial permutation
                            exchangeLR.call(this, 4, 0x0f0f0f0f);
                            exchangeLR.call(this, 16, 0x0000ffff);
                            exchangeRL.call(this, 2, 0x33333333);
                            exchangeRL.call(this, 8, 0x00ff00ff);
                            exchangeLR.call(this, 1, 0x55555555);

                            // Rounds
                            for (var round = 0; round < 16; round++) {
                                // Shortcuts
                                var subKey = subKeys[round];
                                var lBlock = this._lBlock;
                                var rBlock = this._rBlock;

                                // Feistel function
                                var f = 0;
                                for (var i = 0; i < 8; i++) {
                                    f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];
                                }
                                this._lBlock = rBlock;
                                this._rBlock = lBlock ^ f;
                            }

                            // Undo swap from last round
                            var t = this._lBlock;
                            this._lBlock = this._rBlock;
                            this._rBlock = t;

                            // Final permutation
                            exchangeLR.call(this, 1, 0x55555555);
                            exchangeRL.call(this, 8, 0x00ff00ff);
                            exchangeRL.call(this, 2, 0x33333333);
                            exchangeLR.call(this, 16, 0x0000ffff);
                            exchangeLR.call(this, 4, 0x0f0f0f0f);

                            // Set output
                            M[offset] = this._lBlock;
                            M[offset + 1] = this._rBlock;
                        },

                        keySize: 64 / 32,

                        ivSize: 64 / 32,

                        blockSize: 64 / 32
                    });

                    // Swap bits across the left and right words
                    function exchangeLR(offset, mask) {
                        var t = ((this._lBlock >>> offset) ^ this._rBlock) & mask;
                        this._rBlock ^= t;
                        this._lBlock ^= t << offset;
                    }

                    function exchangeRL(offset, mask) {
                        var t = ((this._rBlock >>> offset) ^ this._lBlock) & mask;
                        this._lBlock ^= t;
                        this._rBlock ^= t << offset;
                    }

                    /**
                     * Shortcut functions to the cipher's object interface.
                     *
                     * @example
                     *
                     *     var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);
                     *     var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);
                     */
                    C.DES = BlockCipher._createHelper(DES);

                    /**
                     * Triple-DES block cipher algorithm.
                     */
                    var TripleDES = C_algo.TripleDES = BlockCipher.extend({
                        _doReset: function () {
                            // Shortcuts
                            var key = this._key;
                            var keyWords = key.words;

                            // Create DES instances
                            this._des1 = DES.createEncryptor(WordArray.create(keyWords.slice(0, 2)));
                            this._des2 = DES.createEncryptor(WordArray.create(keyWords.slice(2, 4)));
                            this._des3 = DES.createEncryptor(WordArray.create(keyWords.slice(4, 6)));
                        },

                        encryptBlock: function (M, offset) {
                            this._des1.encryptBlock(M, offset);
                            this._des2.decryptBlock(M, offset);
                            this._des3.encryptBlock(M, offset);
                        },

                        decryptBlock: function (M, offset) {
                            this._des3.decryptBlock(M, offset);
                            this._des2.encryptBlock(M, offset);
                            this._des1.decryptBlock(M, offset);
                        },

                        keySize: 192 / 32,

                        ivSize: 64 / 32,

                        blockSize: 64 / 32
                    });

                    /**
                     * Shortcut functions to the cipher's object interface.
                     *
                     * @example
                     *
                     *     var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);
                     *     var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);
                     */
                    C.TripleDES = BlockCipher._createHelper(TripleDES);
                }());


                return CryptoJS.TripleDES;

            }));
        }, {"./cipher-core": 68, "./core": 69, "./enc-base64": 70, "./evpkdf": 72, "./md5": 77}],
        100: [function (require, module, exports) {
            ;(function (root, factory) {
                if (typeof exports === "object") {
                    // CommonJS
                    module.exports = exports = factory(require("./core"));
                }
                else if (typeof define === "function" && define.amd) {
                    // AMD
                    define(["./core"], factory);
                }
                else {
                    // Global (browser)
                    factory(root.CryptoJS);
                }
            }(this, function (CryptoJS) {

                (function (undefined) {
                    // Shortcuts
                    var C = CryptoJS;
                    var C_lib = C.lib;
                    var Base = C_lib.Base;
                    var X32WordArray = C_lib.WordArray;

                    /**
                     * x64 namespace.
                     */
                    var C_x64 = C.x64 = {};

                    /**
                     * A 64-bit word.
                     */
                    var X64Word = C_x64.Word = Base.extend({
                        /**
                         * Initializes a newly created 64-bit word.
                         *
                         * @param {number} high The high 32 bits.
                         * @param {number} low The low 32 bits.
                         *
                         * @example
                         *
                         *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);
                         */
                        init: function (high, low) {
                            this.high = high;
                            this.low = low;
                        }

                        /**
                         * Bitwise NOTs this word.
                         *
                         * @return {X64Word} A new x64-Word object after negating.
                         *
                         * @example
                         *
                         *     var negated = x64Word.not();
                         */
                        // not: function () {
                        // var high = ~this.high;
                        // var low = ~this.low;

                        // return X64Word.create(high, low);
                        // },

                        /**
                         * Bitwise ANDs this word with the passed word.
                         *
                         * @param {X64Word} word The x64-Word to AND with this word.
                         *
                         * @return {X64Word} A new x64-Word object after ANDing.
                         *
                         * @example
                         *
                         *     var anded = x64Word.and(anotherX64Word);
                         */
                        // and: function (word) {
                        // var high = this.high & word.high;
                        // var low = this.low & word.low;

                        // return X64Word.create(high, low);
                        // },

                        /**
                         * Bitwise ORs this word with the passed word.
                         *
                         * @param {X64Word} word The x64-Word to OR with this word.
                         *
                         * @return {X64Word} A new x64-Word object after ORing.
                         *
                         * @example
                         *
                         *     var ored = x64Word.or(anotherX64Word);
                         */
                        // or: function (word) {
                        // var high = this.high | word.high;
                        // var low = this.low | word.low;

                        // return X64Word.create(high, low);
                        // },

                        /**
                         * Bitwise XORs this word with the passed word.
                         *
                         * @param {X64Word} word The x64-Word to XOR with this word.
                         *
                         * @return {X64Word} A new x64-Word object after XORing.
                         *
                         * @example
                         *
                         *     var xored = x64Word.xor(anotherX64Word);
                         */
                        // xor: function (word) {
                        // var high = this.high ^ word.high;
                        // var low = this.low ^ word.low;

                        // return X64Word.create(high, low);
                        // },

                        /**
                         * Shifts this word n bits to the left.
                         *
                         * @param {number} n The number of bits to shift.
                         *
                         * @return {X64Word} A new x64-Word object after shifting.
                         *
                         * @example
                         *
                         *     var shifted = x64Word.shiftL(25);
                         */
                        // shiftL: function (n) {
                        // if (n < 32) {
                        // var high = (this.high << n) | (this.low >>> (32 - n));
                        // var low = this.low << n;
                        // } else {
                        // var high = this.low << (n - 32);
                        // var low = 0;
                        // }

                        // return X64Word.create(high, low);
                        // },

                        /**
                         * Shifts this word n bits to the right.
                         *
                         * @param {number} n The number of bits to shift.
                         *
                         * @return {X64Word} A new x64-Word object after shifting.
                         *
                         * @example
                         *
                         *     var shifted = x64Word.shiftR(7);
                         */
                        // shiftR: function (n) {
                        // if (n < 32) {
                        // var low = (this.low >>> n) | (this.high << (32 - n));
                        // var high = this.high >>> n;
                        // } else {
                        // var low = this.high >>> (n - 32);
                        // var high = 0;
                        // }

                        // return X64Word.create(high, low);
                        // },

                        /**
                         * Rotates this word n bits to the left.
                         *
                         * @param {number} n The number of bits to rotate.
                         *
                         * @return {X64Word} A new x64-Word object after rotating.
                         *
                         * @example
                         *
                         *     var rotated = x64Word.rotL(25);
                         */
                        // rotL: function (n) {
                        // return this.shiftL(n).or(this.shiftR(64 - n));
                        // },

                        /**
                         * Rotates this word n bits to the right.
                         *
                         * @param {number} n The number of bits to rotate.
                         *
                         * @return {X64Word} A new x64-Word object after rotating.
                         *
                         * @example
                         *
                         *     var rotated = x64Word.rotR(7);
                         */
                        // rotR: function (n) {
                        // return this.shiftR(n).or(this.shiftL(64 - n));
                        // },

                        /**
                         * Adds this word with the passed word.
                         *
                         * @param {X64Word} word The x64-Word to add with this word.
                         *
                         * @return {X64Word} A new x64-Word object after adding.
                         *
                         * @example
                         *
                         *     var added = x64Word.add(anotherX64Word);
                         */
                        // add: function (word) {
                        // var low = (this.low + word.low) | 0;
                        // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;
                        // var high = (this.high + word.high + carry) | 0;

                        // return X64Word.create(high, low);
                        // }
                    });

                    /**
                     * An array of 64-bit words.
                     *
                     * @property {Array} words The array of CryptoJS.x64.Word objects.
                     * @property {number} sigBytes The number of significant bytes in this word array.
                     */
                    var X64WordArray = C_x64.WordArray = Base.extend({
                        /**
                         * Initializes a newly created word array.
                         *
                         * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.
                         * @param {number} sigBytes (Optional) The number of significant bytes in the words.
                         *
                         * @example
                         *
                         *     var wordArray = CryptoJS.x64.WordArray.create();
                         *
                         *     var wordArray = CryptoJS.x64.WordArray.create([
                         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
                         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
                         *     ]);
                         *
                         *     var wordArray = CryptoJS.x64.WordArray.create([
                         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
                         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
                         *     ], 10);
                         */
                        init: function (words, sigBytes) {
                            words = this.words = words || [];

                            if (sigBytes != undefined) {
                                this.sigBytes = sigBytes;
                            } else {
                                this.sigBytes = words.length * 8;
                            }
                        },

                        /**
                         * Converts this 64-bit word array to a 32-bit word array.
                         *
                         * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.
                         *
                         * @example
                         *
                         *     var x32WordArray = x64WordArray.toX32();
                         */
                        toX32: function () {
                            // Shortcuts
                            var x64Words = this.words;
                            var x64WordsLength = x64Words.length;

                            // Convert
                            var x32Words = [];
                            for (var i = 0; i < x64WordsLength; i++) {
                                var x64Word = x64Words[i];
                                x32Words.push(x64Word.high);
                                x32Words.push(x64Word.low);
                            }

                            return X32WordArray.create(x32Words, this.sigBytes);
                        },

                        /**
                         * Creates a copy of this word array.
                         *
                         * @return {X64WordArray} The clone.
                         *
                         * @example
                         *
                         *     var clone = x64WordArray.clone();
                         */
                        clone: function () {
                            var clone = Base.clone.call(this);

                            // Clone "words" array
                            var words = clone.words = this.words.slice(0);

                            // Clone each X64Word object
                            var wordsLength = words.length;
                            for (var i = 0; i < wordsLength; i++) {
                                words[i] = words[i].clone();
                            }

                            return clone;
                        }
                    });
                }());


                return CryptoJS;

            }));
        }, {"./core": 69}],
        101: [function (require, module, exports) {
            'use strict';

            exports.utils = require('./des/utils');
            exports.Cipher = require('./des/cipher');
            exports.DES = require('./des/des');
            exports.CBC = require('./des/cbc');
            exports.EDE = require('./des/ede');

        }, {"./des/cbc": 102, "./des/cipher": 103, "./des/des": 104, "./des/ede": 105, "./des/utils": 106}],
        102: [function (require, module, exports) {
            'use strict';

            var assert = require('minimalistic-assert');
            var inherits = require('inherits');

            var proto = {};

            function CBCState(iv) {
                assert.equal(iv.length, 8, 'Invalid IV length');

                this.iv = new Array(8);
                for (var i = 0; i < this.iv.length; i++)
                    this.iv[i] = iv[i];
            }

            function instantiate(Base) {
                function CBC(options) {
                    Base.call(this, options);
                    this._cbcInit();
                }

                inherits(CBC, Base);

                var keys = Object.keys(proto);
                for (var i = 0; i < keys.length; i++) {
                    var key = keys[i];
                    CBC.prototype[key] = proto[key];
                }

                CBC.create = function create(options) {
                    return new CBC(options);
                };

                return CBC;
            }

            exports.instantiate = instantiate;

            proto._cbcInit = function _cbcInit() {
                var state = new CBCState(this.options.iv);
                this._cbcState = state;
            };

            proto._update = function _update(inp, inOff, out, outOff) {
                var state = this._cbcState;
                var superProto = this.constructor.super_.prototype;

                var iv = state.iv;
                if (this.type === 'encrypt') {
                    for (var i = 0; i < this.blockSize; i++)
                        iv[i] ^= inp[inOff + i];

                    superProto._update.call(this, iv, 0, out, outOff);

                    for (var i = 0; i < this.blockSize; i++)
                        iv[i] = out[outOff + i];
                } else {
                    superProto._update.call(this, inp, inOff, out, outOff);

                    for (var i = 0; i < this.blockSize; i++)
                        out[outOff + i] ^= iv[i];

                    for (var i = 0; i < this.blockSize; i++)
                        iv[i] = inp[inOff + i];
                }
            };

        }, {"inherits": 143, "minimalistic-assert": 147}],
        103: [function (require, module, exports) {
            'use strict';

            var assert = require('minimalistic-assert');

            function Cipher(options) {
                this.options = options;

                this.type = this.options.type;
                this.blockSize = 8;
                this._init();

                this.buffer = new Array(this.blockSize);
                this.bufferOff = 0;
            }

            module.exports = Cipher;

            Cipher.prototype._init = function _init() {
                // Might be overrided
            };

            Cipher.prototype.update = function update(data) {
                if (data.length === 0)
                    return [];

                if (this.type === 'decrypt')
                    return this._updateDecrypt(data);
                else
                    return this._updateEncrypt(data);
            };

            Cipher.prototype._buffer = function _buffer(data, off) {
                // Append data to buffer
                var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
                for (var i = 0; i < min; i++)
                    this.buffer[this.bufferOff + i] = data[off + i];
                this.bufferOff += min;

                // Shift next
                return min;
            };

            Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
                this._update(this.buffer, 0, out, off);
                this.bufferOff = 0;
                return this.blockSize;
            };

            Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
                var inputOff = 0;
                var outputOff = 0;

                var count = ((this.bufferOff + data.length) / this.blockSize) | 0;
                var out = new Array(count * this.blockSize);

                if (this.bufferOff !== 0) {
                    inputOff += this._buffer(data, inputOff);

                    if (this.bufferOff === this.buffer.length)
                        outputOff += this._flushBuffer(out, outputOff);
                }

                // Write blocks
                var max = data.length - ((data.length - inputOff) % this.blockSize);
                for (; inputOff < max; inputOff += this.blockSize) {
                    this._update(data, inputOff, out, outputOff);
                    outputOff += this.blockSize;
                }

                // Queue rest
                for (; inputOff < data.length; inputOff++, this.bufferOff++)
                    this.buffer[this.bufferOff] = data[inputOff];

                return out;
            };

            Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
                var inputOff = 0;
                var outputOff = 0;

                var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
                var out = new Array(count * this.blockSize);

                // TODO(indutny): optimize it, this is far from optimal
                for (; count > 0; count--) {
                    inputOff += this._buffer(data, inputOff);
                    outputOff += this._flushBuffer(out, outputOff);
                }

                // Buffer rest of the input
                inputOff += this._buffer(data, inputOff);

                return out;
            };

            Cipher.prototype.final = function final(buffer) {
                var first;
                if (buffer)
                    first = this.update(buffer);

                var last;
                if (this.type === 'encrypt')
                    last = this._finalEncrypt();
                else
                    last = this._finalDecrypt();

                if (first)
                    return first.concat(last);
                else
                    return last;
            };

            Cipher.prototype._pad = function _pad(buffer, off) {
                if (off === 0)
                    return false;

                while (off < buffer.length)
                    buffer[off++] = 0;

                return true;
            };

            Cipher.prototype._finalEncrypt = function _finalEncrypt() {
                if (!this._pad(this.buffer, this.bufferOff))
                    return [];

                var out = new Array(this.blockSize);
                this._update(this.buffer, 0, out, 0);
                return out;
            };

            Cipher.prototype._unpad = function _unpad(buffer) {
                return buffer;
            };

            Cipher.prototype._finalDecrypt = function _finalDecrypt() {
                assert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
                var out = new Array(this.blockSize);
                this._flushBuffer(out, 0);

                return this._unpad(out);
            };

        }, {"minimalistic-assert": 147}],
        104: [function (require, module, exports) {
            'use strict';

            var assert = require('minimalistic-assert');
            var inherits = require('inherits');

            var des = require('../des');
            var utils = des.utils;
            var Cipher = des.Cipher;

            function DESState() {
                this.tmp = new Array(2);
                this.keys = null;
            }

            function DES(options) {
                Cipher.call(this, options);

                var state = new DESState();
                this._desState = state;

                this.deriveKeys(state, options.key);
            }

            inherits(DES, Cipher);
            module.exports = DES;

            DES.create = function create(options) {
                return new DES(options);
            };

            var shiftTable = [
                1, 1, 2, 2, 2, 2, 2, 2,
                1, 2, 2, 2, 2, 2, 2, 1
            ];

            DES.prototype.deriveKeys = function deriveKeys(state, key) {
                state.keys = new Array(16 * 2);

                assert.equal(key.length, this.blockSize, 'Invalid key length');

                var kL = utils.readUInt32BE(key, 0);
                var kR = utils.readUInt32BE(key, 4);

                utils.pc1(kL, kR, state.tmp, 0);
                kL = state.tmp[0];
                kR = state.tmp[1];
                for (var i = 0; i < state.keys.length; i += 2) {
                    var shift = shiftTable[i >>> 1];
                    kL = utils.r28shl(kL, shift);
                    kR = utils.r28shl(kR, shift);
                    utils.pc2(kL, kR, state.keys, i);
                }
            };

            DES.prototype._update = function _update(inp, inOff, out, outOff) {
                var state = this._desState;

                var l = utils.readUInt32BE(inp, inOff);
                var r = utils.readUInt32BE(inp, inOff + 4);

                // Initial Permutation
                utils.ip(l, r, state.tmp, 0);
                l = state.tmp[0];
                r = state.tmp[1];

                if (this.type === 'encrypt')
                    this._encrypt(state, l, r, state.tmp, 0);
                else
                    this._decrypt(state, l, r, state.tmp, 0);

                l = state.tmp[0];
                r = state.tmp[1];

                utils.writeUInt32BE(out, l, outOff);
                utils.writeUInt32BE(out, r, outOff + 4);
            };

            DES.prototype._pad = function _pad(buffer, off) {
                var value = buffer.length - off;
                for (var i = off; i < buffer.length; i++)
                    buffer[i] = value;

                return true;
            };

            DES.prototype._unpad = function _unpad(buffer) {
                var pad = buffer[buffer.length - 1];
                for (var i = buffer.length - pad; i < buffer.length; i++)
                    assert.equal(buffer[i], pad);

                return buffer.slice(0, buffer.length - pad);
            };

            DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
                var l = lStart;
                var r = rStart;

                // Apply f() x16 times
                for (var i = 0; i < state.keys.length; i += 2) {
                    var keyL = state.keys[i];
                    var keyR = state.keys[i + 1];

                    // f(r, k)
                    utils.expand(r, state.tmp, 0);

                    keyL ^= state.tmp[0];
                    keyR ^= state.tmp[1];
                    var s = utils.substitute(keyL, keyR);
                    var f = utils.permute(s);

                    var t = r;
                    r = (l ^ f) >>> 0;
                    l = t;
                }

                // Reverse Initial Permutation
                utils.rip(r, l, out, off);
            };

            DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
                var l = rStart;
                var r = lStart;

                // Apply f() x16 times
                for (var i = state.keys.length - 2; i >= 0; i -= 2) {
                    var keyL = state.keys[i];
                    var keyR = state.keys[i + 1];

                    // f(r, k)
                    utils.expand(l, state.tmp, 0);

                    keyL ^= state.tmp[0];
                    keyR ^= state.tmp[1];
                    var s = utils.substitute(keyL, keyR);
                    var f = utils.permute(s);

                    var t = l;
                    l = (r ^ f) >>> 0;
                    r = t;
                }

                // Reverse Initial Permutation
                utils.rip(l, r, out, off);
            };

        }, {"../des": 101, "inherits": 143, "minimalistic-assert": 147}],
        105: [function (require, module, exports) {
            'use strict';

            var assert = require('minimalistic-assert');
            var inherits = require('inherits');

            var des = require('../des');
            var Cipher = des.Cipher;
            var DES = des.DES;

            function EDEState(type, key) {
                assert.equal(key.length, 24, 'Invalid key length');

                var k1 = key.slice(0, 8);
                var k2 = key.slice(8, 16);
                var k3 = key.slice(16, 24);

                if (type === 'encrypt') {
                    this.ciphers = [
                        DES.create({type: 'encrypt', key: k1}),
                        DES.create({type: 'decrypt', key: k2}),
                        DES.create({type: 'encrypt', key: k3})
                    ];
                } else {
                    this.ciphers = [
                        DES.create({type: 'decrypt', key: k3}),
                        DES.create({type: 'encrypt', key: k2}),
                        DES.create({type: 'decrypt', key: k1})
                    ];
                }
            }

            function EDE(options) {
                Cipher.call(this, options);

                var state = new EDEState(this.type, this.options.key);
                this._edeState = state;
            }

            inherits(EDE, Cipher);

            module.exports = EDE;

            EDE.create = function create(options) {
                return new EDE(options);
            };

            EDE.prototype._update = function _update(inp, inOff, out, outOff) {
                var state = this._edeState;

                state.ciphers[0]._update(inp, inOff, out, outOff);
                state.ciphers[1]._update(out, outOff, out, outOff);
                state.ciphers[2]._update(out, outOff, out, outOff);
            };

            EDE.prototype._pad = DES.prototype._pad;
            EDE.prototype._unpad = DES.prototype._unpad;

        }, {"../des": 101, "inherits": 143, "minimalistic-assert": 147}],
        106: [function (require, module, exports) {
            'use strict';

            exports.readUInt32BE = function readUInt32BE(bytes, off) {
                var res = (bytes[0 + off] << 24) |
                    (bytes[1 + off] << 16) |
                    (bytes[2 + off] << 8) |
                    bytes[3 + off];
                return res >>> 0;
            };

            exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
                bytes[0 + off] = value >>> 24;
                bytes[1 + off] = (value >>> 16) & 0xff;
                bytes[2 + off] = (value >>> 8) & 0xff;
                bytes[3 + off] = value & 0xff;
            };

            exports.ip = function ip(inL, inR, out, off) {
                var outL = 0;
                var outR = 0;

                for (var i = 6; i >= 0; i -= 2) {
                    for (var j = 0; j <= 24; j += 8) {
                        outL <<= 1;
                        outL |= (inR >>> (j + i)) & 1;
                    }
                    for (var j = 0; j <= 24; j += 8) {
                        outL <<= 1;
                        outL |= (inL >>> (j + i)) & 1;
                    }
                }

                for (var i = 6; i >= 0; i -= 2) {
                    for (var j = 1; j <= 25; j += 8) {
                        outR <<= 1;
                        outR |= (inR >>> (j + i)) & 1;
                    }
                    for (var j = 1; j <= 25; j += 8) {
                        outR <<= 1;
                        outR |= (inL >>> (j + i)) & 1;
                    }
                }

                out[off + 0] = outL >>> 0;
                out[off + 1] = outR >>> 0;
            };

            exports.rip = function rip(inL, inR, out, off) {
                var outL = 0;
                var outR = 0;

                for (var i = 0; i < 4; i++) {
                    for (var j = 24; j >= 0; j -= 8) {
                        outL <<= 1;
                        outL |= (inR >>> (j + i)) & 1;
                        outL <<= 1;
                        outL |= (inL >>> (j + i)) & 1;
                    }
                }
                for (var i = 4; i < 8; i++) {
                    for (var j = 24; j >= 0; j -= 8) {
                        outR <<= 1;
                        outR |= (inR >>> (j + i)) & 1;
                        outR <<= 1;
                        outR |= (inL >>> (j + i)) & 1;
                    }
                }

                out[off + 0] = outL >>> 0;
                out[off + 1] = outR >>> 0;
            };

            exports.pc1 = function pc1(inL, inR, out, off) {
                var outL = 0;
                var outR = 0;

                // 7, 15, 23, 31, 39, 47, 55, 63
                // 6, 14, 22, 30, 39, 47, 55, 63
                // 5, 13, 21, 29, 39, 47, 55, 63
                // 4, 12, 20, 28
                for (var i = 7; i >= 5; i--) {
                    for (var j = 0; j <= 24; j += 8) {
                        outL <<= 1;
                        outL |= (inR >> (j + i)) & 1;
                    }
                    for (var j = 0; j <= 24; j += 8) {
                        outL <<= 1;
                        outL |= (inL >> (j + i)) & 1;
                    }
                }
                for (var j = 0; j <= 24; j += 8) {
                    outL <<= 1;
                    outL |= (inR >> (j + i)) & 1;
                }

                // 1, 9, 17, 25, 33, 41, 49, 57
                // 2, 10, 18, 26, 34, 42, 50, 58
                // 3, 11, 19, 27, 35, 43, 51, 59
                // 36, 44, 52, 60
                for (var i = 1; i <= 3; i++) {
                    for (var j = 0; j <= 24; j += 8) {
                        outR <<= 1;
                        outR |= (inR >> (j + i)) & 1;
                    }
                    for (var j = 0; j <= 24; j += 8) {
                        outR <<= 1;
                        outR |= (inL >> (j + i)) & 1;
                    }
                }
                for (var j = 0; j <= 24; j += 8) {
                    outR <<= 1;
                    outR |= (inL >> (j + i)) & 1;
                }

                out[off + 0] = outL >>> 0;
                out[off + 1] = outR >>> 0;
            };

            exports.r28shl = function r28shl(num, shift) {
                return ((num << shift) & 0xfffffff) | (num >>> (28 - shift));
            };

            var pc2table = [
                // inL => outL
                14, 11, 17, 4, 27, 23, 25, 0,
                13, 22, 7, 18, 5, 9, 16, 24,
                2, 20, 12, 21, 1, 8, 15, 26,

                // inR => outR
                15, 4, 25, 19, 9, 1, 26, 16,
                5, 11, 23, 8, 12, 7, 17, 0,
                22, 3, 10, 14, 6, 20, 27, 24
            ];

            exports.pc2 = function pc2(inL, inR, out, off) {
                var outL = 0;
                var outR = 0;

                var len = pc2table.length >>> 1;
                for (var i = 0; i < len; i++) {
                    outL <<= 1;
                    outL |= (inL >>> pc2table[i]) & 0x1;
                }
                for (var i = len; i < pc2table.length; i++) {
                    outR <<= 1;
                    outR |= (inR >>> pc2table[i]) & 0x1;
                }

                out[off + 0] = outL >>> 0;
                out[off + 1] = outR >>> 0;
            };

            exports.expand = function expand(r, out, off) {
                var outL = 0;
                var outR = 0;

                outL = ((r & 1) << 5) | (r >>> 27);
                for (var i = 23; i >= 15; i -= 4) {
                    outL <<= 6;
                    outL |= (r >>> i) & 0x3f;
                }
                for (var i = 11; i >= 3; i -= 4) {
                    outR |= (r >>> i) & 0x3f;
                    outR <<= 6;
                }
                outR |= ((r & 0x1f) << 1) | (r >>> 31);

                out[off + 0] = outL >>> 0;
                out[off + 1] = outR >>> 0;
            };

            var sTable = [
                14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1,
                3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8,
                4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7,
                15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13,

                15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14,
                9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5,
                0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2,
                5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9,

                10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10,
                1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1,
                13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7,
                11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12,

                7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3,
                1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9,
                10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8,
                15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14,

                2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1,
                8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6,
                4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13,
                15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3,

                12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5,
                0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8,
                9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10,
                7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13,

                4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10,
                3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6,
                1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7,
                10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12,

                13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4,
                10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2,
                7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13,
                0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11
            ];

            exports.substitute = function substitute(inL, inR) {
                var out = 0;
                for (var i = 0; i < 4; i++) {
                    var b = (inL >>> (18 - i * 6)) & 0x3f;
                    var sb = sTable[i * 0x40 + b];

                    out <<= 4;
                    out |= sb;
                }
                for (var i = 0; i < 4; i++) {
                    var b = (inR >>> (18 - i * 6)) & 0x3f;
                    var sb = sTable[4 * 0x40 + i * 0x40 + b];

                    out <<= 4;
                    out |= sb;
                }
                return out >>> 0;
            };

            var permuteTable = [
                16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22,
                30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7
            ];

            exports.permute = function permute(num) {
                var out = 0;
                for (var i = 0; i < permuteTable.length; i++) {
                    out <<= 1;
                    out |= (num >>> permuteTable[i]) & 0x1;
                }
                return out >>> 0;
            };

            exports.padSplit = function padSplit(num, size, group) {
                var str = num.toString(2);
                while (str.length < size)
                    str = '0' + str;

                var out = [];
                for (var i = 0; i < size; i += group)
                    out.push(str.slice(i, i + group));
                return out.join(' ');
            };

        }, {}],
        107: [function (require, module, exports) {
            (function (Buffer) {
                var generatePrime = require('./lib/generatePrime')
                var primes = require('./lib/primes.json')

                var DH = require('./lib/dh')

                function getDiffieHellman(mod) {
                    var prime = new Buffer(primes[mod].prime, 'hex')
                    var gen = new Buffer(primes[mod].gen, 'hex')

                    return new DH(prime, gen)
                }

                var ENCODINGS = {
                    'binary': true, 'hex': true, 'base64': true
                }

                function createDiffieHellman(prime, enc, generator, genc) {
                    if (Buffer.isBuffer(enc) || ENCODINGS[enc] === undefined) {
                        return createDiffieHellman(prime, 'binary', enc, generator)
                    }

                    enc = enc || 'binary'
                    genc = genc || 'binary'
                    generator = generator || new Buffer([2])

                    if (!Buffer.isBuffer(generator)) {
                        generator = new Buffer(generator, genc)
                    }

                    if (typeof prime === 'number') {
                        return new DH(generatePrime(prime, generator), generator, true)
                    }

                    if (!Buffer.isBuffer(prime)) {
                        prime = new Buffer(prime, enc)
                    }

                    return new DH(prime, generator, true)
                }

                exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman
                exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman

            }).call(this, require("buffer").Buffer)
        }, {"./lib/dh": 108, "./lib/generatePrime": 109, "./lib/primes.json": 110, "buffer": 57}],
        108: [function (require, module, exports) {
            (function (Buffer) {
                var BN = require('bn.js');
                var MillerRabin = require('miller-rabin');
                var millerRabin = new MillerRabin();
                var TWENTYFOUR = new BN(24);
                var ELEVEN = new BN(11);
                var TEN = new BN(10);
                var THREE = new BN(3);
                var SEVEN = new BN(7);
                var primes = require('./generatePrime');
                var randomBytes = require('randombytes');
                module.exports = DH;

                function setPublicKey(pub, enc) {
                    enc = enc || 'utf8';
                    if (!Buffer.isBuffer(pub)) {
                        pub = new Buffer(pub, enc);
                    }
                    this._pub = new BN(pub);
                    return this;
                }

                function setPrivateKey(priv, enc) {
                    enc = enc || 'utf8';
                    if (!Buffer.isBuffer(priv)) {
                        priv = new Buffer(priv, enc);
                    }
                    this._priv = new BN(priv);
                    return this;
                }

                var primeCache = {};

                function checkPrime(prime, generator) {
                    var gen = generator.toString('hex');
                    var hex = [gen, prime.toString(16)].join('_');
                    if (hex in primeCache) {
                        return primeCache[hex];
                    }
                    var error = 0;

                    if (prime.isEven() ||
                        !primes.simpleSieve ||
                        !primes.fermatTest(prime) ||
                        !millerRabin.test(prime)) {
                        //not a prime so +1
                        error += 1;

                        if (gen === '02' || gen === '05') {
                            // we'd be able to check the generator
                            // it would fail so +8
                            error += 8;
                        } else {
                            //we wouldn't be able to test the generator
                            // so +4
                            error += 4;
                        }
                        primeCache[hex] = error;
                        return error;
                    }
                    if (!millerRabin.test(prime.shrn(1))) {
                        //not a safe prime
                        error += 2;
                    }
                    var rem;
                    switch (gen) {
                        case '02':
                            if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
                                // unsuidable generator
                                error += 8;
                            }
                            break;
                        case '05':
                            rem = prime.mod(TEN);
                            if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
                                // prime mod 10 needs to equal 3 or 7
                                error += 8;
                            }
                            break;
                        default:
                            error += 4;
                    }
                    primeCache[hex] = error;
                    return error;
                }

                function DH(prime, generator, malleable) {
                    this.setGenerator(generator);
                    this.__prime = new BN(prime);
                    this._prime = BN.mont(this.__prime);
                    this._primeLen = prime.length;
                    this._pub = undefined;
                    this._priv = undefined;
                    this._primeCode = undefined;
                    if (malleable) {
                        this.setPublicKey = setPublicKey;
                        this.setPrivateKey = setPrivateKey;
                    } else {
                        this._primeCode = 8;
                    }
                }

                Object.defineProperty(DH.prototype, 'verifyError', {
                    enumerable: true,
                    get: function () {
                        if (typeof this._primeCode !== 'number') {
                            this._primeCode = checkPrime(this.__prime, this.__gen);
                        }
                        return this._primeCode;
                    }
                });
                DH.prototype.generateKeys = function () {
                    if (!this._priv) {
                        this._priv = new BN(randomBytes(this._primeLen));
                    }
                    this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
                    return this.getPublicKey();
                };

                DH.prototype.computeSecret = function (other) {
                    other = new BN(other);
                    other = other.toRed(this._prime);
                    var secret = other.redPow(this._priv).fromRed();
                    var out = new Buffer(secret.toArray());
                    var prime = this.getPrime();
                    if (out.length < prime.length) {
                        var front = new Buffer(prime.length - out.length);
                        front.fill(0);
                        out = Buffer.concat([front, out]);
                    }
                    return out;
                };

                DH.prototype.getPublicKey = function getPublicKey(enc) {
                    return formatReturnValue(this._pub, enc);
                };

                DH.prototype.getPrivateKey = function getPrivateKey(enc) {
                    return formatReturnValue(this._priv, enc);
                };

                DH.prototype.getPrime = function (enc) {
                    return formatReturnValue(this.__prime, enc);
                };

                DH.prototype.getGenerator = function (enc) {
                    return formatReturnValue(this._gen, enc);
                };

                DH.prototype.setGenerator = function (gen, enc) {
                    enc = enc || 'utf8';
                    if (!Buffer.isBuffer(gen)) {
                        gen = new Buffer(gen, enc);
                    }
                    this.__gen = gen;
                    this._gen = new BN(gen);
                    return this;
                };

                function formatReturnValue(bn, enc) {
                    var buf = new Buffer(bn.toArray());
                    if (!enc) {
                        return buf;
                    } else {
                        return buf.toString(enc);
                    }
                }

            }).call(this, require("buffer").Buffer)
        }, {"./generatePrime": 109, "bn.js": 20, "buffer": 57, "miller-rabin": 146, "randombytes": 168}],
        109: [function (require, module, exports) {
            var randomBytes = require('randombytes');
            module.exports = findPrime;
            findPrime.simpleSieve = simpleSieve;
            findPrime.fermatTest = fermatTest;
            var BN = require('bn.js');
            var TWENTYFOUR = new BN(24);
            var MillerRabin = require('miller-rabin');
            var millerRabin = new MillerRabin();
            var ONE = new BN(1);
            var TWO = new BN(2);
            var FIVE = new BN(5);
            var SIXTEEN = new BN(16);
            var EIGHT = new BN(8);
            var TEN = new BN(10);
            var THREE = new BN(3);
            var SEVEN = new BN(7);
            var ELEVEN = new BN(11);
            var FOUR = new BN(4);
            var TWELVE = new BN(12);
            var primes = null;

            function _getPrimes() {
                if (primes !== null)
                    return primes;

                var limit = 0x100000;
                var res = [];
                res[0] = 2;
                for (var i = 1, k = 3; k < limit; k += 2) {
                    var sqrt = Math.ceil(Math.sqrt(k));
                    for (var j = 0; j < i && res[j] <= sqrt; j++)
                        if (k % res[j] === 0)
                            break;

                    if (i !== j && res[j] <= sqrt)
                        continue;

                    res[i++] = k;
                }
                primes = res;
                return res;
            }

            function simpleSieve(p) {
                var primes = _getPrimes();

                for (var i = 0; i < primes.length; i++)
                    if (p.modn(primes[i]) === 0) {
                        if (p.cmpn(primes[i]) === 0) {
                            return true;
                        } else {
                            return false;
                        }
                    }

                return true;
            }

            function fermatTest(p) {
                var red = BN.mont(p);
                return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
            }

            function findPrime(bits, gen) {
                if (bits < 16) {
                    // this is what openssl does
                    if (gen === 2 || gen === 5) {
                        return new BN([0x8c, 0x7b]);
                    } else {
                        return new BN([0x8c, 0x27]);
                    }
                }
                gen = new BN(gen);

                var num, n2;

                while (true) {
                    num = new BN(randomBytes(Math.ceil(bits / 8)));
                    while (num.bitLength() > bits) {
                        num.ishrn(1);
                    }
                    if (num.isEven()) {
                        num.iadd(ONE);
                    }
                    if (!num.testn(1)) {
                        num.iadd(TWO);
                    }
                    if (!gen.cmp(TWO)) {
                        while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {
                            num.iadd(FOUR);
                        }
                    } else if (!gen.cmp(FIVE)) {
                        while (num.mod(TEN).cmp(THREE)) {
                            num.iadd(FOUR);
                        }
                    }
                    n2 = num.shrn(1);
                    if (simpleSieve(n2) && simpleSieve(num) &&
                        fermatTest(n2) && fermatTest(num) &&
                        millerRabin.test(n2) && millerRabin.test(num)) {
                        return num;
                    }
                }

            }

        }, {"bn.js": 20, "miller-rabin": 146, "randombytes": 168}],
        110: [function (require, module, exports) {
            module.exports = {
                "modp1": {
                    "gen": "02",
                    "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
                },
                "modp2": {
                    "gen": "02",
                    "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
                },
                "modp5": {
                    "gen": "02",
                    "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
                },
                "modp14": {
                    "gen": "02",
                    "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
                },
                "modp15": {
                    "gen": "02",
                    "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
                },
                "modp16": {
                    "gen": "02",
                    "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
                },
                "modp17": {
                    "gen": "02",
                    "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
                },
                "modp18": {
                    "gen": "02",
                    "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
                }
            }
        }, {}],
        111: [function (require, module, exports) {
            'use strict';

            var elliptic = exports;

            elliptic.version = require('../package.json').version;
            elliptic.utils = require('./elliptic/utils');
            elliptic.rand = require('brorand');
            elliptic.curve = require('./elliptic/curve');
            elliptic.curves = require('./elliptic/curves');

// Protocols
            elliptic.ec = require('./elliptic/ec');
            elliptic.eddsa = require('./elliptic/eddsa');

        }, {
            "../package.json": 126,
            "./elliptic/curve": 114,
            "./elliptic/curves": 117,
            "./elliptic/ec": 118,
            "./elliptic/eddsa": 121,
            "./elliptic/utils": 125,
            "brorand": 21
        }],
        112: [function (require, module, exports) {
            'use strict';

            var BN = require('bn.js');
            var elliptic = require('../../elliptic');
            var utils = elliptic.utils;
            var getNAF = utils.getNAF;
            var getJSF = utils.getJSF;
            var assert = utils.assert;

            function BaseCurve(type, conf) {
                this.type = type;
                this.p = new BN(conf.p, 16);

                // Use Montgomery, when there is no fast reduction for the prime
                this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);

                // Useful for many curves
                this.zero = new BN(0).toRed(this.red);
                this.one = new BN(1).toRed(this.red);
                this.two = new BN(2).toRed(this.red);

                // Curve configuration, optional
                this.n = conf.n && new BN(conf.n, 16);
                this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

                // Temporary arrays
                this._wnafT1 = new Array(4);
                this._wnafT2 = new Array(4);
                this._wnafT3 = new Array(4);
                this._wnafT4 = new Array(4);

                // Generalized Greg Maxwell's trick
                var adjustCount = this.n && this.p.div(this.n);
                if (!adjustCount || adjustCount.cmpn(100) > 0) {
                    this.redN = null;
                } else {
                    this._maxwellTrick = true;
                    this.redN = this.n.toRed(this.red);
                }
            }

            module.exports = BaseCurve;

            BaseCurve.prototype.point = function point() {
                throw new Error('Not implemented');
            };

            BaseCurve.prototype.validate = function validate() {
                throw new Error('Not implemented');
            };

            BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
                assert(p.precomputed);
                var doubles = p._getDoubles();

                var naf = getNAF(k, 1);
                var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
                I /= 3;

                // Translate into more windowed form
                var repr = [];
                for (var j = 0; j < naf.length; j += doubles.step) {
                    var nafW = 0;
                    for (var k = j + doubles.step - 1; k >= j; k--)
                        nafW = (nafW << 1) + naf[k];
                    repr.push(nafW);
                }

                var a = this.jpoint(null, null, null);
                var b = this.jpoint(null, null, null);
                for (var i = I; i > 0; i--) {
                    for (var j = 0; j < repr.length; j++) {
                        var nafW = repr[j];
                        if (nafW === i)
                            b = b.mixedAdd(doubles.points[j]);
                        else if (nafW === -i)
                            b = b.mixedAdd(doubles.points[j].neg());
                    }
                    a = a.add(b);
                }
                return a.toP();
            };

            BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
                var w = 4;

                // Precompute window
                var nafPoints = p._getNAFPoints(w);
                w = nafPoints.wnd;
                var wnd = nafPoints.points;

                // Get NAF form
                var naf = getNAF(k, w);

                // Add `this`*(N+1) for every w-NAF index
                var acc = this.jpoint(null, null, null);
                for (var i = naf.length - 1; i >= 0; i--) {
                    // Count zeroes
                    for (var k = 0; i >= 0 && naf[i] === 0; i--)
                        k++;
                    if (i >= 0)
                        k++;
                    acc = acc.dblp(k);

                    if (i < 0)
                        break;
                    var z = naf[i];
                    assert(z !== 0);
                    if (p.type === 'affine') {
                        // J +- P
                        if (z > 0)
                            acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
                        else
                            acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
                    } else {
                        // J +- J
                        if (z > 0)
                            acc = acc.add(wnd[(z - 1) >> 1]);
                        else
                            acc = acc.add(wnd[(-z - 1) >> 1].neg());
                    }
                }
                return p.type === 'affine' ? acc.toP() : acc;
            };

            BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
                                                                   points,
                                                                   coeffs,
                                                                   len,
                                                                   jacobianResult) {
                var wndWidth = this._wnafT1;
                var wnd = this._wnafT2;
                var naf = this._wnafT3;

                // Fill all arrays
                var max = 0;
                for (var i = 0; i < len; i++) {
                    var p = points[i];
                    var nafPoints = p._getNAFPoints(defW);
                    wndWidth[i] = nafPoints.wnd;
                    wnd[i] = nafPoints.points;
                }

                // Comb small window NAFs
                for (var i = len - 1; i >= 1; i -= 2) {
                    var a = i - 1;
                    var b = i;
                    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
                        naf[a] = getNAF(coeffs[a], wndWidth[a]);
                        naf[b] = getNAF(coeffs[b], wndWidth[b]);
                        max = Math.max(naf[a].length, max);
                        max = Math.max(naf[b].length, max);
                        continue;
                    }

                    var comb = [
                        points[a], /* 1 */
                        null, /* 3 */
                        null, /* 5 */
                        points[b] /* 7 */
                    ];

                    // Try to avoid Projective points, if possible
                    if (points[a].y.cmp(points[b].y) === 0) {
                        comb[1] = points[a].add(points[b]);
                        comb[2] = points[a].toJ().mixedAdd(points[b].neg());
                    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
                        comb[1] = points[a].toJ().mixedAdd(points[b]);
                        comb[2] = points[a].add(points[b].neg());
                    } else {
                        comb[1] = points[a].toJ().mixedAdd(points[b]);
                        comb[2] = points[a].toJ().mixedAdd(points[b].neg());
                    }

                    var index = [
                        -3, /* -1 -1 */
                        -1, /* -1 0 */
                        -5, /* -1 1 */
                        -7, /* 0 -1 */
                        0, /* 0 0 */
                        7, /* 0 1 */
                        5, /* 1 -1 */
                        1, /* 1 0 */
                        3  /* 1 1 */
                    ];

                    var jsf = getJSF(coeffs[a], coeffs[b]);
                    max = Math.max(jsf[0].length, max);
                    naf[a] = new Array(max);
                    naf[b] = new Array(max);
                    for (var j = 0; j < max; j++) {
                        var ja = jsf[0][j] | 0;
                        var jb = jsf[1][j] | 0;

                        naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
                        naf[b][j] = 0;
                        wnd[a] = comb;
                    }
                }

                var acc = this.jpoint(null, null, null);
                var tmp = this._wnafT4;
                for (var i = max; i >= 0; i--) {
                    var k = 0;

                    while (i >= 0) {
                        var zero = true;
                        for (var j = 0; j < len; j++) {
                            tmp[j] = naf[j][i] | 0;
                            if (tmp[j] !== 0)
                                zero = false;
                        }
                        if (!zero)
                            break;
                        k++;
                        i--;
                    }
                    if (i >= 0)
                        k++;
                    acc = acc.dblp(k);
                    if (i < 0)
                        break;

                    for (var j = 0; j < len; j++) {
                        var z = tmp[j];
                        var p;
                        if (z === 0)
                            continue;
                        else if (z > 0)
                            p = wnd[j][(z - 1) >> 1];
                        else if (z < 0)
                            p = wnd[j][(-z - 1) >> 1].neg();

                        if (p.type === 'affine')
                            acc = acc.mixedAdd(p);
                        else
                            acc = acc.add(p);
                    }
                }
                // Zeroify references
                for (var i = 0; i < len; i++)
                    wnd[i] = null;

                if (jacobianResult)
                    return acc;
                else
                    return acc.toP();
            };

            function BasePoint(curve, type) {
                this.curve = curve;
                this.type = type;
                this.precomputed = null;
            }

            BaseCurve.BasePoint = BasePoint;

            BasePoint.prototype.eq = function eq(/*other*/) {
                throw new Error('Not implemented');
            };

            BasePoint.prototype.validate = function validate() {
                return this.curve.validate(this);
            };

            BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
                bytes = utils.toArray(bytes, enc);

                var len = this.p.byteLength();

                // uncompressed, hybrid-odd, hybrid-even
                if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
                    bytes.length - 1 === 2 * len) {
                    if (bytes[0] === 0x06)
                        assert(bytes[bytes.length - 1] % 2 === 0);
                    else if (bytes[0] === 0x07)
                        assert(bytes[bytes.length - 1] % 2 === 1);

                    var res = this.point(bytes.slice(1, 1 + len),
                        bytes.slice(1 + len, 1 + 2 * len));

                    return res;
                } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
                    bytes.length - 1 === len) {
                    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
                }
                throw new Error('Unknown point format');
            };

            BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
                return this.encode(enc, true);
            };

            BasePoint.prototype._encode = function _encode(compact) {
                var len = this.curve.p.byteLength();
                var x = this.getX().toArray('be', len);

                if (compact)
                    return [this.getY().isEven() ? 0x02 : 0x03].concat(x);

                return [0x04].concat(x, this.getY().toArray('be', len));
            };

            BasePoint.prototype.encode = function encode(enc, compact) {
                return utils.encode(this._encode(compact), enc);
            };

            BasePoint.prototype.precompute = function precompute(power) {
                if (this.precomputed)
                    return this;

                var precomputed = {
                    doubles: null,
                    naf: null,
                    beta: null
                };
                precomputed.naf = this._getNAFPoints(8);
                precomputed.doubles = this._getDoubles(4, power);
                precomputed.beta = this._getBeta();
                this.precomputed = precomputed;

                return this;
            };

            BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
                if (!this.precomputed)
                    return false;

                var doubles = this.precomputed.doubles;
                if (!doubles)
                    return false;

                return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
            };

            BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
                if (this.precomputed && this.precomputed.doubles)
                    return this.precomputed.doubles;

                var doubles = [this];
                var acc = this;
                for (var i = 0; i < power; i += step) {
                    for (var j = 0; j < step; j++)
                        acc = acc.dbl();
                    doubles.push(acc);
                }
                return {
                    step: step,
                    points: doubles
                };
            };

            BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
                if (this.precomputed && this.precomputed.naf)
                    return this.precomputed.naf;

                var res = [this];
                var max = (1 << wnd) - 1;
                var dbl = max === 1 ? null : this.dbl();
                for (var i = 1; i < max; i++)
                    res[i] = res[i - 1].add(dbl);
                return {
                    wnd: wnd,
                    points: res
                };
            };

            BasePoint.prototype._getBeta = function _getBeta() {
                return null;
            };

            BasePoint.prototype.dblp = function dblp(k) {
                var r = this;
                for (var i = 0; i < k; i++)
                    r = r.dbl();
                return r;
            };

        }, {"../../elliptic": 111, "bn.js": 20}],
        113: [function (require, module, exports) {
            'use strict';

            var curve = require('../curve');
            var elliptic = require('../../elliptic');
            var BN = require('bn.js');
            var inherits = require('inherits');
            var Base = curve.base;

            var assert = elliptic.utils.assert;

            function EdwardsCurve(conf) {
                // NOTE: Important as we are creating point in Base.call()
                this.twisted = (conf.a | 0) !== 1;
                this.mOneA = this.twisted && (conf.a | 0) === -1;
                this.extended = this.mOneA;

                Base.call(this, 'edwards', conf);

                this.a = new BN(conf.a, 16).umod(this.red.m);
                this.a = this.a.toRed(this.red);
                this.c = new BN(conf.c, 16).toRed(this.red);
                this.c2 = this.c.redSqr();
                this.d = new BN(conf.d, 16).toRed(this.red);
                this.dd = this.d.redAdd(this.d);

                assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
                this.oneC = (conf.c | 0) === 1;
            }

            inherits(EdwardsCurve, Base);
            module.exports = EdwardsCurve;

            EdwardsCurve.prototype._mulA = function _mulA(num) {
                if (this.mOneA)
                    return num.redNeg();
                else
                    return this.a.redMul(num);
            };

            EdwardsCurve.prototype._mulC = function _mulC(num) {
                if (this.oneC)
                    return num;
                else
                    return this.c.redMul(num);
            };

// Just for compatibility with Short curve
            EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
                return this.point(x, y, z, t);
            };

            EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
                x = new BN(x, 16);
                if (!x.red)
                    x = x.toRed(this.red);

                var x2 = x.redSqr();
                var rhs = this.c2.redSub(this.a.redMul(x2));
                var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

                var y2 = rhs.redMul(lhs.redInvm());
                var y = y2.redSqrt();
                if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
                    throw new Error('invalid point');

                var isOdd = y.fromRed().isOdd();
                if (odd && !isOdd || !odd && isOdd)
                    y = y.redNeg();

                return this.point(x, y);
            };

            EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
                y = new BN(y, 16);
                if (!y.red)
                    y = y.toRed(this.red);

                // x^2 = (y^2 - 1) / (d y^2 + 1)
                var y2 = y.redSqr();
                var lhs = y2.redSub(this.one);
                var rhs = y2.redMul(this.d).redAdd(this.one);
                var x2 = lhs.redMul(rhs.redInvm());

                if (x2.cmp(this.zero) === 0) {
                    if (odd)
                        throw new Error('invalid point');
                    else
                        return this.point(this.zero, y);
                }

                var x = x2.redSqrt();
                if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
                    throw new Error('invalid point');

                if (x.isOdd() !== odd)
                    x = x.redNeg();

                return this.point(x, y);
            };

            EdwardsCurve.prototype.validate = function validate(point) {
                if (point.isInfinity())
                    return true;

                // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
                point.normalize();

                var x2 = point.x.redSqr();
                var y2 = point.y.redSqr();
                var lhs = x2.redMul(this.a).redAdd(y2);
                var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

                return lhs.cmp(rhs) === 0;
            };

            function Point(curve, x, y, z, t) {
                Base.BasePoint.call(this, curve, 'projective');
                if (x === null && y === null && z === null) {
                    this.x = this.curve.zero;
                    this.y = this.curve.one;
                    this.z = this.curve.one;
                    this.t = this.curve.zero;
                    this.zOne = true;
                } else {
                    this.x = new BN(x, 16);
                    this.y = new BN(y, 16);
                    this.z = z ? new BN(z, 16) : this.curve.one;
                    this.t = t && new BN(t, 16);
                    if (!this.x.red)
                        this.x = this.x.toRed(this.curve.red);
                    if (!this.y.red)
                        this.y = this.y.toRed(this.curve.red);
                    if (!this.z.red)
                        this.z = this.z.toRed(this.curve.red);
                    if (this.t && !this.t.red)
                        this.t = this.t.toRed(this.curve.red);
                    this.zOne = this.z === this.curve.one;

                    // Use extended coordinates
                    if (this.curve.extended && !this.t) {
                        this.t = this.x.redMul(this.y);
                        if (!this.zOne)
                            this.t = this.t.redMul(this.z.redInvm());
                    }
                }
            }

            inherits(Point, Base.BasePoint);

            EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
                return Point.fromJSON(this, obj);
            };

            EdwardsCurve.prototype.point = function point(x, y, z, t) {
                return new Point(this, x, y, z, t);
            };

            Point.fromJSON = function fromJSON(curve, obj) {
                return new Point(curve, obj[0], obj[1], obj[2]);
            };

            Point.prototype.inspect = function inspect() {
                if (this.isInfinity())
                    return '<EC Point Infinity>';
                return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
                    ' y: ' + this.y.fromRed().toString(16, 2) +
                    ' z: ' + this.z.fromRed().toString(16, 2) + '>';
            };

            Point.prototype.isInfinity = function isInfinity() {
                // XXX This code assumes that zero is always zero in red
                return this.x.cmpn(0) === 0 &&
                    this.y.cmp(this.z) === 0;
            };

            Point.prototype._extDbl = function _extDbl() {
                // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
                //     #doubling-dbl-2008-hwcd
                // 4M + 4S

                // A = X1^2
                var a = this.x.redSqr();
                // B = Y1^2
                var b = this.y.redSqr();
                // C = 2 * Z1^2
                var c = this.z.redSqr();
                c = c.redIAdd(c);
                // D = a * A
                var d = this.curve._mulA(a);
                // E = (X1 + Y1)^2 - A - B
                var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
                // G = D + B
                var g = d.redAdd(b);
                // F = G - C
                var f = g.redSub(c);
                // H = D - B
                var h = d.redSub(b);
                // X3 = E * F
                var nx = e.redMul(f);
                // Y3 = G * H
                var ny = g.redMul(h);
                // T3 = E * H
                var nt = e.redMul(h);
                // Z3 = F * G
                var nz = f.redMul(g);
                return this.curve.point(nx, ny, nz, nt);
            };

            Point.prototype._projDbl = function _projDbl() {
                // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
                //     #doubling-dbl-2008-bbjlp
                //     #doubling-dbl-2007-bl
                // and others
                // Generally 3M + 4S or 2M + 4S

                // B = (X1 + Y1)^2
                var b = this.x.redAdd(this.y).redSqr();
                // C = X1^2
                var c = this.x.redSqr();
                // D = Y1^2
                var d = this.y.redSqr();

                var nx;
                var ny;
                var nz;
                if (this.curve.twisted) {
                    // E = a * C
                    var e = this.curve._mulA(c);
                    // F = E + D
                    var f = e.redAdd(d);
                    if (this.zOne) {
                        // X3 = (B - C - D) * (F - 2)
                        nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
                        // Y3 = F * (E - D)
                        ny = f.redMul(e.redSub(d));
                        // Z3 = F^2 - 2 * F
                        nz = f.redSqr().redSub(f).redSub(f);
                    } else {
                        // H = Z1^2
                        var h = this.z.redSqr();
                        // J = F - 2 * H
                        var j = f.redSub(h).redISub(h);
                        // X3 = (B-C-D)*J
                        nx = b.redSub(c).redISub(d).redMul(j);
                        // Y3 = F * (E - D)
                        ny = f.redMul(e.redSub(d));
                        // Z3 = F * J
                        nz = f.redMul(j);
                    }
                } else {
                    // E = C + D
                    var e = c.redAdd(d);
                    // H = (c * Z1)^2
                    var h = this.curve._mulC(this.c.redMul(this.z)).redSqr();
                    // J = E - 2 * H
                    var j = e.redSub(h).redSub(h);
                    // X3 = c * (B - E) * J
                    nx = this.curve._mulC(b.redISub(e)).redMul(j);
                    // Y3 = c * E * (C - D)
                    ny = this.curve._mulC(e).redMul(c.redISub(d));
                    // Z3 = E * J
                    nz = e.redMul(j);
                }
                return this.curve.point(nx, ny, nz);
            };

            Point.prototype.dbl = function dbl() {
                if (this.isInfinity())
                    return this;

                // Double in extended coordinates
                if (this.curve.extended)
                    return this._extDbl();
                else
                    return this._projDbl();
            };

            Point.prototype._extAdd = function _extAdd(p) {
                // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
                //     #addition-add-2008-hwcd-3
                // 8M

                // A = (Y1 - X1) * (Y2 - X2)
                var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
                // B = (Y1 + X1) * (Y2 + X2)
                var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
                // C = T1 * k * T2
                var c = this.t.redMul(this.curve.dd).redMul(p.t);
                // D = Z1 * 2 * Z2
                var d = this.z.redMul(p.z.redAdd(p.z));
                // E = B - A
                var e = b.redSub(a);
                // F = D - C
                var f = d.redSub(c);
                // G = D + C
                var g = d.redAdd(c);
                // H = B + A
                var h = b.redAdd(a);
                // X3 = E * F
                var nx = e.redMul(f);
                // Y3 = G * H
                var ny = g.redMul(h);
                // T3 = E * H
                var nt = e.redMul(h);
                // Z3 = F * G
                var nz = f.redMul(g);
                return this.curve.point(nx, ny, nz, nt);
            };

            Point.prototype._projAdd = function _projAdd(p) {
                // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
                //     #addition-add-2008-bbjlp
                //     #addition-add-2007-bl
                // 10M + 1S

                // A = Z1 * Z2
                var a = this.z.redMul(p.z);
                // B = A^2
                var b = a.redSqr();
                // C = X1 * X2
                var c = this.x.redMul(p.x);
                // D = Y1 * Y2
                var d = this.y.redMul(p.y);
                // E = d * C * D
                var e = this.curve.d.redMul(c).redMul(d);
                // F = B - E
                var f = b.redSub(e);
                // G = B + E
                var g = b.redAdd(e);
                // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
                var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
                var nx = a.redMul(f).redMul(tmp);
                var ny;
                var nz;
                if (this.curve.twisted) {
                    // Y3 = A * G * (D - a * C)
                    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
                    // Z3 = F * G
                    nz = f.redMul(g);
                } else {
                    // Y3 = A * G * (D - C)
                    ny = a.redMul(g).redMul(d.redSub(c));
                    // Z3 = c * F * G
                    nz = this.curve._mulC(f).redMul(g);
                }
                return this.curve.point(nx, ny, nz);
            };

            Point.prototype.add = function add(p) {
                if (this.isInfinity())
                    return p;
                if (p.isInfinity())
                    return this;

                if (this.curve.extended)
                    return this._extAdd(p);
                else
                    return this._projAdd(p);
            };

            Point.prototype.mul = function mul(k) {
                if (this._hasDoubles(k))
                    return this.curve._fixedNafMul(this, k);
                else
                    return this.curve._wnafMul(this, k);
            };

            Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
                return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, false);
            };

            Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
                return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, true);
            };

            Point.prototype.normalize = function normalize() {
                if (this.zOne)
                    return this;

                // Normalize coordinates
                var zi = this.z.redInvm();
                this.x = this.x.redMul(zi);
                this.y = this.y.redMul(zi);
                if (this.t)
                    this.t = this.t.redMul(zi);
                this.z = this.curve.one;
                this.zOne = true;
                return this;
            };

            Point.prototype.neg = function neg() {
                return this.curve.point(this.x.redNeg(),
                    this.y,
                    this.z,
                    this.t && this.t.redNeg());
            };

            Point.prototype.getX = function getX() {
                this.normalize();
                return this.x.fromRed();
            };

            Point.prototype.getY = function getY() {
                this.normalize();
                return this.y.fromRed();
            };

            Point.prototype.eq = function eq(other) {
                return this === other ||
                    this.getX().cmp(other.getX()) === 0 &&
                    this.getY().cmp(other.getY()) === 0;
            };

            Point.prototype.eqXToP = function eqXToP(x) {
                var rx = x.toRed(this.curve.red).redMul(this.z);
                if (this.x.cmp(rx) === 0)
                    return true;

                var xc = x.clone();
                var t = this.curve.redN.redMul(this.z);
                for (; ;) {
                    xc.iadd(this.curve.n);
                    if (xc.cmp(this.curve.p) >= 0)
                        return false;

                    rx.redIAdd(t);
                    if (this.x.cmp(rx) === 0)
                        return true;
                }
                return false;
            };

// Compatibility with BaseCurve
            Point.prototype.toP = Point.prototype.normalize;
            Point.prototype.mixedAdd = Point.prototype.add;

        }, {"../../elliptic": 111, "../curve": 114, "bn.js": 20, "inherits": 143}],
        114: [function (require, module, exports) {
            'use strict';

            var curve = exports;

            curve.base = require('./base');
            curve.short = require('./short');
            curve.mont = require('./mont');
            curve.edwards = require('./edwards');

        }, {"./base": 112, "./edwards": 113, "./mont": 115, "./short": 116}],
        115: [function (require, module, exports) {
            'use strict';

            var curve = require('../curve');
            var BN = require('bn.js');
            var inherits = require('inherits');
            var Base = curve.base;

            var elliptic = require('../../elliptic');
            var utils = elliptic.utils;

            function MontCurve(conf) {
                Base.call(this, 'mont', conf);

                this.a = new BN(conf.a, 16).toRed(this.red);
                this.b = new BN(conf.b, 16).toRed(this.red);
                this.i4 = new BN(4).toRed(this.red).redInvm();
                this.two = new BN(2).toRed(this.red);
                this.a24 = this.i4.redMul(this.a.redAdd(this.two));
            }

            inherits(MontCurve, Base);
            module.exports = MontCurve;

            MontCurve.prototype.validate = function validate(point) {
                var x = point.normalize().x;
                var x2 = x.redSqr();
                var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
                var y = rhs.redSqrt();

                return y.redSqr().cmp(rhs) === 0;
            };

            function Point(curve, x, z) {
                Base.BasePoint.call(this, curve, 'projective');
                if (x === null && z === null) {
                    this.x = this.curve.one;
                    this.z = this.curve.zero;
                } else {
                    this.x = new BN(x, 16);
                    this.z = new BN(z, 16);
                    if (!this.x.red)
                        this.x = this.x.toRed(this.curve.red);
                    if (!this.z.red)
                        this.z = this.z.toRed(this.curve.red);
                }
            }

            inherits(Point, Base.BasePoint);

            MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
                return this.point(utils.toArray(bytes, enc), 1);
            };

            MontCurve.prototype.point = function point(x, z) {
                return new Point(this, x, z);
            };

            MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
                return Point.fromJSON(this, obj);
            };

            Point.prototype.precompute = function precompute() {
                // No-op
            };

            Point.prototype._encode = function _encode() {
                return this.getX().toArray('be', this.curve.p.byteLength());
            };

            Point.fromJSON = function fromJSON(curve, obj) {
                return new Point(curve, obj[0], obj[1] || curve.one);
            };

            Point.prototype.inspect = function inspect() {
                if (this.isInfinity())
                    return '<EC Point Infinity>';
                return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
                    ' z: ' + this.z.fromRed().toString(16, 2) + '>';
            };

            Point.prototype.isInfinity = function isInfinity() {
                // XXX This code assumes that zero is always zero in red
                return this.z.cmpn(0) === 0;
            };

            Point.prototype.dbl = function dbl() {
                // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
                // 2M + 2S + 4A

                // A = X1 + Z1
                var a = this.x.redAdd(this.z);
                // AA = A^2
                var aa = a.redSqr();
                // B = X1 - Z1
                var b = this.x.redSub(this.z);
                // BB = B^2
                var bb = b.redSqr();
                // C = AA - BB
                var c = aa.redSub(bb);
                // X3 = AA * BB
                var nx = aa.redMul(bb);
                // Z3 = C * (BB + A24 * C)
                var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
                return this.curve.point(nx, nz);
            };

            Point.prototype.add = function add() {
                throw new Error('Not supported on Montgomery curve');
            };

            Point.prototype.diffAdd = function diffAdd(p, diff) {
                // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
                // 4M + 2S + 6A

                // A = X2 + Z2
                var a = this.x.redAdd(this.z);
                // B = X2 - Z2
                var b = this.x.redSub(this.z);
                // C = X3 + Z3
                var c = p.x.redAdd(p.z);
                // D = X3 - Z3
                var d = p.x.redSub(p.z);
                // DA = D * A
                var da = d.redMul(a);
                // CB = C * B
                var cb = c.redMul(b);
                // X5 = Z1 * (DA + CB)^2
                var nx = diff.z.redMul(da.redAdd(cb).redSqr());
                // Z5 = X1 * (DA - CB)^2
                var nz = diff.x.redMul(da.redISub(cb).redSqr());
                return this.curve.point(nx, nz);
            };

            Point.prototype.mul = function mul(k) {
                var t = k.clone();
                var a = this; // (N / 2) * Q + Q
                var b = this.curve.point(null, null); // (N / 2) * Q
                var c = this; // Q

                for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
                    bits.push(t.andln(1));

                for (var i = bits.length - 1; i >= 0; i--) {
                    if (bits[i] === 0) {
                        // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
                        a = a.diffAdd(b, c);
                        // N * Q = 2 * ((N / 2) * Q + Q))
                        b = b.dbl();
                    } else {
                        // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
                        b = a.diffAdd(b, c);
                        // N * Q + Q = 2 * ((N / 2) * Q + Q)
                        a = a.dbl();
                    }
                }
                return b;
            };

            Point.prototype.mulAdd = function mulAdd() {
                throw new Error('Not supported on Montgomery curve');
            };

            Point.prototype.jumlAdd = function jumlAdd() {
                throw new Error('Not supported on Montgomery curve');
            };

            Point.prototype.eq = function eq(other) {
                return this.getX().cmp(other.getX()) === 0;
            };

            Point.prototype.normalize = function normalize() {
                this.x = this.x.redMul(this.z.redInvm());
                this.z = this.curve.one;
                return this;
            };

            Point.prototype.getX = function getX() {
                // Normalize coordinates
                this.normalize();

                return this.x.fromRed();
            };

        }, {"../../elliptic": 111, "../curve": 114, "bn.js": 20, "inherits": 143}],
        116: [function (require, module, exports) {
            'use strict';

            var curve = require('../curve');
            var elliptic = require('../../elliptic');
            var BN = require('bn.js');
            var inherits = require('inherits');
            var Base = curve.base;

            var assert = elliptic.utils.assert;

            function ShortCurve(conf) {
                Base.call(this, 'short', conf);

                this.a = new BN(conf.a, 16).toRed(this.red);
                this.b = new BN(conf.b, 16).toRed(this.red);
                this.tinv = this.two.redInvm();

                this.zeroA = this.a.fromRed().cmpn(0) === 0;
                this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

                // If the curve is endomorphic, precalculate beta and lambda
                this.endo = this._getEndomorphism(conf);
                this._endoWnafT1 = new Array(4);
                this._endoWnafT2 = new Array(4);
            }

            inherits(ShortCurve, Base);
            module.exports = ShortCurve;

            ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
                // No efficient endomorphism
                if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
                    return;

                // Compute beta and lambda, that lambda * P = (beta * Px; Py)
                var beta;
                var lambda;
                if (conf.beta) {
                    beta = new BN(conf.beta, 16).toRed(this.red);
                } else {
                    var betas = this._getEndoRoots(this.p);
                    // Choose the smallest beta
                    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
                    beta = beta.toRed(this.red);
                }
                if (conf.lambda) {
                    lambda = new BN(conf.lambda, 16);
                } else {
                    // Choose the lambda that is matching selected beta
                    var lambdas = this._getEndoRoots(this.n);
                    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
                        lambda = lambdas[0];
                    } else {
                        lambda = lambdas[1];
                        assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
                    }
                }

                // Get basis vectors, used for balanced length-two representation
                var basis;
                if (conf.basis) {
                    basis = conf.basis.map(function (vec) {
                        return {
                            a: new BN(vec.a, 16),
                            b: new BN(vec.b, 16)
                        };
                    });
                } else {
                    basis = this._getEndoBasis(lambda);
                }

                return {
                    beta: beta,
                    lambda: lambda,
                    basis: basis
                };
            };

            ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
                // Find roots of for x^2 + x + 1 in F
                // Root = (-1 +- Sqrt(-3)) / 2
                //
                var red = num === this.p ? this.red : BN.mont(num);
                var tinv = new BN(2).toRed(red).redInvm();
                var ntinv = tinv.redNeg();

                var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);

                var l1 = ntinv.redAdd(s).fromRed();
                var l2 = ntinv.redSub(s).fromRed();
                return [l1, l2];
            };

            ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
                // aprxSqrt >= sqrt(this.n)
                var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

                // 3.74
                // Run EGCD, until r(L + 1) < aprxSqrt
                var u = lambda;
                var v = this.n.clone();
                var x1 = new BN(1);
                var y1 = new BN(0);
                var x2 = new BN(0);
                var y2 = new BN(1);

                // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
                var a0;
                var b0;
                // First vector
                var a1;
                var b1;
                // Second vector
                var a2;
                var b2;

                var prevR;
                var i = 0;
                var r;
                var x;
                while (u.cmpn(0) !== 0) {
                    var q = v.div(u);
                    r = v.sub(q.mul(u));
                    x = x2.sub(q.mul(x1));
                    var y = y2.sub(q.mul(y1));

                    if (!a1 && r.cmp(aprxSqrt) < 0) {
                        a0 = prevR.neg();
                        b0 = x1;
                        a1 = r.neg();
                        b1 = x;
                    } else if (a1 && ++i === 2) {
                        break;
                    }
                    prevR = r;

                    v = u;
                    u = r;
                    x2 = x1;
                    x1 = x;
                    y2 = y1;
                    y1 = y;
                }
                a2 = r.neg();
                b2 = x;

                var len1 = a1.sqr().add(b1.sqr());
                var len2 = a2.sqr().add(b2.sqr());
                if (len2.cmp(len1) >= 0) {
                    a2 = a0;
                    b2 = b0;
                }

                // Normalize signs
                if (a1.negative) {
                    a1 = a1.neg();
                    b1 = b1.neg();
                }
                if (a2.negative) {
                    a2 = a2.neg();
                    b2 = b2.neg();
                }

                return [
                    {a: a1, b: b1},
                    {a: a2, b: b2}
                ];
            };

            ShortCurve.prototype._endoSplit = function _endoSplit(k) {
                var basis = this.endo.basis;
                var v1 = basis[0];
                var v2 = basis[1];

                var c1 = v2.b.mul(k).divRound(this.n);
                var c2 = v1.b.neg().mul(k).divRound(this.n);

                var p1 = c1.mul(v1.a);
                var p2 = c2.mul(v2.a);
                var q1 = c1.mul(v1.b);
                var q2 = c2.mul(v2.b);

                // Calculate answer
                var k1 = k.sub(p1).sub(p2);
                var k2 = q1.add(q2).neg();
                return {k1: k1, k2: k2};
            };

            ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
                x = new BN(x, 16);
                if (!x.red)
                    x = x.toRed(this.red);

                var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
                var y = y2.redSqrt();
                if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
                    throw new Error('invalid point');

                // XXX Is there any way to tell if the number is odd without converting it
                // to non-red form?
                var isOdd = y.fromRed().isOdd();
                if (odd && !isOdd || !odd && isOdd)
                    y = y.redNeg();

                return this.point(x, y);
            };

            ShortCurve.prototype.validate = function validate(point) {
                if (point.inf)
                    return true;

                var x = point.x;
                var y = point.y;

                var ax = this.a.redMul(x);
                var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
                return y.redSqr().redISub(rhs).cmpn(0) === 0;
            };

            ShortCurve.prototype._endoWnafMulAdd =
                function _endoWnafMulAdd(points, coeffs, jacobianResult) {
                    var npoints = this._endoWnafT1;
                    var ncoeffs = this._endoWnafT2;
                    for (var i = 0; i < points.length; i++) {
                        var split = this._endoSplit(coeffs[i]);
                        var p = points[i];
                        var beta = p._getBeta();

                        if (split.k1.negative) {
                            split.k1.ineg();
                            p = p.neg(true);
                        }
                        if (split.k2.negative) {
                            split.k2.ineg();
                            beta = beta.neg(true);
                        }

                        npoints[i * 2] = p;
                        npoints[i * 2 + 1] = beta;
                        ncoeffs[i * 2] = split.k1;
                        ncoeffs[i * 2 + 1] = split.k2;
                    }
                    var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

                    // Clean-up references to points and coefficients
                    for (var j = 0; j < i * 2; j++) {
                        npoints[j] = null;
                        ncoeffs[j] = null;
                    }
                    return res;
                };

            function Point(curve, x, y, isRed) {
                Base.BasePoint.call(this, curve, 'affine');
                if (x === null && y === null) {
                    this.x = null;
                    this.y = null;
                    this.inf = true;
                } else {
                    this.x = new BN(x, 16);
                    this.y = new BN(y, 16);
                    // Force redgomery representation when loading from JSON
                    if (isRed) {
                        this.x.forceRed(this.curve.red);
                        this.y.forceRed(this.curve.red);
                    }
                    if (!this.x.red)
                        this.x = this.x.toRed(this.curve.red);
                    if (!this.y.red)
                        this.y = this.y.toRed(this.curve.red);
                    this.inf = false;
                }
            }

            inherits(Point, Base.BasePoint);

            ShortCurve.prototype.point = function point(x, y, isRed) {
                return new Point(this, x, y, isRed);
            };

            ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
                return Point.fromJSON(this, obj, red);
            };

            Point.prototype._getBeta = function _getBeta() {
                if (!this.curve.endo)
                    return;

                var pre = this.precomputed;
                if (pre && pre.beta)
                    return pre.beta;

                var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
                if (pre) {
                    var curve = this.curve;
                    var endoMul = function (p) {
                        return curve.point(p.x.redMul(curve.endo.beta), p.y);
                    };
                    pre.beta = beta;
                    beta.precomputed = {
                        beta: null,
                        naf: pre.naf && {
                            wnd: pre.naf.wnd,
                            points: pre.naf.points.map(endoMul)
                        },
                        doubles: pre.doubles && {
                            step: pre.doubles.step,
                            points: pre.doubles.points.map(endoMul)
                        }
                    };
                }
                return beta;
            };

            Point.prototype.toJSON = function toJSON() {
                if (!this.precomputed)
                    return [this.x, this.y];

                return [this.x, this.y, this.precomputed && {
                    doubles: this.precomputed.doubles && {
                        step: this.precomputed.doubles.step,
                        points: this.precomputed.doubles.points.slice(1)
                    },
                    naf: this.precomputed.naf && {
                        wnd: this.precomputed.naf.wnd,
                        points: this.precomputed.naf.points.slice(1)
                    }
                }];
            };

            Point.fromJSON = function fromJSON(curve, obj, red) {
                if (typeof obj === 'string')
                    obj = JSON.parse(obj);
                var res = curve.point(obj[0], obj[1], red);
                if (!obj[2])
                    return res;

                function obj2point(obj) {
                    return curve.point(obj[0], obj[1], red);
                }

                var pre = obj[2];
                res.precomputed = {
                    beta: null,
                    doubles: pre.doubles && {
                        step: pre.doubles.step,
                        points: [res].concat(pre.doubles.points.map(obj2point))
                    },
                    naf: pre.naf && {
                        wnd: pre.naf.wnd,
                        points: [res].concat(pre.naf.points.map(obj2point))
                    }
                };
                return res;
            };

            Point.prototype.inspect = function inspect() {
                if (this.isInfinity())
                    return '<EC Point Infinity>';
                return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
                    ' y: ' + this.y.fromRed().toString(16, 2) + '>';
            };

            Point.prototype.isInfinity = function isInfinity() {
                return this.inf;
            };

            Point.prototype.add = function add(p) {
                // O + P = P
                if (this.inf)
                    return p;

                // P + O = P
                if (p.inf)
                    return this;

                // P + P = 2P
                if (this.eq(p))
                    return this.dbl();

                // P + (-P) = O
                if (this.neg().eq(p))
                    return this.curve.point(null, null);

                // P + Q = O
                if (this.x.cmp(p.x) === 0)
                    return this.curve.point(null, null);

                var c = this.y.redSub(p.y);
                if (c.cmpn(0) !== 0)
                    c = c.redMul(this.x.redSub(p.x).redInvm());
                var nx = c.redSqr().redISub(this.x).redISub(p.x);
                var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
                return this.curve.point(nx, ny);
            };

            Point.prototype.dbl = function dbl() {
                if (this.inf)
                    return this;

                // 2P = O
                var ys1 = this.y.redAdd(this.y);
                if (ys1.cmpn(0) === 0)
                    return this.curve.point(null, null);

                var a = this.curve.a;

                var x2 = this.x.redSqr();
                var dyinv = ys1.redInvm();
                var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

                var nx = c.redSqr().redISub(this.x.redAdd(this.x));
                var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
                return this.curve.point(nx, ny);
            };

            Point.prototype.getX = function getX() {
                return this.x.fromRed();
            };

            Point.prototype.getY = function getY() {
                return this.y.fromRed();
            };

            Point.prototype.mul = function mul(k) {
                k = new BN(k, 16);

                if (this._hasDoubles(k))
                    return this.curve._fixedNafMul(this, k);
                else if (this.curve.endo)
                    return this.curve._endoWnafMulAdd([this], [k]);
                else
                    return this.curve._wnafMul(this, k);
            };

            Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
                var points = [this, p2];
                var coeffs = [k1, k2];
                if (this.curve.endo)
                    return this.curve._endoWnafMulAdd(points, coeffs);
                else
                    return this.curve._wnafMulAdd(1, points, coeffs, 2);
            };

            Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
                var points = [this, p2];
                var coeffs = [k1, k2];
                if (this.curve.endo)
                    return this.curve._endoWnafMulAdd(points, coeffs, true);
                else
                    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
            };

            Point.prototype.eq = function eq(p) {
                return this === p ||
                    this.inf === p.inf &&
                    (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
            };

            Point.prototype.neg = function neg(_precompute) {
                if (this.inf)
                    return this;

                var res = this.curve.point(this.x, this.y.redNeg());
                if (_precompute && this.precomputed) {
                    var pre = this.precomputed;
                    var negate = function (p) {
                        return p.neg();
                    };
                    res.precomputed = {
                        naf: pre.naf && {
                            wnd: pre.naf.wnd,
                            points: pre.naf.points.map(negate)
                        },
                        doubles: pre.doubles && {
                            step: pre.doubles.step,
                            points: pre.doubles.points.map(negate)
                        }
                    };
                }
                return res;
            };

            Point.prototype.toJ = function toJ() {
                if (this.inf)
                    return this.curve.jpoint(null, null, null);

                var res = this.curve.jpoint(this.x, this.y, this.curve.one);
                return res;
            };

            function JPoint(curve, x, y, z) {
                Base.BasePoint.call(this, curve, 'jacobian');
                if (x === null && y === null && z === null) {
                    this.x = this.curve.one;
                    this.y = this.curve.one;
                    this.z = new BN(0);
                } else {
                    this.x = new BN(x, 16);
                    this.y = new BN(y, 16);
                    this.z = new BN(z, 16);
                }
                if (!this.x.red)
                    this.x = this.x.toRed(this.curve.red);
                if (!this.y.red)
                    this.y = this.y.toRed(this.curve.red);
                if (!this.z.red)
                    this.z = this.z.toRed(this.curve.red);

                this.zOne = this.z === this.curve.one;
            }

            inherits(JPoint, Base.BasePoint);

            ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
                return new JPoint(this, x, y, z);
            };

            JPoint.prototype.toP = function toP() {
                if (this.isInfinity())
                    return this.curve.point(null, null);

                var zinv = this.z.redInvm();
                var zinv2 = zinv.redSqr();
                var ax = this.x.redMul(zinv2);
                var ay = this.y.redMul(zinv2).redMul(zinv);

                return this.curve.point(ax, ay);
            };

            JPoint.prototype.neg = function neg() {
                return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
            };

            JPoint.prototype.add = function add(p) {
                // O + P = P
                if (this.isInfinity())
                    return p;

                // P + O = P
                if (p.isInfinity())
                    return this;

                // 12M + 4S + 7A
                var pz2 = p.z.redSqr();
                var z2 = this.z.redSqr();
                var u1 = this.x.redMul(pz2);
                var u2 = p.x.redMul(z2);
                var s1 = this.y.redMul(pz2.redMul(p.z));
                var s2 = p.y.redMul(z2.redMul(this.z));

                var h = u1.redSub(u2);
                var r = s1.redSub(s2);
                if (h.cmpn(0) === 0) {
                    if (r.cmpn(0) !== 0)
                        return this.curve.jpoint(null, null, null);
                    else
                        return this.dbl();
                }

                var h2 = h.redSqr();
                var h3 = h2.redMul(h);
                var v = u1.redMul(h2);

                var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
                var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
                var nz = this.z.redMul(p.z).redMul(h);

                return this.curve.jpoint(nx, ny, nz);
            };

            JPoint.prototype.mixedAdd = function mixedAdd(p) {
                // O + P = P
                if (this.isInfinity())
                    return p.toJ();

                // P + O = P
                if (p.isInfinity())
                    return this;

                // 8M + 3S + 7A
                var z2 = this.z.redSqr();
                var u1 = this.x;
                var u2 = p.x.redMul(z2);
                var s1 = this.y;
                var s2 = p.y.redMul(z2).redMul(this.z);

                var h = u1.redSub(u2);
                var r = s1.redSub(s2);
                if (h.cmpn(0) === 0) {
                    if (r.cmpn(0) !== 0)
                        return this.curve.jpoint(null, null, null);
                    else
                        return this.dbl();
                }

                var h2 = h.redSqr();
                var h3 = h2.redMul(h);
                var v = u1.redMul(h2);

                var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
                var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
                var nz = this.z.redMul(h);

                return this.curve.jpoint(nx, ny, nz);
            };

            JPoint.prototype.dblp = function dblp(pow) {
                if (pow === 0)
                    return this;
                if (this.isInfinity())
                    return this;
                if (!pow)
                    return this.dbl();

                if (this.curve.zeroA || this.curve.threeA) {
                    var r = this;
                    for (var i = 0; i < pow; i++)
                        r = r.dbl();
                    return r;
                }

                // 1M + 2S + 1A + N * (4S + 5M + 8A)
                // N = 1 => 6M + 6S + 9A
                var a = this.curve.a;
                var tinv = this.curve.tinv;

                var jx = this.x;
                var jy = this.y;
                var jz = this.z;
                var jz4 = jz.redSqr().redSqr();

                // Reuse results
                var jyd = jy.redAdd(jy);
                for (var i = 0; i < pow; i++) {
                    var jx2 = jx.redSqr();
                    var jyd2 = jyd.redSqr();
                    var jyd4 = jyd2.redSqr();
                    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

                    var t1 = jx.redMul(jyd2);
                    var nx = c.redSqr().redISub(t1.redAdd(t1));
                    var t2 = t1.redISub(nx);
                    var dny = c.redMul(t2);
                    dny = dny.redIAdd(dny).redISub(jyd4);
                    var nz = jyd.redMul(jz);
                    if (i + 1 < pow)
                        jz4 = jz4.redMul(jyd4);

                    jx = nx;
                    jz = nz;
                    jyd = dny;
                }

                return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
            };

            JPoint.prototype.dbl = function dbl() {
                if (this.isInfinity())
                    return this;

                if (this.curve.zeroA)
                    return this._zeroDbl();
                else if (this.curve.threeA)
                    return this._threeDbl();
                else
                    return this._dbl();
            };

            JPoint.prototype._zeroDbl = function _zeroDbl() {
                var nx;
                var ny;
                var nz;
                // Z = 1
                if (this.zOne) {
                    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
                    //     #doubling-mdbl-2007-bl
                    // 1M + 5S + 14A

                    // XX = X1^2
                    var xx = this.x.redSqr();
                    // YY = Y1^2
                    var yy = this.y.redSqr();
                    // YYYY = YY^2
                    var yyyy = yy.redSqr();
                    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
                    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
                    s = s.redIAdd(s);
                    // M = 3 * XX + a; a = 0
                    var m = xx.redAdd(xx).redIAdd(xx);
                    // T = M ^ 2 - 2*S
                    var t = m.redSqr().redISub(s).redISub(s);

                    // 8 * YYYY
                    var yyyy8 = yyyy.redIAdd(yyyy);
                    yyyy8 = yyyy8.redIAdd(yyyy8);
                    yyyy8 = yyyy8.redIAdd(yyyy8);

                    // X3 = T
                    nx = t;
                    // Y3 = M * (S - T) - 8 * YYYY
                    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
                    // Z3 = 2*Y1
                    nz = this.y.redAdd(this.y);
                } else {
                    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
                    //     #doubling-dbl-2009-l
                    // 2M + 5S + 13A

                    // A = X1^2
                    var a = this.x.redSqr();
                    // B = Y1^2
                    var b = this.y.redSqr();
                    // C = B^2
                    var c = b.redSqr();
                    // D = 2 * ((X1 + B)^2 - A - C)
                    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
                    d = d.redIAdd(d);
                    // E = 3 * A
                    var e = a.redAdd(a).redIAdd(a);
                    // F = E^2
                    var f = e.redSqr();

                    // 8 * C
                    var c8 = c.redIAdd(c);
                    c8 = c8.redIAdd(c8);
                    c8 = c8.redIAdd(c8);

                    // X3 = F - 2 * D
                    nx = f.redISub(d).redISub(d);
                    // Y3 = E * (D - X3) - 8 * C
                    ny = e.redMul(d.redISub(nx)).redISub(c8);
                    // Z3 = 2 * Y1 * Z1
                    nz = this.y.redMul(this.z);
                    nz = nz.redIAdd(nz);
                }

                return this.curve.jpoint(nx, ny, nz);
            };

            JPoint.prototype._threeDbl = function _threeDbl() {
                var nx;
                var ny;
                var nz;
                // Z = 1
                if (this.zOne) {
                    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
                    //     #doubling-mdbl-2007-bl
                    // 1M + 5S + 15A

                    // XX = X1^2
                    var xx = this.x.redSqr();
                    // YY = Y1^2
                    var yy = this.y.redSqr();
                    // YYYY = YY^2
                    var yyyy = yy.redSqr();
                    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
                    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
                    s = s.redIAdd(s);
                    // M = 3 * XX + a
                    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
                    // T = M^2 - 2 * S
                    var t = m.redSqr().redISub(s).redISub(s);
                    // X3 = T
                    nx = t;
                    // Y3 = M * (S - T) - 8 * YYYY
                    var yyyy8 = yyyy.redIAdd(yyyy);
                    yyyy8 = yyyy8.redIAdd(yyyy8);
                    yyyy8 = yyyy8.redIAdd(yyyy8);
                    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
                    // Z3 = 2 * Y1
                    nz = this.y.redAdd(this.y);
                } else {
                    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
                    // 3M + 5S

                    // delta = Z1^2
                    var delta = this.z.redSqr();
                    // gamma = Y1^2
                    var gamma = this.y.redSqr();
                    // beta = X1 * gamma
                    var beta = this.x.redMul(gamma);
                    // alpha = 3 * (X1 - delta) * (X1 + delta)
                    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
                    alpha = alpha.redAdd(alpha).redIAdd(alpha);
                    // X3 = alpha^2 - 8 * beta
                    var beta4 = beta.redIAdd(beta);
                    beta4 = beta4.redIAdd(beta4);
                    var beta8 = beta4.redAdd(beta4);
                    nx = alpha.redSqr().redISub(beta8);
                    // Z3 = (Y1 + Z1)^2 - gamma - delta
                    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
                    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
                    var ggamma8 = gamma.redSqr();
                    ggamma8 = ggamma8.redIAdd(ggamma8);
                    ggamma8 = ggamma8.redIAdd(ggamma8);
                    ggamma8 = ggamma8.redIAdd(ggamma8);
                    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
                }

                return this.curve.jpoint(nx, ny, nz);
            };

            JPoint.prototype._dbl = function _dbl() {
                var a = this.curve.a;

                // 4M + 6S + 10A
                var jx = this.x;
                var jy = this.y;
                var jz = this.z;
                var jz4 = jz.redSqr().redSqr();

                var jx2 = jx.redSqr();
                var jy2 = jy.redSqr();

                var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

                var jxd4 = jx.redAdd(jx);
                jxd4 = jxd4.redIAdd(jxd4);
                var t1 = jxd4.redMul(jy2);
                var nx = c.redSqr().redISub(t1.redAdd(t1));
                var t2 = t1.redISub(nx);

                var jyd8 = jy2.redSqr();
                jyd8 = jyd8.redIAdd(jyd8);
                jyd8 = jyd8.redIAdd(jyd8);
                jyd8 = jyd8.redIAdd(jyd8);
                var ny = c.redMul(t2).redISub(jyd8);
                var nz = jy.redAdd(jy).redMul(jz);

                return this.curve.jpoint(nx, ny, nz);
            };

            JPoint.prototype.trpl = function trpl() {
                if (!this.curve.zeroA)
                    return this.dbl().add(this);

                // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
                // 5M + 10S + ...

                // XX = X1^2
                var xx = this.x.redSqr();
                // YY = Y1^2
                var yy = this.y.redSqr();
                // ZZ = Z1^2
                var zz = this.z.redSqr();
                // YYYY = YY^2
                var yyyy = yy.redSqr();
                // M = 3 * XX + a * ZZ2; a = 0
                var m = xx.redAdd(xx).redIAdd(xx);
                // MM = M^2
                var mm = m.redSqr();
                // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
                var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
                e = e.redIAdd(e);
                e = e.redAdd(e).redIAdd(e);
                e = e.redISub(mm);
                // EE = E^2
                var ee = e.redSqr();
                // T = 16*YYYY
                var t = yyyy.redIAdd(yyyy);
                t = t.redIAdd(t);
                t = t.redIAdd(t);
                t = t.redIAdd(t);
                // U = (M + E)^2 - MM - EE - T
                var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
                // X3 = 4 * (X1 * EE - 4 * YY * U)
                var yyu4 = yy.redMul(u);
                yyu4 = yyu4.redIAdd(yyu4);
                yyu4 = yyu4.redIAdd(yyu4);
                var nx = this.x.redMul(ee).redISub(yyu4);
                nx = nx.redIAdd(nx);
                nx = nx.redIAdd(nx);
                // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
                var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
                ny = ny.redIAdd(ny);
                ny = ny.redIAdd(ny);
                ny = ny.redIAdd(ny);
                // Z3 = (Z1 + E)^2 - ZZ - EE
                var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

                return this.curve.jpoint(nx, ny, nz);
            };

            JPoint.prototype.mul = function mul(k, kbase) {
                k = new BN(k, kbase);

                return this.curve._wnafMul(this, k);
            };

            JPoint.prototype.eq = function eq(p) {
                if (p.type === 'affine')
                    return this.eq(p.toJ());

                if (this === p)
                    return true;

                // x1 * z2^2 == x2 * z1^2
                var z2 = this.z.redSqr();
                var pz2 = p.z.redSqr();
                if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
                    return false;

                // y1 * z2^3 == y2 * z1^3
                var z3 = z2.redMul(this.z);
                var pz3 = pz2.redMul(p.z);
                return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
            };

            JPoint.prototype.eqXToP = function eqXToP(x) {
                var zs = this.z.redSqr();
                var rx = x.toRed(this.curve.red).redMul(zs);
                if (this.x.cmp(rx) === 0)
                    return true;

                var xc = x.clone();
                var t = this.curve.redN.redMul(zs);
                for (; ;) {
                    xc.iadd(this.curve.n);
                    if (xc.cmp(this.curve.p) >= 0)
                        return false;

                    rx.redIAdd(t);
                    if (this.x.cmp(rx) === 0)
                        return true;
                }
                return false;
            };

            JPoint.prototype.inspect = function inspect() {
                if (this.isInfinity())
                    return '<EC JPoint Infinity>';
                return '<EC JPoint x: ' + this.x.toString(16, 2) +
                    ' y: ' + this.y.toString(16, 2) +
                    ' z: ' + this.z.toString(16, 2) + '>';
            };

            JPoint.prototype.isInfinity = function isInfinity() {
                // XXX This code assumes that zero is always zero in red
                return this.z.cmpn(0) === 0;
            };

        }, {"../../elliptic": 111, "../curve": 114, "bn.js": 20, "inherits": 143}],
        117: [function (require, module, exports) {
            'use strict';

            var curves = exports;

            var hash = require('hash.js');
            var elliptic = require('../elliptic');

            var assert = elliptic.utils.assert;

            function PresetCurve(options) {
                if (options.type === 'short')
                    this.curve = new elliptic.curve.short(options);
                else if (options.type === 'edwards')
                    this.curve = new elliptic.curve.edwards(options);
                else
                    this.curve = new elliptic.curve.mont(options);
                this.g = this.curve.g;
                this.n = this.curve.n;
                this.hash = options.hash;

                assert(this.g.validate(), 'Invalid curve');
                assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
            }

            curves.PresetCurve = PresetCurve;

            function defineCurve(name, options) {
                Object.defineProperty(curves, name, {
                    configurable: true,
                    enumerable: true,
                    get: function () {
                        var curve = new PresetCurve(options);
                        Object.defineProperty(curves, name, {
                            configurable: true,
                            enumerable: true,
                            value: curve
                        });
                        return curve;
                    }
                });
            }

            defineCurve('p192', {
                type: 'short',
                prime: 'p192',
                p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
                a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
                b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
                n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
                hash: hash.sha256,
                gRed: false,
                g: [
                    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
                    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'
                ]
            });

            defineCurve('p224', {
                type: 'short',
                prime: 'p224',
                p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
                a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
                b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
                n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
                hash: hash.sha256,
                gRed: false,
                g: [
                    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
                    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'
                ]
            });

            defineCurve('p256', {
                type: 'short',
                prime: null,
                p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
                a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
                b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
                n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
                hash: hash.sha256,
                gRed: false,
                g: [
                    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
                    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'
                ]
            });

            defineCurve('p384', {
                type: 'short',
                prime: null,
                p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
                'fffffffe ffffffff 00000000 00000000 ffffffff',
                a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
                'fffffffe ffffffff 00000000 00000000 fffffffc',
                b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
                '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
                n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
                'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
                hash: hash.sha384,
                gRed: false,
                g: [
                    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
                    '5502f25d bf55296c 3a545e38 72760ab7',
                    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
                    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f'
                ]
            });

            defineCurve('p521', {
                type: 'short',
                prime: null,
                p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
                'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
                'ffffffff ffffffff ffffffff ffffffff ffffffff',
                a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
                'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
                'ffffffff ffffffff ffffffff ffffffff fffffffc',
                b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
                '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
                '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
                n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
                'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
                'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
                hash: hash.sha512,
                gRed: false,
                g: [
                    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
                    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
                    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
                    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
                    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
                    '3fad0761 353c7086 a272c240 88be9476 9fd16650'
                ]
            });

            defineCurve('curve25519', {
                type: 'mont',
                prime: 'p25519',
                p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
                a: '76d06',
                b: '1',
                n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
                hash: hash.sha256,
                gRed: false,
                g: [
                    '9'
                ]
            });

            defineCurve('ed25519', {
                type: 'edwards',
                prime: 'p25519',
                p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
                a: '-1',
                c: '1',
                // -121665 * (121666^(-1)) (mod P)
                d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
                n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
                hash: hash.sha256,
                gRed: false,
                g: [
                    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

                    // 4/5
                    '6666666666666666666666666666666666666666666666666666666666666658'
                ]
            });

            var pre;
            try {
                pre = require('./precomputed/secp256k1');
            } catch (e) {
                pre = undefined;
            }

            defineCurve('secp256k1', {
                type: 'short',
                prime: 'k256',
                p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
                a: '0',
                b: '7',
                n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
                h: '1',
                hash: hash.sha256,

                // Precomputed endomorphism
                beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
                lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
                basis: [
                    {
                        a: '3086d221a7d46bcde86c90e49284eb15',
                        b: '-e4437ed6010e88286f547fa90abfe4c3'
                    },
                    {
                        a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
                        b: '3086d221a7d46bcde86c90e49284eb15'
                    }
                ],

                gRed: false,
                g: [
                    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
                    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
                    pre
                ]
            });

        }, {"../elliptic": 111, "./precomputed/secp256k1": 124, "hash.js": 130}],
        118: [function (require, module, exports) {
            'use strict';

            var BN = require('bn.js');
            var HmacDRBG = require('hmac-drbg');
            var elliptic = require('../../elliptic');
            var utils = elliptic.utils;
            var assert = utils.assert;

            var KeyPair = require('./key');
            var Signature = require('./signature');

            function EC(options) {
                if (!(this instanceof EC))
                    return new EC(options);

                // Shortcut `elliptic.ec(curve-name)`
                if (typeof options === 'string') {
                    assert(elliptic.curves.hasOwnProperty(options), 'Unknown curve ' + options);

                    options = elliptic.curves[options];
                }

                // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
                if (options instanceof elliptic.curves.PresetCurve)
                    options = {curve: options};

                this.curve = options.curve.curve;
                this.n = this.curve.n;
                this.nh = this.n.ushrn(1);
                this.g = this.curve.g;

                // Point on curve
                this.g = options.curve.g;
                this.g.precompute(options.curve.n.bitLength() + 1);

                // Hash for function for DRBG
                this.hash = options.hash || options.curve.hash;
            }

            module.exports = EC;

            EC.prototype.keyPair = function keyPair(options) {
                return new KeyPair(this, options);
            };

            EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
                return KeyPair.fromPrivate(this, priv, enc);
            };

            EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
                return KeyPair.fromPublic(this, pub, enc);
            };

            EC.prototype.genKeyPair = function genKeyPair(options) {
                if (!options)
                    options = {};

                // Instantiate Hmac_DRBG
                var drbg = new HmacDRBG({
                    hash: this.hash,
                    pers: options.pers,
                    persEnc: options.persEnc || 'utf8',
                    entropy: options.entropy || elliptic.rand(this.hash.hmacStrength),
                    entropyEnc: options.entropy && options.entropyEnc || 'utf8',
                    nonce: this.n.toArray()
                });

                var bytes = this.n.byteLength();
                var ns2 = this.n.sub(new BN(2));
                do {
                    var priv = new BN(drbg.generate(bytes));
                    if (priv.cmp(ns2) > 0)
                        continue;

                    priv.iaddn(1);
                    return this.keyFromPrivate(priv);
                } while (true);
            };

            EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
                var delta = msg.byteLength() * 8 - this.n.bitLength();
                if (delta > 0)
                    msg = msg.ushrn(delta);
                if (!truncOnly && msg.cmp(this.n) >= 0)
                    return msg.sub(this.n);
                else
                    return msg;
            };

            EC.prototype.sign = function sign(msg, key, enc, options) {
                if (typeof enc === 'object') {
                    options = enc;
                    enc = null;
                }
                if (!options)
                    options = {};

                key = this.keyFromPrivate(key, enc);
                msg = this._truncateToN(new BN(msg, 16));

                // Zero-extend key to provide enough entropy
                var bytes = this.n.byteLength();
                var bkey = key.getPrivate().toArray('be', bytes);

                // Zero-extend nonce to have the same byte size as N
                var nonce = msg.toArray('be', bytes);

                // Instantiate Hmac_DRBG
                var drbg = new HmacDRBG({
                    hash: this.hash,
                    entropy: bkey,
                    nonce: nonce,
                    pers: options.pers,
                    persEnc: options.persEnc || 'utf8'
                });

                // Number of bytes to generate
                var ns1 = this.n.sub(new BN(1));

                for (var iter = 0; true; iter++) {
                    var k = options.k ?
                        options.k(iter) :
                        new BN(drbg.generate(this.n.byteLength()));
                    k = this._truncateToN(k, true);
                    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
                        continue;

                    var kp = this.g.mul(k);
                    if (kp.isInfinity())
                        continue;

                    var kpX = kp.getX();
                    var r = kpX.umod(this.n);
                    if (r.cmpn(0) === 0)
                        continue;

                    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
                    s = s.umod(this.n);
                    if (s.cmpn(0) === 0)
                        continue;

                    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                        (kpX.cmp(r) !== 0 ? 2 : 0);

                    // Use complement of `s`, if it is > `n / 2`
                    if (options.canonical && s.cmp(this.nh) > 0) {
                        s = this.n.sub(s);
                        recoveryParam ^= 1;
                    }

                    return new Signature({r: r, s: s, recoveryParam: recoveryParam});
                }
            };

            EC.prototype.verify = function verify(msg, signature, key, enc) {
                msg = this._truncateToN(new BN(msg, 16));
                key = this.keyFromPublic(key, enc);
                signature = new Signature(signature, 'hex');

                // Perform primitive values validation
                var r = signature.r;
                var s = signature.s;
                if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
                    return false;
                if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
                    return false;

                // Validate signature
                var sinv = s.invm(this.n);
                var u1 = sinv.mul(msg).umod(this.n);
                var u2 = sinv.mul(r).umod(this.n);

                if (!this.curve._maxwellTrick) {
                    var p = this.g.mulAdd(u1, key.getPublic(), u2);
                    if (p.isInfinity())
                        return false;

                    return p.getX().umod(this.n).cmp(r) === 0;
                }

                // NOTE: Greg Maxwell's trick, inspired by:
                // https://git.io/vad3K

                var p = this.g.jmulAdd(u1, key.getPublic(), u2);
                if (p.isInfinity())
                    return false;

                // Compare `p.x` of Jacobian point with `r`,
                // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
                // inverse of `p.z^2`
                return p.eqXToP(r);
            };

            EC.prototype.recoverPubKey = function (msg, signature, j, enc) {
                assert((3 & j) === j, 'The recovery param is more than two bits');
                signature = new Signature(signature, enc);

                var n = this.n;
                var e = new BN(msg);
                var r = signature.r;
                var s = signature.s;

                // A set LSB signifies that the y-coordinate is odd
                var isYOdd = j & 1;
                var isSecondKey = j >> 1;
                if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
                    throw new Error('Unable to find sencond key candinate');

                // 1.1. Let x = r + jn.
                if (isSecondKey)
                    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
                else
                    r = this.curve.pointFromX(r, isYOdd);

                var rInv = signature.r.invm(n);
                var s1 = n.sub(e).mul(rInv).umod(n);
                var s2 = s.mul(rInv).umod(n);

                // 1.6.1 Compute Q = r^-1 (sR -  eG)
                //               Q = r^-1 (sR + -eG)
                return this.g.mulAdd(s1, r, s2);
            };

            EC.prototype.getKeyRecoveryParam = function (e, signature, Q, enc) {
                signature = new Signature(signature, enc);
                if (signature.recoveryParam !== null)
                    return signature.recoveryParam;

                for (var i = 0; i < 4; i++) {
                    var Qprime;
                    try {
                        Qprime = this.recoverPubKey(e, signature, i);
                    } catch (e) {
                        continue;
                    }

                    if (Qprime.eq(Q))
                        return i;
                }
                throw new Error('Unable to find valid recovery factor');
            };

        }, {"../../elliptic": 111, "./key": 119, "./signature": 120, "bn.js": 20, "hmac-drbg": 142}],
        119: [function (require, module, exports) {
            'use strict';

            var BN = require('bn.js');
            var elliptic = require('../../elliptic');
            var utils = elliptic.utils;
            var assert = utils.assert;

            function KeyPair(ec, options) {
                this.ec = ec;
                this.priv = null;
                this.pub = null;

                // KeyPair(ec, { priv: ..., pub: ... })
                if (options.priv)
                    this._importPrivate(options.priv, options.privEnc);
                if (options.pub)
                    this._importPublic(options.pub, options.pubEnc);
            }

            module.exports = KeyPair;

            KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
                if (pub instanceof KeyPair)
                    return pub;

                return new KeyPair(ec, {
                    pub: pub,
                    pubEnc: enc
                });
            };

            KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
                if (priv instanceof KeyPair)
                    return priv;

                return new KeyPair(ec, {
                    priv: priv,
                    privEnc: enc
                });
            };

            KeyPair.prototype.validate = function validate() {
                var pub = this.getPublic();

                if (pub.isInfinity())
                    return {result: false, reason: 'Invalid public key'};
                if (!pub.validate())
                    return {result: false, reason: 'Public key is not a point'};
                if (!pub.mul(this.ec.curve.n).isInfinity())
                    return {result: false, reason: 'Public key * N != O'};

                return {result: true, reason: null};
            };

            KeyPair.prototype.getPublic = function getPublic(compact, enc) {
                // compact is optional argument
                if (typeof compact === 'string') {
                    enc = compact;
                    compact = null;
                }

                if (!this.pub)
                    this.pub = this.ec.g.mul(this.priv);

                if (!enc)
                    return this.pub;

                return this.pub.encode(enc, compact);
            };

            KeyPair.prototype.getPrivate = function getPrivate(enc) {
                if (enc === 'hex')
                    return this.priv.toString(16, 2);
                else
                    return this.priv;
            };

            KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
                this.priv = new BN(key, enc || 16);

                // Ensure that the priv won't be bigger than n, otherwise we may fail
                // in fixed multiplication method
                this.priv = this.priv.umod(this.ec.curve.n);
            };

            KeyPair.prototype._importPublic = function _importPublic(key, enc) {
                if (key.x || key.y) {
                    // Montgomery points only have an `x` coordinate.
                    // Weierstrass/Edwards points on the other hand have both `x` and
                    // `y` coordinates.
                    if (this.ec.curve.type === 'mont') {
                        assert(key.x, 'Need x coordinate');
                    } else if (this.ec.curve.type === 'short' ||
                        this.ec.curve.type === 'edwards') {
                        assert(key.x && key.y, 'Need both x and y coordinate');
                    }
                    this.pub = this.ec.curve.point(key.x, key.y);
                    return;
                }
                this.pub = this.ec.curve.decodePoint(key, enc);
            };

// ECDH
            KeyPair.prototype.derive = function derive(pub) {
                return pub.mul(this.priv).getX();
            };

// ECDSA
            KeyPair.prototype.sign = function sign(msg, enc, options) {
                return this.ec.sign(msg, this, enc, options);
            };

            KeyPair.prototype.verify = function verify(msg, signature) {
                return this.ec.verify(msg, signature, this);
            };

            KeyPair.prototype.inspect = function inspect() {
                return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
                    ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
            };

        }, {"../../elliptic": 111, "bn.js": 20}],
        120: [function (require, module, exports) {
            'use strict';

            var BN = require('bn.js');

            var elliptic = require('../../elliptic');
            var utils = elliptic.utils;
            var assert = utils.assert;

            function Signature(options, enc) {
                if (options instanceof Signature)
                    return options;

                if (this._importDER(options, enc))
                    return;

                assert(options.r && options.s, 'Signature without r or s');
                this.r = new BN(options.r, 16);
                this.s = new BN(options.s, 16);
                if (options.recoveryParam === undefined)
                    this.recoveryParam = null;
                else
                    this.recoveryParam = options.recoveryParam;
            }

            module.exports = Signature;

            function Position() {
                this.place = 0;
            }

            function getLength(buf, p) {
                var initial = buf[p.place++];
                if (!(initial & 0x80)) {
                    return initial;
                }
                var octetLen = initial & 0xf;
                var val = 0;
                for (var i = 0, off = p.place; i < octetLen; i++, off++) {
                    val <<= 8;
                    val |= buf[off];
                }
                p.place = off;
                return val;
            }

            function rmPadding(buf) {
                var i = 0;
                var len = buf.length - 1;
                while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
                    i++;
                }
                if (i === 0) {
                    return buf;
                }
                return buf.slice(i);
            }

            Signature.prototype._importDER = function _importDER(data, enc) {
                data = utils.toArray(data, enc);
                var p = new Position();
                if (data[p.place++] !== 0x30) {
                    return false;
                }
                var len = getLength(data, p);
                if ((len + p.place) !== data.length) {
                    return false;
                }
                if (data[p.place++] !== 0x02) {
                    return false;
                }
                var rlen = getLength(data, p);
                var r = data.slice(p.place, rlen + p.place);
                p.place += rlen;
                if (data[p.place++] !== 0x02) {
                    return false;
                }
                var slen = getLength(data, p);
                if (data.length !== slen + p.place) {
                    return false;
                }
                var s = data.slice(p.place, slen + p.place);
                if (r[0] === 0 && (r[1] & 0x80)) {
                    r = r.slice(1);
                }
                if (s[0] === 0 && (s[1] & 0x80)) {
                    s = s.slice(1);
                }

                this.r = new BN(r);
                this.s = new BN(s);
                this.recoveryParam = null;

                return true;
            };

            function constructLength(arr, len) {
                if (len < 0x80) {
                    arr.push(len);
                    return;
                }
                var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
                arr.push(octets | 0x80);
                while (--octets) {
                    arr.push((len >>> (octets << 3)) & 0xff);
                }
                arr.push(len);
            }

            Signature.prototype.toDER = function toDER(enc) {
                var r = this.r.toArray();
                var s = this.s.toArray();

                // Pad values
                if (r[0] & 0x80)
                    r = [0].concat(r);
                // Pad values
                if (s[0] & 0x80)
                    s = [0].concat(s);

                r = rmPadding(r);
                s = rmPadding(s);

                while (!s[0] && !(s[1] & 0x80)) {
                    s = s.slice(1);
                }
                var arr = [0x02];
                constructLength(arr, r.length);
                arr = arr.concat(r);
                arr.push(0x02);
                constructLength(arr, s.length);
                var backHalf = arr.concat(s);
                var res = [0x30];
                constructLength(res, backHalf.length);
                res = res.concat(backHalf);
                return utils.encode(res, enc);
            };

        }, {"../../elliptic": 111, "bn.js": 20}],
        121: [function (require, module, exports) {
            'use strict';

            var hash = require('hash.js');
            var elliptic = require('../../elliptic');
            var utils = elliptic.utils;
            var assert = utils.assert;
            var parseBytes = utils.parseBytes;
            var KeyPair = require('./key');
            var Signature = require('./signature');

            function EDDSA(curve) {
                assert(curve === 'ed25519', 'only tested with ed25519 so far');

                if (!(this instanceof EDDSA))
                    return new EDDSA(curve);

                var curve = elliptic.curves[curve].curve;
                this.curve = curve;
                this.g = curve.g;
                this.g.precompute(curve.n.bitLength() + 1);

                this.pointClass = curve.point().constructor;
                this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
                this.hash = hash.sha512;
            }

            module.exports = EDDSA;

            /**
             * @param {Array|String} message - message bytes
             * @param {Array|String|KeyPair} secret - secret bytes or a keypair
             * @returns {Signature} - signature
             */
            EDDSA.prototype.sign = function sign(message, secret) {
                message = parseBytes(message);
                var key = this.keyFromSecret(secret);
                var r = this.hashInt(key.messagePrefix(), message);
                var R = this.g.mul(r);
                var Rencoded = this.encodePoint(R);
                var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
                    .mul(key.priv());
                var S = r.add(s_).umod(this.curve.n);
                return this.makeSignature({R: R, S: S, Rencoded: Rencoded});
            };

            /**
             * @param {Array} message - message bytes
             * @param {Array|String|Signature} sig - sig bytes
             * @param {Array|String|Point|KeyPair} pub - public key
             * @returns {Boolean} - true if public key matches sig of message
             */
            EDDSA.prototype.verify = function verify(message, sig, pub) {
                message = parseBytes(message);
                sig = this.makeSignature(sig);
                var key = this.keyFromPublic(pub);
                var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
                var SG = this.g.mul(sig.S());
                var RplusAh = sig.R().add(key.pub().mul(h));
                return RplusAh.eq(SG);
            };

            EDDSA.prototype.hashInt = function hashInt() {
                var hash = this.hash();
                for (var i = 0; i < arguments.length; i++)
                    hash.update(arguments[i]);
                return utils.intFromLE(hash.digest()).umod(this.curve.n);
            };

            EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
                return KeyPair.fromPublic(this, pub);
            };

            EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
                return KeyPair.fromSecret(this, secret);
            };

            EDDSA.prototype.makeSignature = function makeSignature(sig) {
                if (sig instanceof Signature)
                    return sig;
                return new Signature(this, sig);
            };

            /**
             * * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
             *
             * EDDSA defines methods for encoding and decoding points and integers. These are
             * helper convenience methods, that pass along to utility functions implied
             * parameters.
             *
             */
            EDDSA.prototype.encodePoint = function encodePoint(point) {
                var enc = point.getY().toArray('le', this.encodingLength);
                enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
                return enc;
            };

            EDDSA.prototype.decodePoint = function decodePoint(bytes) {
                bytes = utils.parseBytes(bytes);

                var lastIx = bytes.length - 1;
                var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
                var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

                var y = utils.intFromLE(normed);
                return this.curve.pointFromY(y, xIsOdd);
            };

            EDDSA.prototype.encodeInt = function encodeInt(num) {
                return num.toArray('le', this.encodingLength);
            };

            EDDSA.prototype.decodeInt = function decodeInt(bytes) {
                return utils.intFromLE(bytes);
            };

            EDDSA.prototype.isPoint = function isPoint(val) {
                return val instanceof this.pointClass;
            };

        }, {"../../elliptic": 111, "./key": 122, "./signature": 123, "hash.js": 130}],
        122: [function (require, module, exports) {
            'use strict';

            var elliptic = require('../../elliptic');
            var utils = elliptic.utils;
            var assert = utils.assert;
            var parseBytes = utils.parseBytes;
            var cachedProperty = utils.cachedProperty;

            /**
             * @param {EDDSA} eddsa - instance
             * @param {Object} params - public/private key parameters
             *
             * @param {Array<Byte>} [params.secret] - secret seed bytes
             * @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
             * @param {Array<Byte>} [params.pub] - public key point encoded as bytes
             *
             */
            function KeyPair(eddsa, params) {
                this.eddsa = eddsa;
                this._secret = parseBytes(params.secret);
                if (eddsa.isPoint(params.pub))
                    this._pub = params.pub;
                else
                    this._pubBytes = parseBytes(params.pub);
            }

            KeyPair.fromPublic = function fromPublic(eddsa, pub) {
                if (pub instanceof KeyPair)
                    return pub;
                return new KeyPair(eddsa, {pub: pub});
            };

            KeyPair.fromSecret = function fromSecret(eddsa, secret) {
                if (secret instanceof KeyPair)
                    return secret;
                return new KeyPair(eddsa, {secret: secret});
            };

            KeyPair.prototype.secret = function secret() {
                return this._secret;
            };

            cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
                return this.eddsa.encodePoint(this.pub());
            });

            cachedProperty(KeyPair, 'pub', function pub() {
                if (this._pubBytes)
                    return this.eddsa.decodePoint(this._pubBytes);
                return this.eddsa.g.mul(this.priv());
            });

            cachedProperty(KeyPair, 'privBytes', function privBytes() {
                var eddsa = this.eddsa;
                var hash = this.hash();
                var lastIx = eddsa.encodingLength - 1;

                var a = hash.slice(0, eddsa.encodingLength);
                a[0] &= 248;
                a[lastIx] &= 127;
                a[lastIx] |= 64;

                return a;
            });

            cachedProperty(KeyPair, 'priv', function priv() {
                return this.eddsa.decodeInt(this.privBytes());
            });

            cachedProperty(KeyPair, 'hash', function hash() {
                return this.eddsa.hash().update(this.secret()).digest();
            });

            cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
                return this.hash().slice(this.eddsa.encodingLength);
            });

            KeyPair.prototype.sign = function sign(message) {
                assert(this._secret, 'KeyPair can only verify');
                return this.eddsa.sign(message, this);
            };

            KeyPair.prototype.verify = function verify(message, sig) {
                return this.eddsa.verify(message, sig, this);
            };

            KeyPair.prototype.getSecret = function getSecret(enc) {
                assert(this._secret, 'KeyPair is public only');
                return utils.encode(this.secret(), enc);
            };

            KeyPair.prototype.getPublic = function getPublic(enc) {
                return utils.encode(this.pubBytes(), enc);
            };

            module.exports = KeyPair;

        }, {"../../elliptic": 111}],
        123: [function (require, module, exports) {
            'use strict';

            var BN = require('bn.js');
            var elliptic = require('../../elliptic');
            var utils = elliptic.utils;
            var assert = utils.assert;
            var cachedProperty = utils.cachedProperty;
            var parseBytes = utils.parseBytes;

            /**
             * @param {EDDSA} eddsa - eddsa instance
             * @param {Array<Bytes>|Object} sig -
             * @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
             * @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
             * @param {Array<Bytes>} [sig.Rencoded] - R point encoded
             * @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
             */
            function Signature(eddsa, sig) {
                this.eddsa = eddsa;

                if (typeof sig !== 'object')
                    sig = parseBytes(sig);

                if (Array.isArray(sig)) {
                    sig = {
                        R: sig.slice(0, eddsa.encodingLength),
                        S: sig.slice(eddsa.encodingLength)
                    };
                }

                assert(sig.R && sig.S, 'Signature without R or S');

                if (eddsa.isPoint(sig.R))
                    this._R = sig.R;
                if (sig.S instanceof BN)
                    this._S = sig.S;

                this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
                this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
            }

            cachedProperty(Signature, 'S', function S() {
                return this.eddsa.decodeInt(this.Sencoded());
            });

            cachedProperty(Signature, 'R', function R() {
                return this.eddsa.decodePoint(this.Rencoded());
            });

            cachedProperty(Signature, 'Rencoded', function Rencoded() {
                return this.eddsa.encodePoint(this.R());
            });

            cachedProperty(Signature, 'Sencoded', function Sencoded() {
                return this.eddsa.encodeInt(this.S());
            });

            Signature.prototype.toBytes = function toBytes() {
                return this.Rencoded().concat(this.Sencoded());
            };

            Signature.prototype.toHex = function toHex() {
                return utils.encode(this.toBytes(), 'hex').toUpperCase();
            };

            module.exports = Signature;

        }, {"../../elliptic": 111, "bn.js": 20}],
        124: [function (require, module, exports) {
            module.exports = {
                doubles: {
                    step: 4,
                    points: [
                        [
                            'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
                            'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'
                        ],
                        [
                            '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
                            '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'
                        ],
                        [
                            '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
                            'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'
                        ],
                        [
                            '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
                            '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'
                        ],
                        [
                            '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
                            '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'
                        ],
                        [
                            '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
                            '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'
                        ],
                        [
                            'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
                            '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'
                        ],
                        [
                            '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
                            'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'
                        ],
                        [
                            'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
                            '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'
                        ],
                        [
                            'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
                            'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'
                        ],
                        [
                            'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
                            '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'
                        ],
                        [
                            '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
                            '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'
                        ],
                        [
                            '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
                            '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'
                        ],
                        [
                            '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
                            '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'
                        ],
                        [
                            '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
                            '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'
                        ],
                        [
                            '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
                            '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'
                        ],
                        [
                            '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
                            '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'
                        ],
                        [
                            '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
                            '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'
                        ],
                        [
                            '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
                            'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'
                        ],
                        [
                            'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
                            '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'
                        ],
                        [
                            'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
                            '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'
                        ],
                        [
                            '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
                            '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'
                        ],
                        [
                            '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
                            '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'
                        ],
                        [
                            'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
                            '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'
                        ],
                        [
                            '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
                            'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'
                        ],
                        [
                            'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
                            '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'
                        ],
                        [
                            'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
                            'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'
                        ],
                        [
                            'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
                            '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'
                        ],
                        [
                            'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
                            'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'
                        ],
                        [
                            'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
                            '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'
                        ],
                        [
                            '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
                            'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'
                        ],
                        [
                            '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
                            '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'
                        ],
                        [
                            'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
                            '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'
                        ],
                        [
                            '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
                            'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'
                        ],
                        [
                            'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
                            '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'
                        ],
                        [
                            'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
                            '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'
                        ],
                        [
                            'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
                            'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'
                        ],
                        [
                            '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
                            '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'
                        ],
                        [
                            '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
                            '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'
                        ],
                        [
                            '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
                            'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'
                        ],
                        [
                            '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
                            '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'
                        ],
                        [
                            'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
                            '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'
                        ],
                        [
                            '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
                            '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'
                        ],
                        [
                            '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
                            'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'
                        ],
                        [
                            '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
                            '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'
                        ],
                        [
                            'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
                            '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'
                        ],
                        [
                            '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
                            'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'
                        ],
                        [
                            'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
                            'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'
                        ],
                        [
                            'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
                            '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'
                        ],
                        [
                            '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
                            'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'
                        ],
                        [
                            '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
                            'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'
                        ],
                        [
                            'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
                            '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'
                        ],
                        [
                            'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
                            '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'
                        ],
                        [
                            'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
                            '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'
                        ],
                        [
                            '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
                            'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'
                        ],
                        [
                            '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
                            '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'
                        ],
                        [
                            'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
                            'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'
                        ],
                        [
                            '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
                            'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'
                        ],
                        [
                            '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
                            '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'
                        ],
                        [
                            '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
                            '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'
                        ],
                        [
                            'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
                            'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'
                        ],
                        [
                            '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
                            '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'
                        ],
                        [
                            '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
                            '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'
                        ],
                        [
                            'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
                            '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'
                        ],
                        [
                            'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
                            'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'
                        ]
                    ]
                },
                naf: {
                    wnd: 7,
                    points: [
                        [
                            'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
                            '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'
                        ],
                        [
                            '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
                            'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'
                        ],
                        [
                            '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
                            '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'
                        ],
                        [
                            'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
                            'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'
                        ],
                        [
                            '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
                            'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'
                        ],
                        [
                            'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
                            'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'
                        ],
                        [
                            'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
                            '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'
                        ],
                        [
                            'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
                            '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'
                        ],
                        [
                            '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
                            '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'
                        ],
                        [
                            '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
                            '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'
                        ],
                        [
                            '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
                            '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'
                        ],
                        [
                            '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
                            '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'
                        ],
                        [
                            'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
                            'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'
                        ],
                        [
                            'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
                            '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'
                        ],
                        [
                            '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
                            'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'
                        ],
                        [
                            '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
                            'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'
                        ],
                        [
                            '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
                            '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'
                        ],
                        [
                            '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
                            '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'
                        ],
                        [
                            '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
                            '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'
                        ],
                        [
                            '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
                            'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'
                        ],
                        [
                            'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
                            'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'
                        ],
                        [
                            '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
                            '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'
                        ],
                        [
                            '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
                            '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'
                        ],
                        [
                            'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
                            'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'
                        ],
                        [
                            '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
                            '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'
                        ],
                        [
                            'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
                            'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'
                        ],
                        [
                            'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
                            'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'
                        ],
                        [
                            '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
                            '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'
                        ],
                        [
                            '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
                            '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'
                        ],
                        [
                            '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
                            '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'
                        ],
                        [
                            'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
                            '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'
                        ],
                        [
                            '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
                            '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'
                        ],
                        [
                            'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
                            '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'
                        ],
                        [
                            '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
                            'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'
                        ],
                        [
                            '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
                            'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'
                        ],
                        [
                            'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
                            'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'
                        ],
                        [
                            '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
                            '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'
                        ],
                        [
                            '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
                            'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'
                        ],
                        [
                            'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
                            'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'
                        ],
                        [
                            '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
                            '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'
                        ],
                        [
                            '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
                            'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'
                        ],
                        [
                            '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
                            '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'
                        ],
                        [
                            '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
                            'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'
                        ],
                        [
                            'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
                            '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'
                        ],
                        [
                            '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
                            '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'
                        ],
                        [
                            '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
                            'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'
                        ],
                        [
                            '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
                            'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'
                        ],
                        [
                            'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
                            'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'
                        ],
                        [
                            'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
                            'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'
                        ],
                        [
                            '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
                            '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'
                        ],
                        [
                            '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
                            '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'
                        ],
                        [
                            'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
                            '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'
                        ],
                        [
                            'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
                            'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'
                        ],
                        [
                            '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
                            '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'
                        ],
                        [
                            '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
                            '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'
                        ],
                        [
                            'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
                            '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'
                        ],
                        [
                            '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
                            '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'
                        ],
                        [
                            'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
                            'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'
                        ],
                        [
                            '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
                            'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'
                        ],
                        [
                            '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
                            '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'
                        ],
                        [
                            'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
                            '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'
                        ],
                        [
                            'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
                            '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'
                        ],
                        [
                            '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
                            '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'
                        ],
                        [
                            '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
                            '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'
                        ],
                        [
                            '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
                            'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'
                        ],
                        [
                            '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
                            'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'
                        ],
                        [
                            '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
                            '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'
                        ],
                        [
                            '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
                            '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'
                        ],
                        [
                            '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
                            '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'
                        ],
                        [
                            '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
                            'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'
                        ],
                        [
                            'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
                            'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'
                        ],
                        [
                            '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
                            'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'
                        ],
                        [
                            'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
                            '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'
                        ],
                        [
                            'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
                            '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'
                        ],
                        [
                            'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
                            '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'
                        ],
                        [
                            'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
                            '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'
                        ],
                        [
                            '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
                            'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'
                        ],
                        [
                            '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
                            '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'
                        ],
                        [
                            '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
                            'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'
                        ],
                        [
                            'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
                            'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'
                        ],
                        [
                            'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
                            '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'
                        ],
                        [
                            'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
                            'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'
                        ],
                        [
                            'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
                            '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'
                        ],
                        [
                            '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
                            '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'
                        ],
                        [
                            'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
                            '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'
                        ],
                        [
                            'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
                            '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'
                        ],
                        [
                            '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
                            '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'
                        ],
                        [
                            '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
                            'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'
                        ],
                        [
                            'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
                            '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'
                        ],
                        [
                            'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
                            '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'
                        ],
                        [
                            'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
                            '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'
                        ],
                        [
                            '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
                            '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'
                        ],
                        [
                            'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
                            'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'
                        ],
                        [
                            '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
                            'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'
                        ],
                        [
                            'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
                            'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'
                        ],
                        [
                            'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
                            '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'
                        ],
                        [
                            '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
                            'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'
                        ],
                        [
                            'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
                            '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'
                        ],
                        [
                            'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
                            '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'
                        ],
                        [
                            'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
                            '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'
                        ],
                        [
                            '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
                            'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'
                        ],
                        [
                            '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
                            'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'
                        ],
                        [
                            'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
                            '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'
                        ],
                        [
                            '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
                            'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'
                        ],
                        [
                            '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
                            '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'
                        ],
                        [
                            '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
                            'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'
                        ],
                        [
                            'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
                            'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'
                        ],
                        [
                            '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
                            'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'
                        ],
                        [
                            '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
                            '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'
                        ],
                        [
                            '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
                            'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'
                        ],
                        [
                            '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
                            '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'
                        ],
                        [
                            'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
                            'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'
                        ],
                        [
                            '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
                            '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'
                        ],
                        [
                            'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
                            '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'
                        ],
                        [
                            '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
                            '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'
                        ],
                        [
                            'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
                            'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'
                        ],
                        [
                            'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
                            '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'
                        ],
                        [
                            'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
                            'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'
                        ],
                        [
                            '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
                            'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'
                        ],
                        [
                            '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
                            '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'
                        ],
                        [
                            '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
                            'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'
                        ],
                        [
                            '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
                            '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'
                        ],
                        [
                            '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
                            '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'
                        ],
                        [
                            '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
                            'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'
                        ],
                        [
                            '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
                            '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'
                        ],
                        [
                            '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
                            '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'
                        ],
                        [
                            '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
                            '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'
                        ]
                    ]
                }
            };

        }, {}],
        125: [function (require, module, exports) {
            'use strict';

            var utils = exports;
            var BN = require('bn.js');
            var minAssert = require('minimalistic-assert');
            var minUtils = require('minimalistic-crypto-utils');

            utils.assert = minAssert;
            utils.toArray = minUtils.toArray;
            utils.zero2 = minUtils.zero2;
            utils.toHex = minUtils.toHex;
            utils.encode = minUtils.encode;

// Represent num in a w-NAF form
            function getNAF(num, w) {
                var naf = [];
                var ws = 1 << (w + 1);
                var k = num.clone();
                while (k.cmpn(1) >= 0) {
                    var z;
                    if (k.isOdd()) {
                        var mod = k.andln(ws - 1);
                        if (mod > (ws >> 1) - 1)
                            z = (ws >> 1) - mod;
                        else
                            z = mod;
                        k.isubn(z);
                    } else {
                        z = 0;
                    }
                    naf.push(z);

                    // Optimization, shift by word if possible
                    var shift = (k.cmpn(0) !== 0 && k.andln(ws - 1) === 0) ? (w + 1) : 1;
                    for (var i = 1; i < shift; i++)
                        naf.push(0);
                    k.iushrn(shift);
                }

                return naf;
            }

            utils.getNAF = getNAF;

// Represent k1, k2 in a Joint Sparse Form
            function getJSF(k1, k2) {
                var jsf = [
                    [],
                    []
                ];

                k1 = k1.clone();
                k2 = k2.clone();
                var d1 = 0;
                var d2 = 0;
                while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {

                    // First phase
                    var m14 = (k1.andln(3) + d1) & 3;
                    var m24 = (k2.andln(3) + d2) & 3;
                    if (m14 === 3)
                        m14 = -1;
                    if (m24 === 3)
                        m24 = -1;
                    var u1;
                    if ((m14 & 1) === 0) {
                        u1 = 0;
                    } else {
                        var m8 = (k1.andln(7) + d1) & 7;
                        if ((m8 === 3 || m8 === 5) && m24 === 2)
                            u1 = -m14;
                        else
                            u1 = m14;
                    }
                    jsf[0].push(u1);

                    var u2;
                    if ((m24 & 1) === 0) {
                        u2 = 0;
                    } else {
                        var m8 = (k2.andln(7) + d2) & 7;
                        if ((m8 === 3 || m8 === 5) && m14 === 2)
                            u2 = -m24;
                        else
                            u2 = m24;
                    }
                    jsf[1].push(u2);

                    // Second phase
                    if (2 * d1 === u1 + 1)
                        d1 = 1 - d1;
                    if (2 * d2 === u2 + 1)
                        d2 = 1 - d2;
                    k1.iushrn(1);
                    k2.iushrn(1);
                }

                return jsf;
            }

            utils.getJSF = getJSF;

            function cachedProperty(obj, name, computer) {
                var key = '_' + name;
                obj.prototype[name] = function cachedProperty() {
                    return this[key] !== undefined ? this[key] :
                        this[key] = computer.call(this);
                };
            }

            utils.cachedProperty = cachedProperty;

            function parseBytes(bytes) {
                return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
                    bytes;
            }

            utils.parseBytes = parseBytes;

            function intFromLE(bytes) {
                return new BN(bytes, 'hex', 'le');
            }

            utils.intFromLE = intFromLE;


        }, {"bn.js": 20, "minimalistic-assert": 147, "minimalistic-crypto-utils": 148}],
        126: [function (require, module, exports) {
            module.exports = {
                "_args": [
                    [
                        "elliptic@6.4.0",
                        "/home/phil/Waves/waves-api"
                    ]
                ],
                "_development": true,
                "_from": "elliptic@6.4.0",
                "_id": "elliptic@6.4.0",
                "_inBundle": false,
                "_integrity": "sha1-ysmvh2LIWDYYcAPI3+GT5eLq5d8=",
                "_location": "/elliptic",
                "_phantomChildren": {},
                "_requested": {
                    "type": "version",
                    "registry": true,
                    "raw": "elliptic@6.4.0",
                    "name": "elliptic",
                    "escapedName": "elliptic",
                    "rawSpec": "6.4.0",
                    "saveSpec": null,
                    "fetchSpec": "6.4.0"
                },
                "_requiredBy": [
                    "/browserify-sign",
                    "/create-ecdh"
                ],
                "_resolved": "https://registry.npmjs.org/elliptic/-/elliptic-6.4.0.tgz",
                "_spec": "6.4.0",
                "_where": "/home/phil/Waves/waves-api",
                "author": {
                    "name": "Fedor Indutny",
                    "email": "fedor@indutny.com"
                },
                "bugs": {
                    "url": "https://github.com/indutny/elliptic/issues"
                },
                "dependencies": {
                    "bn.js": "^4.4.0",
                    "brorand": "^1.0.1",
                    "hash.js": "^1.0.0",
                    "hmac-drbg": "^1.0.0",
                    "inherits": "^2.0.1",
                    "minimalistic-assert": "^1.0.0",
                    "minimalistic-crypto-utils": "^1.0.0"
                },
                "description": "EC cryptography",
                "devDependencies": {
                    "brfs": "^1.4.3",
                    "coveralls": "^2.11.3",
                    "grunt": "^0.4.5",
                    "grunt-browserify": "^5.0.0",
                    "grunt-cli": "^1.2.0",
                    "grunt-contrib-connect": "^1.0.0",
                    "grunt-contrib-copy": "^1.0.0",
                    "grunt-contrib-uglify": "^1.0.1",
                    "grunt-mocha-istanbul": "^3.0.1",
                    "grunt-saucelabs": "^8.6.2",
                    "istanbul": "^0.4.2",
                    "jscs": "^2.9.0",
                    "jshint": "^2.6.0",
                    "mocha": "^2.1.0"
                },
                "files": [
                    "lib"
                ],
                "homepage": "https://github.com/indutny/elliptic",
                "keywords": [
                    "EC",
                    "Elliptic",
                    "curve",
                    "Cryptography"
                ],
                "license": "MIT",
                "main": "lib/elliptic.js",
                "name": "elliptic",
                "repository": {
                    "type": "git",
                    "url": "git+ssh://git@github.com/indutny/elliptic.git"
                },
                "scripts": {
                    "jscs": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
                    "jshint": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
                    "lint": "npm run jscs && npm run jshint",
                    "test": "npm run lint && npm run unit",
                    "unit": "istanbul test _mocha --reporter=spec test/index.js",
                    "version": "grunt dist && git add dist/"
                },
                "version": "6.4.0"
            }

        }, {}],
        127: [function (require, module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

            function EventEmitter() {
                this._events = this._events || {};
                this._maxListeners = this._maxListeners || undefined;
            }

            module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
            EventEmitter.EventEmitter = EventEmitter;

            EventEmitter.prototype._events = undefined;
            EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
            EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
            EventEmitter.prototype.setMaxListeners = function (n) {
                if (!isNumber(n) || n < 0 || isNaN(n))
                    throw TypeError('n must be a positive number');
                this._maxListeners = n;
                return this;
            };

            EventEmitter.prototype.emit = function (type) {
                var er, handler, len, args, i, listeners;

                if (!this._events)
                    this._events = {};

                // If there is no 'error' event listener then throw.
                if (type === 'error') {
                    if (!this._events.error ||
                        (isObject(this._events.error) && !this._events.error.length)) {
                        er = arguments[1];
                        if (er instanceof Error) {
                            throw er; // Unhandled 'error' event
                        } else {
                            // At least give some kind of context to the user
                            var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
                            err.context = er;
                            throw err;
                        }
                    }
                }

                handler = this._events[type];

                if (isUndefined(handler))
                    return false;

                if (isFunction(handler)) {
                    switch (arguments.length) {
                        // fast cases
                        case 1:
                            handler.call(this);
                            break;
                        case 2:
                            handler.call(this, arguments[1]);
                            break;
                        case 3:
                            handler.call(this, arguments[1], arguments[2]);
                            break;
                        // slower
                        default:
                            args = Array.prototype.slice.call(arguments, 1);
                            handler.apply(this, args);
                    }
                } else if (isObject(handler)) {
                    args = Array.prototype.slice.call(arguments, 1);
                    listeners = handler.slice();
                    len = listeners.length;
                    for (i = 0; i < len; i++)
                        listeners[i].apply(this, args);
                }

                return true;
            };

            EventEmitter.prototype.addListener = function (type, listener) {
                var m;

                if (!isFunction(listener))
                    throw TypeError('listener must be a function');

                if (!this._events)
                    this._events = {};

                // To avoid recursion in the case that type === "newListener"! Before
                // adding it to the listeners, first emit "newListener".
                if (this._events.newListener)
                    this.emit('newListener', type,
                        isFunction(listener.listener) ?
                            listener.listener : listener);

                if (!this._events[type])
                // Optimize the case of one listener. Don't need the extra array object.
                    this._events[type] = listener;
                else if (isObject(this._events[type]))
                // If we've already got an array, just append.
                    this._events[type].push(listener);
                else
                // Adding the second element, need to change to array.
                    this._events[type] = [this._events[type], listener];

                // Check for listener leak
                if (isObject(this._events[type]) && !this._events[type].warned) {
                    if (!isUndefined(this._maxListeners)) {
                        m = this._maxListeners;
                    } else {
                        m = EventEmitter.defaultMaxListeners;
                    }

                    if (m && m > 0 && this._events[type].length > m) {
                        this._events[type].warned = true;
                        console.error('(node) warning: possible EventEmitter memory ' +
                            'leak detected. %d listeners added. ' +
                            'Use emitter.setMaxListeners() to increase limit.',
                            this._events[type].length);
                        if (typeof console.trace === 'function') {
                            // not supported in IE 10
                            console.trace();
                        }
                    }
                }

                return this;
            };

            EventEmitter.prototype.on = EventEmitter.prototype.addListener;

            EventEmitter.prototype.once = function (type, listener) {
                if (!isFunction(listener))
                    throw TypeError('listener must be a function');

                var fired = false;

                function g() {
                    this.removeListener(type, g);

                    if (!fired) {
                        fired = true;
                        listener.apply(this, arguments);
                    }
                }

                g.listener = listener;
                this.on(type, g);

                return this;
            };

// emits a 'removeListener' event iff the listener was removed
            EventEmitter.prototype.removeListener = function (type, listener) {
                var list, position, length, i;

                if (!isFunction(listener))
                    throw TypeError('listener must be a function');

                if (!this._events || !this._events[type])
                    return this;

                list = this._events[type];
                length = list.length;
                position = -1;

                if (list === listener ||
                    (isFunction(list.listener) && list.listener === listener)) {
                    delete this._events[type];
                    if (this._events.removeListener)
                        this.emit('removeListener', type, listener);

                } else if (isObject(list)) {
                    for (i = length; i-- > 0;) {
                        if (list[i] === listener ||
                            (list[i].listener && list[i].listener === listener)) {
                            position = i;
                            break;
                        }
                    }

                    if (position < 0)
                        return this;

                    if (list.length === 1) {
                        list.length = 0;
                        delete this._events[type];
                    } else {
                        list.splice(position, 1);
                    }

                    if (this._events.removeListener)
                        this.emit('removeListener', type, listener);
                }

                return this;
            };

            EventEmitter.prototype.removeAllListeners = function (type) {
                var key, listeners;

                if (!this._events)
                    return this;

                // not listening for removeListener, no need to emit
                if (!this._events.removeListener) {
                    if (arguments.length === 0)
                        this._events = {};
                    else if (this._events[type])
                        delete this._events[type];
                    return this;
                }

                // emit removeListener for all listeners on all events
                if (arguments.length === 0) {
                    for (key in this._events) {
                        if (key === 'removeListener') continue;
                        this.removeAllListeners(key);
                    }
                    this.removeAllListeners('removeListener');
                    this._events = {};
                    return this;
                }

                listeners = this._events[type];

                if (isFunction(listeners)) {
                    this.removeListener(type, listeners);
                } else if (listeners) {
                    // LIFO order
                    while (listeners.length)
                        this.removeListener(type, listeners[listeners.length - 1]);
                }
                delete this._events[type];

                return this;
            };

            EventEmitter.prototype.listeners = function (type) {
                var ret;
                if (!this._events || !this._events[type])
                    ret = [];
                else if (isFunction(this._events[type]))
                    ret = [this._events[type]];
                else
                    ret = this._events[type].slice();
                return ret;
            };

            EventEmitter.prototype.listenerCount = function (type) {
                if (this._events) {
                    var evlistener = this._events[type];

                    if (isFunction(evlistener))
                        return 1;
                    else if (evlistener)
                        return evlistener.length;
                }
                return 0;
            };

            EventEmitter.listenerCount = function (emitter, type) {
                return emitter.listenerCount(type);
            };

            function isFunction(arg) {
                return typeof arg === 'function';
            }

            function isNumber(arg) {
                return typeof arg === 'number';
            }

            function isObject(arg) {
                return typeof arg === 'object' && arg !== null;
            }

            function isUndefined(arg) {
                return arg === void 0;
            }

        }, {}],
        128: [function (require, module, exports) {
            (function (Buffer) {
                var md5 = require('create-hash/md5')
                module.exports = EVP_BytesToKey

                function EVP_BytesToKey(password, salt, keyLen, ivLen) {
                    if (!Buffer.isBuffer(password)) {
                        password = new Buffer(password, 'binary')
                    }
                    if (salt && !Buffer.isBuffer(salt)) {
                        salt = new Buffer(salt, 'binary')
                    }
                    keyLen = keyLen / 8
                    ivLen = ivLen || 0
                    var ki = 0
                    var ii = 0
                    var key = new Buffer(keyLen)
                    var iv = new Buffer(ivLen)
                    var addmd = 0
                    var md_buf
                    var i
                    var bufs = []
                    while (true) {
                        if (addmd++ > 0) {
                            bufs.push(md_buf)
                        }
                        bufs.push(password)
                        if (salt) {
                            bufs.push(salt)
                        }
                        md_buf = md5(Buffer.concat(bufs))
                        bufs = []
                        i = 0
                        if (keyLen > 0) {
                            while (true) {
                                if (keyLen === 0) {
                                    break
                                }
                                if (i === md_buf.length) {
                                    break
                                }
                                key[ki++] = md_buf[i]
                                keyLen--
                                i++
                            }
                        }
                        if (ivLen > 0 && i !== md_buf.length) {
                            while (true) {
                                if (ivLen === 0) {
                                    break
                                }
                                if (i === md_buf.length) {
                                    break
                                }
                                iv[ii++] = md_buf[i]
                                ivLen--
                                i++
                            }
                        }
                        if (keyLen === 0 && ivLen === 0) {
                            break
                        }
                    }
                    for (i = 0; i < md_buf.length; i++) {
                        md_buf[i] = 0
                    }
                    return {
                        key: key,
                        iv: iv
                    }
                }

            }).call(this, require("buffer").Buffer)
        }, {"buffer": 57, "create-hash/md5": 64}],
        129: [function (require, module, exports) {
            (function (Buffer) {
                'use strict'
                var Transform = require('stream').Transform
                var inherits = require('inherits')

                function HashBase(blockSize) {
                    Transform.call(this)

                    this._block = new Buffer(blockSize)
                    this._blockSize = blockSize
                    this._blockOffset = 0
                    this._length = [0, 0, 0, 0]

                    this._finalized = false
                }

                inherits(HashBase, Transform)

                HashBase.prototype._transform = function (chunk, encoding, callback) {
                    var error = null
                    try {
                        if (encoding !== 'buffer') chunk = new Buffer(chunk, encoding)
                        this.update(chunk)
                    } catch (err) {
                        error = err
                    }

                    callback(error)
                }

                HashBase.prototype._flush = function (callback) {
                    var error = null
                    try {
                        this.push(this._digest())
                    } catch (err) {
                        error = err
                    }

                    callback(error)
                }

                HashBase.prototype.update = function (data, encoding) {
                    if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer')
                    if (this._finalized) throw new Error('Digest already called')
                    if (!Buffer.isBuffer(data)) data = new Buffer(data, encoding || 'binary')

                    // consume data
                    var block = this._block
                    var offset = 0
                    while (this._blockOffset + data.length - offset >= this._blockSize) {
                        for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++]
                        this._update()
                        this._blockOffset = 0
                    }
                    while (offset < data.length) block[this._blockOffset++] = data[offset++]

                    // update length
                    for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
                        this._length[j] += carry
                        carry = (this._length[j] / 0x0100000000) | 0
                        if (carry > 0) this._length[j] -= 0x0100000000 * carry
                    }

                    return this
                }

                HashBase.prototype._update = function (data) {
                    throw new Error('_update is not implemented')
                }

                HashBase.prototype.digest = function (encoding) {
                    if (this._finalized) throw new Error('Digest already called')
                    this._finalized = true

                    var digest = this._digest()
                    if (encoding !== undefined) digest = digest.toString(encoding)
                    return digest
                }

                HashBase.prototype._digest = function () {
                    throw new Error('_digest is not implemented')
                }

                module.exports = HashBase

            }).call(this, require("buffer").Buffer)
        }, {"buffer": 57, "inherits": 143, "stream": 193}],
        130: [function (require, module, exports) {
            var hash = exports;

            hash.utils = require('./hash/utils');
            hash.common = require('./hash/common');
            hash.sha = require('./hash/sha');
            hash.ripemd = require('./hash/ripemd');
            hash.hmac = require('./hash/hmac');

// Proxy hash functions to the main object
            hash.sha1 = hash.sha.sha1;
            hash.sha256 = hash.sha.sha256;
            hash.sha224 = hash.sha.sha224;
            hash.sha384 = hash.sha.sha384;
            hash.sha512 = hash.sha.sha512;
            hash.ripemd160 = hash.ripemd.ripemd160;

        }, {"./hash/common": 131, "./hash/hmac": 132, "./hash/ripemd": 133, "./hash/sha": 134, "./hash/utils": 141}],
        131: [function (require, module, exports) {
            'use strict';

            var utils = require('./utils');
            var assert = require('minimalistic-assert');

            function BlockHash() {
                this.pending = null;
                this.pendingTotal = 0;
                this.blockSize = this.constructor.blockSize;
                this.outSize = this.constructor.outSize;
                this.hmacStrength = this.constructor.hmacStrength;
                this.padLength = this.constructor.padLength / 8;
                this.endian = 'big';

                this._delta8 = this.blockSize / 8;
                this._delta32 = this.blockSize / 32;
            }

            exports.BlockHash = BlockHash;

            BlockHash.prototype.update = function update(msg, enc) {
                // Convert message to array, pad it, and join into 32bit blocks
                msg = utils.toArray(msg, enc);
                if (!this.pending)
                    this.pending = msg;
                else
                    this.pending = this.pending.concat(msg);
                this.pendingTotal += msg.length;

                // Enough data, try updating
                if (this.pending.length >= this._delta8) {
                    msg = this.pending;

                    // Process pending data in blocks
                    var r = msg.length % this._delta8;
                    this.pending = msg.slice(msg.length - r, msg.length);
                    if (this.pending.length === 0)
                        this.pending = null;

                    msg = utils.join32(msg, 0, msg.length - r, this.endian);
                    for (var i = 0; i < msg.length; i += this._delta32)
                        this._update(msg, i, i + this._delta32);
                }

                return this;
            };

            BlockHash.prototype.digest = function digest(enc) {
                this.update(this._pad());
                assert(this.pending === null);

                return this._digest(enc);
            };

            BlockHash.prototype._pad = function pad() {
                var len = this.pendingTotal;
                var bytes = this._delta8;
                var k = bytes - ((len + this.padLength) % bytes);
                var res = new Array(k + this.padLength);
                res[0] = 0x80;
                for (var i = 1; i < k; i++)
                    res[i] = 0;

                // Append length
                len <<= 3;
                if (this.endian === 'big') {
                    for (var t = 8; t < this.padLength; t++)
                        res[i++] = 0;

                    res[i++] = 0;
                    res[i++] = 0;
                    res[i++] = 0;
                    res[i++] = 0;
                    res[i++] = (len >>> 24) & 0xff;
                    res[i++] = (len >>> 16) & 0xff;
                    res[i++] = (len >>> 8) & 0xff;
                    res[i++] = len & 0xff;
                } else {
                    res[i++] = len & 0xff;
                    res[i++] = (len >>> 8) & 0xff;
                    res[i++] = (len >>> 16) & 0xff;
                    res[i++] = (len >>> 24) & 0xff;
                    res[i++] = 0;
                    res[i++] = 0;
                    res[i++] = 0;
                    res[i++] = 0;

                    for (t = 8; t < this.padLength; t++)
                        res[i++] = 0;
                }

                return res;
            };

        }, {"./utils": 141, "minimalistic-assert": 147}],
        132: [function (require, module, exports) {
            'use strict';

            var utils = require('./utils');
            var assert = require('minimalistic-assert');

            function Hmac(hash, key, enc) {
                if (!(this instanceof Hmac))
                    return new Hmac(hash, key, enc);
                this.Hash = hash;
                this.blockSize = hash.blockSize / 8;
                this.outSize = hash.outSize / 8;
                this.inner = null;
                this.outer = null;

                this._init(utils.toArray(key, enc));
            }

            module.exports = Hmac;

            Hmac.prototype._init = function init(key) {
                // Shorten key, if needed
                if (key.length > this.blockSize)
                    key = new this.Hash().update(key).digest();
                assert(key.length <= this.blockSize);

                // Add padding to key
                for (var i = key.length; i < this.blockSize; i++)
                    key.push(0);

                for (i = 0; i < key.length; i++)
                    key[i] ^= 0x36;
                this.inner = new this.Hash().update(key);

                // 0x36 ^ 0x5c = 0x6a
                for (i = 0; i < key.length; i++)
                    key[i] ^= 0x6a;
                this.outer = new this.Hash().update(key);
            };

            Hmac.prototype.update = function update(msg, enc) {
                this.inner.update(msg, enc);
                return this;
            };

            Hmac.prototype.digest = function digest(enc) {
                this.outer.update(this.inner.digest());
                return this.outer.digest(enc);
            };

        }, {"./utils": 141, "minimalistic-assert": 147}],
        133: [function (require, module, exports) {
            'use strict';

            var utils = require('./utils');
            var common = require('./common');

            var rotl32 = utils.rotl32;
            var sum32 = utils.sum32;
            var sum32_3 = utils.sum32_3;
            var sum32_4 = utils.sum32_4;
            var BlockHash = common.BlockHash;

            function RIPEMD160() {
                if (!(this instanceof RIPEMD160))
                    return new RIPEMD160();

                BlockHash.call(this);

                this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];
                this.endian = 'little';
            }

            utils.inherits(RIPEMD160, BlockHash);
            exports.ripemd160 = RIPEMD160;

            RIPEMD160.blockSize = 512;
            RIPEMD160.outSize = 160;
            RIPEMD160.hmacStrength = 192;
            RIPEMD160.padLength = 64;

            RIPEMD160.prototype._update = function update(msg, start) {
                var A = this.h[0];
                var B = this.h[1];
                var C = this.h[2];
                var D = this.h[3];
                var E = this.h[4];
                var Ah = A;
                var Bh = B;
                var Ch = C;
                var Dh = D;
                var Eh = E;
                for (var j = 0; j < 80; j++) {
                    var T = sum32(
                        rotl32(
                            sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
                            s[j]),
                        E);
                    A = E;
                    E = D;
                    D = rotl32(C, 10);
                    C = B;
                    B = T;
                    T = sum32(
                        rotl32(
                            sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
                            sh[j]),
                        Eh);
                    Ah = Eh;
                    Eh = Dh;
                    Dh = rotl32(Ch, 10);
                    Ch = Bh;
                    Bh = T;
                }
                T = sum32_3(this.h[1], C, Dh);
                this.h[1] = sum32_3(this.h[2], D, Eh);
                this.h[2] = sum32_3(this.h[3], E, Ah);
                this.h[3] = sum32_3(this.h[4], A, Bh);
                this.h[4] = sum32_3(this.h[0], B, Ch);
                this.h[0] = T;
            };

            RIPEMD160.prototype._digest = function digest(enc) {
                if (enc === 'hex')
                    return utils.toHex32(this.h, 'little');
                else
                    return utils.split32(this.h, 'little');
            };

            function f(j, x, y, z) {
                if (j <= 15)
                    return x ^ y ^ z;
                else if (j <= 31)
                    return (x & y) | ((~x) & z);
                else if (j <= 47)
                    return (x | (~y)) ^ z;
                else if (j <= 63)
                    return (x & z) | (y & (~z));
                else
                    return x ^ (y | (~z));
            }

            function K(j) {
                if (j <= 15)
                    return 0x00000000;
                else if (j <= 31)
                    return 0x5a827999;
                else if (j <= 47)
                    return 0x6ed9eba1;
                else if (j <= 63)
                    return 0x8f1bbcdc;
                else
                    return 0xa953fd4e;
            }

            function Kh(j) {
                if (j <= 15)
                    return 0x50a28be6;
                else if (j <= 31)
                    return 0x5c4dd124;
                else if (j <= 47)
                    return 0x6d703ef3;
                else if (j <= 63)
                    return 0x7a6d76e9;
                else
                    return 0x00000000;
            }

            var r = [
                0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
                3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
                1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
                4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
            ];

            var rh = [
                5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
                6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
                15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
                8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
                12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
            ];

            var s = [
                11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
                7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
                11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
                11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
                9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
            ];

            var sh = [
                8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
                9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
                9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
                15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
                8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
            ];

        }, {"./common": 131, "./utils": 141}],
        134: [function (require, module, exports) {
            'use strict';

            exports.sha1 = require('./sha/1');
            exports.sha224 = require('./sha/224');
            exports.sha256 = require('./sha/256');
            exports.sha384 = require('./sha/384');
            exports.sha512 = require('./sha/512');

        }, {"./sha/1": 135, "./sha/224": 136, "./sha/256": 137, "./sha/384": 138, "./sha/512": 139}],
        135: [function (require, module, exports) {
            'use strict';

            var utils = require('../utils');
            var common = require('../common');
            var shaCommon = require('./common');

            var rotl32 = utils.rotl32;
            var sum32 = utils.sum32;
            var sum32_5 = utils.sum32_5;
            var ft_1 = shaCommon.ft_1;
            var BlockHash = common.BlockHash;

            var sha1_K = [
                0x5A827999, 0x6ED9EBA1,
                0x8F1BBCDC, 0xCA62C1D6
            ];

            function SHA1() {
                if (!(this instanceof SHA1))
                    return new SHA1();

                BlockHash.call(this);
                this.h = [
                    0x67452301, 0xefcdab89, 0x98badcfe,
                    0x10325476, 0xc3d2e1f0];
                this.W = new Array(80);
            }

            utils.inherits(SHA1, BlockHash);
            module.exports = SHA1;

            SHA1.blockSize = 512;
            SHA1.outSize = 160;
            SHA1.hmacStrength = 80;
            SHA1.padLength = 64;

            SHA1.prototype._update = function _update(msg, start) {
                var W = this.W;

                for (var i = 0; i < 16; i++)
                    W[i] = msg[start + i];

                for (; i < W.length; i++)
                    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

                var a = this.h[0];
                var b = this.h[1];
                var c = this.h[2];
                var d = this.h[3];
                var e = this.h[4];

                for (i = 0; i < W.length; i++) {
                    var s = ~~(i / 20);
                    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
                    e = d;
                    d = c;
                    c = rotl32(b, 30);
                    b = a;
                    a = t;
                }

                this.h[0] = sum32(this.h[0], a);
                this.h[1] = sum32(this.h[1], b);
                this.h[2] = sum32(this.h[2], c);
                this.h[3] = sum32(this.h[3], d);
                this.h[4] = sum32(this.h[4], e);
            };

            SHA1.prototype._digest = function digest(enc) {
                if (enc === 'hex')
                    return utils.toHex32(this.h, 'big');
                else
                    return utils.split32(this.h, 'big');
            };

        }, {"../common": 131, "../utils": 141, "./common": 140}],
        136: [function (require, module, exports) {
            'use strict';

            var utils = require('../utils');
            var SHA256 = require('./256');

            function SHA224() {
                if (!(this instanceof SHA224))
                    return new SHA224();

                SHA256.call(this);
                this.h = [
                    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
                    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4];
            }

            utils.inherits(SHA224, SHA256);
            module.exports = SHA224;

            SHA224.blockSize = 512;
            SHA224.outSize = 224;
            SHA224.hmacStrength = 192;
            SHA224.padLength = 64;

            SHA224.prototype._digest = function digest(enc) {
                // Just truncate output
                if (enc === 'hex')
                    return utils.toHex32(this.h.slice(0, 7), 'big');
                else
                    return utils.split32(this.h.slice(0, 7), 'big');
            };


        }, {"../utils": 141, "./256": 137}],
        137: [function (require, module, exports) {
            'use strict';

            var utils = require('../utils');
            var common = require('../common');
            var shaCommon = require('./common');
            var assert = require('minimalistic-assert');

            var sum32 = utils.sum32;
            var sum32_4 = utils.sum32_4;
            var sum32_5 = utils.sum32_5;
            var ch32 = shaCommon.ch32;
            var maj32 = shaCommon.maj32;
            var s0_256 = shaCommon.s0_256;
            var s1_256 = shaCommon.s1_256;
            var g0_256 = shaCommon.g0_256;
            var g1_256 = shaCommon.g1_256;

            var BlockHash = common.BlockHash;

            var sha256_K = [
                0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
                0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
                0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
                0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
                0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
                0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
                0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
                0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
                0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
                0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
                0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
                0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
                0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
                0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
                0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
                0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
            ];

            function SHA256() {
                if (!(this instanceof SHA256))
                    return new SHA256();

                BlockHash.call(this);
                this.h = [
                    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
                    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
                ];
                this.k = sha256_K;
                this.W = new Array(64);
            }

            utils.inherits(SHA256, BlockHash);
            module.exports = SHA256;

            SHA256.blockSize = 512;
            SHA256.outSize = 256;
            SHA256.hmacStrength = 192;
            SHA256.padLength = 64;

            SHA256.prototype._update = function _update(msg, start) {
                var W = this.W;

                for (var i = 0; i < 16; i++)
                    W[i] = msg[start + i];
                for (; i < W.length; i++)
                    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

                var a = this.h[0];
                var b = this.h[1];
                var c = this.h[2];
                var d = this.h[3];
                var e = this.h[4];
                var f = this.h[5];
                var g = this.h[6];
                var h = this.h[7];

                assert(this.k.length === W.length);
                for (i = 0; i < W.length; i++) {
                    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
                    var T2 = sum32(s0_256(a), maj32(a, b, c));
                    h = g;
                    g = f;
                    f = e;
                    e = sum32(d, T1);
                    d = c;
                    c = b;
                    b = a;
                    a = sum32(T1, T2);
                }

                this.h[0] = sum32(this.h[0], a);
                this.h[1] = sum32(this.h[1], b);
                this.h[2] = sum32(this.h[2], c);
                this.h[3] = sum32(this.h[3], d);
                this.h[4] = sum32(this.h[4], e);
                this.h[5] = sum32(this.h[5], f);
                this.h[6] = sum32(this.h[6], g);
                this.h[7] = sum32(this.h[7], h);
            };

            SHA256.prototype._digest = function digest(enc) {
                if (enc === 'hex')
                    return utils.toHex32(this.h, 'big');
                else
                    return utils.split32(this.h, 'big');
            };

        }, {"../common": 131, "../utils": 141, "./common": 140, "minimalistic-assert": 147}],
        138: [function (require, module, exports) {
            'use strict';

            var utils = require('../utils');

            var SHA512 = require('./512');

            function SHA384() {
                if (!(this instanceof SHA384))
                    return new SHA384();

                SHA512.call(this);
                this.h = [
                    0xcbbb9d5d, 0xc1059ed8,
                    0x629a292a, 0x367cd507,
                    0x9159015a, 0x3070dd17,
                    0x152fecd8, 0xf70e5939,
                    0x67332667, 0xffc00b31,
                    0x8eb44a87, 0x68581511,
                    0xdb0c2e0d, 0x64f98fa7,
                    0x47b5481d, 0xbefa4fa4];
            }

            utils.inherits(SHA384, SHA512);
            module.exports = SHA384;

            SHA384.blockSize = 1024;
            SHA384.outSize = 384;
            SHA384.hmacStrength = 192;
            SHA384.padLength = 128;

            SHA384.prototype._digest = function digest(enc) {
                if (enc === 'hex')
                    return utils.toHex32(this.h.slice(0, 12), 'big');
                else
                    return utils.split32(this.h.slice(0, 12), 'big');
            };

        }, {"../utils": 141, "./512": 139}],
        139: [function (require, module, exports) {
            'use strict';

            var utils = require('../utils');
            var common = require('../common');
            var assert = require('minimalistic-assert');

            var rotr64_hi = utils.rotr64_hi;
            var rotr64_lo = utils.rotr64_lo;
            var shr64_hi = utils.shr64_hi;
            var shr64_lo = utils.shr64_lo;
            var sum64 = utils.sum64;
            var sum64_hi = utils.sum64_hi;
            var sum64_lo = utils.sum64_lo;
            var sum64_4_hi = utils.sum64_4_hi;
            var sum64_4_lo = utils.sum64_4_lo;
            var sum64_5_hi = utils.sum64_5_hi;
            var sum64_5_lo = utils.sum64_5_lo;

            var BlockHash = common.BlockHash;

            var sha512_K = [
                0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
                0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
                0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
                0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
                0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
                0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
                0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
                0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
                0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
                0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
                0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
                0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
                0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
                0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
                0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
                0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
                0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
                0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
                0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
                0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
                0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
                0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
                0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
                0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
                0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
                0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
                0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
                0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
                0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
                0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
                0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
                0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
                0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
                0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
                0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
                0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
                0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
                0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
                0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
                0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
            ];

            function SHA512() {
                if (!(this instanceof SHA512))
                    return new SHA512();

                BlockHash.call(this);
                this.h = [
                    0x6a09e667, 0xf3bcc908,
                    0xbb67ae85, 0x84caa73b,
                    0x3c6ef372, 0xfe94f82b,
                    0xa54ff53a, 0x5f1d36f1,
                    0x510e527f, 0xade682d1,
                    0x9b05688c, 0x2b3e6c1f,
                    0x1f83d9ab, 0xfb41bd6b,
                    0x5be0cd19, 0x137e2179];
                this.k = sha512_K;
                this.W = new Array(160);
            }

            utils.inherits(SHA512, BlockHash);
            module.exports = SHA512;

            SHA512.blockSize = 1024;
            SHA512.outSize = 512;
            SHA512.hmacStrength = 192;
            SHA512.padLength = 128;

            SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
                var W = this.W;

                // 32 x 32bit words
                for (var i = 0; i < 32; i++)
                    W[i] = msg[start + i];
                for (; i < W.length; i += 2) {
                    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
                    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
                    var c1_hi = W[i - 14];  // i - 7
                    var c1_lo = W[i - 13];
                    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
                    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
                    var c3_hi = W[i - 32];  // i - 16
                    var c3_lo = W[i - 31];

                    W[i] = sum64_4_hi(
                        c0_hi, c0_lo,
                        c1_hi, c1_lo,
                        c2_hi, c2_lo,
                        c3_hi, c3_lo);
                    W[i + 1] = sum64_4_lo(
                        c0_hi, c0_lo,
                        c1_hi, c1_lo,
                        c2_hi, c2_lo,
                        c3_hi, c3_lo);
                }
            };

            SHA512.prototype._update = function _update(msg, start) {
                this._prepareBlock(msg, start);

                var W = this.W;

                var ah = this.h[0];
                var al = this.h[1];
                var bh = this.h[2];
                var bl = this.h[3];
                var ch = this.h[4];
                var cl = this.h[5];
                var dh = this.h[6];
                var dl = this.h[7];
                var eh = this.h[8];
                var el = this.h[9];
                var fh = this.h[10];
                var fl = this.h[11];
                var gh = this.h[12];
                var gl = this.h[13];
                var hh = this.h[14];
                var hl = this.h[15];

                assert(this.k.length === W.length);
                for (var i = 0; i < W.length; i += 2) {
                    var c0_hi = hh;
                    var c0_lo = hl;
                    var c1_hi = s1_512_hi(eh, el);
                    var c1_lo = s1_512_lo(eh, el);
                    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
                    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
                    var c3_hi = this.k[i];
                    var c3_lo = this.k[i + 1];
                    var c4_hi = W[i];
                    var c4_lo = W[i + 1];

                    var T1_hi = sum64_5_hi(
                        c0_hi, c0_lo,
                        c1_hi, c1_lo,
                        c2_hi, c2_lo,
                        c3_hi, c3_lo,
                        c4_hi, c4_lo);
                    var T1_lo = sum64_5_lo(
                        c0_hi, c0_lo,
                        c1_hi, c1_lo,
                        c2_hi, c2_lo,
                        c3_hi, c3_lo,
                        c4_hi, c4_lo);

                    c0_hi = s0_512_hi(ah, al);
                    c0_lo = s0_512_lo(ah, al);
                    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
                    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

                    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
                    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

                    hh = gh;
                    hl = gl;

                    gh = fh;
                    gl = fl;

                    fh = eh;
                    fl = el;

                    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
                    el = sum64_lo(dl, dl, T1_hi, T1_lo);

                    dh = ch;
                    dl = cl;

                    ch = bh;
                    cl = bl;

                    bh = ah;
                    bl = al;

                    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
                    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
                }

                sum64(this.h, 0, ah, al);
                sum64(this.h, 2, bh, bl);
                sum64(this.h, 4, ch, cl);
                sum64(this.h, 6, dh, dl);
                sum64(this.h, 8, eh, el);
                sum64(this.h, 10, fh, fl);
                sum64(this.h, 12, gh, gl);
                sum64(this.h, 14, hh, hl);
            };

            SHA512.prototype._digest = function digest(enc) {
                if (enc === 'hex')
                    return utils.toHex32(this.h, 'big');
                else
                    return utils.split32(this.h, 'big');
            };

            function ch64_hi(xh, xl, yh, yl, zh) {
                var r = (xh & yh) ^ ((~xh) & zh);
                if (r < 0)
                    r += 0x100000000;
                return r;
            }

            function ch64_lo(xh, xl, yh, yl, zh, zl) {
                var r = (xl & yl) ^ ((~xl) & zl);
                if (r < 0)
                    r += 0x100000000;
                return r;
            }

            function maj64_hi(xh, xl, yh, yl, zh) {
                var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
                if (r < 0)
                    r += 0x100000000;
                return r;
            }

            function maj64_lo(xh, xl, yh, yl, zh, zl) {
                var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
                if (r < 0)
                    r += 0x100000000;
                return r;
            }

            function s0_512_hi(xh, xl) {
                var c0_hi = rotr64_hi(xh, xl, 28);
                var c1_hi = rotr64_hi(xl, xh, 2);  // 34
                var c2_hi = rotr64_hi(xl, xh, 7);  // 39

                var r = c0_hi ^ c1_hi ^ c2_hi;
                if (r < 0)
                    r += 0x100000000;
                return r;
            }

            function s0_512_lo(xh, xl) {
                var c0_lo = rotr64_lo(xh, xl, 28);
                var c1_lo = rotr64_lo(xl, xh, 2);  // 34
                var c2_lo = rotr64_lo(xl, xh, 7);  // 39

                var r = c0_lo ^ c1_lo ^ c2_lo;
                if (r < 0)
                    r += 0x100000000;
                return r;
            }

            function s1_512_hi(xh, xl) {
                var c0_hi = rotr64_hi(xh, xl, 14);
                var c1_hi = rotr64_hi(xh, xl, 18);
                var c2_hi = rotr64_hi(xl, xh, 9);  // 41

                var r = c0_hi ^ c1_hi ^ c2_hi;
                if (r < 0)
                    r += 0x100000000;
                return r;
            }

            function s1_512_lo(xh, xl) {
                var c0_lo = rotr64_lo(xh, xl, 14);
                var c1_lo = rotr64_lo(xh, xl, 18);
                var c2_lo = rotr64_lo(xl, xh, 9);  // 41

                var r = c0_lo ^ c1_lo ^ c2_lo;
                if (r < 0)
                    r += 0x100000000;
                return r;
            }

            function g0_512_hi(xh, xl) {
                var c0_hi = rotr64_hi(xh, xl, 1);
                var c1_hi = rotr64_hi(xh, xl, 8);
                var c2_hi = shr64_hi(xh, xl, 7);

                var r = c0_hi ^ c1_hi ^ c2_hi;
                if (r < 0)
                    r += 0x100000000;
                return r;
            }

            function g0_512_lo(xh, xl) {
                var c0_lo = rotr64_lo(xh, xl, 1);
                var c1_lo = rotr64_lo(xh, xl, 8);
                var c2_lo = shr64_lo(xh, xl, 7);

                var r = c0_lo ^ c1_lo ^ c2_lo;
                if (r < 0)
                    r += 0x100000000;
                return r;
            }

            function g1_512_hi(xh, xl) {
                var c0_hi = rotr64_hi(xh, xl, 19);
                var c1_hi = rotr64_hi(xl, xh, 29);  // 61
                var c2_hi = shr64_hi(xh, xl, 6);

                var r = c0_hi ^ c1_hi ^ c2_hi;
                if (r < 0)
                    r += 0x100000000;
                return r;
            }

            function g1_512_lo(xh, xl) {
                var c0_lo = rotr64_lo(xh, xl, 19);
                var c1_lo = rotr64_lo(xl, xh, 29);  // 61
                var c2_lo = shr64_lo(xh, xl, 6);

                var r = c0_lo ^ c1_lo ^ c2_lo;
                if (r < 0)
                    r += 0x100000000;
                return r;
            }

        }, {"../common": 131, "../utils": 141, "minimalistic-assert": 147}],
        140: [function (require, module, exports) {
            'use strict';

            var utils = require('../utils');
            var rotr32 = utils.rotr32;

            function ft_1(s, x, y, z) {
                if (s === 0)
                    return ch32(x, y, z);
                if (s === 1 || s === 3)
                    return p32(x, y, z);
                if (s === 2)
                    return maj32(x, y, z);
            }

            exports.ft_1 = ft_1;

            function ch32(x, y, z) {
                return (x & y) ^ ((~x) & z);
            }

            exports.ch32 = ch32;

            function maj32(x, y, z) {
                return (x & y) ^ (x & z) ^ (y & z);
            }

            exports.maj32 = maj32;

            function p32(x, y, z) {
                return x ^ y ^ z;
            }

            exports.p32 = p32;

            function s0_256(x) {
                return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
            }

            exports.s0_256 = s0_256;

            function s1_256(x) {
                return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
            }

            exports.s1_256 = s1_256;

            function g0_256(x) {
                return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
            }

            exports.g0_256 = g0_256;

            function g1_256(x) {
                return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
            }

            exports.g1_256 = g1_256;

        }, {"../utils": 141}],
        141: [function (require, module, exports) {
            'use strict';

            var assert = require('minimalistic-assert');
            var inherits = require('inherits');

            exports.inherits = inherits;

            function toArray(msg, enc) {
                if (Array.isArray(msg))
                    return msg.slice();
                if (!msg)
                    return [];
                var res = [];
                if (typeof msg === 'string') {
                    if (!enc) {
                        for (var i = 0; i < msg.length; i++) {
                            var c = msg.charCodeAt(i);
                            var hi = c >> 8;
                            var lo = c & 0xff;
                            if (hi)
                                res.push(hi, lo);
                            else
                                res.push(lo);
                        }
                    } else if (enc === 'hex') {
                        msg = msg.replace(/[^a-z0-9]+/ig, '');
                        if (msg.length % 2 !== 0)
                            msg = '0' + msg;
                        for (i = 0; i < msg.length; i += 2)
                            res.push(parseInt(msg[i] + msg[i + 1], 16));
                    }
                } else {
                    for (i = 0; i < msg.length; i++)
                        res[i] = msg[i] | 0;
                }
                return res;
            }

            exports.toArray = toArray;

            function toHex(msg) {
                var res = '';
                for (var i = 0; i < msg.length; i++)
                    res += zero2(msg[i].toString(16));
                return res;
            }

            exports.toHex = toHex;

            function htonl(w) {
                var res = (w >>> 24) |
                    ((w >>> 8) & 0xff00) |
                    ((w << 8) & 0xff0000) |
                    ((w & 0xff) << 24);
                return res >>> 0;
            }

            exports.htonl = htonl;

            function toHex32(msg, endian) {
                var res = '';
                for (var i = 0; i < msg.length; i++) {
                    var w = msg[i];
                    if (endian === 'little')
                        w = htonl(w);
                    res += zero8(w.toString(16));
                }
                return res;
            }

            exports.toHex32 = toHex32;

            function zero2(word) {
                if (word.length === 1)
                    return '0' + word;
                else
                    return word;
            }

            exports.zero2 = zero2;

            function zero8(word) {
                if (word.length === 7)
                    return '0' + word;
                else if (word.length === 6)
                    return '00' + word;
                else if (word.length === 5)
                    return '000' + word;
                else if (word.length === 4)
                    return '0000' + word;
                else if (word.length === 3)
                    return '00000' + word;
                else if (word.length === 2)
                    return '000000' + word;
                else if (word.length === 1)
                    return '0000000' + word;
                else
                    return word;
            }

            exports.zero8 = zero8;

            function join32(msg, start, end, endian) {
                var len = end - start;
                assert(len % 4 === 0);
                var res = new Array(len / 4);
                for (var i = 0, k = start; i < res.length; i++, k += 4) {
                    var w;
                    if (endian === 'big')
                        w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
                    else
                        w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
                    res[i] = w >>> 0;
                }
                return res;
            }

            exports.join32 = join32;

            function split32(msg, endian) {
                var res = new Array(msg.length * 4);
                for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
                    var m = msg[i];
                    if (endian === 'big') {
                        res[k] = m >>> 24;
                        res[k + 1] = (m >>> 16) & 0xff;
                        res[k + 2] = (m >>> 8) & 0xff;
                        res[k + 3] = m & 0xff;
                    } else {
                        res[k + 3] = m >>> 24;
                        res[k + 2] = (m >>> 16) & 0xff;
                        res[k + 1] = (m >>> 8) & 0xff;
                        res[k] = m & 0xff;
                    }
                }
                return res;
            }

            exports.split32 = split32;

            function rotr32(w, b) {
                return (w >>> b) | (w << (32 - b));
            }

            exports.rotr32 = rotr32;

            function rotl32(w, b) {
                return (w << b) | (w >>> (32 - b));
            }

            exports.rotl32 = rotl32;

            function sum32(a, b) {
                return (a + b) >>> 0;
            }

            exports.sum32 = sum32;

            function sum32_3(a, b, c) {
                return (a + b + c) >>> 0;
            }

            exports.sum32_3 = sum32_3;

            function sum32_4(a, b, c, d) {
                return (a + b + c + d) >>> 0;
            }

            exports.sum32_4 = sum32_4;

            function sum32_5(a, b, c, d, e) {
                return (a + b + c + d + e) >>> 0;
            }

            exports.sum32_5 = sum32_5;

            function sum64(buf, pos, ah, al) {
                var bh = buf[pos];
                var bl = buf[pos + 1];

                var lo = (al + bl) >>> 0;
                var hi = (lo < al ? 1 : 0) + ah + bh;
                buf[pos] = hi >>> 0;
                buf[pos + 1] = lo;
            }

            exports.sum64 = sum64;

            function sum64_hi(ah, al, bh, bl) {
                var lo = (al + bl) >>> 0;
                var hi = (lo < al ? 1 : 0) + ah + bh;
                return hi >>> 0;
            }

            exports.sum64_hi = sum64_hi;

            function sum64_lo(ah, al, bh, bl) {
                var lo = al + bl;
                return lo >>> 0;
            }

            exports.sum64_lo = sum64_lo;

            function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
                var carry = 0;
                var lo = al;
                lo = (lo + bl) >>> 0;
                carry += lo < al ? 1 : 0;
                lo = (lo + cl) >>> 0;
                carry += lo < cl ? 1 : 0;
                lo = (lo + dl) >>> 0;
                carry += lo < dl ? 1 : 0;

                var hi = ah + bh + ch + dh + carry;
                return hi >>> 0;
            }

            exports.sum64_4_hi = sum64_4_hi;

            function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
                var lo = al + bl + cl + dl;
                return lo >>> 0;
            }

            exports.sum64_4_lo = sum64_4_lo;

            function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
                var carry = 0;
                var lo = al;
                lo = (lo + bl) >>> 0;
                carry += lo < al ? 1 : 0;
                lo = (lo + cl) >>> 0;
                carry += lo < cl ? 1 : 0;
                lo = (lo + dl) >>> 0;
                carry += lo < dl ? 1 : 0;
                lo = (lo + el) >>> 0;
                carry += lo < el ? 1 : 0;

                var hi = ah + bh + ch + dh + eh + carry;
                return hi >>> 0;
            }

            exports.sum64_5_hi = sum64_5_hi;

            function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
                var lo = al + bl + cl + dl + el;

                return lo >>> 0;
            }

            exports.sum64_5_lo = sum64_5_lo;

            function rotr64_hi(ah, al, num) {
                var r = (al << (32 - num)) | (ah >>> num);
                return r >>> 0;
            }

            exports.rotr64_hi = rotr64_hi;

            function rotr64_lo(ah, al, num) {
                var r = (ah << (32 - num)) | (al >>> num);
                return r >>> 0;
            }

            exports.rotr64_lo = rotr64_lo;

            function shr64_hi(ah, al, num) {
                return ah >>> num;
            }

            exports.shr64_hi = shr64_hi;

            function shr64_lo(ah, al, num) {
                var r = (ah << (32 - num)) | (al >>> num);
                return r >>> 0;
            }

            exports.shr64_lo = shr64_lo;

        }, {"inherits": 143, "minimalistic-assert": 147}],
        142: [function (require, module, exports) {
            'use strict';

            var hash = require('hash.js');
            var utils = require('minimalistic-crypto-utils');
            var assert = require('minimalistic-assert');

            function HmacDRBG(options) {
                if (!(this instanceof HmacDRBG))
                    return new HmacDRBG(options);
                this.hash = options.hash;
                this.predResist = !!options.predResist;

                this.outLen = this.hash.outSize;
                this.minEntropy = options.minEntropy || this.hash.hmacStrength;

                this._reseed = null;
                this.reseedInterval = null;
                this.K = null;
                this.V = null;

                var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');
                var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');
                var pers = utils.toArray(options.pers, options.persEnc || 'hex');
                assert(entropy.length >= (this.minEntropy / 8),
                    'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
                this._init(entropy, nonce, pers);
            }

            module.exports = HmacDRBG;

            HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
                var seed = entropy.concat(nonce).concat(pers);

                this.K = new Array(this.outLen / 8);
                this.V = new Array(this.outLen / 8);
                for (var i = 0; i < this.V.length; i++) {
                    this.K[i] = 0x00;
                    this.V[i] = 0x01;
                }

                this._update(seed);
                this._reseed = 1;
                this.reseedInterval = 0x1000000000000;  // 2^48
            };

            HmacDRBG.prototype._hmac = function hmac() {
                return new hash.hmac(this.hash, this.K);
            };

            HmacDRBG.prototype._update = function update(seed) {
                var kmac = this._hmac()
                    .update(this.V)
                    .update([0x00]);
                if (seed)
                    kmac = kmac.update(seed);
                this.K = kmac.digest();
                this.V = this._hmac().update(this.V).digest();
                if (!seed)
                    return;

                this.K = this._hmac()
                    .update(this.V)
                    .update([0x01])
                    .update(seed)
                    .digest();
                this.V = this._hmac().update(this.V).digest();
            };

            HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
                // Optional entropy enc
                if (typeof entropyEnc !== 'string') {
                    addEnc = add;
                    add = entropyEnc;
                    entropyEnc = null;
                }

                entropy = utils.toArray(entropy, entropyEnc);
                add = utils.toArray(add, addEnc);

                assert(entropy.length >= (this.minEntropy / 8),
                    'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

                this._update(entropy.concat(add || []));
                this._reseed = 1;
            };

            HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
                if (this._reseed > this.reseedInterval)
                    throw new Error('Reseed is required');

                // Optional encoding
                if (typeof enc !== 'string') {
                    addEnc = add;
                    add = enc;
                    enc = null;
                }

                // Optional additional data
                if (add) {
                    add = utils.toArray(add, addEnc || 'hex');
                    this._update(add);
                }

                var temp = [];
                while (temp.length < len) {
                    this.V = this._hmac().update(this.V).digest();
                    temp = temp.concat(this.V);
                }

                var res = temp.slice(0, len);
                this._update(add);
                this._reseed++;
                return utils.encode(res, enc);
            };

        }, {"hash.js": 130, "minimalistic-assert": 147, "minimalistic-crypto-utils": 148}],
        143: [function (require, module, exports) {
            arguments[4][52][0].apply(exports, arguments)
        }, {"dup": 52}],
        144: [function (require, module, exports) {
            /*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
            module.exports = function (obj) {
                return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
            }

            function isBuffer(obj) {
                return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
            }

// For Node v0.10 support. Remove this eventually.
            function isSlowBuffer(obj) {
                return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
            }

        }, {}],
        145: [function (require, module, exports) {
            module.exports = Array.isArray || function (arr) {
                return Object.prototype.toString.call(arr) == '[object Array]';
            };

        }, {}],
        146: [function (require, module, exports) {
            var bn = require('bn.js');
            var brorand = require('brorand');

            function MillerRabin(rand) {
                this.rand = rand || new brorand.Rand();
            }

            module.exports = MillerRabin;

            MillerRabin.create = function create(rand) {
                return new MillerRabin(rand);
            };

            MillerRabin.prototype._rand = function _rand(n) {
                var len = n.bitLength();
                var buf = this.rand.generate(Math.ceil(len / 8));

                // Set low bits
                buf[0] |= 3;

                // Mask high bits
                var mask = len & 0x7;
                if (mask !== 0)
                    buf[buf.length - 1] >>= 7 - mask;

                return new bn(buf);
            }

            MillerRabin.prototype.test = function test(n, k, cb) {
                var len = n.bitLength();
                var red = bn.mont(n);
                var rone = new bn(1).toRed(red);

                if (!k)
                    k = Math.max(1, (len / 48) | 0);

                // Find d and s, (n - 1) = (2 ^ s) * d;
                var n1 = n.subn(1);
                var n2 = n1.subn(1);
                for (var s = 0; !n1.testn(s); s++) {
                }
                var d = n.shrn(s);

                var rn1 = n1.toRed(red);

                var prime = true;
                for (; k > 0; k--) {
                    var a = this._rand(n2);
                    if (cb)
                        cb(a);

                    var x = a.toRed(red).redPow(d);
                    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
                        continue;

                    for (var i = 1; i < s; i++) {
                        x = x.redSqr();

                        if (x.cmp(rone) === 0)
                            return false;
                        if (x.cmp(rn1) === 0)
                            break;
                    }

                    if (i === s)
                        return false;
                }

                return prime;
            };

            MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
                var len = n.bitLength();
                var red = bn.mont(n);
                var rone = new bn(1).toRed(red);

                if (!k)
                    k = Math.max(1, (len / 48) | 0);

                // Find d and s, (n - 1) = (2 ^ s) * d;
                var n1 = n.subn(1);
                var n2 = n1.subn(1);
                for (var s = 0; !n1.testn(s); s++) {
                }
                var d = n.shrn(s);

                var rn1 = n1.toRed(red);

                for (; k > 0; k--) {
                    var a = this._rand(n2);

                    var g = n.gcd(a);
                    if (g.cmpn(1) !== 0)
                        return g;

                    var x = a.toRed(red).redPow(d);
                    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
                        continue;

                    for (var i = 1; i < s; i++) {
                        x = x.redSqr();

                        if (x.cmp(rone) === 0)
                            return x.fromRed().subn(1).gcd(n);
                        if (x.cmp(rn1) === 0)
                            break;
                    }

                    if (i === s) {
                        x = x.redSqr();
                        return x.fromRed().subn(1).gcd(n);
                    }
                }

                return false;
            };

        }, {"bn.js": 20, "brorand": 21}],
        147: [function (require, module, exports) {
            module.exports = assert;

            function assert(val, msg) {
                if (!val)
                    throw new Error(msg || 'Assertion failed');
            }

            assert.equal = function assertEqual(l, r, msg) {
                if (l != r)
                    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
            };

        }, {}],
        148: [function (require, module, exports) {
            'use strict';

            var utils = exports;

            function toArray(msg, enc) {
                if (Array.isArray(msg))
                    return msg.slice();
                if (!msg)
                    return [];
                var res = [];
                if (typeof msg !== 'string') {
                    for (var i = 0; i < msg.length; i++)
                        res[i] = msg[i] | 0;
                    return res;
                }
                if (enc === 'hex') {
                    msg = msg.replace(/[^a-z0-9]+/ig, '');
                    if (msg.length % 2 !== 0)
                        msg = '0' + msg;
                    for (var i = 0; i < msg.length; i += 2)
                        res.push(parseInt(msg[i] + msg[i + 1], 16));
                } else {
                    for (var i = 0; i < msg.length; i++) {
                        var c = msg.charCodeAt(i);
                        var hi = c >> 8;
                        var lo = c & 0xff;
                        if (hi)
                            res.push(hi, lo);
                        else
                            res.push(lo);
                    }
                }
                return res;
            }

            utils.toArray = toArray;

            function zero2(word) {
                if (word.length === 1)
                    return '0' + word;
                else
                    return word;
            }

            utils.zero2 = zero2;

            function toHex(msg) {
                var res = '';
                for (var i = 0; i < msg.length; i++)
                    res += zero2(msg[i].toString(16));
                return res;
            }

            utils.toHex = toHex;

            utils.encode = function encode(arr, enc) {
                if (enc === 'hex')
                    return toHex(arr);
                else
                    return arr;
            };

        }, {}],
        149: [function (require, module, exports) {
            module.exports = {
                "2.16.840.1.101.3.4.1.1": "aes-128-ecb",
                "2.16.840.1.101.3.4.1.2": "aes-128-cbc",
                "2.16.840.1.101.3.4.1.3": "aes-128-ofb",
                "2.16.840.1.101.3.4.1.4": "aes-128-cfb",
                "2.16.840.1.101.3.4.1.21": "aes-192-ecb",
                "2.16.840.1.101.3.4.1.22": "aes-192-cbc",
                "2.16.840.1.101.3.4.1.23": "aes-192-ofb",
                "2.16.840.1.101.3.4.1.24": "aes-192-cfb",
                "2.16.840.1.101.3.4.1.41": "aes-256-ecb",
                "2.16.840.1.101.3.4.1.42": "aes-256-cbc",
                "2.16.840.1.101.3.4.1.43": "aes-256-ofb",
                "2.16.840.1.101.3.4.1.44": "aes-256-cfb"
            }
        }, {}],
        150: [function (require, module, exports) {
// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
// Fedor, you are amazing.
            'use strict'

            var asn1 = require('asn1.js')

            exports.certificate = require('./certificate')

            var RSAPrivateKey = asn1.define('RSAPrivateKey', function () {
                this.seq().obj(
                    this.key('version').int(),
                    this.key('modulus').int(),
                    this.key('publicExponent').int(),
                    this.key('privateExponent').int(),
                    this.key('prime1').int(),
                    this.key('prime2').int(),
                    this.key('exponent1').int(),
                    this.key('exponent2').int(),
                    this.key('coefficient').int()
                )
            })
            exports.RSAPrivateKey = RSAPrivateKey

            var RSAPublicKey = asn1.define('RSAPublicKey', function () {
                this.seq().obj(
                    this.key('modulus').int(),
                    this.key('publicExponent').int()
                )
            })
            exports.RSAPublicKey = RSAPublicKey

            var PublicKey = asn1.define('SubjectPublicKeyInfo', function () {
                this.seq().obj(
                    this.key('algorithm').use(AlgorithmIdentifier),
                    this.key('subjectPublicKey').bitstr()
                )
            })
            exports.PublicKey = PublicKey

            var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function () {
                this.seq().obj(
                    this.key('algorithm').objid(),
                    this.key('none').null_().optional(),
                    this.key('curve').objid().optional(),
                    this.key('params').seq().obj(
                        this.key('p').int(),
                        this.key('q').int(),
                        this.key('g').int()
                    ).optional()
                )
            })

            var PrivateKeyInfo = asn1.define('PrivateKeyInfo', function () {
                this.seq().obj(
                    this.key('version').int(),
                    this.key('algorithm').use(AlgorithmIdentifier),
                    this.key('subjectPrivateKey').octstr()
                )
            })
            exports.PrivateKey = PrivateKeyInfo
            var EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function () {
                this.seq().obj(
                    this.key('algorithm').seq().obj(
                        this.key('id').objid(),
                        this.key('decrypt').seq().obj(
                            this.key('kde').seq().obj(
                                this.key('id').objid(),
                                this.key('kdeparams').seq().obj(
                                    this.key('salt').octstr(),
                                    this.key('iters').int()
                                )
                            ),
                            this.key('cipher').seq().obj(
                                this.key('algo').objid(),
                                this.key('iv').octstr()
                            )
                        )
                    ),
                    this.key('subjectPrivateKey').octstr()
                )
            })

            exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo

            var DSAPrivateKey = asn1.define('DSAPrivateKey', function () {
                this.seq().obj(
                    this.key('version').int(),
                    this.key('p').int(),
                    this.key('q').int(),
                    this.key('g').int(),
                    this.key('pub_key').int(),
                    this.key('priv_key').int()
                )
            })
            exports.DSAPrivateKey = DSAPrivateKey

            exports.DSAparam = asn1.define('DSAparam', function () {
                this.int()
            })

            var ECPrivateKey = asn1.define('ECPrivateKey', function () {
                this.seq().obj(
                    this.key('version').int(),
                    this.key('privateKey').octstr(),
                    this.key('parameters').optional().explicit(0).use(ECParameters),
                    this.key('publicKey').optional().explicit(1).bitstr()
                )
            })
            exports.ECPrivateKey = ECPrivateKey

            var ECParameters = asn1.define('ECParameters', function () {
                this.choice({
                    namedCurve: this.objid()
                })
            })

            exports.signature = asn1.define('signature', function () {
                this.seq().obj(
                    this.key('r').int(),
                    this.key('s').int()
                )
            })

        }, {"./certificate": 151, "asn1.js": 5}],
        151: [function (require, module, exports) {
// from https://github.com/Rantanen/node-dtls/blob/25a7dc861bda38cfeac93a723500eea4f0ac2e86/Certificate.js
// thanks to @Rantanen

            'use strict'

            var asn = require('asn1.js')

            var Time = asn.define('Time', function () {
                this.choice({
                    utcTime: this.utctime(),
                    generalTime: this.gentime()
                })
            })

            var AttributeTypeValue = asn.define('AttributeTypeValue', function () {
                this.seq().obj(
                    this.key('type').objid(),
                    this.key('value').any()
                )
            })

            var AlgorithmIdentifier = asn.define('AlgorithmIdentifier', function () {
                this.seq().obj(
                    this.key('algorithm').objid(),
                    this.key('parameters').optional()
                )
            })

            var SubjectPublicKeyInfo = asn.define('SubjectPublicKeyInfo', function () {
                this.seq().obj(
                    this.key('algorithm').use(AlgorithmIdentifier),
                    this.key('subjectPublicKey').bitstr()
                )
            })

            var RelativeDistinguishedName = asn.define('RelativeDistinguishedName', function () {
                this.setof(AttributeTypeValue)
            })

            var RDNSequence = asn.define('RDNSequence', function () {
                this.seqof(RelativeDistinguishedName)
            })

            var Name = asn.define('Name', function () {
                this.choice({
                    rdnSequence: this.use(RDNSequence)
                })
            })

            var Validity = asn.define('Validity', function () {
                this.seq().obj(
                    this.key('notBefore').use(Time),
                    this.key('notAfter').use(Time)
                )
            })

            var Extension = asn.define('Extension', function () {
                this.seq().obj(
                    this.key('extnID').objid(),
                    this.key('critical').bool().def(false),
                    this.key('extnValue').octstr()
                )
            })

            var TBSCertificate = asn.define('TBSCertificate', function () {
                this.seq().obj(
                    this.key('version').explicit(0).int(),
                    this.key('serialNumber').int(),
                    this.key('signature').use(AlgorithmIdentifier),
                    this.key('issuer').use(Name),
                    this.key('validity').use(Validity),
                    this.key('subject').use(Name),
                    this.key('subjectPublicKeyInfo').use(SubjectPublicKeyInfo),
                    this.key('issuerUniqueID').implicit(1).bitstr().optional(),
                    this.key('subjectUniqueID').implicit(2).bitstr().optional(),
                    this.key('extensions').explicit(3).seqof(Extension).optional()
                )
            })

            var X509Certificate = asn.define('X509Certificate', function () {
                this.seq().obj(
                    this.key('tbsCertificate').use(TBSCertificate),
                    this.key('signatureAlgorithm').use(AlgorithmIdentifier),
                    this.key('signatureValue').bitstr()
                )
            })

            module.exports = X509Certificate

        }, {"asn1.js": 5}],
        152: [function (require, module, exports) {
            (function (Buffer) {
// adapted from https://github.com/apatil/pemstrip
                var findProc = /Proc-Type: 4,ENCRYPTED\n\r?DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)\n\r?\n\r?([0-9A-z\n\r\+\/\=]+)\n\r?/m
                var startRegex = /^-----BEGIN ((?:.* KEY)|CERTIFICATE)-----\n/m
                var fullRegex = /^-----BEGIN ((?:.* KEY)|CERTIFICATE)-----\n\r?([0-9A-z\n\r\+\/\=]+)\n\r?-----END \1-----$/m
                var evp = require('evp_bytestokey')
                var ciphers = require('browserify-aes')
                module.exports = function (okey, password) {
                    var key = okey.toString()
                    var match = key.match(findProc)
                    var decrypted
                    if (!match) {
                        var match2 = key.match(fullRegex)
                        decrypted = new Buffer(match2[2].replace(/\r?\n/g, ''), 'base64')
                    } else {
                        var suite = 'aes' + match[1]
                        var iv = new Buffer(match[2], 'hex')
                        var cipherText = new Buffer(match[3].replace(/\r?\n/g, ''), 'base64')
                        var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key
                        var out = []
                        var cipher = ciphers.createDecipheriv(suite, cipherKey, iv)
                        out.push(cipher.update(cipherText))
                        out.push(cipher.final())
                        decrypted = Buffer.concat(out)
                    }
                    var tag = key.match(startRegex)[1]
                    return {
                        tag: tag,
                        data: decrypted
                    }
                }

            }).call(this, require("buffer").Buffer)
        }, {"browserify-aes": 25, "buffer": 57, "evp_bytestokey": 128}],
        153: [function (require, module, exports) {
            (function (Buffer) {
                var asn1 = require('./asn1')
                var aesid = require('./aesid.json')
                var fixProc = require('./fixProc')
                var ciphers = require('browserify-aes')
                var compat = require('pbkdf2')
                module.exports = parseKeys

                function parseKeys(buffer) {
                    var password
                    if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {
                        password = buffer.passphrase
                        buffer = buffer.key
                    }
                    if (typeof buffer === 'string') {
                        buffer = new Buffer(buffer)
                    }

                    var stripped = fixProc(buffer, password)

                    var type = stripped.tag
                    var data = stripped.data
                    var subtype, ndata
                    switch (type) {
                        case 'CERTIFICATE':
                            ndata = asn1.certificate.decode(data, 'der').tbsCertificate.subjectPublicKeyInfo
                        // falls through
                        case 'PUBLIC KEY':
                            if (!ndata) {
                                ndata = asn1.PublicKey.decode(data, 'der')
                            }
                            subtype = ndata.algorithm.algorithm.join('.')
                            switch (subtype) {
                                case '1.2.840.113549.1.1.1':
                                    return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der')
                                case '1.2.840.10045.2.1':
                                    ndata.subjectPrivateKey = ndata.subjectPublicKey
                                    return {
                                        type: 'ec',
                                        data: ndata
                                    }
                                case '1.2.840.10040.4.1':
                                    ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der')
                                    return {
                                        type: 'dsa',
                                        data: ndata.algorithm.params
                                    }
                                default:
                                    throw new Error('unknown key id ' + subtype)
                            }
                            throw new Error('unknown key type ' + type)
                        case 'ENCRYPTED PRIVATE KEY':
                            data = asn1.EncryptedPrivateKey.decode(data, 'der')
                            data = decrypt(data, password)
                        // falls through
                        case 'PRIVATE KEY':
                            ndata = asn1.PrivateKey.decode(data, 'der')
                            subtype = ndata.algorithm.algorithm.join('.')
                            switch (subtype) {
                                case '1.2.840.113549.1.1.1':
                                    return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der')
                                case '1.2.840.10045.2.1':
                                    return {
                                        curve: ndata.algorithm.curve,
                                        privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
                                    }
                                case '1.2.840.10040.4.1':
                                    ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der')
                                    return {
                                        type: 'dsa',
                                        params: ndata.algorithm.params
                                    }
                                default:
                                    throw new Error('unknown key id ' + subtype)
                            }
                            throw new Error('unknown key type ' + type)
                        case 'RSA PUBLIC KEY':
                            return asn1.RSAPublicKey.decode(data, 'der')
                        case 'RSA PRIVATE KEY':
                            return asn1.RSAPrivateKey.decode(data, 'der')
                        case 'DSA PRIVATE KEY':
                            return {
                                type: 'dsa',
                                params: asn1.DSAPrivateKey.decode(data, 'der')
                            }
                        case 'EC PRIVATE KEY':
                            data = asn1.ECPrivateKey.decode(data, 'der')
                            return {
                                curve: data.parameters.value,
                                privateKey: data.privateKey
                            }
                        default:
                            throw new Error('unknown key type ' + type)
                    }
                }

                parseKeys.signature = asn1.signature

                function decrypt(data, password) {
                    var salt = data.algorithm.decrypt.kde.kdeparams.salt
                    var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10)
                    var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')]
                    var iv = data.algorithm.decrypt.cipher.iv
                    var cipherText = data.subjectPrivateKey
                    var keylen = parseInt(algo.split('-')[1], 10) / 8
                    var key = compat.pbkdf2Sync(password, salt, iters, keylen)
                    var cipher = ciphers.createDecipheriv(algo, key, iv)
                    var out = []
                    out.push(cipher.update(cipherText))
                    out.push(cipher.final())
                    return Buffer.concat(out)
                }

            }).call(this, require("buffer").Buffer)
        }, {"./aesid.json": 149, "./asn1": 150, "./fixProc": 152, "browserify-aes": 25, "buffer": 57, "pbkdf2": 155}],
        154: [function (require, module, exports) {
            (function (a, b) {
                if ('function' == typeof define && define.amd) define(['module'], b); else if ('undefined' != typeof exports) b(module); else {
                    var c = {exports: {}};
                    b(c), a.parseJsonBignumber = c.exports
                }
            })(this, function (a) {
                'use strict';
                a.exports = function (a) {
                    var b = {strict: !1};
                    void 0 !== a && null !== a && !0 === a.strict && (b.strict = !0);
                    var d, e, f, c, g = {'"': '"', "\\": '\\', "/": '/', b: '\b', f: '\f', n: '\n', r: '\r', t: '\t'},
                        h = function (a) {
                            throw{name: 'SyntaxError', message: a, at: d, text: f}
                        }, j = function (a) {
                            return a && a !== e && h('Expected \'' + a + '\' instead of \'' + e + '\''), e = f.charAt(d), d += 1, e
                        }, i = function () {
                            var a, b = '';
                            for ('-' === e && (b = '-', j('-')); '0' <= e && '9' >= e;) b += e, j();
                            if ('.' === e) for (b += '.'; j() && '0' <= e && '9' >= e;) b += e;
                            if ('e' === e || 'E' === e) for (b += e, j(), ('-' === e || '+' === e) && (b += e, j()); '0' <= e && '9' >= e;) b += e, j();
                            return a = +b, isFinite(a) ? 15 < b.length ? b : a : void h('Bad number')
                        }, k = function () {
                            var a, b, c, d = '';
                            if ('"' === e) for (; j();) {
                                if ('"' === e) return j(), d;
                                if ('\\' !== e) d += e; else if (j(), 'u' === e) {
                                    for (c = 0, b = 0; 4 > b && (a = parseInt(j(), 16), !!isFinite(a)); b += 1) c = 16 * c + a;
                                    d += String.fromCharCode(c)
                                } else if ('string' == typeof g[e]) d += g[e]; else break
                            }
                            h('Bad string')
                        }, l = function () {
                            for (; e && ' ' >= e;) j()
                        }, m = function () {
                            switch (e) {
                                case't':
                                    return j('t'), j('r'), j('u'), j('e'), !0;
                                case'f':
                                    return j('f'), j('a'), j('l'), j('s'), j('e'), !1;
                                case'n':
                                    return j('n'), j('u'), j('l'), j('l'), null;
                            }
                            h('Unexpected \'' + e + '\'')
                        }, n = function () {
                            var a = [];
                            if ('[' === e) {
                                if (j('['), l(), ']' === e) return j(']'), a;
                                for (; e;) {
                                    if (a.push(c()), l(), ']' === e) return j(']'), a;
                                    j(','), l()
                                }
                            }
                            h('Bad array')
                        }, o = function () {
                            var a, d = {};
                            if ('{' === e) {
                                if (j('{'), l(), '}' === e) return j('}'), d;
                                for (; e;) {
                                    if (a = k(), l(), j(':'), !0 === b.strict && Object.hasOwnProperty.call(d, a) && h('Duplicate key "' + a + '"'), d[a] = c(), l(), '}' === e) return j('}'), d;
                                    j(','), l()
                                }
                            }
                            h('Bad object')
                        };
                    return c = function () {
                        return l(), '{' === e ? o() : '[' === e ? n() : '"' === e ? k() : '-' === e ? i() : '0' <= e && '9' >= e ? i() : m()
                    }, function (a, b) {
                        var g;
                        return f = a + '', d = 0, e = ' ', g = c(), l(), e && h('Syntax error'), 'function' == typeof b ? function a(c, d) {
                            var e, f = c[d];
                            return f && 'object' == typeof f && Object.keys(f).forEach(function (b) {
                                e = a(f, b), void 0 === e ? delete f[b] : f[b] = e
                            }), b.call(c, d, f)
                        }({"": g}, '') : g
                    }
                }
            });

        }, {}],
        155: [function (require, module, exports) {

            exports.pbkdf2 = require('./lib/async')

            exports.pbkdf2Sync = require('./lib/sync')

        }, {"./lib/async": 156, "./lib/sync": 159}],
        156: [function (require, module, exports) {
            (function (process, global) {
                var checkParameters = require('./precondition')
                var defaultEncoding = require('./default-encoding')
                var sync = require('./sync')
                var Buffer = require('safe-buffer').Buffer

                var ZERO_BUF
                var subtle = global.crypto && global.crypto.subtle
                var toBrowser = {
                    'sha': 'SHA-1',
                    'sha-1': 'SHA-1',
                    'sha1': 'SHA-1',
                    'sha256': 'SHA-256',
                    'sha-256': 'SHA-256',
                    'sha384': 'SHA-384',
                    'sha-384': 'SHA-384',
                    'sha-512': 'SHA-512',
                    'sha512': 'SHA-512'
                }
                var checks = []

                function checkNative(algo) {
                    if (global.process && !global.process.browser) {
                        return Promise.resolve(false)
                    }
                    if (!subtle || !subtle.importKey || !subtle.deriveBits) {
                        return Promise.resolve(false)
                    }
                    if (checks[algo] !== undefined) {
                        return checks[algo]
                    }
                    ZERO_BUF = ZERO_BUF || Buffer.alloc(8)
                    var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo)
                        .then(function () {
                            return true
                        }).catch(function () {
                            return false
                        })
                    checks[algo] = prom
                    return prom
                }

                function browserPbkdf2(password, salt, iterations, length, algo) {
                    return subtle.importKey(
                        'raw', password, {name: 'PBKDF2'}, false, ['deriveBits']
                    ).then(function (key) {
                        return subtle.deriveBits({
                            name: 'PBKDF2',
                            salt: salt,
                            iterations: iterations,
                            hash: {
                                name: algo
                            }
                        }, key, length << 3)
                    }).then(function (res) {
                        return Buffer.from(res)
                    })
                }

                function resolvePromise(promise, callback) {
                    promise.then(function (out) {
                        process.nextTick(function () {
                            callback(null, out)
                        })
                    }, function (e) {
                        process.nextTick(function () {
                            callback(e)
                        })
                    })
                }

                module.exports = function (password, salt, iterations, keylen, digest, callback) {
                    if (!Buffer.isBuffer(password)) password = Buffer.from(password, defaultEncoding)
                    if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, defaultEncoding)

                    checkParameters(iterations, keylen)
                    if (typeof digest === 'function') {
                        callback = digest
                        digest = undefined
                    }
                    if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2')

                    digest = digest || 'sha1'
                    var algo = toBrowser[digest.toLowerCase()]
                    if (!algo || typeof global.Promise !== 'function') {
                        return process.nextTick(function () {
                            var out
                            try {
                                out = sync(password, salt, iterations, keylen, digest)
                            } catch (e) {
                                return callback(e)
                            }
                            callback(null, out)
                        })
                    }
                    resolvePromise(checkNative(algo).then(function (resp) {
                        if (resp) {
                            return browserPbkdf2(password, salt, iterations, keylen, algo)
                        } else {
                            return sync(password, salt, iterations, keylen, digest)
                        }
                    }), callback)
                }

            }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
        }, {"./default-encoding": 157, "./precondition": 158, "./sync": 159, "_process": 49, "safe-buffer": 184}],
        157: [function (require, module, exports) {
            (function (process) {
                var defaultEncoding
                /* istanbul ignore next */
                if (process.browser) {
                    defaultEncoding = 'utf-8'
                } else {
                    var pVersionMajor = parseInt(process.version.split('.')[0].slice(1), 10)

                    defaultEncoding = pVersionMajor >= 6 ? 'utf-8' : 'binary'
                }
                module.exports = defaultEncoding

            }).call(this, require('_process'))
        }, {"_process": 49}],
        158: [function (require, module, exports) {
            var MAX_ALLOC = Math.pow(2, 30) - 1 // default in iojs
            module.exports = function (iterations, keylen) {
                if (typeof iterations !== 'number') {
                    throw new TypeError('Iterations not a number')
                }

                if (iterations < 0) {
                    throw new TypeError('Bad iterations')
                }

                if (typeof keylen !== 'number') {
                    throw new TypeError('Key length not a number')
                }

                if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) { /* eslint no-self-compare: 0 */
                    throw new TypeError('Bad key length')
                }
            }

        }, {}],
        159: [function (require, module, exports) {
            var md5 = require('create-hash/md5')
            var rmd160 = require('ripemd160')
            var sha = require('sha.js')

            var checkParameters = require('./precondition')
            var defaultEncoding = require('./default-encoding')
            var Buffer = require('safe-buffer').Buffer
            var ZEROS = Buffer.alloc(128)
            var sizes = {
                md5: 16,
                sha1: 20,
                sha224: 28,
                sha256: 32,
                sha384: 48,
                sha512: 64,
                rmd160: 20,
                ripemd160: 20
            }

            function Hmac(alg, key, saltLen) {
                var hash = getDigest(alg)
                var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

                if (key.length > blocksize) {
                    key = hash(key)
                } else if (key.length < blocksize) {
                    key = Buffer.concat([key, ZEROS], blocksize)
                }

                var ipad = Buffer.allocUnsafe(blocksize + sizes[alg])
                var opad = Buffer.allocUnsafe(blocksize + sizes[alg])
                for (var i = 0; i < blocksize; i++) {
                    ipad[i] = key[i] ^ 0x36
                    opad[i] = key[i] ^ 0x5C
                }

                var ipad1 = Buffer.allocUnsafe(blocksize + saltLen + 4)
                ipad.copy(ipad1, 0, 0, blocksize)
                this.ipad1 = ipad1
                this.ipad2 = ipad
                this.opad = opad
                this.alg = alg
                this.blocksize = blocksize
                this.hash = hash
                this.size = sizes[alg]
            }

            Hmac.prototype.run = function (data, ipad) {
                data.copy(ipad, this.blocksize)
                var h = this.hash(ipad)
                h.copy(this.opad, this.blocksize)
                return this.hash(this.opad)
            }

            function getDigest(alg) {
                if (alg === 'rmd160' || alg === 'ripemd160') return rmd160
                if (alg === 'md5') return md5
                return shaFunc

                function shaFunc(data) {
                    return sha(alg).update(data).digest()
                }
            }

            module.exports = function (password, salt, iterations, keylen, digest) {
                if (!Buffer.isBuffer(password)) password = Buffer.from(password, defaultEncoding)
                if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, defaultEncoding)

                checkParameters(iterations, keylen)

                digest = digest || 'sha1'

                var hmac = new Hmac(digest, password, salt.length)

                var DK = Buffer.allocUnsafe(keylen)
                var block1 = Buffer.allocUnsafe(salt.length + 4)
                salt.copy(block1, 0, 0, salt.length)

                var U, j, destPos, len

                var hLen = hmac.size
                var T = Buffer.allocUnsafe(hLen)
                var l = Math.ceil(keylen / hLen)
                var r = keylen - (l - 1) * hLen

                for (var i = 1; i <= l; i++) {
                    block1.writeUInt32BE(i, salt.length)
                    U = hmac.run(block1, hmac.ipad1)

                    U.copy(T, 0, 0, hLen)

                    for (j = 1; j < iterations; j++) {
                        U = hmac.run(U, hmac.ipad2)
                        for (var k = 0; k < hLen; k++) T[k] ^= U[k]
                    }

                    destPos = (i - 1) * hLen
                    len = (i === l ? r : hLen)
                    T.copy(DK, destPos, 0, len)
                }

                return DK
            }

        }, {
            "./default-encoding": 157,
            "./precondition": 158,
            "create-hash/md5": 64,
            "ripemd160": 183,
            "safe-buffer": 184,
            "sha.js": 186
        }],
        160: [function (require, module, exports) {
            (function (process) {
                'use strict';

                if (!process.version ||
                    process.version.indexOf('v0.') === 0 ||
                    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
                    module.exports = {nextTick: nextTick};
                } else {
                    module.exports = process
                }

                function nextTick(fn, arg1, arg2, arg3) {
                    if (typeof fn !== 'function') {
                        throw new TypeError('"callback" argument must be a function');
                    }
                    var len = arguments.length;
                    var args, i;
                    switch (len) {
                        case 0:
                        case 1:
                            return process.nextTick(fn);
                        case 2:
                            return process.nextTick(function afterTickOne() {
                                fn.call(null, arg1);
                            });
                        case 3:
                            return process.nextTick(function afterTickTwo() {
                                fn.call(null, arg1, arg2);
                            });
                        case 4:
                            return process.nextTick(function afterTickThree() {
                                fn.call(null, arg1, arg2, arg3);
                            });
                        default:
                            args = new Array(len - 1);
                            i = 0;
                            while (i < args.length) {
                                args[i++] = arguments[i];
                            }
                            return process.nextTick(function afterTick() {
                                fn.apply(null, args);
                            });
                    }
                }


            }).call(this, require('_process'))
        }, {"_process": 49}],
        161: [function (require, module, exports) {
            arguments[4][49][0].apply(exports, arguments)
        }, {"dup": 49}],
        162: [function (require, module, exports) {
            exports.publicEncrypt = require('./publicEncrypt');
            exports.privateDecrypt = require('./privateDecrypt');

            exports.privateEncrypt = function privateEncrypt(key, buf) {
                return exports.publicEncrypt(key, buf, true);
            };

            exports.publicDecrypt = function publicDecrypt(key, buf) {
                return exports.privateDecrypt(key, buf, true);
            };
        }, {"./privateDecrypt": 164, "./publicEncrypt": 165}],
        163: [function (require, module, exports) {
            (function (Buffer) {
                var createHash = require('create-hash');
                module.exports = function (seed, len) {
                    var t = new Buffer('');
                    var i = 0, c;
                    while (t.length < len) {
                        c = i2ops(i++);
                        t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()]);
                    }
                    return t.slice(0, len);
                };

                function i2ops(c) {
                    var out = new Buffer(4);
                    out.writeUInt32BE(c, 0);
                    return out;
                }
            }).call(this, require("buffer").Buffer)
        }, {"buffer": 57, "create-hash": 62}],
        164: [function (require, module, exports) {
            (function (Buffer) {
                var parseKeys = require('parse-asn1');
                var mgf = require('./mgf');
                var xor = require('./xor');
                var bn = require('bn.js');
                var crt = require('browserify-rsa');
                var createHash = require('create-hash');
                var withPublic = require('./withPublic');
                module.exports = function privateDecrypt(private_key, enc, reverse) {
                    var padding;
                    if (private_key.padding) {
                        padding = private_key.padding;
                    } else if (reverse) {
                        padding = 1;
                    } else {
                        padding = 4;
                    }

                    var key = parseKeys(private_key);
                    var k = key.modulus.byteLength();
                    if (enc.length > k || new bn(enc).cmp(key.modulus) >= 0) {
                        throw new Error('decryption error');
                    }
                    var msg;
                    if (reverse) {
                        msg = withPublic(new bn(enc), key);
                    } else {
                        msg = crt(enc, key);
                    }
                    var zBuffer = new Buffer(k - msg.length);
                    zBuffer.fill(0);
                    msg = Buffer.concat([zBuffer, msg], k);
                    if (padding === 4) {
                        return oaep(key, msg);
                    } else if (padding === 1) {
                        return pkcs1(key, msg, reverse);
                    } else if (padding === 3) {
                        return msg;
                    } else {
                        throw new Error('unknown padding');
                    }
                };

                function oaep(key, msg) {
                    var n = key.modulus;
                    var k = key.modulus.byteLength();
                    var mLen = msg.length;
                    var iHash = createHash('sha1').update(new Buffer('')).digest();
                    var hLen = iHash.length;
                    var hLen2 = 2 * hLen;
                    if (msg[0] !== 0) {
                        throw new Error('decryption error');
                    }
                    var maskedSeed = msg.slice(1, hLen + 1);
                    var maskedDb = msg.slice(hLen + 1);
                    var seed = xor(maskedSeed, mgf(maskedDb, hLen));
                    var db = xor(maskedDb, mgf(seed, k - hLen - 1));
                    if (compare(iHash, db.slice(0, hLen))) {
                        throw new Error('decryption error');
                    }
                    var i = hLen;
                    while (db[i] === 0) {
                        i++;
                    }
                    if (db[i++] !== 1) {
                        throw new Error('decryption error');
                    }
                    return db.slice(i);
                }

                function pkcs1(key, msg, reverse) {
                    var p1 = msg.slice(0, 2);
                    var i = 2;
                    var status = 0;
                    while (msg[i++] !== 0) {
                        if (i >= msg.length) {
                            status++;
                            break;
                        }
                    }
                    var ps = msg.slice(2, i - 1);
                    var p2 = msg.slice(i - 1, i);

                    if ((p1.toString('hex') !== '0002' && !reverse) || (p1.toString('hex') !== '0001' && reverse)) {
                        status++;
                    }
                    if (ps.length < 8) {
                        status++;
                    }
                    if (status) {
                        throw new Error('decryption error');
                    }
                    return msg.slice(i);
                }

                function compare(a, b) {
                    a = new Buffer(a);
                    b = new Buffer(b);
                    var dif = 0;
                    var len = a.length;
                    if (a.length !== b.length) {
                        dif++;
                        len = Math.min(a.length, b.length);
                    }
                    var i = -1;
                    while (++i < len) {
                        dif += (a[i] ^ b[i]);
                    }
                    return dif;
                }
            }).call(this, require("buffer").Buffer)
        }, {
            "./mgf": 163,
            "./withPublic": 166,
            "./xor": 167,
            "bn.js": 20,
            "browserify-rsa": 41,
            "buffer": 57,
            "create-hash": 62,
            "parse-asn1": 153
        }],
        165: [function (require, module, exports) {
            (function (Buffer) {
                var parseKeys = require('parse-asn1');
                var randomBytes = require('randombytes');
                var createHash = require('create-hash');
                var mgf = require('./mgf');
                var xor = require('./xor');
                var bn = require('bn.js');
                var withPublic = require('./withPublic');
                var crt = require('browserify-rsa');

                var constants = {
                    RSA_PKCS1_OAEP_PADDING: 4,
                    RSA_PKCS1_PADDIN: 1,
                    RSA_NO_PADDING: 3
                };

                module.exports = function publicEncrypt(public_key, msg, reverse) {
                    var padding;
                    if (public_key.padding) {
                        padding = public_key.padding;
                    } else if (reverse) {
                        padding = 1;
                    } else {
                        padding = 4;
                    }
                    var key = parseKeys(public_key);
                    var paddedMsg;
                    if (padding === 4) {
                        paddedMsg = oaep(key, msg);
                    } else if (padding === 1) {
                        paddedMsg = pkcs1(key, msg, reverse);
                    } else if (padding === 3) {
                        paddedMsg = new bn(msg);
                        if (paddedMsg.cmp(key.modulus) >= 0) {
                            throw new Error('data too long for modulus');
                        }
                    } else {
                        throw new Error('unknown padding');
                    }
                    if (reverse) {
                        return crt(paddedMsg, key);
                    } else {
                        return withPublic(paddedMsg, key);
                    }
                };

                function oaep(key, msg) {
                    var k = key.modulus.byteLength();
                    var mLen = msg.length;
                    var iHash = createHash('sha1').update(new Buffer('')).digest();
                    var hLen = iHash.length;
                    var hLen2 = 2 * hLen;
                    if (mLen > k - hLen2 - 2) {
                        throw new Error('message too long');
                    }
                    var ps = new Buffer(k - mLen - hLen2 - 2);
                    ps.fill(0);
                    var dblen = k - hLen - 1;
                    var seed = randomBytes(hLen);
                    var maskedDb = xor(Buffer.concat([iHash, ps, new Buffer([1]), msg], dblen), mgf(seed, dblen));
                    var maskedSeed = xor(seed, mgf(maskedDb, hLen));
                    return new bn(Buffer.concat([new Buffer([0]), maskedSeed, maskedDb], k));
                }

                function pkcs1(key, msg, reverse) {
                    var mLen = msg.length;
                    var k = key.modulus.byteLength();
                    if (mLen > k - 11) {
                        throw new Error('message too long');
                    }
                    var ps;
                    if (reverse) {
                        ps = new Buffer(k - mLen - 3);
                        ps.fill(0xff);
                    } else {
                        ps = nonZero(k - mLen - 3);
                    }
                    return new bn(Buffer.concat([new Buffer([0, reverse ? 1 : 2]), ps, new Buffer([0]), msg], k));
                }

                function nonZero(len, crypto) {
                    var out = new Buffer(len);
                    var i = 0;
                    var cache = randomBytes(len * 2);
                    var cur = 0;
                    var num;
                    while (i < len) {
                        if (cur === cache.length) {
                            cache = randomBytes(len * 2);
                            cur = 0;
                        }
                        num = cache[cur++];
                        if (num) {
                            out[i++] = num;
                        }
                    }
                    return out;
                }
            }).call(this, require("buffer").Buffer)
        }, {
            "./mgf": 163,
            "./withPublic": 166,
            "./xor": 167,
            "bn.js": 20,
            "browserify-rsa": 41,
            "buffer": 57,
            "create-hash": 62,
            "parse-asn1": 153,
            "randombytes": 168
        }],
        166: [function (require, module, exports) {
            (function (Buffer) {
                var bn = require('bn.js');

                function withPublic(paddedMsg, key) {
                    return new Buffer(paddedMsg
                        .toRed(bn.mont(key.modulus))
                        .redPow(new bn(key.publicExponent))
                        .fromRed()
                        .toArray());
                }

                module.exports = withPublic;
            }).call(this, require("buffer").Buffer)
        }, {"bn.js": 20, "buffer": 57}],
        167: [function (require, module, exports) {
            module.exports = function xor(a, b) {
                var len = a.length;
                var i = -1;
                while (++i < len) {
                    a[i] ^= b[i];
                }
                return a
            };
        }, {}],
        168: [function (require, module, exports) {
            (function (process, global) {
                'use strict'

                function oldBrowser() {
                    throw new Error('secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11')
                }

                var Buffer = require('safe-buffer').Buffer
                var crypto = global.crypto || global.msCrypto

                if (crypto && crypto.getRandomValues) {
                    module.exports = randomBytes
                } else {
                    module.exports = oldBrowser
                }

                function randomBytes(size, cb) {
                    // phantomjs needs to throw
                    if (size > 65536) throw new Error('requested too many random bytes')
                    // in case browserify  isn't using the Uint8Array version
                    var rawBytes = new global.Uint8Array(size)

                    // This will not work in older browsers.
                    // See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
                    if (size > 0) {  // getRandomValues fails on IE if size == 0
                        crypto.getRandomValues(rawBytes)
                    }

                    // XXX: phantomjs doesn't like a buffer being passed here
                    var bytes = Buffer.from(rawBytes.buffer)

                    if (typeof cb === 'function') {
                        return process.nextTick(function () {
                            cb(null, bytes)
                        })
                    }

                    return bytes
                }

            }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
        }, {"_process": 49, "safe-buffer": 184}],
        169: [function (require, module, exports) {
            module.exports = require('./lib/_stream_duplex.js');

        }, {"./lib/_stream_duplex.js": 170}],
        170: [function (require, module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

            'use strict';

            /*<replacement>*/

            var pna = require('process-nextick-args');
            /*</replacement>*/

            /*<replacement>*/
            var objectKeys = Object.keys || function (obj) {
                var keys = [];
                for (var key in obj) {
                    keys.push(key);
                }
                return keys;
            };
            /*</replacement>*/

            module.exports = Duplex;

            /*<replacement>*/
            var util = require('core-util-is');
            util.inherits = require('inherits');
            /*</replacement>*/

            var Readable = require('./_stream_readable');
            var Writable = require('./_stream_writable');

            util.inherits(Duplex, Readable);

            {
                // avoid scope creep, the keys array can then be collected
                var keys = objectKeys(Writable.prototype);
                for (var v = 0; v < keys.length; v++) {
                    var method = keys[v];
                    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
                }
            }

            function Duplex(options) {
                if (!(this instanceof Duplex)) return new Duplex(options);

                Readable.call(this, options);
                Writable.call(this, options);

                if (options && options.readable === false) this.readable = false;

                if (options && options.writable === false) this.writable = false;

                this.allowHalfOpen = true;
                if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

                this.once('end', onend);
            }

            Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
                // making it explicit this property is not enumerable
                // because otherwise some prototype manipulation in
                // userland will fail
                enumerable: false,
                get: function () {
                    return this._writableState.highWaterMark;
                }
            });

// the no-half-open enforcer
            function onend() {
                // if we allow half-open state, or if the writable side ended,
                // then we're ok.
                if (this.allowHalfOpen || this._writableState.ended) return;

                // no more data can be written.
                // But allow more writes to happen in this tick.
                pna.nextTick(onEndNT, this);
            }

            function onEndNT(self) {
                self.end();
            }

            Object.defineProperty(Duplex.prototype, 'destroyed', {
                get: function () {
                    if (this._readableState === undefined || this._writableState === undefined) {
                        return false;
                    }
                    return this._readableState.destroyed && this._writableState.destroyed;
                },
                set: function (value) {
                    // we ignore the value if the stream
                    // has not been initialized yet
                    if (this._readableState === undefined || this._writableState === undefined) {
                        return;
                    }

                    // backward compatibility, the user is explicitly
                    // managing destroyed
                    this._readableState.destroyed = value;
                    this._writableState.destroyed = value;
                }
            });

            Duplex.prototype._destroy = function (err, cb) {
                this.push(null);
                this.end();

                pna.nextTick(cb, err);
            };
        }, {
            "./_stream_readable": 172,
            "./_stream_writable": 174,
            "core-util-is": 60,
            "inherits": 143,
            "process-nextick-args": 160
        }],
        171: [function (require, module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

            'use strict';

            module.exports = PassThrough;

            var Transform = require('./_stream_transform');

            /*<replacement>*/
            var util = require('core-util-is');
            util.inherits = require('inherits');
            /*</replacement>*/

            util.inherits(PassThrough, Transform);

            function PassThrough(options) {
                if (!(this instanceof PassThrough)) return new PassThrough(options);

                Transform.call(this, options);
            }

            PassThrough.prototype._transform = function (chunk, encoding, cb) {
                cb(null, chunk);
            };
        }, {"./_stream_transform": 173, "core-util-is": 60, "inherits": 143}],
        172: [function (require, module, exports) {
            (function (process, global) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

                'use strict';

                /*<replacement>*/

                var pna = require('process-nextick-args');
                /*</replacement>*/

                module.exports = Readable;

                /*<replacement>*/
                var isArray = require('isarray');
                /*</replacement>*/

                /*<replacement>*/
                var Duplex;
                /*</replacement>*/

                Readable.ReadableState = ReadableState;

                /*<replacement>*/
                var EE = require('events').EventEmitter;

                var EElistenerCount = function (emitter, type) {
                    return emitter.listeners(type).length;
                };
                /*</replacement>*/

                /*<replacement>*/
                var Stream = require('./internal/streams/stream');
                /*</replacement>*/

                /*<replacement>*/

                var Buffer = require('safe-buffer').Buffer;
                var OurUint8Array = global.Uint8Array || function () {
                };

                function _uint8ArrayToBuffer(chunk) {
                    return Buffer.from(chunk);
                }

                function _isUint8Array(obj) {
                    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
                }

                /*</replacement>*/

                /*<replacement>*/
                var util = require('core-util-is');
                util.inherits = require('inherits');
                /*</replacement>*/

                /*<replacement>*/
                var debugUtil = require('util');
                var debug = void 0;
                if (debugUtil && debugUtil.debuglog) {
                    debug = debugUtil.debuglog('stream');
                } else {
                    debug = function () {
                    };
                }
                /*</replacement>*/

                var BufferList = require('./internal/streams/BufferList');
                var destroyImpl = require('./internal/streams/destroy');
                var StringDecoder;

                util.inherits(Readable, Stream);

                var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

                function prependListener(emitter, event, fn) {
                    // Sadly this is not cacheable as some libraries bundle their own
                    // event emitter implementation with them.
                    if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

                    // This is a hack to make sure that our error handler is attached before any
                    // userland ones.  NEVER DO THIS. This is here only because this code needs
                    // to continue to work with older versions of Node.js that do not include
                    // the prependListener() method. The goal is to eventually remove this hack.
                    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn); else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn); else emitter._events[event] = [fn, emitter._events[event]];
                }

                function ReadableState(options, stream) {
                    Duplex = Duplex || require('./_stream_duplex');

                    options = options || {};

                    // Duplex streams are both readable and writable, but share
                    // the same options object.
                    // However, some cases require setting options to different
                    // values for the readable and the writable sides of the duplex stream.
                    // These options can be provided separately as readableXXX and writableXXX.
                    var isDuplex = stream instanceof Duplex;

                    // object stream flag. Used to make read(n) ignore n and to
                    // make all the buffer merging and length checks go away
                    this.objectMode = !!options.objectMode;

                    if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

                    // the point at which it stops calling _read() to fill the buffer
                    // Note: 0 is a valid value, means "don't call _read preemptively ever"
                    var hwm = options.highWaterMark;
                    var readableHwm = options.readableHighWaterMark;
                    var defaultHwm = this.objectMode ? 16 : 16 * 1024;

                    if (hwm || hwm === 0) this.highWaterMark = hwm; else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm; else this.highWaterMark = defaultHwm;

                    // cast to ints.
                    this.highWaterMark = Math.floor(this.highWaterMark);

                    // A linked list is used to store data chunks instead of an array because the
                    // linked list can remove elements from the beginning faster than
                    // array.shift()
                    this.buffer = new BufferList();
                    this.length = 0;
                    this.pipes = null;
                    this.pipesCount = 0;
                    this.flowing = null;
                    this.ended = false;
                    this.endEmitted = false;
                    this.reading = false;

                    // a flag to be able to tell if the event 'readable'/'data' is emitted
                    // immediately, or on a later tick.  We set this to true at first, because
                    // any actions that shouldn't happen until "later" should generally also
                    // not happen before the first read call.
                    this.sync = true;

                    // whenever we return null, then we set a flag to say
                    // that we're awaiting a 'readable' event emission.
                    this.needReadable = false;
                    this.emittedReadable = false;
                    this.readableListening = false;
                    this.resumeScheduled = false;

                    // has it been destroyed
                    this.destroyed = false;

                    // Crypto is kind of old and crusty.  Historically, its default string
                    // encoding is 'binary' so we have to make this configurable.
                    // Everything else in the universe uses 'utf8', though.
                    this.defaultEncoding = options.defaultEncoding || 'utf8';

                    // the number of writers that are awaiting a drain event in .pipe()s
                    this.awaitDrain = 0;

                    // if true, a maybeReadMore has been scheduled
                    this.readingMore = false;

                    this.decoder = null;
                    this.encoding = null;
                    if (options.encoding) {
                        if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
                        this.decoder = new StringDecoder(options.encoding);
                        this.encoding = options.encoding;
                    }
                }

                function Readable(options) {
                    Duplex = Duplex || require('./_stream_duplex');

                    if (!(this instanceof Readable)) return new Readable(options);

                    this._readableState = new ReadableState(options, this);

                    // legacy
                    this.readable = true;

                    if (options) {
                        if (typeof options.read === 'function') this._read = options.read;

                        if (typeof options.destroy === 'function') this._destroy = options.destroy;
                    }

                    Stream.call(this);
                }

                Object.defineProperty(Readable.prototype, 'destroyed', {
                    get: function () {
                        if (this._readableState === undefined) {
                            return false;
                        }
                        return this._readableState.destroyed;
                    },
                    set: function (value) {
                        // we ignore the value if the stream
                        // has not been initialized yet
                        if (!this._readableState) {
                            return;
                        }

                        // backward compatibility, the user is explicitly
                        // managing destroyed
                        this._readableState.destroyed = value;
                    }
                });

                Readable.prototype.destroy = destroyImpl.destroy;
                Readable.prototype._undestroy = destroyImpl.undestroy;
                Readable.prototype._destroy = function (err, cb) {
                    this.push(null);
                    cb(err);
                };

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
                Readable.prototype.push = function (chunk, encoding) {
                    var state = this._readableState;
                    var skipChunkCheck;

                    if (!state.objectMode) {
                        if (typeof chunk === 'string') {
                            encoding = encoding || state.defaultEncoding;
                            if (encoding !== state.encoding) {
                                chunk = Buffer.from(chunk, encoding);
                                encoding = '';
                            }
                            skipChunkCheck = true;
                        }
                    } else {
                        skipChunkCheck = true;
                    }

                    return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
                };

// Unshift should *always* be something directly out of read()
                Readable.prototype.unshift = function (chunk) {
                    return readableAddChunk(this, chunk, null, true, false);
                };

                function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
                    var state = stream._readableState;
                    if (chunk === null) {
                        state.reading = false;
                        onEofChunk(stream, state);
                    } else {
                        var er;
                        if (!skipChunkCheck) er = chunkInvalid(state, chunk);
                        if (er) {
                            stream.emit('error', er);
                        } else if (state.objectMode || chunk && chunk.length > 0) {
                            if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
                                chunk = _uint8ArrayToBuffer(chunk);
                            }

                            if (addToFront) {
                                if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event')); else addChunk(stream, state, chunk, true);
                            } else if (state.ended) {
                                stream.emit('error', new Error('stream.push() after EOF'));
                            } else {
                                state.reading = false;
                                if (state.decoder && !encoding) {
                                    chunk = state.decoder.write(chunk);
                                    if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false); else maybeReadMore(stream, state);
                                } else {
                                    addChunk(stream, state, chunk, false);
                                }
                            }
                        } else if (!addToFront) {
                            state.reading = false;
                        }
                    }

                    return needMoreData(state);
                }

                function addChunk(stream, state, chunk, addToFront) {
                    if (state.flowing && state.length === 0 && !state.sync) {
                        stream.emit('data', chunk);
                        stream.read(0);
                    } else {
                        // update the buffer info.
                        state.length += state.objectMode ? 1 : chunk.length;
                        if (addToFront) state.buffer.unshift(chunk); else state.buffer.push(chunk);

                        if (state.needReadable) emitReadable(stream);
                    }
                    maybeReadMore(stream, state);
                }

                function chunkInvalid(state, chunk) {
                    var er;
                    if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
                        er = new TypeError('Invalid non-string/buffer chunk');
                    }
                    return er;
                }

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
                function needMoreData(state) {
                    return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
                }

                Readable.prototype.isPaused = function () {
                    return this._readableState.flowing === false;
                };

// backwards compatibility.
                Readable.prototype.setEncoding = function (enc) {
                    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
                    this._readableState.decoder = new StringDecoder(enc);
                    this._readableState.encoding = enc;
                    return this;
                };

// Don't raise the hwm > 8MB
                var MAX_HWM = 0x800000;

                function computeNewHighWaterMark(n) {
                    if (n >= MAX_HWM) {
                        n = MAX_HWM;
                    } else {
                        // Get the next highest power of 2 to prevent increasing hwm excessively in
                        // tiny amounts
                        n--;
                        n |= n >>> 1;
                        n |= n >>> 2;
                        n |= n >>> 4;
                        n |= n >>> 8;
                        n |= n >>> 16;
                        n++;
                    }
                    return n;
                }

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
                function howMuchToRead(n, state) {
                    if (n <= 0 || state.length === 0 && state.ended) return 0;
                    if (state.objectMode) return 1;
                    if (n !== n) {
                        // Only flow one buffer at a time
                        if (state.flowing && state.length) return state.buffer.head.data.length; else return state.length;
                    }
                    // If we're asking for more than the current hwm, then raise the hwm.
                    if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
                    if (n <= state.length) return n;
                    // Don't have enough
                    if (!state.ended) {
                        state.needReadable = true;
                        return 0;
                    }
                    return state.length;
                }

// you can override either this method, or the async _read(n) below.
                Readable.prototype.read = function (n) {
                    debug('read', n);
                    n = parseInt(n, 10);
                    var state = this._readableState;
                    var nOrig = n;

                    if (n !== 0) state.emittedReadable = false;

                    // if we're doing read(0) to trigger a readable event, but we
                    // already have a bunch of data in the buffer, then just trigger
                    // the 'readable' event and move on.
                    if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
                        debug('read: emitReadable', state.length, state.ended);
                        if (state.length === 0 && state.ended) endReadable(this); else emitReadable(this);
                        return null;
                    }

                    n = howMuchToRead(n, state);

                    // if we've ended, and we're now clear, then finish it up.
                    if (n === 0 && state.ended) {
                        if (state.length === 0) endReadable(this);
                        return null;
                    }

                    // All the actual chunk generation logic needs to be
                    // *below* the call to _read.  The reason is that in certain
                    // synthetic stream cases, such as passthrough streams, _read
                    // may be a completely synchronous operation which may change
                    // the state of the read buffer, providing enough data when
                    // before there was *not* enough.
                    //
                    // So, the steps are:
                    // 1. Figure out what the state of things will be after we do
                    // a read from the buffer.
                    //
                    // 2. If that resulting state will trigger a _read, then call _read.
                    // Note that this may be asynchronous, or synchronous.  Yes, it is
                    // deeply ugly to write APIs this way, but that still doesn't mean
                    // that the Readable class should behave improperly, as streams are
                    // designed to be sync/async agnostic.
                    // Take note if the _read call is sync or async (ie, if the read call
                    // has returned yet), so that we know whether or not it's safe to emit
                    // 'readable' etc.
                    //
                    // 3. Actually pull the requested chunks out of the buffer and return.

                    // if we need a readable event, then we need to do some reading.
                    var doRead = state.needReadable;
                    debug('need readable', doRead);

                    // if we currently have less than the highWaterMark, then also read some
                    if (state.length === 0 || state.length - n < state.highWaterMark) {
                        doRead = true;
                        debug('length less than watermark', doRead);
                    }

                    // however, if we've ended, then there's no point, and if we're already
                    // reading, then it's unnecessary.
                    if (state.ended || state.reading) {
                        doRead = false;
                        debug('reading or ended', doRead);
                    } else if (doRead) {
                        debug('do read');
                        state.reading = true;
                        state.sync = true;
                        // if the length is currently zero, then we *need* a readable event.
                        if (state.length === 0) state.needReadable = true;
                        // call internal read method
                        this._read(state.highWaterMark);
                        state.sync = false;
                        // If _read pushed data synchronously, then `reading` will be false,
                        // and we need to re-evaluate how much data we can return to the user.
                        if (!state.reading) n = howMuchToRead(nOrig, state);
                    }

                    var ret;
                    if (n > 0) ret = fromList(n, state); else ret = null;

                    if (ret === null) {
                        state.needReadable = true;
                        n = 0;
                    } else {
                        state.length -= n;
                    }

                    if (state.length === 0) {
                        // If we have nothing in the buffer, then we want to know
                        // as soon as we *do* get something into the buffer.
                        if (!state.ended) state.needReadable = true;

                        // If we tried to read() past the EOF, then emit end on the next tick.
                        if (nOrig !== n && state.ended) endReadable(this);
                    }

                    if (ret !== null) this.emit('data', ret);

                    return ret;
                };

                function onEofChunk(stream, state) {
                    if (state.ended) return;
                    if (state.decoder) {
                        var chunk = state.decoder.end();
                        if (chunk && chunk.length) {
                            state.buffer.push(chunk);
                            state.length += state.objectMode ? 1 : chunk.length;
                        }
                    }
                    state.ended = true;

                    // emit 'readable' now to make sure it gets picked up.
                    emitReadable(stream);
                }

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
                function emitReadable(stream) {
                    var state = stream._readableState;
                    state.needReadable = false;
                    if (!state.emittedReadable) {
                        debug('emitReadable', state.flowing);
                        state.emittedReadable = true;
                        if (state.sync) pna.nextTick(emitReadable_, stream); else emitReadable_(stream);
                    }
                }

                function emitReadable_(stream) {
                    debug('emit readable');
                    stream.emit('readable');
                    flow(stream);
                }

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
                function maybeReadMore(stream, state) {
                    if (!state.readingMore) {
                        state.readingMore = true;
                        pna.nextTick(maybeReadMore_, stream, state);
                    }
                }

                function maybeReadMore_(stream, state) {
                    var len = state.length;
                    while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
                        debug('maybeReadMore read 0');
                        stream.read(0);
                        if (len === state.length)
                        // didn't get any data, stop spinning.
                            break; else len = state.length;
                    }
                    state.readingMore = false;
                }

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
                Readable.prototype._read = function (n) {
                    this.emit('error', new Error('_read() is not implemented'));
                };

                Readable.prototype.pipe = function (dest, pipeOpts) {
                    var src = this;
                    var state = this._readableState;

                    switch (state.pipesCount) {
                        case 0:
                            state.pipes = dest;
                            break;
                        case 1:
                            state.pipes = [state.pipes, dest];
                            break;
                        default:
                            state.pipes.push(dest);
                            break;
                    }
                    state.pipesCount += 1;
                    debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

                    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

                    var endFn = doEnd ? onend : unpipe;
                    if (state.endEmitted) pna.nextTick(endFn); else src.once('end', endFn);

                    dest.on('unpipe', onunpipe);

                    function onunpipe(readable, unpipeInfo) {
                        debug('onunpipe');
                        if (readable === src) {
                            if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                                unpipeInfo.hasUnpiped = true;
                                cleanup();
                            }
                        }
                    }

                    function onend() {
                        debug('onend');
                        dest.end();
                    }

                    // when the dest drains, it reduces the awaitDrain counter
                    // on the source.  This would be more elegant with a .once()
                    // handler in flow(), but adding and removing repeatedly is
                    // too slow.
                    var ondrain = pipeOnDrain(src);
                    dest.on('drain', ondrain);

                    var cleanedUp = false;

                    function cleanup() {
                        debug('cleanup');
                        // cleanup event handlers once the pipe is broken
                        dest.removeListener('close', onclose);
                        dest.removeListener('finish', onfinish);
                        dest.removeListener('drain', ondrain);
                        dest.removeListener('error', onerror);
                        dest.removeListener('unpipe', onunpipe);
                        src.removeListener('end', onend);
                        src.removeListener('end', unpipe);
                        src.removeListener('data', ondata);

                        cleanedUp = true;

                        // if the reader is waiting for a drain event from this
                        // specific writer, then it would cause it to never start
                        // flowing again.
                        // So, if this is awaiting a drain, then we just call it now.
                        // If we don't know, then assume that we are waiting for one.
                        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
                    }

                    // If the user pushes more data while we're writing to dest then we'll end up
                    // in ondata again. However, we only want to increase awaitDrain once because
                    // dest will only emit one 'drain' event for the multiple writes.
                    // => Introduce a guard on increasing awaitDrain.
                    var increasedAwaitDrain = false;
                    src.on('data', ondata);

                    function ondata(chunk) {
                        debug('ondata');
                        increasedAwaitDrain = false;
                        var ret = dest.write(chunk);
                        if (false === ret && !increasedAwaitDrain) {
                            // If the user unpiped during `dest.write()`, it is possible
                            // to get stuck in a permanently paused state if that write
                            // also returned false.
                            // => Check whether `dest` is still a piping destination.
                            if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                                debug('false write response, pause', src._readableState.awaitDrain);
                                src._readableState.awaitDrain++;
                                increasedAwaitDrain = true;
                            }
                            src.pause();
                        }
                    }

                    // if the dest has an error, then stop piping into it.
                    // however, don't suppress the throwing behavior for this.
                    function onerror(er) {
                        debug('onerror', er);
                        unpipe();
                        dest.removeListener('error', onerror);
                        if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
                    }

                    // Make sure our error handler is attached before userland ones.
                    prependListener(dest, 'error', onerror);

                    // Both close and finish should trigger unpipe, but only once.
                    function onclose() {
                        dest.removeListener('finish', onfinish);
                        unpipe();
                    }

                    dest.once('close', onclose);

                    function onfinish() {
                        debug('onfinish');
                        dest.removeListener('close', onclose);
                        unpipe();
                    }

                    dest.once('finish', onfinish);

                    function unpipe() {
                        debug('unpipe');
                        src.unpipe(dest);
                    }

                    // tell the dest that it's being piped to
                    dest.emit('pipe', src);

                    // start the flow if it hasn't been started already.
                    if (!state.flowing) {
                        debug('pipe resume');
                        src.resume();
                    }

                    return dest;
                };

                function pipeOnDrain(src) {
                    return function () {
                        var state = src._readableState;
                        debug('pipeOnDrain', state.awaitDrain);
                        if (state.awaitDrain) state.awaitDrain--;
                        if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
                            state.flowing = true;
                            flow(src);
                        }
                    };
                }

                Readable.prototype.unpipe = function (dest) {
                    var state = this._readableState;
                    var unpipeInfo = {hasUnpiped: false};

                    // if we're not piping anywhere, then do nothing.
                    if (state.pipesCount === 0) return this;

                    // just one destination.  most common case.
                    if (state.pipesCount === 1) {
                        // passed in one, but it's not the right one.
                        if (dest && dest !== state.pipes) return this;

                        if (!dest) dest = state.pipes;

                        // got a match.
                        state.pipes = null;
                        state.pipesCount = 0;
                        state.flowing = false;
                        if (dest) dest.emit('unpipe', this, unpipeInfo);
                        return this;
                    }

                    // slow case. multiple pipe destinations.

                    if (!dest) {
                        // remove all.
                        var dests = state.pipes;
                        var len = state.pipesCount;
                        state.pipes = null;
                        state.pipesCount = 0;
                        state.flowing = false;

                        for (var i = 0; i < len; i++) {
                            dests[i].emit('unpipe', this, unpipeInfo);
                        }
                        return this;
                    }

                    // try to find the right one.
                    var index = indexOf(state.pipes, dest);
                    if (index === -1) return this;

                    state.pipes.splice(index, 1);
                    state.pipesCount -= 1;
                    if (state.pipesCount === 1) state.pipes = state.pipes[0];

                    dest.emit('unpipe', this, unpipeInfo);

                    return this;
                };

// set up data events if they are asked for
// Ensure readable listeners eventually get something
                Readable.prototype.on = function (ev, fn) {
                    var res = Stream.prototype.on.call(this, ev, fn);

                    if (ev === 'data') {
                        // Start flowing on next tick if stream isn't explicitly paused
                        if (this._readableState.flowing !== false) this.resume();
                    } else if (ev === 'readable') {
                        var state = this._readableState;
                        if (!state.endEmitted && !state.readableListening) {
                            state.readableListening = state.needReadable = true;
                            state.emittedReadable = false;
                            if (!state.reading) {
                                pna.nextTick(nReadingNextTick, this);
                            } else if (state.length) {
                                emitReadable(this);
                            }
                        }
                    }

                    return res;
                };
                Readable.prototype.addListener = Readable.prototype.on;

                function nReadingNextTick(self) {
                    debug('readable nexttick read 0');
                    self.read(0);
                }

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
                Readable.prototype.resume = function () {
                    var state = this._readableState;
                    if (!state.flowing) {
                        debug('resume');
                        state.flowing = true;
                        resume(this, state);
                    }
                    return this;
                };

                function resume(stream, state) {
                    if (!state.resumeScheduled) {
                        state.resumeScheduled = true;
                        pna.nextTick(resume_, stream, state);
                    }
                }

                function resume_(stream, state) {
                    if (!state.reading) {
                        debug('resume read 0');
                        stream.read(0);
                    }

                    state.resumeScheduled = false;
                    state.awaitDrain = 0;
                    stream.emit('resume');
                    flow(stream);
                    if (state.flowing && !state.reading) stream.read(0);
                }

                Readable.prototype.pause = function () {
                    debug('call pause flowing=%j', this._readableState.flowing);
                    if (false !== this._readableState.flowing) {
                        debug('pause');
                        this._readableState.flowing = false;
                        this.emit('pause');
                    }
                    return this;
                };

                function flow(stream) {
                    var state = stream._readableState;
                    debug('flow', state.flowing);
                    while (state.flowing && stream.read() !== null) {
                    }
                }

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
                Readable.prototype.wrap = function (stream) {
                    var _this = this;

                    var state = this._readableState;
                    var paused = false;

                    stream.on('end', function () {
                        debug('wrapped end');
                        if (state.decoder && !state.ended) {
                            var chunk = state.decoder.end();
                            if (chunk && chunk.length) _this.push(chunk);
                        }

                        _this.push(null);
                    });

                    stream.on('data', function (chunk) {
                        debug('wrapped data');
                        if (state.decoder) chunk = state.decoder.write(chunk);

                        // don't skip over falsy values in objectMode
                        if (state.objectMode && (chunk === null || chunk === undefined)) return; else if (!state.objectMode && (!chunk || !chunk.length)) return;

                        var ret = _this.push(chunk);
                        if (!ret) {
                            paused = true;
                            stream.pause();
                        }
                    });

                    // proxy all the other methods.
                    // important when wrapping filters and duplexes.
                    for (var i in stream) {
                        if (this[i] === undefined && typeof stream[i] === 'function') {
                            this[i] = function (method) {
                                return function () {
                                    return stream[method].apply(stream, arguments);
                                };
                            }(i);
                        }
                    }

                    // proxy certain important events.
                    for (var n = 0; n < kProxyEvents.length; n++) {
                        stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
                    }

                    // when we try to consume some more bytes, simply unpause the
                    // underlying stream.
                    this._read = function (n) {
                        debug('wrapped _read', n);
                        if (paused) {
                            paused = false;
                            stream.resume();
                        }
                    };

                    return this;
                };

                Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
                    // making it explicit this property is not enumerable
                    // because otherwise some prototype manipulation in
                    // userland will fail
                    enumerable: false,
                    get: function () {
                        return this._readableState.highWaterMark;
                    }
                });

// exposed for testing purposes only.
                Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
                function fromList(n, state) {
                    // nothing buffered
                    if (state.length === 0) return null;

                    var ret;
                    if (state.objectMode) ret = state.buffer.shift(); else if (!n || n >= state.length) {
                        // read it all, truncate the list
                        if (state.decoder) ret = state.buffer.join(''); else if (state.buffer.length === 1) ret = state.buffer.head.data; else ret = state.buffer.concat(state.length);
                        state.buffer.clear();
                    } else {
                        // read part of list
                        ret = fromListPartial(n, state.buffer, state.decoder);
                    }

                    return ret;
                }

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
                function fromListPartial(n, list, hasStrings) {
                    var ret;
                    if (n < list.head.data.length) {
                        // slice is the same for buffers and strings
                        ret = list.head.data.slice(0, n);
                        list.head.data = list.head.data.slice(n);
                    } else if (n === list.head.data.length) {
                        // first chunk is a perfect match
                        ret = list.shift();
                    } else {
                        // result spans more than one buffer
                        ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
                    }
                    return ret;
                }

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
                function copyFromBufferString(n, list) {
                    var p = list.head;
                    var c = 1;
                    var ret = p.data;
                    n -= ret.length;
                    while (p = p.next) {
                        var str = p.data;
                        var nb = n > str.length ? str.length : n;
                        if (nb === str.length) ret += str; else ret += str.slice(0, n);
                        n -= nb;
                        if (n === 0) {
                            if (nb === str.length) {
                                ++c;
                                if (p.next) list.head = p.next; else list.head = list.tail = null;
                            } else {
                                list.head = p;
                                p.data = str.slice(nb);
                            }
                            break;
                        }
                        ++c;
                    }
                    list.length -= c;
                    return ret;
                }

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
                function copyFromBuffer(n, list) {
                    var ret = Buffer.allocUnsafe(n);
                    var p = list.head;
                    var c = 1;
                    p.data.copy(ret);
                    n -= p.data.length;
                    while (p = p.next) {
                        var buf = p.data;
                        var nb = n > buf.length ? buf.length : n;
                        buf.copy(ret, ret.length - n, 0, nb);
                        n -= nb;
                        if (n === 0) {
                            if (nb === buf.length) {
                                ++c;
                                if (p.next) list.head = p.next; else list.head = list.tail = null;
                            } else {
                                list.head = p;
                                p.data = buf.slice(nb);
                            }
                            break;
                        }
                        ++c;
                    }
                    list.length -= c;
                    return ret;
                }

                function endReadable(stream) {
                    var state = stream._readableState;

                    // If we get here before consuming all the bytes, then that is a
                    // bug in node.  Should never happen.
                    if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

                    if (!state.endEmitted) {
                        state.ended = true;
                        pna.nextTick(endReadableNT, state, stream);
                    }
                }

                function endReadableNT(state, stream) {
                    // Check that we didn't get one last unshift.
                    if (!state.endEmitted && state.length === 0) {
                        state.endEmitted = true;
                        stream.readable = false;
                        stream.emit('end');
                    }
                }

                function indexOf(xs, x) {
                    for (var i = 0, l = xs.length; i < l; i++) {
                        if (xs[i] === x) return i;
                    }
                    return -1;
                }
            }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
        }, {
            "./_stream_duplex": 170,
            "./internal/streams/BufferList": 175,
            "./internal/streams/destroy": 176,
            "./internal/streams/stream": 177,
            "_process": 49,
            "core-util-is": 60,
            "events": 127,
            "inherits": 143,
            "isarray": 178,
            "process-nextick-args": 160,
            "safe-buffer": 184,
            "string_decoder/": 213,
            "util": 22
        }],
        173: [function (require, module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

            'use strict';

            module.exports = Transform;

            var Duplex = require('./_stream_duplex');

            /*<replacement>*/
            var util = require('core-util-is');
            util.inherits = require('inherits');
            /*</replacement>*/

            util.inherits(Transform, Duplex);

            function afterTransform(er, data) {
                var ts = this._transformState;
                ts.transforming = false;

                var cb = ts.writecb;

                if (!cb) {
                    return this.emit('error', new Error('write callback called multiple times'));
                }

                ts.writechunk = null;
                ts.writecb = null;

                if (data != null) // single equals check for both `null` and `undefined`
                    this.push(data);

                cb(er);

                var rs = this._readableState;
                rs.reading = false;
                if (rs.needReadable || rs.length < rs.highWaterMark) {
                    this._read(rs.highWaterMark);
                }
            }

            function Transform(options) {
                if (!(this instanceof Transform)) return new Transform(options);

                Duplex.call(this, options);

                this._transformState = {
                    afterTransform: afterTransform.bind(this),
                    needTransform: false,
                    transforming: false,
                    writecb: null,
                    writechunk: null,
                    writeencoding: null
                };

                // start out asking for a readable event once data is transformed.
                this._readableState.needReadable = true;

                // we have implemented the _read method, and done the other things
                // that Readable wants before the first _read call, so unset the
                // sync guard flag.
                this._readableState.sync = false;

                if (options) {
                    if (typeof options.transform === 'function') this._transform = options.transform;

                    if (typeof options.flush === 'function') this._flush = options.flush;
                }

                // When the writable side finishes, then flush out anything remaining.
                this.on('prefinish', prefinish);
            }

            function prefinish() {
                var _this = this;

                if (typeof this._flush === 'function') {
                    this._flush(function (er, data) {
                        done(_this, er, data);
                    });
                } else {
                    done(this, null, null);
                }
            }

            Transform.prototype.push = function (chunk, encoding) {
                this._transformState.needTransform = false;
                return Duplex.prototype.push.call(this, chunk, encoding);
            };

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
            Transform.prototype._transform = function (chunk, encoding, cb) {
                throw new Error('_transform() is not implemented');
            };

            Transform.prototype._write = function (chunk, encoding, cb) {
                var ts = this._transformState;
                ts.writecb = cb;
                ts.writechunk = chunk;
                ts.writeencoding = encoding;
                if (!ts.transforming) {
                    var rs = this._readableState;
                    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
                }
            };

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
            Transform.prototype._read = function (n) {
                var ts = this._transformState;

                if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
                    ts.transforming = true;
                    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
                } else {
                    // mark that we need a transform, so that any data that comes in
                    // will get processed, now that we've asked for it.
                    ts.needTransform = true;
                }
            };

            Transform.prototype._destroy = function (err, cb) {
                var _this2 = this;

                Duplex.prototype._destroy.call(this, err, function (err2) {
                    cb(err2);
                    _this2.emit('close');
                });
            };

            function done(stream, er, data) {
                if (er) return stream.emit('error', er);

                if (data != null) // single equals check for both `null` and `undefined`
                    stream.push(data);

                // if there's nothing in the write buffer, then that means
                // that nothing more will ever be provided
                if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');

                if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');

                return stream.push(null);
            }
        }, {"./_stream_duplex": 170, "core-util-is": 60, "inherits": 143}],
        174: [function (require, module, exports) {
            (function (process, global) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

                'use strict';

                /*<replacement>*/

                var pna = require('process-nextick-args');
                /*</replacement>*/

                module.exports = Writable;

                /* <replacement> */
                function WriteReq(chunk, encoding, cb) {
                    this.chunk = chunk;
                    this.encoding = encoding;
                    this.callback = cb;
                    this.next = null;
                }

// It seems a linked list but it is not
// there will be only 2 of these for each stream
                function CorkedRequest(state) {
                    var _this = this;

                    this.next = null;
                    this.entry = null;
                    this.finish = function () {
                        onCorkedFinish(_this, state);
                    };
                }

                /* </replacement> */

                /*<replacement>*/
                var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
                /*</replacement>*/

                /*<replacement>*/
                var Duplex;
                /*</replacement>*/

                Writable.WritableState = WritableState;

                /*<replacement>*/
                var util = require('core-util-is');
                util.inherits = require('inherits');
                /*</replacement>*/

                /*<replacement>*/
                var internalUtil = {
                    deprecate: require('util-deprecate')
                };
                /*</replacement>*/

                /*<replacement>*/
                var Stream = require('./internal/streams/stream');
                /*</replacement>*/

                /*<replacement>*/

                var Buffer = require('safe-buffer').Buffer;
                var OurUint8Array = global.Uint8Array || function () {
                };

                function _uint8ArrayToBuffer(chunk) {
                    return Buffer.from(chunk);
                }

                function _isUint8Array(obj) {
                    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
                }

                /*</replacement>*/

                var destroyImpl = require('./internal/streams/destroy');

                util.inherits(Writable, Stream);

                function nop() {
                }

                function WritableState(options, stream) {
                    Duplex = Duplex || require('./_stream_duplex');

                    options = options || {};

                    // Duplex streams are both readable and writable, but share
                    // the same options object.
                    // However, some cases require setting options to different
                    // values for the readable and the writable sides of the duplex stream.
                    // These options can be provided separately as readableXXX and writableXXX.
                    var isDuplex = stream instanceof Duplex;

                    // object stream flag to indicate whether or not this stream
                    // contains buffers or objects.
                    this.objectMode = !!options.objectMode;

                    if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

                    // the point at which write() starts returning false
                    // Note: 0 is a valid value, means that we always return false if
                    // the entire buffer is not flushed immediately on write()
                    var hwm = options.highWaterMark;
                    var writableHwm = options.writableHighWaterMark;
                    var defaultHwm = this.objectMode ? 16 : 16 * 1024;

                    if (hwm || hwm === 0) this.highWaterMark = hwm; else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm; else this.highWaterMark = defaultHwm;

                    // cast to ints.
                    this.highWaterMark = Math.floor(this.highWaterMark);

                    // if _final has been called
                    this.finalCalled = false;

                    // drain event flag.
                    this.needDrain = false;
                    // at the start of calling end()
                    this.ending = false;
                    // when end() has been called, and returned
                    this.ended = false;
                    // when 'finish' is emitted
                    this.finished = false;

                    // has it been destroyed
                    this.destroyed = false;

                    // should we decode strings into buffers before passing to _write?
                    // this is here so that some node-core streams can optimize string
                    // handling at a lower level.
                    var noDecode = options.decodeStrings === false;
                    this.decodeStrings = !noDecode;

                    // Crypto is kind of old and crusty.  Historically, its default string
                    // encoding is 'binary' so we have to make this configurable.
                    // Everything else in the universe uses 'utf8', though.
                    this.defaultEncoding = options.defaultEncoding || 'utf8';

                    // not an actual buffer we keep track of, but a measurement
                    // of how much we're waiting to get pushed to some underlying
                    // socket or file.
                    this.length = 0;

                    // a flag to see when we're in the middle of a write.
                    this.writing = false;

                    // when true all writes will be buffered until .uncork() call
                    this.corked = 0;

                    // a flag to be able to tell if the onwrite cb is called immediately,
                    // or on a later tick.  We set this to true at first, because any
                    // actions that shouldn't happen until "later" should generally also
                    // not happen before the first write call.
                    this.sync = true;

                    // a flag to know if we're processing previously buffered items, which
                    // may call the _write() callback in the same tick, so that we don't
                    // end up in an overlapped onwrite situation.
                    this.bufferProcessing = false;

                    // the callback that's passed to _write(chunk,cb)
                    this.onwrite = function (er) {
                        onwrite(stream, er);
                    };

                    // the callback that the user supplies to write(chunk,encoding,cb)
                    this.writecb = null;

                    // the amount that is being written when _write is called.
                    this.writelen = 0;

                    this.bufferedRequest = null;
                    this.lastBufferedRequest = null;

                    // number of pending user-supplied write callbacks
                    // this must be 0 before 'finish' can be emitted
                    this.pendingcb = 0;

                    // emit prefinish if the only thing we're waiting for is _write cbs
                    // This is relevant for synchronous Transform streams
                    this.prefinished = false;

                    // True if the error was already emitted and should not be thrown again
                    this.errorEmitted = false;

                    // count buffered requests
                    this.bufferedRequestCount = 0;

                    // allocate the first CorkedRequest, there is always
                    // one allocated and free to use, and we maintain at most two
                    this.corkedRequestsFree = new CorkedRequest(this);
                }

                WritableState.prototype.getBuffer = function getBuffer() {
                    var current = this.bufferedRequest;
                    var out = [];
                    while (current) {
                        out.push(current);
                        current = current.next;
                    }
                    return out;
                };

                (function () {
                    try {
                        Object.defineProperty(WritableState.prototype, 'buffer', {
                            get: internalUtil.deprecate(function () {
                                return this.getBuffer();
                            }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
                        });
                    } catch (_) {
                    }
                })();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
                var realHasInstance;
                if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
                    realHasInstance = Function.prototype[Symbol.hasInstance];
                    Object.defineProperty(Writable, Symbol.hasInstance, {
                        value: function (object) {
                            if (realHasInstance.call(this, object)) return true;
                            if (this !== Writable) return false;

                            return object && object._writableState instanceof WritableState;
                        }
                    });
                } else {
                    realHasInstance = function (object) {
                        return object instanceof this;
                    };
                }

                function Writable(options) {
                    Duplex = Duplex || require('./_stream_duplex');

                    // Writable ctor is applied to Duplexes, too.
                    // `realHasInstance` is necessary because using plain `instanceof`
                    // would return false, as no `_writableState` property is attached.

                    // Trying to use the custom `instanceof` for Writable here will also break the
                    // Node.js LazyTransform implementation, which has a non-trivial getter for
                    // `_writableState` that would lead to infinite recursion.
                    if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
                        return new Writable(options);
                    }

                    this._writableState = new WritableState(options, this);

                    // legacy.
                    this.writable = true;

                    if (options) {
                        if (typeof options.write === 'function') this._write = options.write;

                        if (typeof options.writev === 'function') this._writev = options.writev;

                        if (typeof options.destroy === 'function') this._destroy = options.destroy;

                        if (typeof options.final === 'function') this._final = options.final;
                    }

                    Stream.call(this);
                }

// Otherwise people can pipe Writable streams, which is just wrong.
                Writable.prototype.pipe = function () {
                    this.emit('error', new Error('Cannot pipe, not readable'));
                };

                function writeAfterEnd(stream, cb) {
                    var er = new Error('write after end');
                    // TODO: defer error events consistently everywhere, not just the cb
                    stream.emit('error', er);
                    pna.nextTick(cb, er);
                }

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
                function validChunk(stream, state, chunk, cb) {
                    var valid = true;
                    var er = false;

                    if (chunk === null) {
                        er = new TypeError('May not write null values to stream');
                    } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
                        er = new TypeError('Invalid non-string/buffer chunk');
                    }
                    if (er) {
                        stream.emit('error', er);
                        pna.nextTick(cb, er);
                        valid = false;
                    }
                    return valid;
                }

                Writable.prototype.write = function (chunk, encoding, cb) {
                    var state = this._writableState;
                    var ret = false;
                    var isBuf = !state.objectMode && _isUint8Array(chunk);

                    if (isBuf && !Buffer.isBuffer(chunk)) {
                        chunk = _uint8ArrayToBuffer(chunk);
                    }

                    if (typeof encoding === 'function') {
                        cb = encoding;
                        encoding = null;
                    }

                    if (isBuf) encoding = 'buffer'; else if (!encoding) encoding = state.defaultEncoding;

                    if (typeof cb !== 'function') cb = nop;

                    if (state.ended) writeAfterEnd(this, cb); else if (isBuf || validChunk(this, state, chunk, cb)) {
                        state.pendingcb++;
                        ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
                    }

                    return ret;
                };

                Writable.prototype.cork = function () {
                    var state = this._writableState;

                    state.corked++;
                };

                Writable.prototype.uncork = function () {
                    var state = this._writableState;

                    if (state.corked) {
                        state.corked--;

                        if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
                    }
                };

                Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
                    // node::ParseEncoding() requires lower case.
                    if (typeof encoding === 'string') encoding = encoding.toLowerCase();
                    if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
                    this._writableState.defaultEncoding = encoding;
                    return this;
                };

                function decodeChunk(state, chunk, encoding) {
                    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
                        chunk = Buffer.from(chunk, encoding);
                    }
                    return chunk;
                }

                Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
                    // making it explicit this property is not enumerable
                    // because otherwise some prototype manipulation in
                    // userland will fail
                    enumerable: false,
                    get: function () {
                        return this._writableState.highWaterMark;
                    }
                });

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
                function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
                    if (!isBuf) {
                        var newChunk = decodeChunk(state, chunk, encoding);
                        if (chunk !== newChunk) {
                            isBuf = true;
                            encoding = 'buffer';
                            chunk = newChunk;
                        }
                    }
                    var len = state.objectMode ? 1 : chunk.length;

                    state.length += len;

                    var ret = state.length < state.highWaterMark;
                    // we must ensure that previous needDrain will not be reset to false.
                    if (!ret) state.needDrain = true;

                    if (state.writing || state.corked) {
                        var last = state.lastBufferedRequest;
                        state.lastBufferedRequest = {
                            chunk: chunk,
                            encoding: encoding,
                            isBuf: isBuf,
                            callback: cb,
                            next: null
                        };
                        if (last) {
                            last.next = state.lastBufferedRequest;
                        } else {
                            state.bufferedRequest = state.lastBufferedRequest;
                        }
                        state.bufferedRequestCount += 1;
                    } else {
                        doWrite(stream, state, false, len, chunk, encoding, cb);
                    }

                    return ret;
                }

                function doWrite(stream, state, writev, len, chunk, encoding, cb) {
                    state.writelen = len;
                    state.writecb = cb;
                    state.writing = true;
                    state.sync = true;
                    if (writev) stream._writev(chunk, state.onwrite); else stream._write(chunk, encoding, state.onwrite);
                    state.sync = false;
                }

                function onwriteError(stream, state, sync, er, cb) {
                    --state.pendingcb;

                    if (sync) {
                        // defer the callback if we are being called synchronously
                        // to avoid piling up things on the stack
                        pna.nextTick(cb, er);
                        // this can emit finish, and it will always happen
                        // after error
                        pna.nextTick(finishMaybe, stream, state);
                        stream._writableState.errorEmitted = true;
                        stream.emit('error', er);
                    } else {
                        // the caller expect this to happen before if
                        // it is async
                        cb(er);
                        stream._writableState.errorEmitted = true;
                        stream.emit('error', er);
                        // this can emit finish, but finish must
                        // always follow error
                        finishMaybe(stream, state);
                    }
                }

                function onwriteStateUpdate(state) {
                    state.writing = false;
                    state.writecb = null;
                    state.length -= state.writelen;
                    state.writelen = 0;
                }

                function onwrite(stream, er) {
                    var state = stream._writableState;
                    var sync = state.sync;
                    var cb = state.writecb;

                    onwriteStateUpdate(state);

                    if (er) onwriteError(stream, state, sync, er, cb); else {
                        // Check if we're actually ready to finish, but don't emit yet
                        var finished = needFinish(state);

                        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
                            clearBuffer(stream, state);
                        }

                        if (sync) {
                            /*<replacement>*/
                            asyncWrite(afterWrite, stream, state, finished, cb);
                            /*</replacement>*/
                        } else {
                            afterWrite(stream, state, finished, cb);
                        }
                    }
                }

                function afterWrite(stream, state, finished, cb) {
                    if (!finished) onwriteDrain(stream, state);
                    state.pendingcb--;
                    cb();
                    finishMaybe(stream, state);
                }

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
                function onwriteDrain(stream, state) {
                    if (state.length === 0 && state.needDrain) {
                        state.needDrain = false;
                        stream.emit('drain');
                    }
                }

// if there's something in the buffer waiting, then process it
                function clearBuffer(stream, state) {
                    state.bufferProcessing = true;
                    var entry = state.bufferedRequest;

                    if (stream._writev && entry && entry.next) {
                        // Fast case, write everything using _writev()
                        var l = state.bufferedRequestCount;
                        var buffer = new Array(l);
                        var holder = state.corkedRequestsFree;
                        holder.entry = entry;

                        var count = 0;
                        var allBuffers = true;
                        while (entry) {
                            buffer[count] = entry;
                            if (!entry.isBuf) allBuffers = false;
                            entry = entry.next;
                            count += 1;
                        }
                        buffer.allBuffers = allBuffers;

                        doWrite(stream, state, true, state.length, buffer, '', holder.finish);

                        // doWrite is almost always async, defer these to save a bit of time
                        // as the hot path ends with doWrite
                        state.pendingcb++;
                        state.lastBufferedRequest = null;
                        if (holder.next) {
                            state.corkedRequestsFree = holder.next;
                            holder.next = null;
                        } else {
                            state.corkedRequestsFree = new CorkedRequest(state);
                        }
                        state.bufferedRequestCount = 0;
                    } else {
                        // Slow case, write chunks one-by-one
                        while (entry) {
                            var chunk = entry.chunk;
                            var encoding = entry.encoding;
                            var cb = entry.callback;
                            var len = state.objectMode ? 1 : chunk.length;

                            doWrite(stream, state, false, len, chunk, encoding, cb);
                            entry = entry.next;
                            state.bufferedRequestCount--;
                            // if we didn't call the onwrite immediately, then
                            // it means that we need to wait until it does.
                            // also, that means that the chunk and cb are currently
                            // being processed, so move the buffer counter past them.
                            if (state.writing) {
                                break;
                            }
                        }

                        if (entry === null) state.lastBufferedRequest = null;
                    }

                    state.bufferedRequest = entry;
                    state.bufferProcessing = false;
                }

                Writable.prototype._write = function (chunk, encoding, cb) {
                    cb(new Error('_write() is not implemented'));
                };

                Writable.prototype._writev = null;

                Writable.prototype.end = function (chunk, encoding, cb) {
                    var state = this._writableState;

                    if (typeof chunk === 'function') {
                        cb = chunk;
                        chunk = null;
                        encoding = null;
                    } else if (typeof encoding === 'function') {
                        cb = encoding;
                        encoding = null;
                    }

                    if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

                    // .end() fully uncorks
                    if (state.corked) {
                        state.corked = 1;
                        this.uncork();
                    }

                    // ignore unnecessary end() calls.
                    if (!state.ending && !state.finished) endWritable(this, state, cb);
                };

                function needFinish(state) {
                    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
                }

                function callFinal(stream, state) {
                    stream._final(function (err) {
                        state.pendingcb--;
                        if (err) {
                            stream.emit('error', err);
                        }
                        state.prefinished = true;
                        stream.emit('prefinish');
                        finishMaybe(stream, state);
                    });
                }

                function prefinish(stream, state) {
                    if (!state.prefinished && !state.finalCalled) {
                        if (typeof stream._final === 'function') {
                            state.pendingcb++;
                            state.finalCalled = true;
                            pna.nextTick(callFinal, stream, state);
                        } else {
                            state.prefinished = true;
                            stream.emit('prefinish');
                        }
                    }
                }

                function finishMaybe(stream, state) {
                    var need = needFinish(state);
                    if (need) {
                        prefinish(stream, state);
                        if (state.pendingcb === 0) {
                            state.finished = true;
                            stream.emit('finish');
                        }
                    }
                    return need;
                }

                function endWritable(stream, state, cb) {
                    state.ending = true;
                    finishMaybe(stream, state);
                    if (cb) {
                        if (state.finished) pna.nextTick(cb); else stream.once('finish', cb);
                    }
                    state.ended = true;
                    stream.writable = false;
                }

                function onCorkedFinish(corkReq, state, err) {
                    var entry = corkReq.entry;
                    corkReq.entry = null;
                    while (entry) {
                        var cb = entry.callback;
                        state.pendingcb--;
                        cb(err);
                        entry = entry.next;
                    }
                    if (state.corkedRequestsFree) {
                        state.corkedRequestsFree.next = corkReq;
                    } else {
                        state.corkedRequestsFree = corkReq;
                    }
                }

                Object.defineProperty(Writable.prototype, 'destroyed', {
                    get: function () {
                        if (this._writableState === undefined) {
                            return false;
                        }
                        return this._writableState.destroyed;
                    },
                    set: function (value) {
                        // we ignore the value if the stream
                        // has not been initialized yet
                        if (!this._writableState) {
                            return;
                        }

                        // backward compatibility, the user is explicitly
                        // managing destroyed
                        this._writableState.destroyed = value;
                    }
                });

                Writable.prototype.destroy = destroyImpl.destroy;
                Writable.prototype._undestroy = destroyImpl.undestroy;
                Writable.prototype._destroy = function (err, cb) {
                    this.end();
                    cb(err);
                };
            }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
        }, {
            "./_stream_duplex": 170,
            "./internal/streams/destroy": 176,
            "./internal/streams/stream": 177,
            "_process": 49,
            "core-util-is": 60,
            "inherits": 143,
            "process-nextick-args": 160,
            "safe-buffer": 184,
            "util-deprecate": 214
        }],
        175: [function (require, module, exports) {
            'use strict';

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }

            var Buffer = require('safe-buffer').Buffer;
            var util = require('util');

            function copyBuffer(src, target, offset) {
                src.copy(target, offset);
            }

            module.exports = function () {
                function BufferList() {
                    _classCallCheck(this, BufferList);

                    this.head = null;
                    this.tail = null;
                    this.length = 0;
                }

                BufferList.prototype.push = function push(v) {
                    var entry = {data: v, next: null};
                    if (this.length > 0) this.tail.next = entry; else this.head = entry;
                    this.tail = entry;
                    ++this.length;
                };

                BufferList.prototype.unshift = function unshift(v) {
                    var entry = {data: v, next: this.head};
                    if (this.length === 0) this.tail = entry;
                    this.head = entry;
                    ++this.length;
                };

                BufferList.prototype.shift = function shift() {
                    if (this.length === 0) return;
                    var ret = this.head.data;
                    if (this.length === 1) this.head = this.tail = null; else this.head = this.head.next;
                    --this.length;
                    return ret;
                };

                BufferList.prototype.clear = function clear() {
                    this.head = this.tail = null;
                    this.length = 0;
                };

                BufferList.prototype.join = function join(s) {
                    if (this.length === 0) return '';
                    var p = this.head;
                    var ret = '' + p.data;
                    while (p = p.next) {
                        ret += s + p.data;
                    }
                    return ret;
                };

                BufferList.prototype.concat = function concat(n) {
                    if (this.length === 0) return Buffer.alloc(0);
                    if (this.length === 1) return this.head.data;
                    var ret = Buffer.allocUnsafe(n >>> 0);
                    var p = this.head;
                    var i = 0;
                    while (p) {
                        copyBuffer(p.data, ret, i);
                        i += p.data.length;
                        p = p.next;
                    }
                    return ret;
                };

                return BufferList;
            }();

            if (util && util.inspect && util.inspect.custom) {
                module.exports.prototype[util.inspect.custom] = function () {
                    var obj = util.inspect({length: this.length});
                    return this.constructor.name + ' ' + obj;
                };
            }
        }, {"safe-buffer": 184, "util": 22}],
        176: [function (require, module, exports) {
            'use strict';

            /*<replacement>*/

            var pna = require('process-nextick-args');
            /*</replacement>*/

// undocumented cb() API, needed for core, not for public API
            function destroy(err, cb) {
                var _this = this;

                var readableDestroyed = this._readableState && this._readableState.destroyed;
                var writableDestroyed = this._writableState && this._writableState.destroyed;

                if (readableDestroyed || writableDestroyed) {
                    if (cb) {
                        cb(err);
                    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
                        pna.nextTick(emitErrorNT, this, err);
                    }
                    return this;
                }

                // we set destroyed to true before firing error callbacks in order
                // to make it re-entrance safe in case destroy() is called within callbacks

                if (this._readableState) {
                    this._readableState.destroyed = true;
                }

                // if this is a duplex stream mark the writable part as destroyed as well
                if (this._writableState) {
                    this._writableState.destroyed = true;
                }

                this._destroy(err || null, function (err) {
                    if (!cb && err) {
                        pna.nextTick(emitErrorNT, _this, err);
                        if (_this._writableState) {
                            _this._writableState.errorEmitted = true;
                        }
                    } else if (cb) {
                        cb(err);
                    }
                });

                return this;
            }

            function undestroy() {
                if (this._readableState) {
                    this._readableState.destroyed = false;
                    this._readableState.reading = false;
                    this._readableState.ended = false;
                    this._readableState.endEmitted = false;
                }

                if (this._writableState) {
                    this._writableState.destroyed = false;
                    this._writableState.ended = false;
                    this._writableState.ending = false;
                    this._writableState.finished = false;
                    this._writableState.errorEmitted = false;
                }
            }

            function emitErrorNT(self, err) {
                self.emit('error', err);
            }

            module.exports = {
                destroy: destroy,
                undestroy: undestroy
            };
        }, {"process-nextick-args": 160}],
        177: [function (require, module, exports) {
            module.exports = require('events').EventEmitter;

        }, {"events": 127}],
        178: [function (require, module, exports) {
            var toString = {}.toString;

            module.exports = Array.isArray || function (arr) {
                return toString.call(arr) == '[object Array]';
            };

        }, {}],
        179: [function (require, module, exports) {
            module.exports = require('./readable').PassThrough

        }, {"./readable": 180}],
        180: [function (require, module, exports) {
            exports = module.exports = require('./lib/_stream_readable.js');
            exports.Stream = exports;
            exports.Readable = exports;
            exports.Writable = require('./lib/_stream_writable.js');
            exports.Duplex = require('./lib/_stream_duplex.js');
            exports.Transform = require('./lib/_stream_transform.js');
            exports.PassThrough = require('./lib/_stream_passthrough.js');

        }, {
            "./lib/_stream_duplex.js": 170,
            "./lib/_stream_passthrough.js": 171,
            "./lib/_stream_readable.js": 172,
            "./lib/_stream_transform.js": 173,
            "./lib/_stream_writable.js": 174
        }],
        181: [function (require, module, exports) {
            module.exports = require('./readable').Transform

        }, {"./readable": 180}],
        182: [function (require, module, exports) {
            module.exports = require('./lib/_stream_writable.js');

        }, {"./lib/_stream_writable.js": 174}],
        183: [function (require, module, exports) {
            (function (Buffer) {
                'use strict'
                var inherits = require('inherits')
                var HashBase = require('hash-base')

                function RIPEMD160() {
                    HashBase.call(this, 64)

                    // state
                    this._a = 0x67452301
                    this._b = 0xefcdab89
                    this._c = 0x98badcfe
                    this._d = 0x10325476
                    this._e = 0xc3d2e1f0
                }

                inherits(RIPEMD160, HashBase)

                RIPEMD160.prototype._update = function () {
                    var m = new Array(16)
                    for (var i = 0; i < 16; ++i) m[i] = this._block.readInt32LE(i * 4)

                    var al = this._a
                    var bl = this._b
                    var cl = this._c
                    var dl = this._d
                    var el = this._e

                    // Mj = 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
                    // K = 0x00000000
                    // Sj = 11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8
                    al = fn1(al, bl, cl, dl, el, m[0], 0x00000000, 11);
                    cl = rotl(cl, 10)
                    el = fn1(el, al, bl, cl, dl, m[1], 0x00000000, 14);
                    bl = rotl(bl, 10)
                    dl = fn1(dl, el, al, bl, cl, m[2], 0x00000000, 15);
                    al = rotl(al, 10)
                    cl = fn1(cl, dl, el, al, bl, m[3], 0x00000000, 12);
                    el = rotl(el, 10)
                    bl = fn1(bl, cl, dl, el, al, m[4], 0x00000000, 5);
                    dl = rotl(dl, 10)
                    al = fn1(al, bl, cl, dl, el, m[5], 0x00000000, 8);
                    cl = rotl(cl, 10)
                    el = fn1(el, al, bl, cl, dl, m[6], 0x00000000, 7);
                    bl = rotl(bl, 10)
                    dl = fn1(dl, el, al, bl, cl, m[7], 0x00000000, 9);
                    al = rotl(al, 10)
                    cl = fn1(cl, dl, el, al, bl, m[8], 0x00000000, 11);
                    el = rotl(el, 10)
                    bl = fn1(bl, cl, dl, el, al, m[9], 0x00000000, 13);
                    dl = rotl(dl, 10)
                    al = fn1(al, bl, cl, dl, el, m[10], 0x00000000, 14);
                    cl = rotl(cl, 10)
                    el = fn1(el, al, bl, cl, dl, m[11], 0x00000000, 15);
                    bl = rotl(bl, 10)
                    dl = fn1(dl, el, al, bl, cl, m[12], 0x00000000, 6);
                    al = rotl(al, 10)
                    cl = fn1(cl, dl, el, al, bl, m[13], 0x00000000, 7);
                    el = rotl(el, 10)
                    bl = fn1(bl, cl, dl, el, al, m[14], 0x00000000, 9);
                    dl = rotl(dl, 10)
                    al = fn1(al, bl, cl, dl, el, m[15], 0x00000000, 8);
                    cl = rotl(cl, 10)

                    // Mj = 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8
                    // K = 0x5a827999
                    // Sj = 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12
                    el = fn2(el, al, bl, cl, dl, m[7], 0x5a827999, 7);
                    bl = rotl(bl, 10)
                    dl = fn2(dl, el, al, bl, cl, m[4], 0x5a827999, 6);
                    al = rotl(al, 10)
                    cl = fn2(cl, dl, el, al, bl, m[13], 0x5a827999, 8);
                    el = rotl(el, 10)
                    bl = fn2(bl, cl, dl, el, al, m[1], 0x5a827999, 13);
                    dl = rotl(dl, 10)
                    al = fn2(al, bl, cl, dl, el, m[10], 0x5a827999, 11);
                    cl = rotl(cl, 10)
                    el = fn2(el, al, bl, cl, dl, m[6], 0x5a827999, 9);
                    bl = rotl(bl, 10)
                    dl = fn2(dl, el, al, bl, cl, m[15], 0x5a827999, 7);
                    al = rotl(al, 10)
                    cl = fn2(cl, dl, el, al, bl, m[3], 0x5a827999, 15);
                    el = rotl(el, 10)
                    bl = fn2(bl, cl, dl, el, al, m[12], 0x5a827999, 7);
                    dl = rotl(dl, 10)
                    al = fn2(al, bl, cl, dl, el, m[0], 0x5a827999, 12);
                    cl = rotl(cl, 10)
                    el = fn2(el, al, bl, cl, dl, m[9], 0x5a827999, 15);
                    bl = rotl(bl, 10)
                    dl = fn2(dl, el, al, bl, cl, m[5], 0x5a827999, 9);
                    al = rotl(al, 10)
                    cl = fn2(cl, dl, el, al, bl, m[2], 0x5a827999, 11);
                    el = rotl(el, 10)
                    bl = fn2(bl, cl, dl, el, al, m[14], 0x5a827999, 7);
                    dl = rotl(dl, 10)
                    al = fn2(al, bl, cl, dl, el, m[11], 0x5a827999, 13);
                    cl = rotl(cl, 10)
                    el = fn2(el, al, bl, cl, dl, m[8], 0x5a827999, 12);
                    bl = rotl(bl, 10)

                    // Mj = 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12
                    // K = 0x6ed9eba1
                    // Sj = 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5
                    dl = fn3(dl, el, al, bl, cl, m[3], 0x6ed9eba1, 11);
                    al = rotl(al, 10)
                    cl = fn3(cl, dl, el, al, bl, m[10], 0x6ed9eba1, 13);
                    el = rotl(el, 10)
                    bl = fn3(bl, cl, dl, el, al, m[14], 0x6ed9eba1, 6);
                    dl = rotl(dl, 10)
                    al = fn3(al, bl, cl, dl, el, m[4], 0x6ed9eba1, 7);
                    cl = rotl(cl, 10)
                    el = fn3(el, al, bl, cl, dl, m[9], 0x6ed9eba1, 14);
                    bl = rotl(bl, 10)
                    dl = fn3(dl, el, al, bl, cl, m[15], 0x6ed9eba1, 9);
                    al = rotl(al, 10)
                    cl = fn3(cl, dl, el, al, bl, m[8], 0x6ed9eba1, 13);
                    el = rotl(el, 10)
                    bl = fn3(bl, cl, dl, el, al, m[1], 0x6ed9eba1, 15);
                    dl = rotl(dl, 10)
                    al = fn3(al, bl, cl, dl, el, m[2], 0x6ed9eba1, 14);
                    cl = rotl(cl, 10)
                    el = fn3(el, al, bl, cl, dl, m[7], 0x6ed9eba1, 8);
                    bl = rotl(bl, 10)
                    dl = fn3(dl, el, al, bl, cl, m[0], 0x6ed9eba1, 13);
                    al = rotl(al, 10)
                    cl = fn3(cl, dl, el, al, bl, m[6], 0x6ed9eba1, 6);
                    el = rotl(el, 10)
                    bl = fn3(bl, cl, dl, el, al, m[13], 0x6ed9eba1, 5);
                    dl = rotl(dl, 10)
                    al = fn3(al, bl, cl, dl, el, m[11], 0x6ed9eba1, 12);
                    cl = rotl(cl, 10)
                    el = fn3(el, al, bl, cl, dl, m[5], 0x6ed9eba1, 7);
                    bl = rotl(bl, 10)
                    dl = fn3(dl, el, al, bl, cl, m[12], 0x6ed9eba1, 5);
                    al = rotl(al, 10)

                    // Mj = 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2
                    // K = 0x8f1bbcdc
                    // Sj = 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12
                    cl = fn4(cl, dl, el, al, bl, m[1], 0x8f1bbcdc, 11);
                    el = rotl(el, 10)
                    bl = fn4(bl, cl, dl, el, al, m[9], 0x8f1bbcdc, 12);
                    dl = rotl(dl, 10)
                    al = fn4(al, bl, cl, dl, el, m[11], 0x8f1bbcdc, 14);
                    cl = rotl(cl, 10)
                    el = fn4(el, al, bl, cl, dl, m[10], 0x8f1bbcdc, 15);
                    bl = rotl(bl, 10)
                    dl = fn4(dl, el, al, bl, cl, m[0], 0x8f1bbcdc, 14);
                    al = rotl(al, 10)
                    cl = fn4(cl, dl, el, al, bl, m[8], 0x8f1bbcdc, 15);
                    el = rotl(el, 10)
                    bl = fn4(bl, cl, dl, el, al, m[12], 0x8f1bbcdc, 9);
                    dl = rotl(dl, 10)
                    al = fn4(al, bl, cl, dl, el, m[4], 0x8f1bbcdc, 8);
                    cl = rotl(cl, 10)
                    el = fn4(el, al, bl, cl, dl, m[13], 0x8f1bbcdc, 9);
                    bl = rotl(bl, 10)
                    dl = fn4(dl, el, al, bl, cl, m[3], 0x8f1bbcdc, 14);
                    al = rotl(al, 10)
                    cl = fn4(cl, dl, el, al, bl, m[7], 0x8f1bbcdc, 5);
                    el = rotl(el, 10)
                    bl = fn4(bl, cl, dl, el, al, m[15], 0x8f1bbcdc, 6);
                    dl = rotl(dl, 10)
                    al = fn4(al, bl, cl, dl, el, m[14], 0x8f1bbcdc, 8);
                    cl = rotl(cl, 10)
                    el = fn4(el, al, bl, cl, dl, m[5], 0x8f1bbcdc, 6);
                    bl = rotl(bl, 10)
                    dl = fn4(dl, el, al, bl, cl, m[6], 0x8f1bbcdc, 5);
                    al = rotl(al, 10)
                    cl = fn4(cl, dl, el, al, bl, m[2], 0x8f1bbcdc, 12);
                    el = rotl(el, 10)

                    // Mj = 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
                    // K = 0xa953fd4e
                    // Sj = 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
                    bl = fn5(bl, cl, dl, el, al, m[4], 0xa953fd4e, 9);
                    dl = rotl(dl, 10)
                    al = fn5(al, bl, cl, dl, el, m[0], 0xa953fd4e, 15);
                    cl = rotl(cl, 10)
                    el = fn5(el, al, bl, cl, dl, m[5], 0xa953fd4e, 5);
                    bl = rotl(bl, 10)
                    dl = fn5(dl, el, al, bl, cl, m[9], 0xa953fd4e, 11);
                    al = rotl(al, 10)
                    cl = fn5(cl, dl, el, al, bl, m[7], 0xa953fd4e, 6);
                    el = rotl(el, 10)
                    bl = fn5(bl, cl, dl, el, al, m[12], 0xa953fd4e, 8);
                    dl = rotl(dl, 10)
                    al = fn5(al, bl, cl, dl, el, m[2], 0xa953fd4e, 13);
                    cl = rotl(cl, 10)
                    el = fn5(el, al, bl, cl, dl, m[10], 0xa953fd4e, 12);
                    bl = rotl(bl, 10)
                    dl = fn5(dl, el, al, bl, cl, m[14], 0xa953fd4e, 5);
                    al = rotl(al, 10)
                    cl = fn5(cl, dl, el, al, bl, m[1], 0xa953fd4e, 12);
                    el = rotl(el, 10)
                    bl = fn5(bl, cl, dl, el, al, m[3], 0xa953fd4e, 13);
                    dl = rotl(dl, 10)
                    al = fn5(al, bl, cl, dl, el, m[8], 0xa953fd4e, 14);
                    cl = rotl(cl, 10)
                    el = fn5(el, al, bl, cl, dl, m[11], 0xa953fd4e, 11);
                    bl = rotl(bl, 10)
                    dl = fn5(dl, el, al, bl, cl, m[6], 0xa953fd4e, 8);
                    al = rotl(al, 10)
                    cl = fn5(cl, dl, el, al, bl, m[15], 0xa953fd4e, 5);
                    el = rotl(el, 10)
                    bl = fn5(bl, cl, dl, el, al, m[13], 0xa953fd4e, 6);
                    dl = rotl(dl, 10)

                    var ar = this._a
                    var br = this._b
                    var cr = this._c
                    var dr = this._d
                    var er = this._e

                    // M'j = 5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12
                    // K' = 0x50a28be6
                    // S'j = 8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6
                    ar = fn5(ar, br, cr, dr, er, m[5], 0x50a28be6, 8);
                    cr = rotl(cr, 10)
                    er = fn5(er, ar, br, cr, dr, m[14], 0x50a28be6, 9);
                    br = rotl(br, 10)
                    dr = fn5(dr, er, ar, br, cr, m[7], 0x50a28be6, 9);
                    ar = rotl(ar, 10)
                    cr = fn5(cr, dr, er, ar, br, m[0], 0x50a28be6, 11);
                    er = rotl(er, 10)
                    br = fn5(br, cr, dr, er, ar, m[9], 0x50a28be6, 13);
                    dr = rotl(dr, 10)
                    ar = fn5(ar, br, cr, dr, er, m[2], 0x50a28be6, 15);
                    cr = rotl(cr, 10)
                    er = fn5(er, ar, br, cr, dr, m[11], 0x50a28be6, 15);
                    br = rotl(br, 10)
                    dr = fn5(dr, er, ar, br, cr, m[4], 0x50a28be6, 5);
                    ar = rotl(ar, 10)
                    cr = fn5(cr, dr, er, ar, br, m[13], 0x50a28be6, 7);
                    er = rotl(er, 10)
                    br = fn5(br, cr, dr, er, ar, m[6], 0x50a28be6, 7);
                    dr = rotl(dr, 10)
                    ar = fn5(ar, br, cr, dr, er, m[15], 0x50a28be6, 8);
                    cr = rotl(cr, 10)
                    er = fn5(er, ar, br, cr, dr, m[8], 0x50a28be6, 11);
                    br = rotl(br, 10)
                    dr = fn5(dr, er, ar, br, cr, m[1], 0x50a28be6, 14);
                    ar = rotl(ar, 10)
                    cr = fn5(cr, dr, er, ar, br, m[10], 0x50a28be6, 14);
                    er = rotl(er, 10)
                    br = fn5(br, cr, dr, er, ar, m[3], 0x50a28be6, 12);
                    dr = rotl(dr, 10)
                    ar = fn5(ar, br, cr, dr, er, m[12], 0x50a28be6, 6);
                    cr = rotl(cr, 10)

                    // M'j = 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2
                    // K' = 0x5c4dd124
                    // S'j = 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11
                    er = fn4(er, ar, br, cr, dr, m[6], 0x5c4dd124, 9);
                    br = rotl(br, 10)
                    dr = fn4(dr, er, ar, br, cr, m[11], 0x5c4dd124, 13);
                    ar = rotl(ar, 10)
                    cr = fn4(cr, dr, er, ar, br, m[3], 0x5c4dd124, 15);
                    er = rotl(er, 10)
                    br = fn4(br, cr, dr, er, ar, m[7], 0x5c4dd124, 7);
                    dr = rotl(dr, 10)
                    ar = fn4(ar, br, cr, dr, er, m[0], 0x5c4dd124, 12);
                    cr = rotl(cr, 10)
                    er = fn4(er, ar, br, cr, dr, m[13], 0x5c4dd124, 8);
                    br = rotl(br, 10)
                    dr = fn4(dr, er, ar, br, cr, m[5], 0x5c4dd124, 9);
                    ar = rotl(ar, 10)
                    cr = fn4(cr, dr, er, ar, br, m[10], 0x5c4dd124, 11);
                    er = rotl(er, 10)
                    br = fn4(br, cr, dr, er, ar, m[14], 0x5c4dd124, 7);
                    dr = rotl(dr, 10)
                    ar = fn4(ar, br, cr, dr, er, m[15], 0x5c4dd124, 7);
                    cr = rotl(cr, 10)
                    er = fn4(er, ar, br, cr, dr, m[8], 0x5c4dd124, 12);
                    br = rotl(br, 10)
                    dr = fn4(dr, er, ar, br, cr, m[12], 0x5c4dd124, 7);
                    ar = rotl(ar, 10)
                    cr = fn4(cr, dr, er, ar, br, m[4], 0x5c4dd124, 6);
                    er = rotl(er, 10)
                    br = fn4(br, cr, dr, er, ar, m[9], 0x5c4dd124, 15);
                    dr = rotl(dr, 10)
                    ar = fn4(ar, br, cr, dr, er, m[1], 0x5c4dd124, 13);
                    cr = rotl(cr, 10)
                    er = fn4(er, ar, br, cr, dr, m[2], 0x5c4dd124, 11);
                    br = rotl(br, 10)

                    // M'j = 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13
                    // K' = 0x6d703ef3
                    // S'j = 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5
                    dr = fn3(dr, er, ar, br, cr, m[15], 0x6d703ef3, 9);
                    ar = rotl(ar, 10)
                    cr = fn3(cr, dr, er, ar, br, m[5], 0x6d703ef3, 7);
                    er = rotl(er, 10)
                    br = fn3(br, cr, dr, er, ar, m[1], 0x6d703ef3, 15);
                    dr = rotl(dr, 10)
                    ar = fn3(ar, br, cr, dr, er, m[3], 0x6d703ef3, 11);
                    cr = rotl(cr, 10)
                    er = fn3(er, ar, br, cr, dr, m[7], 0x6d703ef3, 8);
                    br = rotl(br, 10)
                    dr = fn3(dr, er, ar, br, cr, m[14], 0x6d703ef3, 6);
                    ar = rotl(ar, 10)
                    cr = fn3(cr, dr, er, ar, br, m[6], 0x6d703ef3, 6);
                    er = rotl(er, 10)
                    br = fn3(br, cr, dr, er, ar, m[9], 0x6d703ef3, 14);
                    dr = rotl(dr, 10)
                    ar = fn3(ar, br, cr, dr, er, m[11], 0x6d703ef3, 12);
                    cr = rotl(cr, 10)
                    er = fn3(er, ar, br, cr, dr, m[8], 0x6d703ef3, 13);
                    br = rotl(br, 10)
                    dr = fn3(dr, er, ar, br, cr, m[12], 0x6d703ef3, 5);
                    ar = rotl(ar, 10)
                    cr = fn3(cr, dr, er, ar, br, m[2], 0x6d703ef3, 14);
                    er = rotl(er, 10)
                    br = fn3(br, cr, dr, er, ar, m[10], 0x6d703ef3, 13);
                    dr = rotl(dr, 10)
                    ar = fn3(ar, br, cr, dr, er, m[0], 0x6d703ef3, 13);
                    cr = rotl(cr, 10)
                    er = fn3(er, ar, br, cr, dr, m[4], 0x6d703ef3, 7);
                    br = rotl(br, 10)
                    dr = fn3(dr, er, ar, br, cr, m[13], 0x6d703ef3, 5);
                    ar = rotl(ar, 10)

                    // M'j = 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14
                    // K' = 0x7a6d76e9
                    // S'j = 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8
                    cr = fn2(cr, dr, er, ar, br, m[8], 0x7a6d76e9, 15);
                    er = rotl(er, 10)
                    br = fn2(br, cr, dr, er, ar, m[6], 0x7a6d76e9, 5);
                    dr = rotl(dr, 10)
                    ar = fn2(ar, br, cr, dr, er, m[4], 0x7a6d76e9, 8);
                    cr = rotl(cr, 10)
                    er = fn2(er, ar, br, cr, dr, m[1], 0x7a6d76e9, 11);
                    br = rotl(br, 10)
                    dr = fn2(dr, er, ar, br, cr, m[3], 0x7a6d76e9, 14);
                    ar = rotl(ar, 10)
                    cr = fn2(cr, dr, er, ar, br, m[11], 0x7a6d76e9, 14);
                    er = rotl(er, 10)
                    br = fn2(br, cr, dr, er, ar, m[15], 0x7a6d76e9, 6);
                    dr = rotl(dr, 10)
                    ar = fn2(ar, br, cr, dr, er, m[0], 0x7a6d76e9, 14);
                    cr = rotl(cr, 10)
                    er = fn2(er, ar, br, cr, dr, m[5], 0x7a6d76e9, 6);
                    br = rotl(br, 10)
                    dr = fn2(dr, er, ar, br, cr, m[12], 0x7a6d76e9, 9);
                    ar = rotl(ar, 10)
                    cr = fn2(cr, dr, er, ar, br, m[2], 0x7a6d76e9, 12);
                    er = rotl(er, 10)
                    br = fn2(br, cr, dr, er, ar, m[13], 0x7a6d76e9, 9);
                    dr = rotl(dr, 10)
                    ar = fn2(ar, br, cr, dr, er, m[9], 0x7a6d76e9, 12);
                    cr = rotl(cr, 10)
                    er = fn2(er, ar, br, cr, dr, m[7], 0x7a6d76e9, 5);
                    br = rotl(br, 10)
                    dr = fn2(dr, er, ar, br, cr, m[10], 0x7a6d76e9, 15);
                    ar = rotl(ar, 10)
                    cr = fn2(cr, dr, er, ar, br, m[14], 0x7a6d76e9, 8);
                    er = rotl(er, 10)

                    // M'j = 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
                    // K' = 0x00000000
                    // S'j = 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
                    br = fn1(br, cr, dr, er, ar, m[12], 0x00000000, 8);
                    dr = rotl(dr, 10)
                    ar = fn1(ar, br, cr, dr, er, m[15], 0x00000000, 5);
                    cr = rotl(cr, 10)
                    er = fn1(er, ar, br, cr, dr, m[10], 0x00000000, 12);
                    br = rotl(br, 10)
                    dr = fn1(dr, er, ar, br, cr, m[4], 0x00000000, 9);
                    ar = rotl(ar, 10)
                    cr = fn1(cr, dr, er, ar, br, m[1], 0x00000000, 12);
                    er = rotl(er, 10)
                    br = fn1(br, cr, dr, er, ar, m[5], 0x00000000, 5);
                    dr = rotl(dr, 10)
                    ar = fn1(ar, br, cr, dr, er, m[8], 0x00000000, 14);
                    cr = rotl(cr, 10)
                    er = fn1(er, ar, br, cr, dr, m[7], 0x00000000, 6);
                    br = rotl(br, 10)
                    dr = fn1(dr, er, ar, br, cr, m[6], 0x00000000, 8);
                    ar = rotl(ar, 10)
                    cr = fn1(cr, dr, er, ar, br, m[2], 0x00000000, 13);
                    er = rotl(er, 10)
                    br = fn1(br, cr, dr, er, ar, m[13], 0x00000000, 6);
                    dr = rotl(dr, 10)
                    ar = fn1(ar, br, cr, dr, er, m[14], 0x00000000, 5);
                    cr = rotl(cr, 10)
                    er = fn1(er, ar, br, cr, dr, m[0], 0x00000000, 15);
                    br = rotl(br, 10)
                    dr = fn1(dr, er, ar, br, cr, m[3], 0x00000000, 13);
                    ar = rotl(ar, 10)
                    cr = fn1(cr, dr, er, ar, br, m[9], 0x00000000, 11);
                    er = rotl(er, 10)
                    br = fn1(br, cr, dr, er, ar, m[11], 0x00000000, 11);
                    dr = rotl(dr, 10)

                    // change state
                    var t = (this._b + cl + dr) | 0
                    this._b = (this._c + dl + er) | 0
                    this._c = (this._d + el + ar) | 0
                    this._d = (this._e + al + br) | 0
                    this._e = (this._a + bl + cr) | 0
                    this._a = t
                }

                RIPEMD160.prototype._digest = function () {
                    // create padding and handle blocks
                    this._block[this._blockOffset++] = 0x80
                    if (this._blockOffset > 56) {
                        this._block.fill(0, this._blockOffset, 64)
                        this._update()
                        this._blockOffset = 0
                    }

                    this._block.fill(0, this._blockOffset, 56)
                    this._block.writeUInt32LE(this._length[0], 56)
                    this._block.writeUInt32LE(this._length[1], 60)
                    this._update()

                    // produce result
                    var buffer = new Buffer(20)
                    buffer.writeInt32LE(this._a, 0)
                    buffer.writeInt32LE(this._b, 4)
                    buffer.writeInt32LE(this._c, 8)
                    buffer.writeInt32LE(this._d, 12)
                    buffer.writeInt32LE(this._e, 16)
                    return buffer
                }

                function rotl(x, n) {
                    return (x << n) | (x >>> (32 - n))
                }

                function fn1(a, b, c, d, e, m, k, s) {
                    return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0
                }

                function fn2(a, b, c, d, e, m, k, s) {
                    return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + e) | 0
                }

                function fn3(a, b, c, d, e, m, k, s) {
                    return (rotl((a + ((b | (~c)) ^ d) + m + k) | 0, s) + e) | 0
                }

                function fn4(a, b, c, d, e, m, k, s) {
                    return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + e) | 0
                }

                function fn5(a, b, c, d, e, m, k, s) {
                    return (rotl((a + (b ^ (c | (~d))) + m + k) | 0, s) + e) | 0
                }

                module.exports = RIPEMD160

            }).call(this, require("buffer").Buffer)
        }, {"buffer": 57, "hash-base": 129, "inherits": 143}],
        184: [function (require, module, exports) {
            /* eslint-disable node/no-deprecated-api */
            var buffer = require('buffer')
            var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
            function copyProps(src, dst) {
                for (var key in src) {
                    dst[key] = src[key]
                }
            }

            if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
                module.exports = buffer
            } else {
                // Copy properties from require('buffer')
                copyProps(buffer, exports)
                exports.Buffer = SafeBuffer
            }

            function SafeBuffer(arg, encodingOrOffset, length) {
                return Buffer(arg, encodingOrOffset, length)
            }

// Copy static methods from Buffer
            copyProps(Buffer, SafeBuffer)

            SafeBuffer.from = function (arg, encodingOrOffset, length) {
                if (typeof arg === 'number') {
                    throw new TypeError('Argument must not be a number')
                }
                return Buffer(arg, encodingOrOffset, length)
            }

            SafeBuffer.alloc = function (size, fill, encoding) {
                if (typeof size !== 'number') {
                    throw new TypeError('Argument must be a number')
                }
                var buf = Buffer(size)
                if (fill !== undefined) {
                    if (typeof encoding === 'string') {
                        buf.fill(fill, encoding)
                    } else {
                        buf.fill(fill)
                    }
                } else {
                    buf.fill(0)
                }
                return buf
            }

            SafeBuffer.allocUnsafe = function (size) {
                if (typeof size !== 'number') {
                    throw new TypeError('Argument must be a number')
                }
                return Buffer(size)
            }

            SafeBuffer.allocUnsafeSlow = function (size) {
                if (typeof size !== 'number') {
                    throw new TypeError('Argument must be a number')
                }
                return buffer.SlowBuffer(size)
            }

        }, {"buffer": 57}],
        185: [function (require, module, exports) {
            (function (Buffer) {
// prototype class for hash functions
                function Hash(blockSize, finalSize) {
                    this._block = new Buffer(blockSize)
                    this._finalSize = finalSize
                    this._blockSize = blockSize
                    this._len = 0
                    this._s = 0
                }

                Hash.prototype.update = function (data, enc) {
                    if (typeof data === 'string') {
                        enc = enc || 'utf8'
                        data = new Buffer(data, enc)
                    }

                    var l = this._len += data.length
                    var s = this._s || 0
                    var f = 0
                    var buffer = this._block

                    while (s < l) {
                        var t = Math.min(data.length, f + this._blockSize - (s % this._blockSize))
                        var ch = (t - f)

                        for (var i = 0; i < ch; i++) {
                            buffer[(s % this._blockSize) + i] = data[i + f]
                        }

                        s += ch
                        f += ch

                        if ((s % this._blockSize) === 0) {
                            this._update(buffer)
                        }
                    }
                    this._s = s

                    return this
                }

                Hash.prototype.digest = function (enc) {
                    // Suppose the length of the message M, in bits, is l
                    var l = this._len * 8

                    // Append the bit 1 to the end of the message
                    this._block[this._len % this._blockSize] = 0x80

                    // and then k zero bits, where k is the smallest non-negative solution to the equation (l + 1 + k) === finalSize mod blockSize
                    this._block.fill(0, this._len % this._blockSize + 1)

                    if (l % (this._blockSize * 8) >= this._finalSize * 8) {
                        this._update(this._block)
                        this._block.fill(0)
                    }

                    // to this append the block which is equal to the number l written in binary
                    // TODO: handle case where l is > Math.pow(2, 29)
                    this._block.writeInt32BE(l, this._blockSize - 4)

                    var hash = this._update(this._block) || this._hash()

                    return enc ? hash.toString(enc) : hash
                }

                Hash.prototype._update = function () {
                    throw new Error('_update must be implemented by subclass')
                }

                module.exports = Hash

            }).call(this, require("buffer").Buffer)
        }, {"buffer": 57}],
        186: [function (require, module, exports) {
            var exports = module.exports = function SHA(algorithm) {
                algorithm = algorithm.toLowerCase()

                var Algorithm = exports[algorithm]
                if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')

                return new Algorithm()
            }

            exports.sha = require('./sha')
            exports.sha1 = require('./sha1')
            exports.sha224 = require('./sha224')
            exports.sha256 = require('./sha256')
            exports.sha384 = require('./sha384')
            exports.sha512 = require('./sha512')

        }, {"./sha": 187, "./sha1": 188, "./sha224": 189, "./sha256": 190, "./sha384": 191, "./sha512": 192}],
        187: [function (require, module, exports) {
            (function (Buffer) {
                /*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */

                var inherits = require('inherits')
                var Hash = require('./hash')

                var K = [
                    0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
                ]

                var W = new Array(80)

                function Sha() {
                    this.init()
                    this._w = W

                    Hash.call(this, 64, 56)
                }

                inherits(Sha, Hash)

                Sha.prototype.init = function () {
                    this._a = 0x67452301
                    this._b = 0xefcdab89
                    this._c = 0x98badcfe
                    this._d = 0x10325476
                    this._e = 0xc3d2e1f0

                    return this
                }

                function rotl5(num) {
                    return (num << 5) | (num >>> 27)
                }

                function rotl30(num) {
                    return (num << 30) | (num >>> 2)
                }

                function ft(s, b, c, d) {
                    if (s === 0) return (b & c) | ((~b) & d)
                    if (s === 2) return (b & c) | (b & d) | (c & d)
                    return b ^ c ^ d
                }

                Sha.prototype._update = function (M) {
                    var W = this._w

                    var a = this._a | 0
                    var b = this._b | 0
                    var c = this._c | 0
                    var d = this._d | 0
                    var e = this._e | 0

                    for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
                    for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]

                    for (var j = 0; j < 80; ++j) {
                        var s = ~~(j / 20)
                        var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

                        e = d
                        d = c
                        c = rotl30(b)
                        b = a
                        a = t
                    }

                    this._a = (a + this._a) | 0
                    this._b = (b + this._b) | 0
                    this._c = (c + this._c) | 0
                    this._d = (d + this._d) | 0
                    this._e = (e + this._e) | 0
                }

                Sha.prototype._hash = function () {
                    var H = new Buffer(20)

                    H.writeInt32BE(this._a | 0, 0)
                    H.writeInt32BE(this._b | 0, 4)
                    H.writeInt32BE(this._c | 0, 8)
                    H.writeInt32BE(this._d | 0, 12)
                    H.writeInt32BE(this._e | 0, 16)

                    return H
                }

                module.exports = Sha

            }).call(this, require("buffer").Buffer)
        }, {"./hash": 185, "buffer": 57, "inherits": 143}],
        188: [function (require, module, exports) {
            (function (Buffer) {
                /*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

                var inherits = require('inherits')
                var Hash = require('./hash')

                var K = [
                    0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
                ]

                var W = new Array(80)

                function Sha1() {
                    this.init()
                    this._w = W

                    Hash.call(this, 64, 56)
                }

                inherits(Sha1, Hash)

                Sha1.prototype.init = function () {
                    this._a = 0x67452301
                    this._b = 0xefcdab89
                    this._c = 0x98badcfe
                    this._d = 0x10325476
                    this._e = 0xc3d2e1f0

                    return this
                }

                function rotl1(num) {
                    return (num << 1) | (num >>> 31)
                }

                function rotl5(num) {
                    return (num << 5) | (num >>> 27)
                }

                function rotl30(num) {
                    return (num << 30) | (num >>> 2)
                }

                function ft(s, b, c, d) {
                    if (s === 0) return (b & c) | ((~b) & d)
                    if (s === 2) return (b & c) | (b & d) | (c & d)
                    return b ^ c ^ d
                }

                Sha1.prototype._update = function (M) {
                    var W = this._w

                    var a = this._a | 0
                    var b = this._b | 0
                    var c = this._c | 0
                    var d = this._d | 0
                    var e = this._e | 0

                    for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
                    for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])

                    for (var j = 0; j < 80; ++j) {
                        var s = ~~(j / 20)
                        var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

                        e = d
                        d = c
                        c = rotl30(b)
                        b = a
                        a = t
                    }

                    this._a = (a + this._a) | 0
                    this._b = (b + this._b) | 0
                    this._c = (c + this._c) | 0
                    this._d = (d + this._d) | 0
                    this._e = (e + this._e) | 0
                }

                Sha1.prototype._hash = function () {
                    var H = new Buffer(20)

                    H.writeInt32BE(this._a | 0, 0)
                    H.writeInt32BE(this._b | 0, 4)
                    H.writeInt32BE(this._c | 0, 8)
                    H.writeInt32BE(this._d | 0, 12)
                    H.writeInt32BE(this._e | 0, 16)

                    return H
                }

                module.exports = Sha1

            }).call(this, require("buffer").Buffer)
        }, {"./hash": 185, "buffer": 57, "inherits": 143}],
        189: [function (require, module, exports) {
            (function (Buffer) {
                /**
                 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
                 * in FIPS 180-2
                 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
                 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
                 *
                 */

                var inherits = require('inherits')
                var Sha256 = require('./sha256')
                var Hash = require('./hash')

                var W = new Array(64)

                function Sha224() {
                    this.init()

                    this._w = W // new Array(64)

                    Hash.call(this, 64, 56)
                }

                inherits(Sha224, Sha256)

                Sha224.prototype.init = function () {
                    this._a = 0xc1059ed8
                    this._b = 0x367cd507
                    this._c = 0x3070dd17
                    this._d = 0xf70e5939
                    this._e = 0xffc00b31
                    this._f = 0x68581511
                    this._g = 0x64f98fa7
                    this._h = 0xbefa4fa4

                    return this
                }

                Sha224.prototype._hash = function () {
                    var H = new Buffer(28)

                    H.writeInt32BE(this._a, 0)
                    H.writeInt32BE(this._b, 4)
                    H.writeInt32BE(this._c, 8)
                    H.writeInt32BE(this._d, 12)
                    H.writeInt32BE(this._e, 16)
                    H.writeInt32BE(this._f, 20)
                    H.writeInt32BE(this._g, 24)

                    return H
                }

                module.exports = Sha224

            }).call(this, require("buffer").Buffer)
        }, {"./hash": 185, "./sha256": 190, "buffer": 57, "inherits": 143}],
        190: [function (require, module, exports) {
            (function (Buffer) {
                /**
                 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
                 * in FIPS 180-2
                 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
                 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
                 *
                 */

                var inherits = require('inherits')
                var Hash = require('./hash')

                var K = [
                    0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
                    0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
                    0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
                    0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
                    0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
                    0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
                    0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
                    0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
                    0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
                    0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
                    0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
                    0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
                    0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
                    0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
                    0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
                    0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
                ]

                var W = new Array(64)

                function Sha256() {
                    this.init()

                    this._w = W // new Array(64)

                    Hash.call(this, 64, 56)
                }

                inherits(Sha256, Hash)

                Sha256.prototype.init = function () {
                    this._a = 0x6a09e667
                    this._b = 0xbb67ae85
                    this._c = 0x3c6ef372
                    this._d = 0xa54ff53a
                    this._e = 0x510e527f
                    this._f = 0x9b05688c
                    this._g = 0x1f83d9ab
                    this._h = 0x5be0cd19

                    return this
                }

                function ch(x, y, z) {
                    return z ^ (x & (y ^ z))
                }

                function maj(x, y, z) {
                    return (x & y) | (z & (x | y))
                }

                function sigma0(x) {
                    return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
                }

                function sigma1(x) {
                    return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
                }

                function gamma0(x) {
                    return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
                }

                function gamma1(x) {
                    return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
                }

                Sha256.prototype._update = function (M) {
                    var W = this._w

                    var a = this._a | 0
                    var b = this._b | 0
                    var c = this._c | 0
                    var d = this._d | 0
                    var e = this._e | 0
                    var f = this._f | 0
                    var g = this._g | 0
                    var h = this._h | 0

                    for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
                    for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0

                    for (var j = 0; j < 64; ++j) {
                        var T1 = (h + sigma1(e) + ch(e, f, g) + K[j] + W[j]) | 0
                        var T2 = (sigma0(a) + maj(a, b, c)) | 0

                        h = g
                        g = f
                        f = e
                        e = (d + T1) | 0
                        d = c
                        c = b
                        b = a
                        a = (T1 + T2) | 0
                    }

                    this._a = (a + this._a) | 0
                    this._b = (b + this._b) | 0
                    this._c = (c + this._c) | 0
                    this._d = (d + this._d) | 0
                    this._e = (e + this._e) | 0
                    this._f = (f + this._f) | 0
                    this._g = (g + this._g) | 0
                    this._h = (h + this._h) | 0
                }

                Sha256.prototype._hash = function () {
                    var H = new Buffer(32)

                    H.writeInt32BE(this._a, 0)
                    H.writeInt32BE(this._b, 4)
                    H.writeInt32BE(this._c, 8)
                    H.writeInt32BE(this._d, 12)
                    H.writeInt32BE(this._e, 16)
                    H.writeInt32BE(this._f, 20)
                    H.writeInt32BE(this._g, 24)
                    H.writeInt32BE(this._h, 28)

                    return H
                }

                module.exports = Sha256

            }).call(this, require("buffer").Buffer)
        }, {"./hash": 185, "buffer": 57, "inherits": 143}],
        191: [function (require, module, exports) {
            (function (Buffer) {
                var inherits = require('inherits')
                var SHA512 = require('./sha512')
                var Hash = require('./hash')

                var W = new Array(160)

                function Sha384() {
                    this.init()
                    this._w = W

                    Hash.call(this, 128, 112)
                }

                inherits(Sha384, SHA512)

                Sha384.prototype.init = function () {
                    this._ah = 0xcbbb9d5d
                    this._bh = 0x629a292a
                    this._ch = 0x9159015a
                    this._dh = 0x152fecd8
                    this._eh = 0x67332667
                    this._fh = 0x8eb44a87
                    this._gh = 0xdb0c2e0d
                    this._hh = 0x47b5481d

                    this._al = 0xc1059ed8
                    this._bl = 0x367cd507
                    this._cl = 0x3070dd17
                    this._dl = 0xf70e5939
                    this._el = 0xffc00b31
                    this._fl = 0x68581511
                    this._gl = 0x64f98fa7
                    this._hl = 0xbefa4fa4

                    return this
                }

                Sha384.prototype._hash = function () {
                    var H = new Buffer(48)

                    function writeInt64BE(h, l, offset) {
                        H.writeInt32BE(h, offset)
                        H.writeInt32BE(l, offset + 4)
                    }

                    writeInt64BE(this._ah, this._al, 0)
                    writeInt64BE(this._bh, this._bl, 8)
                    writeInt64BE(this._ch, this._cl, 16)
                    writeInt64BE(this._dh, this._dl, 24)
                    writeInt64BE(this._eh, this._el, 32)
                    writeInt64BE(this._fh, this._fl, 40)

                    return H
                }

                module.exports = Sha384

            }).call(this, require("buffer").Buffer)
        }, {"./hash": 185, "./sha512": 192, "buffer": 57, "inherits": 143}],
        192: [function (require, module, exports) {
            (function (Buffer) {
                var inherits = require('inherits')
                var Hash = require('./hash')

                var K = [
                    0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
                    0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
                    0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
                    0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
                    0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
                    0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
                    0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
                    0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
                    0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
                    0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
                    0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
                    0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
                    0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
                    0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
                    0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
                    0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
                    0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
                    0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
                    0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
                    0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
                    0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
                    0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
                    0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
                    0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
                    0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
                    0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
                    0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
                    0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
                    0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
                    0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
                    0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
                    0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
                    0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
                    0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
                    0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
                    0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
                    0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
                    0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
                    0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
                    0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
                ]

                var W = new Array(160)

                function Sha512() {
                    this.init()
                    this._w = W

                    Hash.call(this, 128, 112)
                }

                inherits(Sha512, Hash)

                Sha512.prototype.init = function () {
                    this._ah = 0x6a09e667
                    this._bh = 0xbb67ae85
                    this._ch = 0x3c6ef372
                    this._dh = 0xa54ff53a
                    this._eh = 0x510e527f
                    this._fh = 0x9b05688c
                    this._gh = 0x1f83d9ab
                    this._hh = 0x5be0cd19

                    this._al = 0xf3bcc908
                    this._bl = 0x84caa73b
                    this._cl = 0xfe94f82b
                    this._dl = 0x5f1d36f1
                    this._el = 0xade682d1
                    this._fl = 0x2b3e6c1f
                    this._gl = 0xfb41bd6b
                    this._hl = 0x137e2179

                    return this
                }

                function Ch(x, y, z) {
                    return z ^ (x & (y ^ z))
                }

                function maj(x, y, z) {
                    return (x & y) | (z & (x | y))
                }

                function sigma0(x, xl) {
                    return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
                }

                function sigma1(x, xl) {
                    return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
                }

                function Gamma0(x, xl) {
                    return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
                }

                function Gamma0l(x, xl) {
                    return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
                }

                function Gamma1(x, xl) {
                    return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
                }

                function Gamma1l(x, xl) {
                    return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
                }

                function getCarry(a, b) {
                    return (a >>> 0) < (b >>> 0) ? 1 : 0
                }

                Sha512.prototype._update = function (M) {
                    var W = this._w

                    var ah = this._ah | 0
                    var bh = this._bh | 0
                    var ch = this._ch | 0
                    var dh = this._dh | 0
                    var eh = this._eh | 0
                    var fh = this._fh | 0
                    var gh = this._gh | 0
                    var hh = this._hh | 0

                    var al = this._al | 0
                    var bl = this._bl | 0
                    var cl = this._cl | 0
                    var dl = this._dl | 0
                    var el = this._el | 0
                    var fl = this._fl | 0
                    var gl = this._gl | 0
                    var hl = this._hl | 0

                    for (var i = 0; i < 32; i += 2) {
                        W[i] = M.readInt32BE(i * 4)
                        W[i + 1] = M.readInt32BE(i * 4 + 4)
                    }
                    for (; i < 160; i += 2) {
                        var xh = W[i - 15 * 2]
                        var xl = W[i - 15 * 2 + 1]
                        var gamma0 = Gamma0(xh, xl)
                        var gamma0l = Gamma0l(xl, xh)

                        xh = W[i - 2 * 2]
                        xl = W[i - 2 * 2 + 1]
                        var gamma1 = Gamma1(xh, xl)
                        var gamma1l = Gamma1l(xl, xh)

                        // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
                        var Wi7h = W[i - 7 * 2]
                        var Wi7l = W[i - 7 * 2 + 1]

                        var Wi16h = W[i - 16 * 2]
                        var Wi16l = W[i - 16 * 2 + 1]

                        var Wil = (gamma0l + Wi7l) | 0
                        var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0
                        Wil = (Wil + gamma1l) | 0
                        Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0
                        Wil = (Wil + Wi16l) | 0
                        Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0

                        W[i] = Wih
                        W[i + 1] = Wil
                    }

                    for (var j = 0; j < 160; j += 2) {
                        Wih = W[j]
                        Wil = W[j + 1]

                        var majh = maj(ah, bh, ch)
                        var majl = maj(al, bl, cl)

                        var sigma0h = sigma0(ah, al)
                        var sigma0l = sigma0(al, ah)
                        var sigma1h = sigma1(eh, el)
                        var sigma1l = sigma1(el, eh)

                        // t1 = h + sigma1 + ch + K[j] + W[j]
                        var Kih = K[j]
                        var Kil = K[j + 1]

                        var chh = Ch(eh, fh, gh)
                        var chl = Ch(el, fl, gl)

                        var t1l = (hl + sigma1l) | 0
                        var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0
                        t1l = (t1l + chl) | 0
                        t1h = (t1h + chh + getCarry(t1l, chl)) | 0
                        t1l = (t1l + Kil) | 0
                        t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0
                        t1l = (t1l + Wil) | 0
                        t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0

                        // t2 = sigma0 + maj
                        var t2l = (sigma0l + majl) | 0
                        var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0

                        hh = gh
                        hl = gl
                        gh = fh
                        gl = fl
                        fh = eh
                        fl = el
                        el = (dl + t1l) | 0
                        eh = (dh + t1h + getCarry(el, dl)) | 0
                        dh = ch
                        dl = cl
                        ch = bh
                        cl = bl
                        bh = ah
                        bl = al
                        al = (t1l + t2l) | 0
                        ah = (t1h + t2h + getCarry(al, t1l)) | 0
                    }

                    this._al = (this._al + al) | 0
                    this._bl = (this._bl + bl) | 0
                    this._cl = (this._cl + cl) | 0
                    this._dl = (this._dl + dl) | 0
                    this._el = (this._el + el) | 0
                    this._fl = (this._fl + fl) | 0
                    this._gl = (this._gl + gl) | 0
                    this._hl = (this._hl + hl) | 0

                    this._ah = (this._ah + ah + getCarry(this._al, al)) | 0
                    this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0
                    this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0
                    this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0
                    this._eh = (this._eh + eh + getCarry(this._el, el)) | 0
                    this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0
                    this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0
                    this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0
                }

                Sha512.prototype._hash = function () {
                    var H = new Buffer(64)

                    function writeInt64BE(h, l, offset) {
                        H.writeInt32BE(h, offset)
                        H.writeInt32BE(l, offset + 4)
                    }

                    writeInt64BE(this._ah, this._al, 0)
                    writeInt64BE(this._bh, this._bl, 8)
                    writeInt64BE(this._ch, this._cl, 16)
                    writeInt64BE(this._dh, this._dl, 24)
                    writeInt64BE(this._eh, this._el, 32)
                    writeInt64BE(this._fh, this._fl, 40)
                    writeInt64BE(this._gh, this._gl, 48)
                    writeInt64BE(this._hh, this._hl, 56)

                    return H
                }

                module.exports = Sha512

            }).call(this, require("buffer").Buffer)
        }, {"./hash": 185, "buffer": 57, "inherits": 143}],
        193: [function (require, module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

            module.exports = Stream;

            var EE = require('events').EventEmitter;
            var inherits = require('inherits');

            inherits(Stream, EE);
            Stream.Readable = require('readable-stream/readable.js');
            Stream.Writable = require('readable-stream/writable.js');
            Stream.Duplex = require('readable-stream/duplex.js');
            Stream.Transform = require('readable-stream/transform.js');
            Stream.PassThrough = require('readable-stream/passthrough.js');

// Backwards-compat with node 0.4.x
            Stream.Stream = Stream;


// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

            function Stream() {
                EE.call(this);
            }

            Stream.prototype.pipe = function (dest, options) {
                var source = this;

                function ondata(chunk) {
                    if (dest.writable) {
                        if (false === dest.write(chunk) && source.pause) {
                            source.pause();
                        }
                    }
                }

                source.on('data', ondata);

                function ondrain() {
                    if (source.readable && source.resume) {
                        source.resume();
                    }
                }

                dest.on('drain', ondrain);

                // If the 'end' option is not supplied, dest.end() will be called when
                // source gets the 'end' or 'close' events.  Only dest.end() once.
                if (!dest._isStdio && (!options || options.end !== false)) {
                    source.on('end', onend);
                    source.on('close', onclose);
                }

                var didOnEnd = false;

                function onend() {
                    if (didOnEnd) return;
                    didOnEnd = true;

                    dest.end();
                }


                function onclose() {
                    if (didOnEnd) return;
                    didOnEnd = true;

                    if (typeof dest.destroy === 'function') dest.destroy();
                }

                // don't leave dangling pipes when there are errors.
                function onerror(er) {
                    cleanup();
                    if (EE.listenerCount(this, 'error') === 0) {
                        throw er; // Unhandled stream error in pipe.
                    }
                }

                source.on('error', onerror);
                dest.on('error', onerror);

                // remove all the event listeners that were added.
                function cleanup() {
                    source.removeListener('data', ondata);
                    dest.removeListener('drain', ondrain);

                    source.removeListener('end', onend);
                    source.removeListener('close', onclose);

                    source.removeListener('error', onerror);
                    dest.removeListener('error', onerror);

                    source.removeListener('end', cleanup);
                    source.removeListener('close', cleanup);

                    dest.removeListener('close', cleanup);
                }

                source.on('end', cleanup);
                source.on('close', cleanup);

                dest.on('close', cleanup);

                dest.emit('pipe', source);

                // Allow for unix-like usage: A.pipe(B).pipe(C)
                return dest;
            };

        }, {
            "events": 127,
            "inherits": 195,
            "readable-stream/duplex.js": 198,
            "readable-stream/passthrough.js": 207,
            "readable-stream/readable.js": 208,
            "readable-stream/transform.js": 209,
            "readable-stream/writable.js": 210
        }],
        194: [function (require, module, exports) {
            (function (Buffer) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

                function isArray(arg) {
                    if (Array.isArray) {
                        return Array.isArray(arg);
                    }
                    return objectToString(arg) === '[object Array]';
                }

                exports.isArray = isArray;

                function isBoolean(arg) {
                    return typeof arg === 'boolean';
                }

                exports.isBoolean = isBoolean;

                function isNull(arg) {
                    return arg === null;
                }

                exports.isNull = isNull;

                function isNullOrUndefined(arg) {
                    return arg == null;
                }

                exports.isNullOrUndefined = isNullOrUndefined;

                function isNumber(arg) {
                    return typeof arg === 'number';
                }

                exports.isNumber = isNumber;

                function isString(arg) {
                    return typeof arg === 'string';
                }

                exports.isString = isString;

                function isSymbol(arg) {
                    return typeof arg === 'symbol';
                }

                exports.isSymbol = isSymbol;

                function isUndefined(arg) {
                    return arg === void 0;
                }

                exports.isUndefined = isUndefined;

                function isRegExp(re) {
                    return objectToString(re) === '[object RegExp]';
                }

                exports.isRegExp = isRegExp;

                function isObject(arg) {
                    return typeof arg === 'object' && arg !== null;
                }

                exports.isObject = isObject;

                function isDate(d) {
                    return objectToString(d) === '[object Date]';
                }

                exports.isDate = isDate;

                function isError(e) {
                    return (objectToString(e) === '[object Error]' || e instanceof Error);
                }

                exports.isError = isError;

                function isFunction(arg) {
                    return typeof arg === 'function';
                }

                exports.isFunction = isFunction;

                function isPrimitive(arg) {
                    return arg === null ||
                        typeof arg === 'boolean' ||
                        typeof arg === 'number' ||
                        typeof arg === 'string' ||
                        typeof arg === 'symbol' ||  // ES6 symbol
                        typeof arg === 'undefined';
                }

                exports.isPrimitive = isPrimitive;

                exports.isBuffer = Buffer.isBuffer;

                function objectToString(o) {
                    return Object.prototype.toString.call(o);
                }

            }).call(this, {"isBuffer": require("../../../../insert-module-globals/node_modules/is-buffer/index.js")})
        }, {"../../../../insert-module-globals/node_modules/is-buffer/index.js": 144}],
        195: [function (require, module, exports) {
            arguments[4][52][0].apply(exports, arguments)
        }, {"dup": 52}],
        196: [function (require, module, exports) {
            arguments[4][178][0].apply(exports, arguments)
        }, {"dup": 178}],
        197: [function (require, module, exports) {
            (function (process) {
                'use strict';

                if (!process.version ||
                    process.version.indexOf('v0.') === 0 ||
                    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
                    module.exports = nextTick;
                } else {
                    module.exports = process.nextTick;
                }

                function nextTick(fn, arg1, arg2, arg3) {
                    if (typeof fn !== 'function') {
                        throw new TypeError('"callback" argument must be a function');
                    }
                    var len = arguments.length;
                    var args, i;
                    switch (len) {
                        case 0:
                        case 1:
                            return process.nextTick(fn);
                        case 2:
                            return process.nextTick(function afterTickOne() {
                                fn.call(null, arg1);
                            });
                        case 3:
                            return process.nextTick(function afterTickTwo() {
                                fn.call(null, arg1, arg2);
                            });
                        case 4:
                            return process.nextTick(function afterTickThree() {
                                fn.call(null, arg1, arg2, arg3);
                            });
                        default:
                            args = new Array(len - 1);
                            i = 0;
                            while (i < args.length) {
                                args[i++] = arguments[i];
                            }
                            return process.nextTick(function afterTick() {
                                fn.apply(null, args);
                            });
                    }
                }

            }).call(this, require('_process'))
        }, {"_process": 49}],
        198: [function (require, module, exports) {
            arguments[4][169][0].apply(exports, arguments)
        }, {"./lib/_stream_duplex.js": 199, "dup": 169}],
        199: [function (require, module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

            'use strict';

            /*<replacement>*/

            var processNextTick = require('process-nextick-args');
            /*</replacement>*/

            /*<replacement>*/
            var objectKeys = Object.keys || function (obj) {
                var keys = [];
                for (var key in obj) {
                    keys.push(key);
                }
                return keys;
            };
            /*</replacement>*/

            module.exports = Duplex;

            /*<replacement>*/
            var util = require('core-util-is');
            util.inherits = require('inherits');
            /*</replacement>*/

            var Readable = require('./_stream_readable');
            var Writable = require('./_stream_writable');

            util.inherits(Duplex, Readable);

            var keys = objectKeys(Writable.prototype);
            for (var v = 0; v < keys.length; v++) {
                var method = keys[v];
                if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
            }

            function Duplex(options) {
                if (!(this instanceof Duplex)) return new Duplex(options);

                Readable.call(this, options);
                Writable.call(this, options);

                if (options && options.readable === false) this.readable = false;

                if (options && options.writable === false) this.writable = false;

                this.allowHalfOpen = true;
                if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

                this.once('end', onend);
            }

// the no-half-open enforcer
            function onend() {
                // if we allow half-open state, or if the writable side ended,
                // then we're ok.
                if (this.allowHalfOpen || this._writableState.ended) return;

                // no more data can be written.
                // But allow more writes to happen in this tick.
                processNextTick(onEndNT, this);
            }

            function onEndNT(self) {
                self.end();
            }

            Object.defineProperty(Duplex.prototype, 'destroyed', {
                get: function () {
                    if (this._readableState === undefined || this._writableState === undefined) {
                        return false;
                    }
                    return this._readableState.destroyed && this._writableState.destroyed;
                },
                set: function (value) {
                    // we ignore the value if the stream
                    // has not been initialized yet
                    if (this._readableState === undefined || this._writableState === undefined) {
                        return;
                    }

                    // backward compatibility, the user is explicitly
                    // managing destroyed
                    this._readableState.destroyed = value;
                    this._writableState.destroyed = value;
                }
            });

            Duplex.prototype._destroy = function (err, cb) {
                this.push(null);
                this.end();

                processNextTick(cb, err);
            };

            function forEach(xs, f) {
                for (var i = 0, l = xs.length; i < l; i++) {
                    f(xs[i], i);
                }
            }
        }, {
            "./_stream_readable": 201,
            "./_stream_writable": 203,
            "core-util-is": 194,
            "inherits": 195,
            "process-nextick-args": 197
        }],
        200: [function (require, module, exports) {
            arguments[4][171][0].apply(exports, arguments)
        }, {"./_stream_transform": 202, "core-util-is": 194, "dup": 171, "inherits": 195}],
        201: [function (require, module, exports) {
            (function (process, global) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

                'use strict';

                /*<replacement>*/

                var processNextTick = require('process-nextick-args');
                /*</replacement>*/

                module.exports = Readable;

                /*<replacement>*/
                var isArray = require('isarray');
                /*</replacement>*/

                /*<replacement>*/
                var Duplex;
                /*</replacement>*/

                Readable.ReadableState = ReadableState;

                /*<replacement>*/
                var EE = require('events').EventEmitter;

                var EElistenerCount = function (emitter, type) {
                    return emitter.listeners(type).length;
                };
                /*</replacement>*/

                /*<replacement>*/
                var Stream = require('./internal/streams/stream');
                /*</replacement>*/

// TODO(bmeurer): Change this back to const once hole checks are
// properly optimized away early in Ignition+TurboFan.
                /*<replacement>*/
                var Buffer = require('safe-buffer').Buffer;
                var OurUint8Array = global.Uint8Array || function () {
                };

                function _uint8ArrayToBuffer(chunk) {
                    return Buffer.from(chunk);
                }

                function _isUint8Array(obj) {
                    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
                }

                /*</replacement>*/

                /*<replacement>*/
                var util = require('core-util-is');
                util.inherits = require('inherits');
                /*</replacement>*/

                /*<replacement>*/
                var debugUtil = require('util');
                var debug = void 0;
                if (debugUtil && debugUtil.debuglog) {
                    debug = debugUtil.debuglog('stream');
                } else {
                    debug = function () {
                    };
                }
                /*</replacement>*/

                var BufferList = require('./internal/streams/BufferList');
                var destroyImpl = require('./internal/streams/destroy');
                var StringDecoder;

                util.inherits(Readable, Stream);

                var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

                function prependListener(emitter, event, fn) {
                    // Sadly this is not cacheable as some libraries bundle their own
                    // event emitter implementation with them.
                    if (typeof emitter.prependListener === 'function') {
                        return emitter.prependListener(event, fn);
                    } else {
                        // This is a hack to make sure that our error handler is attached before any
                        // userland ones.  NEVER DO THIS. This is here only because this code needs
                        // to continue to work with older versions of Node.js that do not include
                        // the prependListener() method. The goal is to eventually remove this hack.
                        if (!emitter._events || !emitter._events[event]) emitter.on(event, fn); else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn); else emitter._events[event] = [fn, emitter._events[event]];
                    }
                }

                function ReadableState(options, stream) {
                    Duplex = Duplex || require('./_stream_duplex');

                    options = options || {};

                    // object stream flag. Used to make read(n) ignore n and to
                    // make all the buffer merging and length checks go away
                    this.objectMode = !!options.objectMode;

                    if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

                    // the point at which it stops calling _read() to fill the buffer
                    // Note: 0 is a valid value, means "don't call _read preemptively ever"
                    var hwm = options.highWaterMark;
                    var defaultHwm = this.objectMode ? 16 : 16 * 1024;
                    this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

                    // cast to ints.
                    this.highWaterMark = Math.floor(this.highWaterMark);

                    // A linked list is used to store data chunks instead of an array because the
                    // linked list can remove elements from the beginning faster than
                    // array.shift()
                    this.buffer = new BufferList();
                    this.length = 0;
                    this.pipes = null;
                    this.pipesCount = 0;
                    this.flowing = null;
                    this.ended = false;
                    this.endEmitted = false;
                    this.reading = false;

                    // a flag to be able to tell if the event 'readable'/'data' is emitted
                    // immediately, or on a later tick.  We set this to true at first, because
                    // any actions that shouldn't happen until "later" should generally also
                    // not happen before the first read call.
                    this.sync = true;

                    // whenever we return null, then we set a flag to say
                    // that we're awaiting a 'readable' event emission.
                    this.needReadable = false;
                    this.emittedReadable = false;
                    this.readableListening = false;
                    this.resumeScheduled = false;

                    // has it been destroyed
                    this.destroyed = false;

                    // Crypto is kind of old and crusty.  Historically, its default string
                    // encoding is 'binary' so we have to make this configurable.
                    // Everything else in the universe uses 'utf8', though.
                    this.defaultEncoding = options.defaultEncoding || 'utf8';

                    // the number of writers that are awaiting a drain event in .pipe()s
                    this.awaitDrain = 0;

                    // if true, a maybeReadMore has been scheduled
                    this.readingMore = false;

                    this.decoder = null;
                    this.encoding = null;
                    if (options.encoding) {
                        if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
                        this.decoder = new StringDecoder(options.encoding);
                        this.encoding = options.encoding;
                    }
                }

                function Readable(options) {
                    Duplex = Duplex || require('./_stream_duplex');

                    if (!(this instanceof Readable)) return new Readable(options);

                    this._readableState = new ReadableState(options, this);

                    // legacy
                    this.readable = true;

                    if (options) {
                        if (typeof options.read === 'function') this._read = options.read;

                        if (typeof options.destroy === 'function') this._destroy = options.destroy;
                    }

                    Stream.call(this);
                }

                Object.defineProperty(Readable.prototype, 'destroyed', {
                    get: function () {
                        if (this._readableState === undefined) {
                            return false;
                        }
                        return this._readableState.destroyed;
                    },
                    set: function (value) {
                        // we ignore the value if the stream
                        // has not been initialized yet
                        if (!this._readableState) {
                            return;
                        }

                        // backward compatibility, the user is explicitly
                        // managing destroyed
                        this._readableState.destroyed = value;
                    }
                });

                Readable.prototype.destroy = destroyImpl.destroy;
                Readable.prototype._undestroy = destroyImpl.undestroy;
                Readable.prototype._destroy = function (err, cb) {
                    this.push(null);
                    cb(err);
                };

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
                Readable.prototype.push = function (chunk, encoding) {
                    var state = this._readableState;
                    var skipChunkCheck;

                    if (!state.objectMode) {
                        if (typeof chunk === 'string') {
                            encoding = encoding || state.defaultEncoding;
                            if (encoding !== state.encoding) {
                                chunk = Buffer.from(chunk, encoding);
                                encoding = '';
                            }
                            skipChunkCheck = true;
                        }
                    } else {
                        skipChunkCheck = true;
                    }

                    return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
                };

// Unshift should *always* be something directly out of read()
                Readable.prototype.unshift = function (chunk) {
                    return readableAddChunk(this, chunk, null, true, false);
                };

                function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
                    var state = stream._readableState;
                    if (chunk === null) {
                        state.reading = false;
                        onEofChunk(stream, state);
                    } else {
                        var er;
                        if (!skipChunkCheck) er = chunkInvalid(state, chunk);
                        if (er) {
                            stream.emit('error', er);
                        } else if (state.objectMode || chunk && chunk.length > 0) {
                            if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
                                chunk = _uint8ArrayToBuffer(chunk);
                            }

                            if (addToFront) {
                                if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event')); else addChunk(stream, state, chunk, true);
                            } else if (state.ended) {
                                stream.emit('error', new Error('stream.push() after EOF'));
                            } else {
                                state.reading = false;
                                if (state.decoder && !encoding) {
                                    chunk = state.decoder.write(chunk);
                                    if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false); else maybeReadMore(stream, state);
                                } else {
                                    addChunk(stream, state, chunk, false);
                                }
                            }
                        } else if (!addToFront) {
                            state.reading = false;
                        }
                    }

                    return needMoreData(state);
                }

                function addChunk(stream, state, chunk, addToFront) {
                    if (state.flowing && state.length === 0 && !state.sync) {
                        stream.emit('data', chunk);
                        stream.read(0);
                    } else {
                        // update the buffer info.
                        state.length += state.objectMode ? 1 : chunk.length;
                        if (addToFront) state.buffer.unshift(chunk); else state.buffer.push(chunk);

                        if (state.needReadable) emitReadable(stream);
                    }
                    maybeReadMore(stream, state);
                }

                function chunkInvalid(state, chunk) {
                    var er;
                    if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
                        er = new TypeError('Invalid non-string/buffer chunk');
                    }
                    return er;
                }

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
                function needMoreData(state) {
                    return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
                }

                Readable.prototype.isPaused = function () {
                    return this._readableState.flowing === false;
                };

// backwards compatibility.
                Readable.prototype.setEncoding = function (enc) {
                    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
                    this._readableState.decoder = new StringDecoder(enc);
                    this._readableState.encoding = enc;
                    return this;
                };

// Don't raise the hwm > 8MB
                var MAX_HWM = 0x800000;

                function computeNewHighWaterMark(n) {
                    if (n >= MAX_HWM) {
                        n = MAX_HWM;
                    } else {
                        // Get the next highest power of 2 to prevent increasing hwm excessively in
                        // tiny amounts
                        n--;
                        n |= n >>> 1;
                        n |= n >>> 2;
                        n |= n >>> 4;
                        n |= n >>> 8;
                        n |= n >>> 16;
                        n++;
                    }
                    return n;
                }

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
                function howMuchToRead(n, state) {
                    if (n <= 0 || state.length === 0 && state.ended) return 0;
                    if (state.objectMode) return 1;
                    if (n !== n) {
                        // Only flow one buffer at a time
                        if (state.flowing && state.length) return state.buffer.head.data.length; else return state.length;
                    }
                    // If we're asking for more than the current hwm, then raise the hwm.
                    if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
                    if (n <= state.length) return n;
                    // Don't have enough
                    if (!state.ended) {
                        state.needReadable = true;
                        return 0;
                    }
                    return state.length;
                }

// you can override either this method, or the async _read(n) below.
                Readable.prototype.read = function (n) {
                    debug('read', n);
                    n = parseInt(n, 10);
                    var state = this._readableState;
                    var nOrig = n;

                    if (n !== 0) state.emittedReadable = false;

                    // if we're doing read(0) to trigger a readable event, but we
                    // already have a bunch of data in the buffer, then just trigger
                    // the 'readable' event and move on.
                    if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
                        debug('read: emitReadable', state.length, state.ended);
                        if (state.length === 0 && state.ended) endReadable(this); else emitReadable(this);
                        return null;
                    }

                    n = howMuchToRead(n, state);

                    // if we've ended, and we're now clear, then finish it up.
                    if (n === 0 && state.ended) {
                        if (state.length === 0) endReadable(this);
                        return null;
                    }

                    // All the actual chunk generation logic needs to be
                    // *below* the call to _read.  The reason is that in certain
                    // synthetic stream cases, such as passthrough streams, _read
                    // may be a completely synchronous operation which may change
                    // the state of the read buffer, providing enough data when
                    // before there was *not* enough.
                    //
                    // So, the steps are:
                    // 1. Figure out what the state of things will be after we do
                    // a read from the buffer.
                    //
                    // 2. If that resulting state will trigger a _read, then call _read.
                    // Note that this may be asynchronous, or synchronous.  Yes, it is
                    // deeply ugly to write APIs this way, but that still doesn't mean
                    // that the Readable class should behave improperly, as streams are
                    // designed to be sync/async agnostic.
                    // Take note if the _read call is sync or async (ie, if the read call
                    // has returned yet), so that we know whether or not it's safe to emit
                    // 'readable' etc.
                    //
                    // 3. Actually pull the requested chunks out of the buffer and return.

                    // if we need a readable event, then we need to do some reading.
                    var doRead = state.needReadable;
                    debug('need readable', doRead);

                    // if we currently have less than the highWaterMark, then also read some
                    if (state.length === 0 || state.length - n < state.highWaterMark) {
                        doRead = true;
                        debug('length less than watermark', doRead);
                    }

                    // however, if we've ended, then there's no point, and if we're already
                    // reading, then it's unnecessary.
                    if (state.ended || state.reading) {
                        doRead = false;
                        debug('reading or ended', doRead);
                    } else if (doRead) {
                        debug('do read');
                        state.reading = true;
                        state.sync = true;
                        // if the length is currently zero, then we *need* a readable event.
                        if (state.length === 0) state.needReadable = true;
                        // call internal read method
                        this._read(state.highWaterMark);
                        state.sync = false;
                        // If _read pushed data synchronously, then `reading` will be false,
                        // and we need to re-evaluate how much data we can return to the user.
                        if (!state.reading) n = howMuchToRead(nOrig, state);
                    }

                    var ret;
                    if (n > 0) ret = fromList(n, state); else ret = null;

                    if (ret === null) {
                        state.needReadable = true;
                        n = 0;
                    } else {
                        state.length -= n;
                    }

                    if (state.length === 0) {
                        // If we have nothing in the buffer, then we want to know
                        // as soon as we *do* get something into the buffer.
                        if (!state.ended) state.needReadable = true;

                        // If we tried to read() past the EOF, then emit end on the next tick.
                        if (nOrig !== n && state.ended) endReadable(this);
                    }

                    if (ret !== null) this.emit('data', ret);

                    return ret;
                };

                function onEofChunk(stream, state) {
                    if (state.ended) return;
                    if (state.decoder) {
                        var chunk = state.decoder.end();
                        if (chunk && chunk.length) {
                            state.buffer.push(chunk);
                            state.length += state.objectMode ? 1 : chunk.length;
                        }
                    }
                    state.ended = true;

                    // emit 'readable' now to make sure it gets picked up.
                    emitReadable(stream);
                }

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
                function emitReadable(stream) {
                    var state = stream._readableState;
                    state.needReadable = false;
                    if (!state.emittedReadable) {
                        debug('emitReadable', state.flowing);
                        state.emittedReadable = true;
                        if (state.sync) processNextTick(emitReadable_, stream); else emitReadable_(stream);
                    }
                }

                function emitReadable_(stream) {
                    debug('emit readable');
                    stream.emit('readable');
                    flow(stream);
                }

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
                function maybeReadMore(stream, state) {
                    if (!state.readingMore) {
                        state.readingMore = true;
                        processNextTick(maybeReadMore_, stream, state);
                    }
                }

                function maybeReadMore_(stream, state) {
                    var len = state.length;
                    while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
                        debug('maybeReadMore read 0');
                        stream.read(0);
                        if (len === state.length)
                        // didn't get any data, stop spinning.
                            break; else len = state.length;
                    }
                    state.readingMore = false;
                }

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
                Readable.prototype._read = function (n) {
                    this.emit('error', new Error('_read() is not implemented'));
                };

                Readable.prototype.pipe = function (dest, pipeOpts) {
                    var src = this;
                    var state = this._readableState;

                    switch (state.pipesCount) {
                        case 0:
                            state.pipes = dest;
                            break;
                        case 1:
                            state.pipes = [state.pipes, dest];
                            break;
                        default:
                            state.pipes.push(dest);
                            break;
                    }
                    state.pipesCount += 1;
                    debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

                    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

                    var endFn = doEnd ? onend : unpipe;
                    if (state.endEmitted) processNextTick(endFn); else src.once('end', endFn);

                    dest.on('unpipe', onunpipe);

                    function onunpipe(readable, unpipeInfo) {
                        debug('onunpipe');
                        if (readable === src) {
                            if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                                unpipeInfo.hasUnpiped = true;
                                cleanup();
                            }
                        }
                    }

                    function onend() {
                        debug('onend');
                        dest.end();
                    }

                    // when the dest drains, it reduces the awaitDrain counter
                    // on the source.  This would be more elegant with a .once()
                    // handler in flow(), but adding and removing repeatedly is
                    // too slow.
                    var ondrain = pipeOnDrain(src);
                    dest.on('drain', ondrain);

                    var cleanedUp = false;

                    function cleanup() {
                        debug('cleanup');
                        // cleanup event handlers once the pipe is broken
                        dest.removeListener('close', onclose);
                        dest.removeListener('finish', onfinish);
                        dest.removeListener('drain', ondrain);
                        dest.removeListener('error', onerror);
                        dest.removeListener('unpipe', onunpipe);
                        src.removeListener('end', onend);
                        src.removeListener('end', unpipe);
                        src.removeListener('data', ondata);

                        cleanedUp = true;

                        // if the reader is waiting for a drain event from this
                        // specific writer, then it would cause it to never start
                        // flowing again.
                        // So, if this is awaiting a drain, then we just call it now.
                        // If we don't know, then assume that we are waiting for one.
                        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
                    }

                    // If the user pushes more data while we're writing to dest then we'll end up
                    // in ondata again. However, we only want to increase awaitDrain once because
                    // dest will only emit one 'drain' event for the multiple writes.
                    // => Introduce a guard on increasing awaitDrain.
                    var increasedAwaitDrain = false;
                    src.on('data', ondata);

                    function ondata(chunk) {
                        debug('ondata');
                        increasedAwaitDrain = false;
                        var ret = dest.write(chunk);
                        if (false === ret && !increasedAwaitDrain) {
                            // If the user unpiped during `dest.write()`, it is possible
                            // to get stuck in a permanently paused state if that write
                            // also returned false.
                            // => Check whether `dest` is still a piping destination.
                            if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                                debug('false write response, pause', src._readableState.awaitDrain);
                                src._readableState.awaitDrain++;
                                increasedAwaitDrain = true;
                            }
                            src.pause();
                        }
                    }

                    // if the dest has an error, then stop piping into it.
                    // however, don't suppress the throwing behavior for this.
                    function onerror(er) {
                        debug('onerror', er);
                        unpipe();
                        dest.removeListener('error', onerror);
                        if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
                    }

                    // Make sure our error handler is attached before userland ones.
                    prependListener(dest, 'error', onerror);

                    // Both close and finish should trigger unpipe, but only once.
                    function onclose() {
                        dest.removeListener('finish', onfinish);
                        unpipe();
                    }

                    dest.once('close', onclose);

                    function onfinish() {
                        debug('onfinish');
                        dest.removeListener('close', onclose);
                        unpipe();
                    }

                    dest.once('finish', onfinish);

                    function unpipe() {
                        debug('unpipe');
                        src.unpipe(dest);
                    }

                    // tell the dest that it's being piped to
                    dest.emit('pipe', src);

                    // start the flow if it hasn't been started already.
                    if (!state.flowing) {
                        debug('pipe resume');
                        src.resume();
                    }

                    return dest;
                };

                function pipeOnDrain(src) {
                    return function () {
                        var state = src._readableState;
                        debug('pipeOnDrain', state.awaitDrain);
                        if (state.awaitDrain) state.awaitDrain--;
                        if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
                            state.flowing = true;
                            flow(src);
                        }
                    };
                }

                Readable.prototype.unpipe = function (dest) {
                    var state = this._readableState;
                    var unpipeInfo = {hasUnpiped: false};

                    // if we're not piping anywhere, then do nothing.
                    if (state.pipesCount === 0) return this;

                    // just one destination.  most common case.
                    if (state.pipesCount === 1) {
                        // passed in one, but it's not the right one.
                        if (dest && dest !== state.pipes) return this;

                        if (!dest) dest = state.pipes;

                        // got a match.
                        state.pipes = null;
                        state.pipesCount = 0;
                        state.flowing = false;
                        if (dest) dest.emit('unpipe', this, unpipeInfo);
                        return this;
                    }

                    // slow case. multiple pipe destinations.

                    if (!dest) {
                        // remove all.
                        var dests = state.pipes;
                        var len = state.pipesCount;
                        state.pipes = null;
                        state.pipesCount = 0;
                        state.flowing = false;

                        for (var i = 0; i < len; i++) {
                            dests[i].emit('unpipe', this, unpipeInfo);
                        }
                        return this;
                    }

                    // try to find the right one.
                    var index = indexOf(state.pipes, dest);
                    if (index === -1) return this;

                    state.pipes.splice(index, 1);
                    state.pipesCount -= 1;
                    if (state.pipesCount === 1) state.pipes = state.pipes[0];

                    dest.emit('unpipe', this, unpipeInfo);

                    return this;
                };

// set up data events if they are asked for
// Ensure readable listeners eventually get something
                Readable.prototype.on = function (ev, fn) {
                    var res = Stream.prototype.on.call(this, ev, fn);

                    if (ev === 'data') {
                        // Start flowing on next tick if stream isn't explicitly paused
                        if (this._readableState.flowing !== false) this.resume();
                    } else if (ev === 'readable') {
                        var state = this._readableState;
                        if (!state.endEmitted && !state.readableListening) {
                            state.readableListening = state.needReadable = true;
                            state.emittedReadable = false;
                            if (!state.reading) {
                                processNextTick(nReadingNextTick, this);
                            } else if (state.length) {
                                emitReadable(this);
                            }
                        }
                    }

                    return res;
                };
                Readable.prototype.addListener = Readable.prototype.on;

                function nReadingNextTick(self) {
                    debug('readable nexttick read 0');
                    self.read(0);
                }

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
                Readable.prototype.resume = function () {
                    var state = this._readableState;
                    if (!state.flowing) {
                        debug('resume');
                        state.flowing = true;
                        resume(this, state);
                    }
                    return this;
                };

                function resume(stream, state) {
                    if (!state.resumeScheduled) {
                        state.resumeScheduled = true;
                        processNextTick(resume_, stream, state);
                    }
                }

                function resume_(stream, state) {
                    if (!state.reading) {
                        debug('resume read 0');
                        stream.read(0);
                    }

                    state.resumeScheduled = false;
                    state.awaitDrain = 0;
                    stream.emit('resume');
                    flow(stream);
                    if (state.flowing && !state.reading) stream.read(0);
                }

                Readable.prototype.pause = function () {
                    debug('call pause flowing=%j', this._readableState.flowing);
                    if (false !== this._readableState.flowing) {
                        debug('pause');
                        this._readableState.flowing = false;
                        this.emit('pause');
                    }
                    return this;
                };

                function flow(stream) {
                    var state = stream._readableState;
                    debug('flow', state.flowing);
                    while (state.flowing && stream.read() !== null) {
                    }
                }

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
                Readable.prototype.wrap = function (stream) {
                    var state = this._readableState;
                    var paused = false;

                    var self = this;
                    stream.on('end', function () {
                        debug('wrapped end');
                        if (state.decoder && !state.ended) {
                            var chunk = state.decoder.end();
                            if (chunk && chunk.length) self.push(chunk);
                        }

                        self.push(null);
                    });

                    stream.on('data', function (chunk) {
                        debug('wrapped data');
                        if (state.decoder) chunk = state.decoder.write(chunk);

                        // don't skip over falsy values in objectMode
                        if (state.objectMode && (chunk === null || chunk === undefined)) return; else if (!state.objectMode && (!chunk || !chunk.length)) return;

                        var ret = self.push(chunk);
                        if (!ret) {
                            paused = true;
                            stream.pause();
                        }
                    });

                    // proxy all the other methods.
                    // important when wrapping filters and duplexes.
                    for (var i in stream) {
                        if (this[i] === undefined && typeof stream[i] === 'function') {
                            this[i] = function (method) {
                                return function () {
                                    return stream[method].apply(stream, arguments);
                                };
                            }(i);
                        }
                    }

                    // proxy certain important events.
                    for (var n = 0; n < kProxyEvents.length; n++) {
                        stream.on(kProxyEvents[n], self.emit.bind(self, kProxyEvents[n]));
                    }

                    // when we try to consume some more bytes, simply unpause the
                    // underlying stream.
                    self._read = function (n) {
                        debug('wrapped _read', n);
                        if (paused) {
                            paused = false;
                            stream.resume();
                        }
                    };

                    return self;
                };

// exposed for testing purposes only.
                Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
                function fromList(n, state) {
                    // nothing buffered
                    if (state.length === 0) return null;

                    var ret;
                    if (state.objectMode) ret = state.buffer.shift(); else if (!n || n >= state.length) {
                        // read it all, truncate the list
                        if (state.decoder) ret = state.buffer.join(''); else if (state.buffer.length === 1) ret = state.buffer.head.data; else ret = state.buffer.concat(state.length);
                        state.buffer.clear();
                    } else {
                        // read part of list
                        ret = fromListPartial(n, state.buffer, state.decoder);
                    }

                    return ret;
                }

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
                function fromListPartial(n, list, hasStrings) {
                    var ret;
                    if (n < list.head.data.length) {
                        // slice is the same for buffers and strings
                        ret = list.head.data.slice(0, n);
                        list.head.data = list.head.data.slice(n);
                    } else if (n === list.head.data.length) {
                        // first chunk is a perfect match
                        ret = list.shift();
                    } else {
                        // result spans more than one buffer
                        ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
                    }
                    return ret;
                }

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
                function copyFromBufferString(n, list) {
                    var p = list.head;
                    var c = 1;
                    var ret = p.data;
                    n -= ret.length;
                    while (p = p.next) {
                        var str = p.data;
                        var nb = n > str.length ? str.length : n;
                        if (nb === str.length) ret += str; else ret += str.slice(0, n);
                        n -= nb;
                        if (n === 0) {
                            if (nb === str.length) {
                                ++c;
                                if (p.next) list.head = p.next; else list.head = list.tail = null;
                            } else {
                                list.head = p;
                                p.data = str.slice(nb);
                            }
                            break;
                        }
                        ++c;
                    }
                    list.length -= c;
                    return ret;
                }

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
                function copyFromBuffer(n, list) {
                    var ret = Buffer.allocUnsafe(n);
                    var p = list.head;
                    var c = 1;
                    p.data.copy(ret);
                    n -= p.data.length;
                    while (p = p.next) {
                        var buf = p.data;
                        var nb = n > buf.length ? buf.length : n;
                        buf.copy(ret, ret.length - n, 0, nb);
                        n -= nb;
                        if (n === 0) {
                            if (nb === buf.length) {
                                ++c;
                                if (p.next) list.head = p.next; else list.head = list.tail = null;
                            } else {
                                list.head = p;
                                p.data = buf.slice(nb);
                            }
                            break;
                        }
                        ++c;
                    }
                    list.length -= c;
                    return ret;
                }

                function endReadable(stream) {
                    var state = stream._readableState;

                    // If we get here before consuming all the bytes, then that is a
                    // bug in node.  Should never happen.
                    if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

                    if (!state.endEmitted) {
                        state.ended = true;
                        processNextTick(endReadableNT, state, stream);
                    }
                }

                function endReadableNT(state, stream) {
                    // Check that we didn't get one last unshift.
                    if (!state.endEmitted && state.length === 0) {
                        state.endEmitted = true;
                        stream.readable = false;
                        stream.emit('end');
                    }
                }

                function forEach(xs, f) {
                    for (var i = 0, l = xs.length; i < l; i++) {
                        f(xs[i], i);
                    }
                }

                function indexOf(xs, x) {
                    for (var i = 0, l = xs.length; i < l; i++) {
                        if (xs[i] === x) return i;
                    }
                    return -1;
                }
            }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
        }, {
            "./_stream_duplex": 199,
            "./internal/streams/BufferList": 204,
            "./internal/streams/destroy": 205,
            "./internal/streams/stream": 206,
            "_process": 49,
            "core-util-is": 194,
            "events": 127,
            "inherits": 195,
            "isarray": 196,
            "process-nextick-args": 197,
            "safe-buffer": 184,
            "string_decoder/": 211,
            "util": 22
        }],
        202: [function (require, module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

            'use strict';

            module.exports = Transform;

            var Duplex = require('./_stream_duplex');

            /*<replacement>*/
            var util = require('core-util-is');
            util.inherits = require('inherits');
            /*</replacement>*/

            util.inherits(Transform, Duplex);

            function TransformState(stream) {
                this.afterTransform = function (er, data) {
                    return afterTransform(stream, er, data);
                };

                this.needTransform = false;
                this.transforming = false;
                this.writecb = null;
                this.writechunk = null;
                this.writeencoding = null;
            }

            function afterTransform(stream, er, data) {
                var ts = stream._transformState;
                ts.transforming = false;

                var cb = ts.writecb;

                if (!cb) {
                    return stream.emit('error', new Error('write callback called multiple times'));
                }

                ts.writechunk = null;
                ts.writecb = null;

                if (data !== null && data !== undefined) stream.push(data);

                cb(er);

                var rs = stream._readableState;
                rs.reading = false;
                if (rs.needReadable || rs.length < rs.highWaterMark) {
                    stream._read(rs.highWaterMark);
                }
            }

            function Transform(options) {
                if (!(this instanceof Transform)) return new Transform(options);

                Duplex.call(this, options);

                this._transformState = new TransformState(this);

                var stream = this;

                // start out asking for a readable event once data is transformed.
                this._readableState.needReadable = true;

                // we have implemented the _read method, and done the other things
                // that Readable wants before the first _read call, so unset the
                // sync guard flag.
                this._readableState.sync = false;

                if (options) {
                    if (typeof options.transform === 'function') this._transform = options.transform;

                    if (typeof options.flush === 'function') this._flush = options.flush;
                }

                // When the writable side finishes, then flush out anything remaining.
                this.once('prefinish', function () {
                    if (typeof this._flush === 'function') this._flush(function (er, data) {
                        done(stream, er, data);
                    }); else done(stream);
                });
            }

            Transform.prototype.push = function (chunk, encoding) {
                this._transformState.needTransform = false;
                return Duplex.prototype.push.call(this, chunk, encoding);
            };

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
            Transform.prototype._transform = function (chunk, encoding, cb) {
                throw new Error('_transform() is not implemented');
            };

            Transform.prototype._write = function (chunk, encoding, cb) {
                var ts = this._transformState;
                ts.writecb = cb;
                ts.writechunk = chunk;
                ts.writeencoding = encoding;
                if (!ts.transforming) {
                    var rs = this._readableState;
                    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
                }
            };

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
            Transform.prototype._read = function (n) {
                var ts = this._transformState;

                if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
                    ts.transforming = true;
                    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
                } else {
                    // mark that we need a transform, so that any data that comes in
                    // will get processed, now that we've asked for it.
                    ts.needTransform = true;
                }
            };

            Transform.prototype._destroy = function (err, cb) {
                var _this = this;

                Duplex.prototype._destroy.call(this, err, function (err2) {
                    cb(err2);
                    _this.emit('close');
                });
            };

            function done(stream, er, data) {
                if (er) return stream.emit('error', er);

                if (data !== null && data !== undefined) stream.push(data);

                // if there's nothing in the write buffer, then that means
                // that nothing more will ever be provided
                var ws = stream._writableState;
                var ts = stream._transformState;

                if (ws.length) throw new Error('Calling transform done when ws.length != 0');

                if (ts.transforming) throw new Error('Calling transform done when still transforming');

                return stream.push(null);
            }
        }, {"./_stream_duplex": 199, "core-util-is": 194, "inherits": 195}],
        203: [function (require, module, exports) {
            (function (process, global) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

                'use strict';

                /*<replacement>*/

                var processNextTick = require('process-nextick-args');
                /*</replacement>*/

                module.exports = Writable;

                /* <replacement> */
                function WriteReq(chunk, encoding, cb) {
                    this.chunk = chunk;
                    this.encoding = encoding;
                    this.callback = cb;
                    this.next = null;
                }

// It seems a linked list but it is not
// there will be only 2 of these for each stream
                function CorkedRequest(state) {
                    var _this = this;

                    this.next = null;
                    this.entry = null;
                    this.finish = function () {
                        onCorkedFinish(_this, state);
                    };
                }

                /* </replacement> */

                /*<replacement>*/
                var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
                /*</replacement>*/

                /*<replacement>*/
                var Duplex;
                /*</replacement>*/

                Writable.WritableState = WritableState;

                /*<replacement>*/
                var util = require('core-util-is');
                util.inherits = require('inherits');
                /*</replacement>*/

                /*<replacement>*/
                var internalUtil = {
                    deprecate: require('util-deprecate')
                };
                /*</replacement>*/

                /*<replacement>*/
                var Stream = require('./internal/streams/stream');
                /*</replacement>*/

                /*<replacement>*/
                var Buffer = require('safe-buffer').Buffer;
                var OurUint8Array = global.Uint8Array || function () {
                };

                function _uint8ArrayToBuffer(chunk) {
                    return Buffer.from(chunk);
                }

                function _isUint8Array(obj) {
                    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
                }

                /*</replacement>*/

                var destroyImpl = require('./internal/streams/destroy');

                util.inherits(Writable, Stream);

                function nop() {
                }

                function WritableState(options, stream) {
                    Duplex = Duplex || require('./_stream_duplex');

                    options = options || {};

                    // object stream flag to indicate whether or not this stream
                    // contains buffers or objects.
                    this.objectMode = !!options.objectMode;

                    if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

                    // the point at which write() starts returning false
                    // Note: 0 is a valid value, means that we always return false if
                    // the entire buffer is not flushed immediately on write()
                    var hwm = options.highWaterMark;
                    var defaultHwm = this.objectMode ? 16 : 16 * 1024;
                    this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

                    // cast to ints.
                    this.highWaterMark = Math.floor(this.highWaterMark);

                    // if _final has been called
                    this.finalCalled = false;

                    // drain event flag.
                    this.needDrain = false;
                    // at the start of calling end()
                    this.ending = false;
                    // when end() has been called, and returned
                    this.ended = false;
                    // when 'finish' is emitted
                    this.finished = false;

                    // has it been destroyed
                    this.destroyed = false;

                    // should we decode strings into buffers before passing to _write?
                    // this is here so that some node-core streams can optimize string
                    // handling at a lower level.
                    var noDecode = options.decodeStrings === false;
                    this.decodeStrings = !noDecode;

                    // Crypto is kind of old and crusty.  Historically, its default string
                    // encoding is 'binary' so we have to make this configurable.
                    // Everything else in the universe uses 'utf8', though.
                    this.defaultEncoding = options.defaultEncoding || 'utf8';

                    // not an actual buffer we keep track of, but a measurement
                    // of how much we're waiting to get pushed to some underlying
                    // socket or file.
                    this.length = 0;

                    // a flag to see when we're in the middle of a write.
                    this.writing = false;

                    // when true all writes will be buffered until .uncork() call
                    this.corked = 0;

                    // a flag to be able to tell if the onwrite cb is called immediately,
                    // or on a later tick.  We set this to true at first, because any
                    // actions that shouldn't happen until "later" should generally also
                    // not happen before the first write call.
                    this.sync = true;

                    // a flag to know if we're processing previously buffered items, which
                    // may call the _write() callback in the same tick, so that we don't
                    // end up in an overlapped onwrite situation.
                    this.bufferProcessing = false;

                    // the callback that's passed to _write(chunk,cb)
                    this.onwrite = function (er) {
                        onwrite(stream, er);
                    };

                    // the callback that the user supplies to write(chunk,encoding,cb)
                    this.writecb = null;

                    // the amount that is being written when _write is called.
                    this.writelen = 0;

                    this.bufferedRequest = null;
                    this.lastBufferedRequest = null;

                    // number of pending user-supplied write callbacks
                    // this must be 0 before 'finish' can be emitted
                    this.pendingcb = 0;

                    // emit prefinish if the only thing we're waiting for is _write cbs
                    // This is relevant for synchronous Transform streams
                    this.prefinished = false;

                    // True if the error was already emitted and should not be thrown again
                    this.errorEmitted = false;

                    // count buffered requests
                    this.bufferedRequestCount = 0;

                    // allocate the first CorkedRequest, there is always
                    // one allocated and free to use, and we maintain at most two
                    this.corkedRequestsFree = new CorkedRequest(this);
                }

                WritableState.prototype.getBuffer = function getBuffer() {
                    var current = this.bufferedRequest;
                    var out = [];
                    while (current) {
                        out.push(current);
                        current = current.next;
                    }
                    return out;
                };

                (function () {
                    try {
                        Object.defineProperty(WritableState.prototype, 'buffer', {
                            get: internalUtil.deprecate(function () {
                                return this.getBuffer();
                            }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
                        });
                    } catch (_) {
                    }
                })();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
                var realHasInstance;
                if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
                    realHasInstance = Function.prototype[Symbol.hasInstance];
                    Object.defineProperty(Writable, Symbol.hasInstance, {
                        value: function (object) {
                            if (realHasInstance.call(this, object)) return true;

                            return object && object._writableState instanceof WritableState;
                        }
                    });
                } else {
                    realHasInstance = function (object) {
                        return object instanceof this;
                    };
                }

                function Writable(options) {
                    Duplex = Duplex || require('./_stream_duplex');

                    // Writable ctor is applied to Duplexes, too.
                    // `realHasInstance` is necessary because using plain `instanceof`
                    // would return false, as no `_writableState` property is attached.

                    // Trying to use the custom `instanceof` for Writable here will also break the
                    // Node.js LazyTransform implementation, which has a non-trivial getter for
                    // `_writableState` that would lead to infinite recursion.
                    if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
                        return new Writable(options);
                    }

                    this._writableState = new WritableState(options, this);

                    // legacy.
                    this.writable = true;

                    if (options) {
                        if (typeof options.write === 'function') this._write = options.write;

                        if (typeof options.writev === 'function') this._writev = options.writev;

                        if (typeof options.destroy === 'function') this._destroy = options.destroy;

                        if (typeof options.final === 'function') this._final = options.final;
                    }

                    Stream.call(this);
                }

// Otherwise people can pipe Writable streams, which is just wrong.
                Writable.prototype.pipe = function () {
                    this.emit('error', new Error('Cannot pipe, not readable'));
                };

                function writeAfterEnd(stream, cb) {
                    var er = new Error('write after end');
                    // TODO: defer error events consistently everywhere, not just the cb
                    stream.emit('error', er);
                    processNextTick(cb, er);
                }

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
                function validChunk(stream, state, chunk, cb) {
                    var valid = true;
                    var er = false;

                    if (chunk === null) {
                        er = new TypeError('May not write null values to stream');
                    } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
                        er = new TypeError('Invalid non-string/buffer chunk');
                    }
                    if (er) {
                        stream.emit('error', er);
                        processNextTick(cb, er);
                        valid = false;
                    }
                    return valid;
                }

                Writable.prototype.write = function (chunk, encoding, cb) {
                    var state = this._writableState;
                    var ret = false;
                    var isBuf = _isUint8Array(chunk) && !state.objectMode;

                    if (isBuf && !Buffer.isBuffer(chunk)) {
                        chunk = _uint8ArrayToBuffer(chunk);
                    }

                    if (typeof encoding === 'function') {
                        cb = encoding;
                        encoding = null;
                    }

                    if (isBuf) encoding = 'buffer'; else if (!encoding) encoding = state.defaultEncoding;

                    if (typeof cb !== 'function') cb = nop;

                    if (state.ended) writeAfterEnd(this, cb); else if (isBuf || validChunk(this, state, chunk, cb)) {
                        state.pendingcb++;
                        ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
                    }

                    return ret;
                };

                Writable.prototype.cork = function () {
                    var state = this._writableState;

                    state.corked++;
                };

                Writable.prototype.uncork = function () {
                    var state = this._writableState;

                    if (state.corked) {
                        state.corked--;

                        if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
                    }
                };

                Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
                    // node::ParseEncoding() requires lower case.
                    if (typeof encoding === 'string') encoding = encoding.toLowerCase();
                    if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
                    this._writableState.defaultEncoding = encoding;
                    return this;
                };

                function decodeChunk(state, chunk, encoding) {
                    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
                        chunk = Buffer.from(chunk, encoding);
                    }
                    return chunk;
                }

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
                function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
                    if (!isBuf) {
                        var newChunk = decodeChunk(state, chunk, encoding);
                        if (chunk !== newChunk) {
                            isBuf = true;
                            encoding = 'buffer';
                            chunk = newChunk;
                        }
                    }
                    var len = state.objectMode ? 1 : chunk.length;

                    state.length += len;

                    var ret = state.length < state.highWaterMark;
                    // we must ensure that previous needDrain will not be reset to false.
                    if (!ret) state.needDrain = true;

                    if (state.writing || state.corked) {
                        var last = state.lastBufferedRequest;
                        state.lastBufferedRequest = {
                            chunk: chunk,
                            encoding: encoding,
                            isBuf: isBuf,
                            callback: cb,
                            next: null
                        };
                        if (last) {
                            last.next = state.lastBufferedRequest;
                        } else {
                            state.bufferedRequest = state.lastBufferedRequest;
                        }
                        state.bufferedRequestCount += 1;
                    } else {
                        doWrite(stream, state, false, len, chunk, encoding, cb);
                    }

                    return ret;
                }

                function doWrite(stream, state, writev, len, chunk, encoding, cb) {
                    state.writelen = len;
                    state.writecb = cb;
                    state.writing = true;
                    state.sync = true;
                    if (writev) stream._writev(chunk, state.onwrite); else stream._write(chunk, encoding, state.onwrite);
                    state.sync = false;
                }

                function onwriteError(stream, state, sync, er, cb) {
                    --state.pendingcb;

                    if (sync) {
                        // defer the callback if we are being called synchronously
                        // to avoid piling up things on the stack
                        processNextTick(cb, er);
                        // this can emit finish, and it will always happen
                        // after error
                        processNextTick(finishMaybe, stream, state);
                        stream._writableState.errorEmitted = true;
                        stream.emit('error', er);
                    } else {
                        // the caller expect this to happen before if
                        // it is async
                        cb(er);
                        stream._writableState.errorEmitted = true;
                        stream.emit('error', er);
                        // this can emit finish, but finish must
                        // always follow error
                        finishMaybe(stream, state);
                    }
                }

                function onwriteStateUpdate(state) {
                    state.writing = false;
                    state.writecb = null;
                    state.length -= state.writelen;
                    state.writelen = 0;
                }

                function onwrite(stream, er) {
                    var state = stream._writableState;
                    var sync = state.sync;
                    var cb = state.writecb;

                    onwriteStateUpdate(state);

                    if (er) onwriteError(stream, state, sync, er, cb); else {
                        // Check if we're actually ready to finish, but don't emit yet
                        var finished = needFinish(state);

                        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
                            clearBuffer(stream, state);
                        }

                        if (sync) {
                            /*<replacement>*/
                            asyncWrite(afterWrite, stream, state, finished, cb);
                            /*</replacement>*/
                        } else {
                            afterWrite(stream, state, finished, cb);
                        }
                    }
                }

                function afterWrite(stream, state, finished, cb) {
                    if (!finished) onwriteDrain(stream, state);
                    state.pendingcb--;
                    cb();
                    finishMaybe(stream, state);
                }

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
                function onwriteDrain(stream, state) {
                    if (state.length === 0 && state.needDrain) {
                        state.needDrain = false;
                        stream.emit('drain');
                    }
                }

// if there's something in the buffer waiting, then process it
                function clearBuffer(stream, state) {
                    state.bufferProcessing = true;
                    var entry = state.bufferedRequest;

                    if (stream._writev && entry && entry.next) {
                        // Fast case, write everything using _writev()
                        var l = state.bufferedRequestCount;
                        var buffer = new Array(l);
                        var holder = state.corkedRequestsFree;
                        holder.entry = entry;

                        var count = 0;
                        var allBuffers = true;
                        while (entry) {
                            buffer[count] = entry;
                            if (!entry.isBuf) allBuffers = false;
                            entry = entry.next;
                            count += 1;
                        }
                        buffer.allBuffers = allBuffers;

                        doWrite(stream, state, true, state.length, buffer, '', holder.finish);

                        // doWrite is almost always async, defer these to save a bit of time
                        // as the hot path ends with doWrite
                        state.pendingcb++;
                        state.lastBufferedRequest = null;
                        if (holder.next) {
                            state.corkedRequestsFree = holder.next;
                            holder.next = null;
                        } else {
                            state.corkedRequestsFree = new CorkedRequest(state);
                        }
                    } else {
                        // Slow case, write chunks one-by-one
                        while (entry) {
                            var chunk = entry.chunk;
                            var encoding = entry.encoding;
                            var cb = entry.callback;
                            var len = state.objectMode ? 1 : chunk.length;

                            doWrite(stream, state, false, len, chunk, encoding, cb);
                            entry = entry.next;
                            // if we didn't call the onwrite immediately, then
                            // it means that we need to wait until it does.
                            // also, that means that the chunk and cb are currently
                            // being processed, so move the buffer counter past them.
                            if (state.writing) {
                                break;
                            }
                        }

                        if (entry === null) state.lastBufferedRequest = null;
                    }

                    state.bufferedRequestCount = 0;
                    state.bufferedRequest = entry;
                    state.bufferProcessing = false;
                }

                Writable.prototype._write = function (chunk, encoding, cb) {
                    cb(new Error('_write() is not implemented'));
                };

                Writable.prototype._writev = null;

                Writable.prototype.end = function (chunk, encoding, cb) {
                    var state = this._writableState;

                    if (typeof chunk === 'function') {
                        cb = chunk;
                        chunk = null;
                        encoding = null;
                    } else if (typeof encoding === 'function') {
                        cb = encoding;
                        encoding = null;
                    }

                    if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

                    // .end() fully uncorks
                    if (state.corked) {
                        state.corked = 1;
                        this.uncork();
                    }

                    // ignore unnecessary end() calls.
                    if (!state.ending && !state.finished) endWritable(this, state, cb);
                };

                function needFinish(state) {
                    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
                }

                function callFinal(stream, state) {
                    stream._final(function (err) {
                        state.pendingcb--;
                        if (err) {
                            stream.emit('error', err);
                        }
                        state.prefinished = true;
                        stream.emit('prefinish');
                        finishMaybe(stream, state);
                    });
                }

                function prefinish(stream, state) {
                    if (!state.prefinished && !state.finalCalled) {
                        if (typeof stream._final === 'function') {
                            state.pendingcb++;
                            state.finalCalled = true;
                            processNextTick(callFinal, stream, state);
                        } else {
                            state.prefinished = true;
                            stream.emit('prefinish');
                        }
                    }
                }

                function finishMaybe(stream, state) {
                    var need = needFinish(state);
                    if (need) {
                        prefinish(stream, state);
                        if (state.pendingcb === 0) {
                            state.finished = true;
                            stream.emit('finish');
                        }
                    }
                    return need;
                }

                function endWritable(stream, state, cb) {
                    state.ending = true;
                    finishMaybe(stream, state);
                    if (cb) {
                        if (state.finished) processNextTick(cb); else stream.once('finish', cb);
                    }
                    state.ended = true;
                    stream.writable = false;
                }

                function onCorkedFinish(corkReq, state, err) {
                    var entry = corkReq.entry;
                    corkReq.entry = null;
                    while (entry) {
                        var cb = entry.callback;
                        state.pendingcb--;
                        cb(err);
                        entry = entry.next;
                    }
                    if (state.corkedRequestsFree) {
                        state.corkedRequestsFree.next = corkReq;
                    } else {
                        state.corkedRequestsFree = corkReq;
                    }
                }

                Object.defineProperty(Writable.prototype, 'destroyed', {
                    get: function () {
                        if (this._writableState === undefined) {
                            return false;
                        }
                        return this._writableState.destroyed;
                    },
                    set: function (value) {
                        // we ignore the value if the stream
                        // has not been initialized yet
                        if (!this._writableState) {
                            return;
                        }

                        // backward compatibility, the user is explicitly
                        // managing destroyed
                        this._writableState.destroyed = value;
                    }
                });

                Writable.prototype.destroy = destroyImpl.destroy;
                Writable.prototype._undestroy = destroyImpl.undestroy;
                Writable.prototype._destroy = function (err, cb) {
                    this.end();
                    cb(err);
                };
            }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
        }, {
            "./_stream_duplex": 199,
            "./internal/streams/destroy": 205,
            "./internal/streams/stream": 206,
            "_process": 49,
            "core-util-is": 194,
            "inherits": 195,
            "process-nextick-args": 197,
            "safe-buffer": 184,
            "util-deprecate": 212
        }],
        204: [function (require, module, exports) {
            'use strict';

            /*<replacement>*/

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }

            var Buffer = require('safe-buffer').Buffer;

            /*</replacement>*/

            function copyBuffer(src, target, offset) {
                src.copy(target, offset);
            }

            module.exports = function () {
                function BufferList() {
                    _classCallCheck(this, BufferList);

                    this.head = null;
                    this.tail = null;
                    this.length = 0;
                }

                BufferList.prototype.push = function push(v) {
                    var entry = {data: v, next: null};
                    if (this.length > 0) this.tail.next = entry; else this.head = entry;
                    this.tail = entry;
                    ++this.length;
                };

                BufferList.prototype.unshift = function unshift(v) {
                    var entry = {data: v, next: this.head};
                    if (this.length === 0) this.tail = entry;
                    this.head = entry;
                    ++this.length;
                };

                BufferList.prototype.shift = function shift() {
                    if (this.length === 0) return;
                    var ret = this.head.data;
                    if (this.length === 1) this.head = this.tail = null; else this.head = this.head.next;
                    --this.length;
                    return ret;
                };

                BufferList.prototype.clear = function clear() {
                    this.head = this.tail = null;
                    this.length = 0;
                };

                BufferList.prototype.join = function join(s) {
                    if (this.length === 0) return '';
                    var p = this.head;
                    var ret = '' + p.data;
                    while (p = p.next) {
                        ret += s + p.data;
                    }
                    return ret;
                };

                BufferList.prototype.concat = function concat(n) {
                    if (this.length === 0) return Buffer.alloc(0);
                    if (this.length === 1) return this.head.data;
                    var ret = Buffer.allocUnsafe(n >>> 0);
                    var p = this.head;
                    var i = 0;
                    while (p) {
                        copyBuffer(p.data, ret, i);
                        i += p.data.length;
                        p = p.next;
                    }
                    return ret;
                };

                return BufferList;
            }();
        }, {"safe-buffer": 184}],
        205: [function (require, module, exports) {
            'use strict';

            /*<replacement>*/

            var processNextTick = require('process-nextick-args');
            /*</replacement>*/

// undocumented cb() API, needed for core, not for public API
            function destroy(err, cb) {
                var _this = this;

                var readableDestroyed = this._readableState && this._readableState.destroyed;
                var writableDestroyed = this._writableState && this._writableState.destroyed;

                if (readableDestroyed || writableDestroyed) {
                    if (cb) {
                        cb(err);
                    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
                        processNextTick(emitErrorNT, this, err);
                    }
                    return;
                }

                // we set destroyed to true before firing error callbacks in order
                // to make it re-entrance safe in case destroy() is called within callbacks

                if (this._readableState) {
                    this._readableState.destroyed = true;
                }

                // if this is a duplex stream mark the writable part as destroyed as well
                if (this._writableState) {
                    this._writableState.destroyed = true;
                }

                this._destroy(err || null, function (err) {
                    if (!cb && err) {
                        processNextTick(emitErrorNT, _this, err);
                        if (_this._writableState) {
                            _this._writableState.errorEmitted = true;
                        }
                    } else if (cb) {
                        cb(err);
                    }
                });
            }

            function undestroy() {
                if (this._readableState) {
                    this._readableState.destroyed = false;
                    this._readableState.reading = false;
                    this._readableState.ended = false;
                    this._readableState.endEmitted = false;
                }

                if (this._writableState) {
                    this._writableState.destroyed = false;
                    this._writableState.ended = false;
                    this._writableState.ending = false;
                    this._writableState.finished = false;
                    this._writableState.errorEmitted = false;
                }
            }

            function emitErrorNT(self, err) {
                self.emit('error', err);
            }

            module.exports = {
                destroy: destroy,
                undestroy: undestroy
            };
        }, {"process-nextick-args": 197}],
        206: [function (require, module, exports) {
            arguments[4][177][0].apply(exports, arguments)
        }, {"dup": 177, "events": 127}],
        207: [function (require, module, exports) {
            arguments[4][179][0].apply(exports, arguments)
        }, {"./readable": 208, "dup": 179}],
        208: [function (require, module, exports) {
            arguments[4][180][0].apply(exports, arguments)
        }, {
            "./lib/_stream_duplex.js": 199,
            "./lib/_stream_passthrough.js": 200,
            "./lib/_stream_readable.js": 201,
            "./lib/_stream_transform.js": 202,
            "./lib/_stream_writable.js": 203,
            "dup": 180
        }],
        209: [function (require, module, exports) {
            arguments[4][181][0].apply(exports, arguments)
        }, {"./readable": 208, "dup": 181}],
        210: [function (require, module, exports) {
            arguments[4][182][0].apply(exports, arguments)
        }, {"./lib/_stream_writable.js": 203, "dup": 182}],
        211: [function (require, module, exports) {
            arguments[4][50][0].apply(exports, arguments)
        }, {"dup": 50, "safe-buffer": 184}],
        212: [function (require, module, exports) {
            (function (global) {

                /**
                 * Module exports.
                 */

                module.exports = deprecate;

                /**
                 * Mark that a method should not be used.
                 * Returns a modified function which warns once by default.
                 *
                 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
                 *
                 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
                 * will throw an Error when invoked.
                 *
                 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
                 * will invoke `console.trace()` instead of `console.error()`.
                 *
                 * @param {Function} fn - the function to deprecate
                 * @param {String} msg - the string to print to the console when `fn` is invoked
                 * @returns {Function} a new "deprecated" version of `fn`
                 * @api public
                 */

                function deprecate(fn, msg) {
                    if (config('noDeprecation')) {
                        return fn;
                    }

                    var warned = false;

                    function deprecated() {
                        if (!warned) {
                            if (config('throwDeprecation')) {
                                throw new Error(msg);
                            } else if (config('traceDeprecation')) {
                                console.trace(msg);
                            } else {
                                console.warn(msg);
                            }
                            warned = true;
                        }
                        return fn.apply(this, arguments);
                    }

                    return deprecated;
                }

                /**
                 * Checks `localStorage` for boolean values for the given `name`.
                 *
                 * @param {String} name
                 * @returns {Boolean}
                 * @api private
                 */

                function config(name) {
                    // accessing global.localStorage can trigger a DOMException in sandboxed iframes
                    try {
                        if (!global.localStorage) return false;
                    } catch (_) {
                        return false;
                    }
                    var val = global.localStorage[name];
                    if (null == val) return false;
                    return String(val).toLowerCase() === 'true';
                }

            }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
        }, {}],
        213: [function (require, module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

            'use strict';

            /*<replacement>*/

            var Buffer = require('safe-buffer').Buffer;
            /*</replacement>*/

            var isEncoding = Buffer.isEncoding || function (encoding) {
                encoding = '' + encoding;
                switch (encoding && encoding.toLowerCase()) {
                    case 'hex':
                    case 'utf8':
                    case 'utf-8':
                    case 'ascii':
                    case 'binary':
                    case 'base64':
                    case 'ucs2':
                    case 'ucs-2':
                    case 'utf16le':
                    case 'utf-16le':
                    case 'raw':
                        return true;
                    default:
                        return false;
                }
            };

            function _normalizeEncoding(enc) {
                if (!enc) return 'utf8';
                var retried;
                while (true) {
                    switch (enc) {
                        case 'utf8':
                        case 'utf-8':
                            return 'utf8';
                        case 'ucs2':
                        case 'ucs-2':
                        case 'utf16le':
                        case 'utf-16le':
                            return 'utf16le';
                        case 'latin1':
                        case 'binary':
                            return 'latin1';
                        case 'base64':
                        case 'ascii':
                        case 'hex':
                            return enc;
                        default:
                            if (retried) return; // undefined
                            enc = ('' + enc).toLowerCase();
                            retried = true;
                    }
                }
            };

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
            function normalizeEncoding(enc) {
                var nenc = _normalizeEncoding(enc);
                if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
                return nenc || enc;
            }

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
            exports.StringDecoder = StringDecoder;

            function StringDecoder(encoding) {
                this.encoding = normalizeEncoding(encoding);
                var nb;
                switch (this.encoding) {
                    case 'utf16le':
                        this.text = utf16Text;
                        this.end = utf16End;
                        nb = 4;
                        break;
                    case 'utf8':
                        this.fillLast = utf8FillLast;
                        nb = 4;
                        break;
                    case 'base64':
                        this.text = base64Text;
                        this.end = base64End;
                        nb = 3;
                        break;
                    default:
                        this.write = simpleWrite;
                        this.end = simpleEnd;
                        return;
                }
                this.lastNeed = 0;
                this.lastTotal = 0;
                this.lastChar = Buffer.allocUnsafe(nb);
            }

            StringDecoder.prototype.write = function (buf) {
                if (buf.length === 0) return '';
                var r;
                var i;
                if (this.lastNeed) {
                    r = this.fillLast(buf);
                    if (r === undefined) return '';
                    i = this.lastNeed;
                    this.lastNeed = 0;
                } else {
                    i = 0;
                }
                if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
                return r || '';
            };

            StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
            StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
            StringDecoder.prototype.fillLast = function (buf) {
                if (this.lastNeed <= buf.length) {
                    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
                    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
                }
                buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
                this.lastNeed -= buf.length;
            };

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
            function utf8CheckByte(byte) {
                if (byte <= 0x7F) return 0; else if (byte >> 5 === 0x06) return 2; else if (byte >> 4 === 0x0E) return 3; else if (byte >> 3 === 0x1E) return 4;
                return byte >> 6 === 0x02 ? -1 : -2;
            }

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
            function utf8CheckIncomplete(self, buf, i) {
                var j = buf.length - 1;
                if (j < i) return 0;
                var nb = utf8CheckByte(buf[j]);
                if (nb >= 0) {
                    if (nb > 0) self.lastNeed = nb - 1;
                    return nb;
                }
                if (--j < i || nb === -2) return 0;
                nb = utf8CheckByte(buf[j]);
                if (nb >= 0) {
                    if (nb > 0) self.lastNeed = nb - 2;
                    return nb;
                }
                if (--j < i || nb === -2) return 0;
                nb = utf8CheckByte(buf[j]);
                if (nb >= 0) {
                    if (nb > 0) {
                        if (nb === 2) nb = 0; else self.lastNeed = nb - 3;
                    }
                    return nb;
                }
                return 0;
            }

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
            function utf8CheckExtraBytes(self, buf, p) {
                if ((buf[0] & 0xC0) !== 0x80) {
                    self.lastNeed = 0;
                    return '\ufffd';
                }
                if (self.lastNeed > 1 && buf.length > 1) {
                    if ((buf[1] & 0xC0) !== 0x80) {
                        self.lastNeed = 1;
                        return '\ufffd';
                    }
                    if (self.lastNeed > 2 && buf.length > 2) {
                        if ((buf[2] & 0xC0) !== 0x80) {
                            self.lastNeed = 2;
                            return '\ufffd';
                        }
                    }
                }
            }

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
            function utf8FillLast(buf) {
                var p = this.lastTotal - this.lastNeed;
                var r = utf8CheckExtraBytes(this, buf, p);
                if (r !== undefined) return r;
                if (this.lastNeed <= buf.length) {
                    buf.copy(this.lastChar, p, 0, this.lastNeed);
                    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
                }
                buf.copy(this.lastChar, p, 0, buf.length);
                this.lastNeed -= buf.length;
            }

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
            function utf8Text(buf, i) {
                var total = utf8CheckIncomplete(this, buf, i);
                if (!this.lastNeed) return buf.toString('utf8', i);
                this.lastTotal = total;
                var end = buf.length - (total - this.lastNeed);
                buf.copy(this.lastChar, 0, end);
                return buf.toString('utf8', i, end);
            }

// For UTF-8, a replacement character is added when ending on a partial
// character.
            function utf8End(buf) {
                var r = buf && buf.length ? this.write(buf) : '';
                if (this.lastNeed) return r + '\ufffd';
                return r;
            }

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
            function utf16Text(buf, i) {
                if ((buf.length - i) % 2 === 0) {
                    var r = buf.toString('utf16le', i);
                    if (r) {
                        var c = r.charCodeAt(r.length - 1);
                        if (c >= 0xD800 && c <= 0xDBFF) {
                            this.lastNeed = 2;
                            this.lastTotal = 4;
                            this.lastChar[0] = buf[buf.length - 2];
                            this.lastChar[1] = buf[buf.length - 1];
                            return r.slice(0, -1);
                        }
                    }
                    return r;
                }
                this.lastNeed = 1;
                this.lastTotal = 2;
                this.lastChar[0] = buf[buf.length - 1];
                return buf.toString('utf16le', i, buf.length - 1);
            }

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
            function utf16End(buf) {
                var r = buf && buf.length ? this.write(buf) : '';
                if (this.lastNeed) {
                    var end = this.lastTotal - this.lastNeed;
                    return r + this.lastChar.toString('utf16le', 0, end);
                }
                return r;
            }

            function base64Text(buf, i) {
                var n = (buf.length - i) % 3;
                if (n === 0) return buf.toString('base64', i);
                this.lastNeed = 3 - n;
                this.lastTotal = 3;
                if (n === 1) {
                    this.lastChar[0] = buf[buf.length - 1];
                } else {
                    this.lastChar[0] = buf[buf.length - 2];
                    this.lastChar[1] = buf[buf.length - 1];
                }
                return buf.toString('base64', i, buf.length - n);
            }

            function base64End(buf) {
                var r = buf && buf.length ? this.write(buf) : '';
                if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
                return r;
            }

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
            function simpleWrite(buf) {
                return buf.toString(this.encoding);
            }

            function simpleEnd(buf) {
                return buf && buf.length ? this.write(buf) : '';
            }
        }, {"safe-buffer": 184}],
        214: [function (require, module, exports) {
            arguments[4][212][0].apply(exports, arguments)
        }, {"dup": 212}],
        215: [function (require, module, exports) {
            "use strict";

            function __export(m) {
                for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
            }

            Object.defineProperty(exports, "__esModule", {value: true});
            __export(require("./src/Schema"));
            __export(require("./src/config"));
            __export(require("./src/BooleanPart"));
            __export(require("./src/StringPart"));
            __export(require("./src/DatePart"));
            __export(require("./src/StringDatePart"));
            __export(require("./src/NumberPart"));
            __export(require("./src/ObjectPart"));
            __export(require("./src/ArrayPart"));
            __export(require("./src/BasePart"));

        }, {
            "./src/ArrayPart": 216,
            "./src/BasePart": 217,
            "./src/BooleanPart": 218,
            "./src/DatePart": 219,
            "./src/NumberPart": 220,
            "./src/ObjectPart": 221,
            "./src/Schema": 222,
            "./src/StringDatePart": 223,
            "./src/StringPart": 224,
            "./src/config": 225
        }],
        216: [function (require, module, exports) {
            "use strict";
            var __extends = (this && this.__extends) || (function () {
                var extendStatics = Object.setPrototypeOf ||
                    ({__proto__: []} instanceof Array && function (d, b) {
                        d.__proto__ = b;
                    }) ||
                    function (d, b) {
                        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
                    };
                return function (d, b) {
                    extendStatics(d, b);

                    function __() {
                        this.constructor = d;
                    }

                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                };
            })();
            Object.defineProperty(exports, "__esModule", {value: true});
            var BasePart_1 = require("./BasePart");
            var ts_utils_1 = require("ts-utils");
            var ArrayPart = /** @class */ (function (_super) {
                __extends(ArrayPart, _super);

                function ArrayPart(config, path) {
                    var _this = _super.call(this, config, path) || this;
                    var Component = _this.options.content.type;
                    _this._child = new Component(_this.options.content);
                    return _this;
                }

                ArrayPart.prototype.process = function (data, rootList) {
                    var _this = this;
                    return _super.prototype.process.call(this, data, rootList).then(function (value) {
                        if (value && ts_utils_1.isArray(value)) {
                            return Promise.all(value.map(function (item) {
                                return _this._child.process(item, rootList.concat(data));
                            }));
                        }
                        else {
                            return value;
                        }
                    });
                };
                ArrayPart.prototype.getValue = function (data) {
                    if (ts_utils_1.isArray(data)) {
                        return data;
                    }
                    else {
                        return null;
                    }
                };
                return ArrayPart;
            }(BasePart_1.BasePart));
            exports.ArrayPart = ArrayPart;

        }, {"./BasePart": 217, "ts-utils": 226}],
        217: [function (require, module, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var ts_utils_1 = require("ts-utils");
            var BasePart = /** @class */ (function () {
                function BasePart(options, path) {
                    this.options = options;
                    this.path = path;
                    if (this.options.isEmpty) {
                        this.isEmpty = this.options.isEmpty;
                    }
                    if (this.options.isValid) {
                        this.isValid = this.options.isValid;
                    }
                    if (this.options.required && ('defaultValue' in this.options)) {
                        throw new Error('Wrong params! Conflict options "required" and defaultValue');
                    }
                }

                BasePart.prototype.process = function (data, roots) {
                    var _this = this;
                    var path = this.getPath();
                    var result = this.getValue(this.getDataByPath(data, path), roots);
                    return BasePart.toPromise(result).then(function (value) {
                        var isEmpty = _this.isEmpty(value);
                        var isValid = _this.isValid(value);
                        var type = _this.options.type.name || _this.options.type.prototype.constructor.name;
                        if (_this.options.required) {
                            if (isEmpty) {
                                throw new Error("Required field type \"" + type + "\" \"" + path + "\" is empty!");
                            }
                        }
                        if (('defaultValue' in _this.options) && isEmpty) {
                            value = _this.options.defaultValue;
                        }
                        else {
                            if (!isValid) {
                                throw new Error("Field \"" + path + "\" is invalid!");
                            }
                        }
                        return value;
                    });
                };
                BasePart.prototype.getPath = function () {
                    return this.options.path === null ? null : this.options.path || this.path;
                };
                BasePart.prototype.isEmpty = function (data) {
                    return data == null;
                };
                BasePart.prototype.isValid = function (data) {
                    return true;
                };
                BasePart.prototype.getDataByPath = function (data, path) {
                    if (this.options.parseValue) {
                        if (path) {
                            return this.options.parseValue(ts_utils_1.get(data, path));
                        }
                        else {
                            return this.options.parseValue(data);
                        }
                    }
                    else if (path != null) {
                        return ts_utils_1.get(data, path);
                    }
                    else {
                        return data;
                    }
                };
                BasePart.isPromise = function (some) {
                    return some && some.then && typeof some.then === 'function';
                };
                BasePart.toPromise = function (some) {
                    return BasePart.isPromise(some) ? some : Promise.resolve(some);
                };
                return BasePart;
            }());
            exports.BasePart = BasePart;

        }, {"ts-utils": 226}],
        218: [function (require, module, exports) {
            "use strict";
            var __extends = (this && this.__extends) || (function () {
                var extendStatics = Object.setPrototypeOf ||
                    ({__proto__: []} instanceof Array && function (d, b) {
                        d.__proto__ = b;
                    }) ||
                    function (d, b) {
                        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
                    };
                return function (d, b) {
                    extendStatics(d, b);

                    function __() {
                        this.constructor = d;
                    }

                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                };
            })();
            Object.defineProperty(exports, "__esModule", {value: true});
            var BasePart_1 = require("./BasePart");
            var BooleanPart = /** @class */ (function (_super) {
                __extends(BooleanPart, _super);

                function BooleanPart() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }

                BooleanPart.prototype.getValue = function (data) {
                    switch (typeof data) {
                        case 'boolean':
                            return data;
                        case 'string':
                        case 'number':
                            return Boolean(data);
                        default:
                            return null;
                    }
                };
                return BooleanPart;
            }(BasePart_1.BasePart));
            exports.BooleanPart = BooleanPart;

        }, {"./BasePart": 217}],
        219: [function (require, module, exports) {
            "use strict";
            var __extends = (this && this.__extends) || (function () {
                var extendStatics = Object.setPrototypeOf ||
                    ({__proto__: []} instanceof Array && function (d, b) {
                        d.__proto__ = b;
                    }) ||
                    function (d, b) {
                        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
                    };
                return function (d, b) {
                    extendStatics(d, b);

                    function __() {
                        this.constructor = d;
                    }

                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                };
            })();
            Object.defineProperty(exports, "__esModule", {value: true});
            var BasePart_1 = require("./BasePart");
            var DatePart = /** @class */ (function (_super) {
                __extends(DatePart, _super);

                function DatePart() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }

                DatePart.prototype.getValue = function (data) {
                    if (data instanceof Date) {
                        return data;
                    }
                    if (typeof data === 'number') {
                        return new Date(data);
                    }
                    return null;
                };
                return DatePart;
            }(BasePart_1.BasePart));
            exports.DatePart = DatePart;

        }, {"./BasePart": 217}],
        220: [function (require, module, exports) {
            "use strict";
            var __extends = (this && this.__extends) || (function () {
                var extendStatics = Object.setPrototypeOf ||
                    ({__proto__: []} instanceof Array && function (d, b) {
                        d.__proto__ = b;
                    }) ||
                    function (d, b) {
                        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
                    };
                return function (d, b) {
                    extendStatics(d, b);

                    function __() {
                        this.constructor = d;
                    }

                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                };
            })();
            Object.defineProperty(exports, "__esModule", {value: true});
            var BasePart_1 = require("./BasePart");
            var NumberPart = /** @class */ (function (_super) {
                __extends(NumberPart, _super);

                function NumberPart() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }

                NumberPart.prototype.getValue = function (data) {
                    switch (typeof data) {
                        case 'number':
                            return data;
                        case 'string':
                            return Number(data);
                        default:
                            return null;
                    }
                };
                NumberPart.prototype.isEmpty = function (data) {
                    return data == null || isNaN(data);
                };
                return NumberPart;
            }(BasePart_1.BasePart));
            exports.NumberPart = NumberPart;

        }, {"./BasePart": 217}],
        221: [function (require, module, exports) {
            "use strict";
            var __extends = (this && this.__extends) || (function () {
                var extendStatics = Object.setPrototypeOf ||
                    ({__proto__: []} instanceof Array && function (d, b) {
                        d.__proto__ = b;
                    }) ||
                    function (d, b) {
                        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
                    };
                return function (d, b) {
                    extendStatics(d, b);

                    function __() {
                        this.constructor = d;
                    }

                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                };
            })();
            Object.defineProperty(exports, "__esModule", {value: true});
            var BasePart_1 = require("./BasePart");
            var ts_utils_1 = require("ts-utils");
            var ObjectPart = /** @class */ (function (_super) {
                __extends(ObjectPart, _super);

                function ObjectPart(config, path) {
                    var _this = _super.call(this, config, path) || this;
                    var myPath = _this.getPath();
                    _this._childHash = Object.create(null);
                    ts_utils_1.each(_this.options.content, function (config, key) {
                        var Component = config.type;
                        var localPath = path == null ? String(key) : myPath + "." + key;
                        _this._childHash[key] = new Component(config, localPath);
                    });
                    return _this;
                }

                ObjectPart.prototype.process = function (data, rootList) {
                    var _this = this;
                    return _super.prototype.process.call(this, data, rootList).then(function (value) {
                        if (value && ts_utils_1.isObject(value)) {
                            var promises_1 = [];
                            var result_1 = Object.create(null);
                            Object.keys(_this._childHash).forEach(function (name) {
                                var promise = _this._childHash[name].process(data, rootList).then(function (itemValue) {
                                    result_1[name] = itemValue;
                                });
                                promises_1.push(promise);
                            });
                            return Promise.all(promises_1).then(function () {
                                return result_1;
                            });
                        }
                        else {
                            return value;
                        }
                    });
                };
                ObjectPart.prototype.getValue = function (data) {
                    if (ts_utils_1.isObject(data)) {
                        return data;
                    }
                    else {
                        return null;
                    }
                };
                return ObjectPart;
            }(BasePart_1.BasePart));
            exports.ObjectPart = ObjectPart;

        }, {"./BasePart": 217, "ts-utils": 226}],
        222: [function (require, module, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var Schema = /** @class */ (function () {
                function Schema(config) {
                    var Component = config.type;
                    this._children = new Component(config);
                }

                Schema.prototype.parse = function (data) {
                    return this._children.process(data, []);
                };
                return Schema;
            }());
            exports.Schema = Schema;

        }, {}],
        223: [function (require, module, exports) {
            "use strict";
            var __extends = (this && this.__extends) || (function () {
                var extendStatics = Object.setPrototypeOf ||
                    ({__proto__: []} instanceof Array && function (d, b) {
                        d.__proto__ = b;
                    }) ||
                    function (d, b) {
                        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
                    };
                return function (d, b) {
                    extendStatics(d, b);

                    function __() {
                        this.constructor = d;
                    }

                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                };
            })();
            Object.defineProperty(exports, "__esModule", {value: true});
            var BasePart_1 = require("./BasePart");
            var config_1 = require("./config");
            var ts_utils_1 = require("ts-utils");
            var StringDatePart = /** @class */ (function (_super) {
                __extends(StringDatePart, _super);

                function StringDatePart(config, path) {
                    var _this = _super.call(this, config, path) || this;
                    _this.dateProcessor = ts_utils_1.date(_this.options.outPattern || config_1.OUT_DATE_PATTERN);
                    return _this;
                }

                StringDatePart.prototype.getValue = function (data) {
                    var date;
                    if (data instanceof Date) {
                        date = data;
                    }
                    if (typeof data === 'number') {
                        date = new Date(data);
                    }
                    if (date) {
                        return this.dateProcessor(date);
                    }
                    return null;
                };
                return StringDatePart;
            }(BasePart_1.BasePart));
            exports.StringDatePart = StringDatePart;

        }, {"./BasePart": 217, "./config": 225, "ts-utils": 226}],
        224: [function (require, module, exports) {
            "use strict";
            var __extends = (this && this.__extends) || (function () {
                var extendStatics = Object.setPrototypeOf ||
                    ({__proto__: []} instanceof Array && function (d, b) {
                        d.__proto__ = b;
                    }) ||
                    function (d, b) {
                        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
                    };
                return function (d, b) {
                    extendStatics(d, b);

                    function __() {
                        this.constructor = d;
                    }

                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                };
            })();
            Object.defineProperty(exports, "__esModule", {value: true});
            var BasePart_1 = require("./BasePart");
            var StringPart = /** @class */ (function (_super) {
                __extends(StringPart, _super);

                function StringPart() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }

                StringPart.prototype.getValue = function (data) {
                    switch (typeof data) {
                        case 'string':
                            return data;
                        case 'number':
                            return String(data);
                        default:
                            return null;
                    }
                };
                return StringPart;
            }(BasePart_1.BasePart));
            exports.StringPart = StringPart;

        }, {"./BasePart": 217}],
        225: [function (require, module, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            exports.OUT_DATE_PATTERN = 'DD.MM.YYYY';

        }, {}],
        226: [function (require, module, exports) {
            "use strict";

            function __export(m) {
                for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
            }

            Object.defineProperty(exports, "__esModule", {value: true});
            __export(require("./src/utils"));
            __export(require("./src/filters"));
            __export(require("./src/Signal"));
            __export(require("./src/utilsWithFilters"));
            __export(require("./src/Path"));
            __export(require("./src/Iterator"));
            __export(require("./src/Receiver"));
            __export(require("./src/tree/BaseTree"));
            __export(require("./src/tree/Tree"));

        }, {
            "./src/Iterator": 227,
            "./src/Path": 228,
            "./src/Receiver": 229,
            "./src/Signal": 230,
            "./src/filters": 231,
            "./src/tree/BaseTree": 232,
            "./src/tree/Tree": 233,
            "./src/utils": 234,
            "./src/utilsWithFilters": 235
        }],
        227: [function (require, module, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var Iterator = /** @class */ (function () {
                function Iterator(some) {
                    this._step = 0;
                    this._list = some;
                }

                Iterator.prototype.next = function () {
                    if (this._step < this._list.length) {
                        var result = {
                            done: false,
                            value: this._list[this._step]
                        };
                        this._step++;
                        return result;
                    }
                    else {
                        return {
                            done: true
                        };
                    }
                };
                return Iterator;
            }());
            exports.Iterator = Iterator;

        }, {}],
        228: [function (require, module, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var Iterator_1 = require("./Iterator");
            var Path = /** @class */ (function () {
                function Path(path) {
                    this._path = path;
                    this.length = this._path.length;
                }

                Path.prototype.reverse = function () {
                    return new Path(this._path.slice().reverse());
                };
                Path.prototype.iterator = function () {
                    var _this = this;
                    return new Iterator_1.Iterator(this._path.map(function (item, index) {
                        return _this.getItemData(index);
                    }));
                };
                Path.prototype.slice = function (start, end) {
                    return new Path(this._path.slice(start, end));
                };
                Path.prototype.forEach = function (cb, context) {
                    var _this = this;
                    return this._path.forEach(function (item, index) {
                        cb.call(context, _this.getItemData(index), index);
                    });
                };
                Path.prototype.some = function (cb, context) {
                    var _this = this;
                    return this._path.some(function (item, index) {
                        return cb.call(context, _this.getItemData(index), index);
                    });
                };
                Path.prototype.toString = function () {
                    return this._path.map(function (item, i) {
                        switch (item.type) {
                            case 0 /* Object */
                            :
                                return i === 0 ? item.name : "." + item.name;
                            case 1 /* Array */
                            :
                                return "[" + item.name + "]";
                        }
                    }).join('');
                };
                Path.prototype.getItemData = function (index) {
                    var container = Path.getContainer(this._path[index].type);
                    var nextContainer = this._path[index + 1] && Path.getContainer(this._path[index + 1].type) || null;
                    return {name: this._path[index].name, container: container, nextContainer: nextContainer};
                };
                Path.parse = function (path) {
                    var parts = [];
                    path.split('.').forEach(function (key) {
                        if (key === '') {
                            parts.push({
                                type: 0 /* Object */,
                                key: key
                            });
                        }
                        else {
                            var _a = key.replace(/\[(.*)?\]/, '|$1').split('|'), name_1 = _a[0], index = _a[1];
                            if (name_1) {
                                var num = Number(name_1);
                                if (String(num) === name_1) {
                                    parts.push({
                                        type: 1 /* Array */,
                                        name: name_1
                                    });
                                }
                                else {
                                    parts.push({
                                        type: 0 /* Object */,
                                        name: name_1
                                    });
                                }
                            }
                            if (index) {
                                parts.push({
                                    type: 1 /* Array */,
                                    name: index
                                });
                            }
                        }
                    });
                    return new Path(parts);
                };
                Path.getContainer = function (type) {
                    switch (type) {
                        case 0 /* Object */
                        :
                            return Object.create(null);
                        case 1 /* Array */
                        :
                            return [];
                    }
                };
                return Path;
            }());
            exports.Path = Path;

        }, {"./Iterator": 227}],
        229: [function (require, module, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var Receiver = /** @class */ (function () {
                function Receiver() {
                }

                Receiver.prototype.receive = function (signal, handler, context) {
                    receive.call(this, signal, handler, context, false);
                };
                Receiver.prototype.receiveOnce = function (signal, handler, context) {
                    receive.call(this, signal, handler, context, true);
                };
                Receiver.prototype.stopReceive = function (item, handler) {
                    var _this = this;
                    if (!this.__received) {
                        return null;
                    }
                    if (typeof item === 'function') {
                        handler = item;
                        item = null;
                    }
                    if (!item) {
                        Object.keys(this.__received).forEach(function (cid) {
                            _this.stopReceive(_this.__received[cid].signal, handler);
                        });
                        return null;
                    }
                    if (!handler) {
                        this.__received[item.cid].handlers.slice().forEach(function (myHandler) {
                            _this.stopReceive(item, myHandler);
                        });
                        return null;
                    }
                    var handlers = this.__received[item.cid].handlers;
                    for (var i = handlers.length; i--;) {
                        if (handlers[i] === handler) {
                            handlers.splice(i, 1);
                            this.__received[item.cid].signal.off(handler, this);
                        }
                    }
                    if (!handlers.length) {
                        delete this.__received[item.cid];
                    }
                };
                return Receiver;
            }());
            exports.Receiver = Receiver;

            function receive(signal, handler, context, isOnce) {
                if (!this.__received) {
                    this.__received = Object.create(null);
                }
                if (isOnce) {
                    signal.once(handler, context, this);
                }
                else {
                    signal.on(handler, context, this);
                }
                if (!this.__received[signal.cid]) {
                    this.__received[signal.cid] = {
                        handlers: [handler],
                        signal: signal
                    };
                }
                else {
                    this.__received[signal.cid].handlers.push(handler);
                }
            }

        }, {}],
        230: [function (require, module, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var utils_1 = require("./utils");
            var Signal = /** @class */ (function () {
                function Signal() {
                    this.cid = utils_1.uniqueId('signal');
                    this._handlers = [];
                }

                Signal.prototype.on = function (handler, context, receiver) {
                    this._handlers.push({
                        isOnce: false,
                        handler: handler,
                        context: context,
                        receiver: receiver
                    });
                };
                Signal.prototype.once = function (handler, context, receiver) {
                    this._handlers.push({
                        isOnce: true,
                        handler: handler,
                        context: context,
                        receiver: receiver
                    });
                };
                Signal.prototype.off = function (handler, receiver) {
                    for (var i = this._handlers.length; i--;) {
                        var handlerData = this._handlers[i];
                        if (!handlerData) {
                            continue;
                        }
                        if (handlerData.handler === handler) {
                            if (handlerData.receiver) {
                                if (receiver) {
                                    if (handlerData.receiver === receiver) {
                                        this._handlers.splice(i, 1);
                                        handlerData.receiver.stopReceive(this, handler);
                                    }
                                }
                                else {
                                    throw new Error('Can\'t remove this handler without receiver!');
                                }
                            }
                            else {
                                this._handlers.splice(i, 1);
                            }
                        }
                    }
                };
                Signal.prototype.dispatch = function (some) {
                    var _this = this;
                    this._handlers.slice().forEach(function (handlerData) {
                        if (handlerData.isOnce) {
                            _this.off(handlerData.handler, handlerData.receiver);
                        }
                        handlerData.handler.call(handlerData.context, some);
                    });
                };
                return Signal;
            }());
            exports.Signal = Signal;

        }, {"./utils": 234}],
        231: [function (require, module, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var utils_1 = require("./utils");
            var EMPTY_FUNCS_MAP = {
                skipNumber: utils_1.isNumber,
                skipString: utils_1.isString,
                skipNotEmpty: utils_1.isNotEmpty,
                skipNull: utils_1.isNull,
                skipUndefined: utils_1.isUndefined
            };

            function filterList() {
                var filters = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    filters[_i] = arguments[_i];
                }
                if (!filters.length) {
                    return function () {
                        return true;
                    };
                }
                return function (item) {
                    return filters.every(function (filter) {
                        return filter(item);
                    });
                };
            }

            exports.filterList = filterList;

            function not(processor) {
                if (processor) {
                    return function (data) {
                        return !processor(data);
                    };
                }
                else {
                    return function (data) {
                        return !data;
                    };
                }
            }

            exports.not = not;

            function empty(options) {
                if (!options) {
                    return Boolean;
                }
                var functions = [];
                utils_1.each(options, function (value, optionName) {
                    if (EMPTY_FUNCS_MAP[optionName] && value) {
                        functions.push(EMPTY_FUNCS_MAP[optionName]);
                    }
                });
                if (!functions.length) {
                    return Boolean;
                }
                else {
                    return function (data) {
                        return functions.some(function (f) {
                            return f(data);
                        }) || !!data;
                    };
                }
            }

            exports.empty = empty;

            function contains(data) {
                if (typeof data === 'object') {
                    var keys_1 = Object.keys(data);
                    return function (localData) {
                        if (!utils_1.isObject(localData)) {
                            return false;
                        }
                        return keys_1.every(function (key) {
                            return data[key] === localData[key];
                        });
                    };
                }
                else {
                    return function (localData) {
                        return data === localData;
                    };
                }
            }

            exports.contains = contains;

            function containsDeep(data) {
                var paths = utils_1.getPaths(data);
                var check = function (localData) {
                    return paths.every(function (parts) {
                        return utils_1.get(data, parts) === utils_1.get(localData, parts);
                    });
                };
                return function (localData) {
                    if (typeof localData === 'object') {
                        return check(localData);
                    }
                    else {
                        return false;
                    }
                };
            }

            exports.containsDeep = containsDeep;

            function notContains(data) {
                return not(contains(data));
            }

            exports.notContains = notContains;

            function notContainsDeep(data) {
                return not(containsDeep(data));
            }

            exports.notContainsDeep = notContainsDeep;

            function roundFilter(len) {
                return function (num) {
                    return utils_1.round(num, len);
                };
            }

            exports.roundFilter = roundFilter;

            function splitRangeFilter(processor, separator) {
                return function (num) {
                    return utils_1.splitRange(num, separator, processor);
                };
            }

            exports.splitRangeFilter = splitRangeFilter;

            function roundSplit(len, separator) {
                return splitRangeFilter(roundFilter(len), separator);
            }

            exports.roundSplit = roundSplit;

            function equal(some, noStrict) {
                if (noStrict) {
                    return function (data) {
                        /* tslint:disable */
                        return some == data;
                        /* tslint:enable */
                    };
                }
                return function (data) {
                    return some === data;
                };
            }

            exports.equal = equal;

            function notEqual(some, noStrict) {
                return not(equal(some, noStrict));
            }

            exports.notEqual = notEqual;
            var dateParsers = [
                {
                    pattern: 'YYYY',
                    handler: function (localDate) {
                        return String(localDate.getFullYear());
                    }
                },
                {
                    pattern: 'YY',
                    handler: function (localDate) {
                        return String(localDate.getFullYear()).substr(2);
                    }
                },
                {
                    pattern: 'MM',
                    handler: function (localDate) {
                        return String(utils_1.numToLength(localDate.getMonth() + 1, 2));
                    }
                },
                {
                    pattern: 'M',
                    handler: function (localDate) {
                        return String(localDate.getMonth() + 1);
                    }
                },
                {
                    pattern: 'DD',
                    handler: function (localDate) {
                        return String(utils_1.numToLength(localDate.getDate(), 2));
                    }
                },
                {
                    pattern: 'D',
                    handler: function (localDate) {
                        return String(localDate.getDate());
                    }
                },
                {
                    pattern: 'hh',
                    handler: function (localDate) {
                        return String(utils_1.numToLength(localDate.getHours(), 2));
                    }
                },
                {
                    pattern: 'h',
                    handler: function (localDate) {
                        return String(localDate.getHours());
                    }
                },
                {
                    pattern: 'mm',
                    handler: function (localDate) {
                        return String(utils_1.numToLength(localDate.getMinutes(), 2));
                    }
                },
                {
                    pattern: 'm',
                    handler: function (localDate) {
                        return String(localDate.getMinutes());
                    }
                },
                {
                    pattern: 'ss',
                    handler: function (localDate) {
                        return String(utils_1.numToLength(localDate.getSeconds(), 2));
                    }
                },
                {
                    pattern: 's',
                    handler: function (localDate) {
                        return String(localDate.getSeconds());
                    }
                }
            ];

            function date(pattern, processor) {
                var localPatterns = [];
                var forFind = pattern;
                var parse;
                dateParsers.forEach(function (datePattern) {
                    if (forFind.indexOf(datePattern.pattern) !== -1) {
                        forFind = forFind.replace(datePattern.pattern, '');
                        localPatterns.push(datePattern);
                    }
                });
                if (processor) {
                    parse = function (toParse) {
                        var result = processor(toParse);
                        return utils_1.isNumber(result) ? new Date(result) : result;
                    };
                }
                else {
                    parse = function (data) {
                        return utils_1.isNumber(data) ? new Date(data) : data;
                    };
                }
                return function (localDate) {
                    var _date = parse(localDate);
                    return localPatterns.reduce(function (result, datePattern) {
                        return result.replace(datePattern.pattern, datePattern.handler(_date));
                    }, pattern);
                };
            }

            exports.date = date;

            function getBinaryFilter(data) {
                var dataPaths = utils_1.getPaths(data);
                if (dataPaths.length === 1) {
                    var path_1 = dataPaths[0];
                    var value_1 = utils_1.get(data, path_1);
                    return function (item) {
                        var itemValue = utils_1.get(item, path_1);
                        return itemValue > value_1 ? -1 : itemValue === value_1 ? 0 : 1;
                    };
                }
                else {
                    var pathsStr_1 = dataPaths.map(String);
                    var pathsHash_1 = Object.create(null);
                    dataPaths.forEach(function (path) {
                        pathsHash_1[String(path)] = utils_1.get(data, path);
                    });
                    return function (item) {
                        var map = dataPaths.map(function (path, i) {
                            var itemValue = utils_1.get(item, path);
                            var pathStr = pathsStr_1[i];
                            return itemValue > pathsHash_1[pathStr] ? -1 : itemValue === pathsHash_1[pathStr] ? 0 : 1;
                        });
                        var witoutZero = map.filter(Boolean);
                        if (witoutZero.length === 0) {
                            return 0;
                        }
                        else {
                            return witoutZero[0];
                        }
                    };
                }
            }

            exports.getBinaryFilter = getBinaryFilter;

        }, {"./utils": 234}],
        232: [function (require, module, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var utils_1 = require("../utils");
            var BaseTree = /** @class */ (function () {
                function BaseTree(data, parent, options) {
                    var _this = this;
                    this.children = [];
                    this.parent = parent;
                    this.id = data.id;
                    this.data = utils_1.cloneDeep(data.data);
                    this.ChildConstructor = options && options.Child || BaseTree;
                    this.getRoot().registerChild(this);
                    if (data.children) {
                        data.children.forEach(function (item) {
                            _this.children.push(new _this.ChildConstructor(item, _this, options));
                        });
                    }
                }

                BaseTree.prototype.getChildren = function () {
                    return this.children || [];
                };
                BaseTree.prototype.toArray = function () {
                    var result = [this];
                    if (this.children) {
                        this.children.forEach(function (item) {
                            result.push.apply(result, item.toArray());
                        });
                    }
                    return result;
                };
                BaseTree.prototype.getData = function () {
                    return this.data || Object.create(null);
                };
                BaseTree.prototype.set = function (key, value) {
                    this.data[key] = value;
                };
                BaseTree.prototype.get = function (key) {
                    return this.getData()[key];
                };
                BaseTree.prototype.getExtended = function (key) {
                    var result = this.get(key);
                    return result == null ? this.parent.getExtended(key) : result;
                };
                BaseTree.prototype.getParent = function () {
                    return this.parent;
                };
                BaseTree.prototype.getRoot = function () {
                    return this.parent.getRoot();
                };
                return BaseTree;
            }());
            exports.BaseTree = BaseTree;

        }, {"../utils": 234}],
        233: [function (require, module, exports) {
            "use strict";
            var __extends = (this && this.__extends) || (function () {
                var extendStatics = Object.setPrototypeOf ||
                    ({__proto__: []} instanceof Array && function (d, b) {
                        d.__proto__ = b;
                    }) ||
                    function (d, b) {
                        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
                    };
                return function (d, b) {
                    extendStatics(d, b);

                    function __() {
                        this.constructor = d;
                    }

                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                };
            })();
            Object.defineProperty(exports, "__esModule", {value: true});
            var BaseTree_1 = require("./BaseTree");
            var filters_1 = require("../filters");
            var Tree = /** @class */ (function (_super) {
                __extends(Tree, _super);

                function Tree(data, options) {
                    return _super.call(this, data, null, options) || this;
                }

                Tree.prototype.where = function (data) {
                    var _this = this;
                    var filter = typeof data === 'object' ? filters_1.containsDeep(data) : filters_1.contains(data);
                    return Object.keys(this._childHash).reduce(function (result, item, i) {
                        if (filter(_this._childHash[item].getData())) {
                            result.push(_this._childHash[item]);
                        }
                        return result;
                    }, []);
                };
                Tree.prototype.registerChild = function (child) {
                    if (!this._childHash) {
                        this._childHash = Object.create(null);
                    }
                    if (child !== this) {
                        if (this._childHash[child.id]) {
                            throw new Error('Duplicate ID');
                        }
                        else {
                            this._childHash[child.id] = child;
                        }
                    }
                };
                Tree.prototype.getPath = function (id) {
                    var item = this.find(id);
                    if (!item) {
                        return null;
                    }
                    var result = [];
                    var tmp = item;
                    do {
                        result.push(tmp.id);
                        tmp = tmp.getParent();
                    } while (tmp.getParent());
                    return result.reverse();
                };
                Tree.prototype.getRoot = function () {
                    return this;
                };
                Tree.prototype.find = function (id) {
                    return this._childHash[id];
                };
                return Tree;
            }(BaseTree_1.BaseTree));
            exports.Tree = Tree;

        }, {"../filters": 231, "./BaseTree": 232}],
        234: [function (require, module, exports) {
            "use strict";
            var __assign = (this && this.__assign) || Object.assign || function (t) {
                for (var s, i = 1, n = arguments.length; i < n; i++) {
                    s = arguments[i];
                    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
                }
                return t;
            };
            Object.defineProperty(exports, "__esModule", {value: true});
            var Path_1 = require("./Path");
            /**
             * @private
             * @type {{string: string; number: string; object: string; array: string}}
             */
            var TYPES = {
                string: '[object String]',
                number: '[object Number]',
                boolean: '[object Boolean]',
                object: '[object Object]',
                array: '[object Array]'
            };
            /**
             * @private
             * @type {() => string}
             */
            var toString = Object.prototype.toString;
            exports.DEFAULT_NUMBER_SEPARATOR = ',';

            /**
             * Check the parameter type
             * Is the parameter an object
             * @param param
             * @returns {boolean}
             */
            function isObject(param) {
                return toString.call(param) === TYPES.object;
            }

            exports.isObject = isObject;

            /**
             * Check the parameter
             * Whether the parameter is null or undefined
             * @param param
             * @returns {boolean}
             */
            function isEmpty(param) {
                return param == null;
            }

            exports.isEmpty = isEmpty;

            /**
             * Check the parameter
             * Whether the parameter is not null or is not undefined
             * @param param
             * @returns {boolean}
             */
            function isNotEmpty(param) {
                return param != null;
            }

            exports.isNotEmpty = isNotEmpty;

            /**
             * Check the parameter type
             * Is the parameter an string
             * @param param
             * @returns {boolean}
             */
            function isString(param) {
                return toString.call(param) === TYPES.string;
            }

            exports.isString = isString;

            /**
             * Check the parameter type
             * Is the parameter an number
             * @param param
             * @returns {boolean}
             */
            function isNumber(param) {
                return toString.call(param) === TYPES.number;
            }

            exports.isNumber = isNumber;

            /**
             * Check the parameter type
             * Is the parameter an array
             * @param param
             * @returns {boolean}
             */
            function isArray(param) {
                return toString.call(param) === TYPES.array;
            }

            exports.isArray = isArray;

            /**
             * Check the parameter type
             * Is the parameter an boolean
             * @param param
             * @returns {boolean}
             */
            function isBoolean(param) {
                return toString.call(param) === TYPES.boolean;
            }

            exports.isBoolean = isBoolean;

            /**
             * Check the parameter type
             * Is the parameter an null
             * @param param
             * @returns {boolean}
             */
            function isNull(param) {
                return param === null;
            }

            exports.isNull = isNull;

            /**
             * Check the parameter type
             * Is the parameter an undefined
             * @param param
             * @returns {boolean}
             */
            function isUndefined(param) {
                return param === undefined;
            }

            exports.isUndefined = isUndefined;

            /**
             * Check the parameter type
             * Is the parameter an NaN
             * @param param
             * @returns {boolean}
             */
            function isNaNCheck(param) {
                return isNumber(param) && isNaN(param);
            }

            exports.isNaNCheck = isNaNCheck;

            /**
             * Check the parameter type
             * Is the parameter an function
             * @param param
             * @returns {boolean}
             */
            function isFunction(param) {
                return typeof param === 'function';
            }

            exports.isFunction = isFunction;

            /**
             *
             * @param param
             * @returns {TTypes}
             */
            function typeOf(param) {
                var type = typeof param;
                switch (type) {
                    case 'object':
                        if (param === null) {
                            return 'null';
                        }
                        else {
                            var checkList = [
                                {check: isArray, type: 'array'},
                                {check: isObject, type: 'object'},
                                {check: isString, type: 'string'},
                                {check: isNumber, type: 'number'},
                                {check: isBoolean, type: 'boolean'}
                            ];
                            var $type_1 = 'null';
                            checkList.some(function (item) {
                                if (item.check(param)) {
                                    $type_1 = item.type;
                                }
                                return $type_1 !== 'null';
                            });
                            return $type_1;
                        }
                    default:
                        return type;
                }
            }

            exports.typeOf = typeOf;

            /**
             * Give the number to a certain number of symbols
             *
             * @example
             * numToLength(22, 3) // returns '022'
             * @example
             * numToLength(new Date().getHours(), 2) //returns '06'
             *
             * @param {number} num
             * @param {number} length
             * @returns {string}
             */
            function numToLength(num, length) {
                var str = String(num);
                for (var i = str.length; i < length; i++) {
                    str = '0' + str;
                }
                return str;
            }

            exports.numToLength = numToLength;

            /**
             * Safely rounds a number to a character
             * @param {number} num
             * @param {number} len
             * @returns {number}
             */
            function round(num, len) {
                len = len || 2;
                return Number(Math.round(Number(num + 'e' + len)) + 'e-' + len);
            }

            exports.round = round;

            /**
             * Format a number
             *
             * @example
             * splitRange(21257.32, {separator: ','}) // returns '21 257,32'
             *
             * @example
             * splitRange(21257.322, {separator: ','}, (num) => round(num, 2)) // returns '21 257,32'
             *
             * @param {number} num
             * @param {ISplitRangeOptions} options format options
             * @param {IFilter<number, number>} processor function for preprocess param
             * @returns {string}
             */
            function splitRange(num, separator, processor) {
                separator = isEmpty(separator) ? exports.DEFAULT_NUMBER_SEPARATOR : separator;
                if (processor) {
                    num = processor(num);
                }
                var str = String(num);
                var numData = str.split('.');
                var integral = numData[0], fractional = numData[1];
                integral = integral.split('').reverse().join('');
                integral = integral.replace(/(\d{3})/g, "$1" + separator)
                    .split('').reverse().join('').trim();
                if (fractional) {
                    return integral + "." + fractional;
                }
                return integral;
            }

            exports.splitRange = splitRange;

            /**
             * A generic iterator function, which can be used to seamlessly iterate over objects.
             * Like forEach for array
             * @param {Array<T> | IHash<T>} param
             * @param {(data: T, key: (string | number))} callback
             * @param context
             */
            function each(param, callback, context) {
                if (typeof param !== 'object' || !param) {
                    return null;
                }
                if (context) {
                    return Array.isArray(param) ? param.forEach(callback, context) :
                        Object.keys(param).forEach(function (key) {
                            return callback.call(context, param[key], key);
                        });
                }
                else {
                    return Array.isArray(param) ? param.forEach(callback) :
                        Object.keys(param).forEach(function (key) {
                            return callback(param[key], key);
                        });
                }
            }

            exports.each = each;

            /**
             * The general iterator function that can be used to test a particular property.
             * Like some for array
             * @param {Object} param
             * @param {ISomeCallback<T>} callback
             * @returns {boolean}
             */
            function some(param, callback) {
                return Object.keys(param).some(function (key) {
                    return callback(param[key], key);
                });
            }

            exports.some = some;

            /**
             * Get some data from object by string path
             *
             * @example
             * get({a: {b: 1}}), 'a.b') // returns 1
             *
             * @param {Object} data
             * @param {string} path
             * @returns {T}
             */
            function get(data, path) {
                var tmp = data;
                var parts = isString(path) ? Path_1.Path.parse(path) : path;
                parts.some(function (item) {
                    if (typeof tmp === 'object' && tmp !== null && (item.name in tmp)) {
                        tmp = tmp[item.name];
                    }
                    else {
                        tmp = null;
                        return true;
                    }
                });
                return tmp;
            }

            exports.get = get;

            /**
             * Set some data to object by string path
             *
             * @example
             * var some = {};
             * set(some), 'a.b', 1) // some equal {a: {b: 1}}
             *
             * @param {Object} data
             * @param {string} path
             * @param value
             */
            function set(data, path, value) {
                var tmp = data;
                var parts = isString(path) ? Path_1.Path.parse(path) : path;
                parts.forEach(function (itemData, index) {
                    var isLast = index === parts.length - 1;
                    if (isLast) {
                        tmp[itemData.name] = value;
                    }
                    else {
                        if (typeof tmp[itemData.name] !== 'object') {
                            tmp[itemData.name] = itemData.nextContainer;
                        }
                        tmp = tmp[itemData.name];
                    }
                });
            }

            exports.set = set;

            function getLayers(data, path) {
                var tmp = data;
                var layers = [{name: null, data: data, parent: null}];
                var parts = isString(path) ? Path_1.Path.parse(path) : path;
                parts.forEach(function (item) {
                    if (tmp) {
                        layers.push({name: item.name, data: tmp[item.name], parent: tmp});
                        tmp = tmp[item.name];
                    }
                    else {
                        layers = null;
                    }
                });
                return layers;
            }

            exports.getLayers = getLayers;

            function unset(data, path) {
                (getLayers(data, path) || []).reverse().some(function (item, index) {
                    if (index === 0) {
                        if (item.parent) {
                            delete item.parent[item.name];
                        }
                    }
                    else {
                        if (item.parent && Object.keys(item.data).length === 0) {
                            delete item.parent[item.name];
                        }
                    }
                });
            }

            exports.unset = unset;
            var counter = 0;

            function uniqueId(prefix) {
                if (prefix === void 0) {
                    prefix = '';
                }
                return "" + prefix + counter++;
            }

            exports.uniqueId = uniqueId;

            function result(param) {
                if (isFunction(param)) {
                    return param();
                }
                else {
                    return param;
                }
            }

            exports.result = result;

            /**
             * Get array all path from object
             *
             * @example
             * getPaths({a: {b: 1, c: 2}, d: 1}) // return [['a', 'b'], ['a', 'c'], ['d']]
             *
             * @param {Object} param
             * @returns {Array<Array<string>>}
             */
            function getPaths(param) {
                var paths = [];

                function getIterate(parents, array) {
                    var iterate = function (value, key) {
                        var newLine = parents.slice();
                        newLine.push({type: array ? 1 /* Array */ : 0 /* Object */, name: key});
                        if (isObject(value)) {
                            each(value, getIterate(newLine));
                        }
                        else if (isArray(value)) {
                            each(value, getIterate(newLine, true));
                        }
                        else {
                            paths.push(newLine);
                        }
                    };
                    return iterate;
                }

                var firstLine = [];
                each(param, getIterate(firstLine, isArray(param)));
                return paths.map(function (pathParts) {
                    return new Path_1.Path(pathParts);
                });
            }

            exports.getPaths = getPaths;

            function clone(data) {
                switch (typeof data) {
                    case 'object':
                        if (data === null) {
                            return null;
                        }
                        if (Array.isArray(data)) {
                            return data.slice();
                        }
                        else {
                            return __assign({}, data);
                        }
                    default:
                        return data;
                }
            }

            exports.clone = clone;

            function cloneDeep(data) {
                switch (typeof data) {
                    case 'object':
                        var paths = getPaths(data);
                        var $clone_1 = isArray(data) ? [] : Object.create(null);
                        paths.forEach(function (path) {
                            var value = get(data, path);
                            set($clone_1, path, value);
                        });
                        return $clone_1;
                    default:
                        return data;
                }
            }

            exports.cloneDeep = cloneDeep;

            function merge(origin) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                args.forEach(function (part) {
                    var paths = getPaths(part);
                    paths.forEach(function (path) {
                        var value = get(part, path);
                        set(origin, path, value);
                    });
                });
                return origin;
            }

            exports.merge = merge;

            function defaults(target) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                var paths = getPaths(target).map(String);
                args.reverse().forEach(function (item) {
                    var itemPaths = getPaths(item);
                    itemPaths.forEach(function (path) {
                        var stringPath = path.toString();
                        if (paths.indexOf(stringPath) === -1) {
                            paths.push(stringPath);
                            set(target, path, get(item, path));
                        }
                    });
                });
                return target;
            }

            exports.defaults = defaults;

            function camelCase(text) {
                return text.split(/\W|_/).map(function (item, index) {
                    switch (index) {
                        case 0:
                            return item;
                        default:
                            return item.charAt(0).toUpperCase() + item.substr(1);
                    }
                }).join('');
            }

            exports.camelCase = camelCase;

        }, {"./Path": 228}],
        235: [function (require, module, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var utils_1 = require("./utils");
            var filters_1 = require("./filters");

            function find(some, target) {
                var filter = utils_1.isFunction(target) ? target : filters_1.contains(target);
                var result = null;
                if (utils_1.isArray(some)) {
                    some.some(function (data) {
                        if (filter(data)) {
                            result = data;
                            return true;
                        }
                    });
                }
                else {
                    Object.keys(some).some(function (key) {
                        if (filter(some[key])) {
                            result = some[key];
                            return true;
                        }
                    });
                }
                return result;
            }

            exports.find = find;

            function binaryFind(some, target) {
                var result = {
                    index: -1,
                    value: null
                };
                var delta = 0;
                var step = function (arr) {
                    var index = Math.floor(arr.length / 2);
                    var item = arr[index];
                    switch (target(item)) {
                        case -1:
                            step(arr.slice(0, index));
                            break;
                        case 0:
                            result = {index: index + delta, value: item};
                            break;
                        case 1:
                            delta += index;
                            step(arr.slice(index));
                            break;
                    }
                };
                step(some.slice());
                return result;
            }

            exports.binaryFind = binaryFind;

        }, {"./filters": 231, "./utils": 234}],
        236: [function (require, module, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var waves_signature_generator_1 = require("@waves/waves-signature-generator");
            var request = require("./utils/request");
            var NodeAPI = require("./api/node/index");
            var MatcherAPI = require("./api/matcher/index");
            var constants = require("./constants");
            var config_1 = require("./config");
            var tools_1 = require("./tools");
            var WavesAPI = /** @class */ (function () {
                function WavesAPI(initialConfiguration) {
                    this.Seed = waves_signature_generator_1.Seed;
                    this.byteProcessors = waves_signature_generator_1.ByteProcessor;
                    this.config = config_1.default;
                    this.constants = constants;
                    this.crypto = waves_signature_generator_1.utils.crypto;
                    this.request = request;
                    this.tools = tools_1.default;
                    this.API = {
                        Node: NodeAPI,
                        Matcher: MatcherAPI
                    };
                    if (this instanceof WavesAPI) {
                        this.config.clear();
                        this.config.set(initialConfiguration);
                        if (WavesAPI._instance === null) {
                            WavesAPI._instance = this;
                        }
                        else {
                            return WavesAPI._instance;
                        }
                    }
                    else {
                        return new WavesAPI(initialConfiguration);
                    }
                }

                return WavesAPI;
            }());

            function create(config) {
                return new WavesAPI(config);
            }

            exports.create = create;
            exports.MAINNET_CONFIG = constants.DEFAULT_MAINNET_CONFIG;
            exports.TESTNET_CONFIG = constants.DEFAULT_TESTNET_CONFIG;

        }, {
            "./api/matcher/index": 237,
            "./api/node/index": 245,
            "./config": 251,
            "./constants": 252,
            "./tools": 256,
            "./utils/request": 258,
            "@waves/waves-signature-generator": 1
        }],
        237: [function (require, module, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var info_1 = require("./info");
            var orderbooks_1 = require("./orderbooks");
            exports.getMatcherKey = info_1.default.getMatcherKey;
            exports.getOrderbooks = orderbooks_1.default.getOrderbooks;
            exports.getOrderbook = orderbooks_1.default.getOrderbook;
            exports.getOrders = orderbooks_1.default.getOrders;
            exports.getAllOrders = orderbooks_1.default.getAllOrders;
            exports.createOrder = orderbooks_1.default.createOrder;
            exports.signTransaction = orderbooks_1.default.signTransaction;
            exports.send = orderbooks_1.default.send;
            exports.cancelOrder = orderbooks_1.default.cancelOrder;
            exports.deleteOrder = orderbooks_1.default.deleteOrder;

        }, {"./info": 238, "./orderbooks": 239}],
        238: [function (require, module, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var request_1 = require("../../utils/request");
            var fetch = request_1.createFetchWrapper(1 /* MATCHER */, 0 /* V1 */, request_1.processJSON);
            exports.default = {
                getMatcherKey: function () {
                    return fetch('/');
                }
            };

        }, {"../../utils/request": 258}],
        239: [function (require, module, exports) {
            "use strict";
            var __assign = (this && this.__assign) || Object.assign || function (t) {
                for (var s, i = 1, n = arguments.length; i < n; i++) {
                    s = arguments[i];
                    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
                }
                return t;
            };
            Object.defineProperty(exports, "__esModule", {value: true});
            var waves_signature_generator_1 = require("@waves/waves-signature-generator");
            var request_1 = require("../../utils/request");
            var remap_1 = require("../../utils/remap");
            var request_2 = require("../../utils/request");
            var orderbooks_x_1 = require("./orderbooks.x");
            var fetch = request_1.createFetchWrapper(1 /* MATCHER */, 0 /* V1 */, request_1.processJSON);
            var preCreateOrderAsync = function (data) {
                return orderbooks_x_1.createOrderSchema.parse(data);
            };
            var postCreateOrder = function (data) {
                data.assetPair = {
                    amountAsset: remap_1.normalizeAssetId(data.amountAsset),
                    priceAsset: remap_1.normalizeAssetId(data.priceAsset)
                };
                delete data.amountAsset;
                delete data.priceAsset;
                return data;
            };
            var postCancelOrder = remap_1.createRemapper({
                senderPublicKey: 'sender'
            });
            var generateCancelLikeRequest = function (type) {
                return function (amountAssetId, priceAssetId, orderId, keyPair) {
                    var data = {
                        senderPublicKey: keyPair.publicKey,
                        orderId: orderId
                    };
                    var authData = new waves_signature_generator_1.CANCEL_ORDER_SIGNATURE(data);
                    return authData.getSignature(keyPair.privateKey)
                        .then(function (signature) {
                            return postCancelOrder(__assign({}, data, {signature: signature}));
                        })
                        .then(function (tx) {
                            return fetch("/orderbook/" + amountAssetId + "/" + priceAssetId + "/" + type, __assign({}, request_2.POST_TEMPLATE, {body: JSON.stringify(tx)}));
                        });
                };
            };
            exports.default = {
                getOrderbooks: function () {
                    return fetch('/orderbook');
                },
                getOrderbook: function (assetOne, assetTwo) {
                    return fetch("/orderbook/" + assetOne + "/" + assetTwo);
                },
                getOrders: function (assetOne, assetTwo, keyPair) {
                    var data = {
                        senderPublicKey: keyPair.publicKey,
                        timestamp: remap_1.getTimestamp()
                    };
                    var authData = new waves_signature_generator_1.AUTH_ORDER_SIGNATURE(data);
                    return authData.getSignature(keyPair.privateKey).then(function (signature) {
                        var preparedData = __assign({}, data, {signature: signature});
                        return fetch("/orderbook/" + assetOne + "/" + assetTwo + "/publicKey/" + keyPair.publicKey, {
                            headers: {
                                Timestamp: preparedData.timestamp,
                                Signature: preparedData.signature
                            }
                        });
                    });
                },
                getAllOrders: function (keyPair) {
                    var data = {
                        senderPublicKey: keyPair.publicKey,
                        timestamp: remap_1.getTimestamp()
                    };
                    var authData = new waves_signature_generator_1.AUTH_ORDER_SIGNATURE(data);
                    return authData.getSignature(keyPair.privateKey).then(function (signature) {
                        var preparedData = __assign({}, data, {signature: signature});
                        return fetch("/orderbook/" + keyPair.publicKey, {
                            headers: {
                                Timestamp: preparedData.timestamp,
                                Signature: preparedData.signature
                            }
                        });
                    });
                },
                createOrder: request_1.wrapTxRequest(waves_signature_generator_1.CREATE_ORDER_SIGNATURE, preCreateOrderAsync, postCreateOrder, function (postParams) {
                    return fetch('/orderbook', postParams);
                }),
                signTransaction: request_1.wrapTxRequest(waves_signature_generator_1.CREATE_ORDER_SIGNATURE, preCreateOrderAsync, postCreateOrder, function (postParams) {
                    console.log(postParams)
                    return postParams;
                }),
                send: (postParams) => {
                    return fetch('/orderbook', postParams);
                },
                cancelOrder: generateCancelLikeRequest('cancel'),
                deleteOrder: generateCancelLikeRequest('delete')
            };

        }, {
            "../../utils/remap": 257,
            "../../utils/request": 258,
            "./orderbooks.x": 240,
            "@waves/waves-signature-generator": 1
        }],
        240: [function (require, module, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var ts_api_validator_1 = require("ts-api-validator");
            var remap_1 = require("../../utils/remap");
            var constants_1 = require("../../constants");
            var schemaFields_1 = require("../schemaFields");
            exports.createOrderSchema = new ts_api_validator_1.Schema({
                type: ts_api_validator_1.ObjectPart,
                required: true,
                content: {
                    senderPublicKey: schemaFields_1.default.publicKey,
                    matcherPublicKey: schemaFields_1.default.publicKey,
                    amountAsset: schemaFields_1.default.assetId,
                    priceAsset: schemaFields_1.default.assetId,
                    orderType: {
                        type: ts_api_validator_1.StringPart,
                        required: true,
                        isValid: function (orderType) {
                            return orderType === 'buy' || orderType === 'sell';
                        }
                    },
                    amount: {
                        type: ts_api_validator_1.NumberPart,
                        required: true
                    },
                    price: {
                        type: ts_api_validator_1.NumberPart,
                        required: true
                    },
                    timestamp: schemaFields_1.default.timestamp,
                    expiration: {
                        type: ts_api_validator_1.NumberPart,
                        required: true,
                        parseValue: function (expiration) {
                            if (expiration) {
                                return remap_1.getTimestamp(expiration);
                            }
                            else {
                                var date = new Date(remap_1.getTimestamp());
                                return date.setDate(date.getDate() + constants_1.DEFAULT_ORDER_EXPIRATION_DAYS);
                            }
                        }
                    },
                    matcherFee: schemaFields_1.default.matcherFee
                }
            });

        }, {"../../constants": 252, "../../utils/remap": 257, "../schemaFields": 250, "ts-api-validator": 215}],
        241: [function (require, module, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var request_1 = require("../../utils/request");
            var fetch = request_1.createFetchWrapper(0 /* NODE */, 0 /* V1 */, request_1.processJSON);
            exports.default = {
                balance: function (address, confirmations) {
                    if (!confirmations) {
                        return fetch("/addresses/balance/" + address);
                    }
                    else {
                        return fetch("/addresses/balance/" + address + "/" + confirmations);
                    }
                },
                balanceDetails: function (address) {
                    return fetch("/addresses/balance/details/" + address);
                }
            };

        }, {"../../utils/request": 258}],
        242: [function (require, module, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var request_1 = require("../../utils/request");
            var fetch = request_1.createFetchWrapper(0 /* NODE */, 0 /* V1 */, request_1.processJSON);
            exports.default = {
                byAlias: function (alias) {
                    return fetch("/alias/by-alias/" + alias);
                },
                byAddress: function (address) {
                    return fetch("/alias/by-address/" + address);
                }
            };

        }, {"../../utils/request": 258}],
        243: [function (require, module, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var request_1 = require("../../utils/request");
            var addresses_1 = require("./addresses");
            var constants = require("../../constants");
            var fetch = request_1.createFetchWrapper(0 /* NODE */, 0 /* V1 */, request_1.processJSON);
            exports.default = {
                balances: function (address) {
                    return fetch("/assets/balance/" + address);
                },
                balance: function (address, assetId) {
                    if (assetId === constants.WAVES) {
                        return addresses_1.default.balance(address);
                    }
                    else {
                        return fetch("/assets/balance/" + address + "/" + assetId);
                    }
                },
                distribution: function (assetId) {
                    return fetch("/assets/" + assetId + "/distribution");
                }
            };

        }, {"../../constants": 252, "../../utils/request": 258, "./addresses": 241}],
        244: [function (require, module, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var request_1 = require("../../utils/request");
            var fetch = request_1.createFetchWrapper(0 /* NODE */, 0 /* V1 */, request_1.processJSON);
            exports.default = {
                get: function (signature) {
                    return fetch("/blocks/signature/" + signature);
                },
                at: function (height) {
                    return fetch("/blocks/at/" + height);
                },
                first: function () {
                    return fetch('/blocks/first');
                },
                last: function () {
                    return fetch('/blocks/last');
                },
                height: function () {
                    return fetch('/blocks/height');
                }
            };

        }, {"../../utils/request": 258}],
        245: [function (require, module, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var addresses_1 = require("./addresses");
            var aliases_1 = require("./aliases");
            var assets_1 = require("./assets");
            var blocks_1 = require("./blocks");
            var leasing_1 = require("./leasing");
            var transactions_1 = require("./transactions");
            var utils_1 = require("./utils");
            exports.addresses = addresses_1.default;
            exports.aliases = aliases_1.default;
            exports.assets = assets_1.default;
            exports.blocks = blocks_1.default;
            exports.leasing = leasing_1.default;
            exports.transactions = transactions_1.default;
            exports.utils = utils_1.default;

        }, {
            "./addresses": 241,
            "./aliases": 242,
            "./assets": 243,
            "./blocks": 244,
            "./leasing": 246,
            "./transactions": 247,
            "./utils": 249
        }],
        246: [function (require, module, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var request_1 = require("../../utils/request");
            var fetch = request_1.createFetchWrapper(0 /* NODE */, 0 /* V1 */, request_1.processJSON);
            exports.default = {
                getAllActiveLeases: function (address) {
                    return fetch("/leasing/active/" + address).then(function (list) {
                        return list.map(function (tx) {
                            tx.status = 'active';
                            return tx;
                        });
                    });
                }
            };

        }, {"../../utils/request": 258}],
        247: [function (require, module, exports) {
            "use strict";
            var __assign = (this && this.__assign) || Object.assign || function (t) {
                for (var s, i = 1, n = arguments.length; i < n; i++) {
                    s = arguments[i];
                    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
                }
                return t;
            };
            Object.defineProperty(exports, "__esModule", {value: true});
            var request_1 = require("../../utils/request");
            var WavesError_1 = require("../../errors/WavesError");
            var constants = require("../../constants");
            var config_1 = require("../../config");
            var requests = require("./transactions.x");
            var fetch = request_1.createFetchWrapper(0 /* NODE */, 0 /* V1 */, request_1.processJSON);
            exports.default = {
                get: function (id) {
                    if (id === constants.WAVES) {
                        return Promise.resolve(constants.WAVES_V1_ISSUE_TX);
                    }
                    else {
                        return fetch("/transactions/info/" + id);
                    }
                },
                getList: function (address, limit) {
                    if (limit === void 0) {
                        limit = config_1.default.getRequestParams().limit;
                    }
                    // In the end of the line a strange response artifact is handled
                    return fetch("/transactions/address/" + address + "/limit/" + limit).then(function (array) {
                        return array[0];
                    });
                },
                utxSize: function () {
                    return fetch('/transactions/unconfirmed/size');
                },
                utxGet: function (id) {
                    return fetch("/transactions/unconfirmed/info/" + id);
                },
                utxGetList: function () {
                    return fetch('/transactions/unconfirmed');
                },
                broadcast: function (type, data, keys) {
                    switch (type) {
                        case constants.ISSUE_TX_NAME:
                            return requests.sendIssueTx(data, keys);
                        case constants.TRANSFER_TX_NAME:
                            return requests.sendTransferTx(data, keys);
                        case constants.REISSUE_TX_NAME:
                            return requests.sendReissueTx(data, keys);
                        case constants.BURN_TX_NAME:
                            return requests.sendBurnTx(data, keys);
                        case constants.LEASE_TX_NAME:
                            return requests.sendLeaseTx(data, keys);
                        case constants.CANCEL_LEASING_TX_NAME:
                            return requests.sendCancelLeasingTx(data, keys);
                        case constants.CREATE_ALIAS_TX_NAME:
                            return requests.sendCreateAliasTx(data, keys);
                        case constants.MASS_TRANSFER_TX_NAME:
                            return requests.sendMassTransferTx(data, keys);
                        case constants.DATA_TX_NAME:
                            return requests.sendDataTx(data, keys);
                        case constants.SET_SCRIPT_TX_NAME:
                            return requests.sendSetScriptTx(data, keys);
                        case constants.SPONSORSHIP_TX_NAME:
                            return requests.sendSponsorshipTx(data, keys);
                        default:
                            throw new WavesError_1.default("Wrong transaction type: " + type, data);
                    }
                },
                getSignature: function (type, data, keys) {
                    switch (type) {
                        case constants.ISSUE_TX_NAME:
                            return requests.sendIssueTx(data, keys);
                        case constants.TRANSFER_TX_NAME:
                            return requests.sign(data, keys);
                        case constants.REISSUE_TX_NAME:
                            return requests.sendReissueTx(data, keys);
                        case constants.BURN_TX_NAME:
                            return requests.sendBurnTx(data, keys);
                        case constants.LEASE_TX_NAME:
                            return requests.sendLeaseTx(data, keys);
                        case constants.CANCEL_LEASING_TX_NAME:
                            return requests.sendCancelLeasingTx(data, keys);
                        case constants.CREATE_ALIAS_TX_NAME:
                            return requests.sendCreateAliasTx(data, keys);
                        case constants.MASS_TRANSFER_TX_NAME:
                            return requests.sendMassTransferTx(data, keys);
                        case constants.DATA_TX_NAME:
                            return requests.sendDataTx(data, keys);
                        case constants.SET_SCRIPT_TX_NAME:
                            return requests.sendSetScriptTx(data, keys);
                        case constants.SPONSORSHIP_TX_NAME:
                            return requests.sendSponsorshipTx(data, keys);
                        default:
                            throw new WavesError_1.default("Wrong transaction type: " + type, data);
                    }
                },
                rawBroadcast: function (data) {
                    return fetch(constants.BROADCAST_PATH, __assign({}, request_1.POST_TEMPLATE, {body: JSON.stringify(data)}));
                }
            };

        }, {
            "../../config": 251,
            "../../constants": 252,
            "../../errors/WavesError": 253,
            "../../utils/request": 258,
            "./transactions.x": 248
        }],
        248: [function (require, module, exports) {
            "use strict";
            var __extends = (this && this.__extends) || (function () {
                var extendStatics = Object.setPrototypeOf ||
                    ({__proto__: []} instanceof Array && function (d, b) {
                        d.__proto__ = b;
                    }) ||
                    function (d, b) {
                        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
                    };
                return function (d, b) {
                    extendStatics(d, b);

                    function __() {
                        this.constructor = d;
                    }

                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                };
            })();
            Object.defineProperty(exports, "__esModule", {value: true});
            var ts_api_validator_1 = require("ts-api-validator");
            var waves_signature_generator_1 = require("@waves/waves-signature-generator");
            var schemaFields_1 = require("../schemaFields");
            var remap_1 = require("../../utils/remap");
            var request_1 = require("../../utils/request");
            var constants = require("../../constants");
            var config_1 = require("../../config");
            var fetch = request_1.createFetchWrapper(0 /* NODE */, 0 /* V1 */, request_1.processJSON);
            var AnyPart = /** @class */ (function (_super) {
                __extends(AnyPart, _super);

                function AnyPart() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }

                AnyPart.prototype.getValue = function (data) {
                    return data;
                };
                return AnyPart;
            }(ts_api_validator_1.BasePart));
            /* ISSUE */
            exports.issueSchema = new ts_api_validator_1.Schema({
                type: ts_api_validator_1.ObjectPart,
                required: true,
                content: {
                    senderPublicKey: schemaFields_1.default.publicKey,
                    name: {
                        type: ts_api_validator_1.StringPart,
                        required: true
                    },
                    description: {
                        type: ts_api_validator_1.StringPart,
                        required: false,
                        defaultValue: ''
                    },
                    quantity: {
                        type: ts_api_validator_1.NumberPart,
                        required: true
                    },
                    precision: {
                        type: ts_api_validator_1.NumberPart,
                        required: true,
                        isValid: remap_1.precisionCheck
                    },
                    reissuable: schemaFields_1.default.reissuable,
                    fee: schemaFields_1.default.issueFee,
                    timestamp: schemaFields_1.default.timestamp
                }
            });
            exports.preIssue = function (data) {
                return exports.issueSchema.parse(data);
            };
            exports.postIssue = remap_1.createRemapper({
                transactionType: null,
                precision: 'decimals'
                // ,
                // type: constants.ISSUE_TX,
                // version: constants.ISSUE_TX_VERSION
            });
            exports.sendIssueTx = request_1.wrapTxRequest(waves_signature_generator_1.TX_TYPE_MAP.issue, exports.preIssue, exports.postIssue, function (postParams) {
                return fetch('/assets/broadcast/issue', postParams);
            } /*, true*/);
            /* TRANSFER */
            exports.transferSchema = new ts_api_validator_1.Schema({
                type: ts_api_validator_1.ObjectPart,
                required: true,
                content: {
                    senderPublicKey: schemaFields_1.default.publicKey,
                    recipient: schemaFields_1.default.recipient,
                    assetId: schemaFields_1.default.assetId,
                    amount: {
                        type: ts_api_validator_1.NumberPart,
                        required: true
                    },
                    feeAssetId: {
                        type: ts_api_validator_1.StringPart,
                        required: false,
                        defaultValue: constants.WAVES
                    },
                    fee: schemaFields_1.default.fee,
                    attachment: {
                        // TODO : make it possible to pass a byte array
                        type: ts_api_validator_1.StringPart,
                        required: false,
                        defaultValue: ''
                    },
                    timestamp: schemaFields_1.default.timestamp
                }
            });
            exports.preTransfer = function (data) {
                return exports.transferSchema.parse(data);
            };
            exports.postTransfer = remap_1.createRemapper({
                transactionType: null,
                assetId: remap_1.normalizeAssetId,
                feeAssetId: remap_1.normalizeAssetId,
                attachment: {
                    from: 'bytes',
                    to: 'base58'
                },
                recipient: {
                    from: 'raw',
                    to: 'prefixed'
                }
                // ,
                // type: constants.TRANSFER_TX,
                // version: constants.TRANSFER_TX_VERSION
            });
            exports.sendTransferTx = request_1.wrapTxRequest(waves_signature_generator_1.TX_TYPE_MAP.transfer, exports.preTransfer, exports.postTransfer, function (postParams) {
                return fetch('/assets/broadcast/transfer', postParams);
            } /*, true*/);
            exports.sign = request_1.wrapTxRequest(waves_signature_generator_1.TX_TYPE_MAP.transfer, exports.preTransfer, exports.postTransfer, function (postParams) {
                return postParams;
            } /*, true*/);
            /* REISSUE */
            exports.reissueSchema = new ts_api_validator_1.Schema({
                type: ts_api_validator_1.ObjectPart,
                required: true,
                content: {
                    senderPublicKey: schemaFields_1.default.publicKey,
                    assetId: schemaFields_1.default.assetId,
                    quantity: {
                        type: ts_api_validator_1.NumberPart,
                        required: true
                    },
                    reissuable: schemaFields_1.default.reissuable,
                    fee: schemaFields_1.default.issueFee,
                    timestamp: schemaFields_1.default.timestamp
                }
            });
            exports.preReissue = function (data) {
                return exports.reissueSchema.parse(data);
            };
            exports.postReissue = remap_1.createRemapper({
                transactionType: null
                // ,
                // type: constants.REISSUE_TX,
                // version: constants.REISSUE_TX_VERSION
            });
            exports.sendReissueTx = request_1.wrapTxRequest(waves_signature_generator_1.TX_TYPE_MAP.reissue, exports.preReissue, exports.postReissue, function (postParams) {
                return fetch('/assets/broadcast/reissue', postParams);
            } /*, true*/);
            /* BURN */
            exports.burnSchema = new ts_api_validator_1.Schema({
                type: ts_api_validator_1.ObjectPart,
                required: true,
                content: {
                    senderPublicKey: schemaFields_1.default.publicKey,
                    assetId: schemaFields_1.default.assetId,
                    quantity: {
                        type: ts_api_validator_1.NumberPart,
                        required: true
                    },
                    fee: schemaFields_1.default.fee,
                    timestamp: schemaFields_1.default.timestamp
                }
            });
            exports.preBurn = function (data) {
                return exports.burnSchema.parse(data);
            };
            exports.postBurn = remap_1.createRemapper(({
                transactionType: null
                // ,
                // type: constants.BURN_TX,
                // version: constants.BURN_TX_VERSION
            }));
            exports.sendBurnTx = request_1.wrapTxRequest(waves_signature_generator_1.TX_TYPE_MAP.burn, exports.preBurn, exports.postBurn, function (postParams) {
                return fetch('/assets/broadcast/burn', postParams);
            } /*, true*/);
            /* LEASE */
            exports.leaseSchema = new ts_api_validator_1.Schema({
                type: ts_api_validator_1.ObjectPart,
                required: true,
                content: {
                    senderPublicKey: schemaFields_1.default.publicKey,
                    recipient: schemaFields_1.default.recipient,
                    amount: {
                        type: ts_api_validator_1.NumberPart,
                        required: true
                    },
                    fee: schemaFields_1.default.fee,
                    timestamp: schemaFields_1.default.timestamp
                }
            });
            exports.preLease = function (data) {
                return exports.leaseSchema.parse(data);
            };
            exports.postLease = remap_1.createRemapper({
                transactionType: null,
                recipient: {
                    from: 'raw',
                    to: 'prefixed'
                }
                // ,
                // type: constants.LEASE_TX,
                // version: constants.LEASE_TX_VERSION
            });
            exports.sendLeaseTx = request_1.wrapTxRequest(waves_signature_generator_1.TX_TYPE_MAP.lease, exports.preLease, exports.postLease, function (postParams) {
                return fetch('/leasing/broadcast/lease', postParams);
            } /*, true*/);
            /* CANCEL LEASING */
            exports.cancelLeasingSchema = new ts_api_validator_1.Schema({
                type: ts_api_validator_1.ObjectPart,
                required: true,
                content: {
                    senderPublicKey: schemaFields_1.default.publicKey,
                    transactionId: {
                        type: ts_api_validator_1.StringPart,
                        required: true
                    },
                    fee: schemaFields_1.default.fee,
                    timestamp: schemaFields_1.default.timestamp
                }
            });
            exports.preCancelLeasing = function (data) {
                return exports.cancelLeasingSchema.parse(data);
            };
            exports.postCancelLeasing = remap_1.createRemapper({
                transactionType: null,
                transactionId: 'txId'
                // ,
                // type: constants.CANCEL_LEASING_TX,
                // version: constants.CANCEL_LEASING_TX_VERSION
            });
            exports.sendCancelLeasingTx = request_1.wrapTxRequest(waves_signature_generator_1.TX_TYPE_MAP.cancelLeasing, exports.preCancelLeasing, exports.postCancelLeasing, function (postParams) {
                return fetch('/leasing/broadcast/cancel', postParams);
            } /*, true*/);
            /* CREATE ALIAS */
            exports.createAliasSchema = new ts_api_validator_1.Schema({
                type: ts_api_validator_1.ObjectPart,
                required: true,
                content: {
                    senderPublicKey: schemaFields_1.default.publicKey,
                    alias: {
                        type: ts_api_validator_1.StringPart,
                        required: true,
                        parseValue: remap_1.removeAliasPrefix
                    },
                    fee: schemaFields_1.default.fee,
                    timestamp: schemaFields_1.default.timestamp
                }
            });
            exports.preCreateAlias = function (data) {
                return exports.createAliasSchema.parse(data);
            };
            exports.postCreateAlias = remap_1.createRemapper({
                transactionType: null
                // ,
                // type: constants.CREATE_ALIAS_TX,
                // version: constants.CREATE_ALIAS_TX_VERSION
            });
            exports.sendCreateAliasTx = request_1.wrapTxRequest(waves_signature_generator_1.TX_TYPE_MAP.createAlias, exports.preCreateAlias, exports.postCreateAlias, function (postParams) {
                return fetch('/alias/broadcast/create', postParams);
            } /*, true*/);
            /* MASS TRANSFER */
            exports.massTransferSchema = new ts_api_validator_1.Schema({
                type: ts_api_validator_1.ObjectPart,
                required: true,
                content: {
                    senderPublicKey: schemaFields_1.default.publicKey,
                    assetId: schemaFields_1.default.assetId,
                    transfers: {
                        type: ts_api_validator_1.ArrayPart,
                        content: {
                            type: ts_api_validator_1.ObjectPart,
                            required: true,
                            content: {
                                recipient: schemaFields_1.default.recipient,
                                amount: {
                                    type: ts_api_validator_1.NumberPart,
                                    required: true
                                }
                            }
                        },
                        defaultValue: []
                    },
                    timestamp: schemaFields_1.default.timestamp,
                    fee: schemaFields_1.default.fee,
                    attachment: {
                        // TODO : make it possible to pass a byte array
                        type: ts_api_validator_1.StringPart,
                        required: false,
                        defaultValue: ''
                    }
                }
            });
            exports.preMassTransfer = function (data) {
                return exports.massTransferSchema.parse(data);
            };
            exports.postMassTransfer = remap_1.createRemapper({
                transactionType: null,
                assetId: remap_1.normalizeAssetId,
                attachment: {
                    from: 'bytes',
                    to: 'base58'
                },
                transfers: {
                    from: 'raw',
                    to: 'prefixed',
                    path: 'recipient'
                },
                type: constants.MASS_TRANSFER_TX,
                version: constants.MASS_TRANSFER_TX_VERSION
            });
            exports.sendMassTransferTx = request_1.wrapTxRequest(waves_signature_generator_1.TX_TYPE_MAP.massTransfer, exports.preMassTransfer, exports.postMassTransfer, function (postParams) {
                return fetch(constants.BROADCAST_PATH, postParams);
            }, true);
            /* DATA */
            exports.dataSchema = new ts_api_validator_1.Schema({
                type: ts_api_validator_1.ObjectPart,
                required: true,
                content: {
                    senderPublicKey: schemaFields_1.default.publicKey,
                    data: {
                        type: ts_api_validator_1.ArrayPart,
                        content: {
                            type: ts_api_validator_1.ObjectPart,
                            required: true,
                            content: {
                                type: {
                                    type: ts_api_validator_1.StringPart,
                                    required: true
                                },
                                key: {
                                    type: ts_api_validator_1.StringPart,
                                    required: true
                                },
                                value: {
                                    type: AnyPart,
                                    required: true
                                }
                            }
                        },
                        defaultValue: []
                    },
                    timestamp: schemaFields_1.default.timestamp,
                    fee: schemaFields_1.default.fee // TODO : validate against the transaction size in bytes
                }
            });
            exports.preData = function (data) {
                return exports.dataSchema.parse(data);
            };
            exports.postData = remap_1.createRemapper({
                transactionType: null,
                type: constants.DATA_TX,
                version: constants.DATA_TX_VERSION
            });
            exports.sendDataTx = request_1.wrapTxRequest(waves_signature_generator_1.TX_TYPE_MAP.data, exports.preData, exports.postData, function (postParams) {
                return fetch(constants.BROADCAST_PATH, postParams);
            }, true);
            /* SET SCRIPT */
            exports.setScriptSchema = new ts_api_validator_1.Schema({
                type: ts_api_validator_1.ObjectPart,
                required: true,
                content: {
                    senderPublicKey: schemaFields_1.default.publicKey,
                    script: {
                        type: ts_api_validator_1.StringPart,
                        required: true
                    },
                    chainId: {
                        type: ts_api_validator_1.NumberPart,
                        required: true,
                        parseValue: function () {
                            return config_1.default.getNetworkByte();
                        }
                    },
                    timestamp: schemaFields_1.default.timestamp,
                    fee: schemaFields_1.default.fee // TODO : validate against the transaction size in bytes
                }
            });
            exports.preSetScript = function (data) {
                return exports.setScriptSchema.parse(data);
            };
            exports.postSetScript = remap_1.createRemapper({
                transactionType: null,
                type: constants.SET_SCRIPT_TX,
                version: constants.SET_SCRIPT_TX_VERSION
            });
            exports.sendSetScriptTx = request_1.wrapTxRequest(waves_signature_generator_1.TX_TYPE_MAP.setScript, exports.preSetScript, exports.postSetScript, function (postParams) {
                return fetch(constants.BROADCAST_PATH, postParams);
            }, true);
            /* SPONSORSHIP */
            exports.sponsorshipSchema = new ts_api_validator_1.Schema({
                type: ts_api_validator_1.ObjectPart,
                required: true,
                content: {
                    senderPublicKey: schemaFields_1.default.publicKey,
                    assetId: schemaFields_1.default.assetId,
                    minSponsoredAssetFee: {
                        type: ts_api_validator_1.NumberPart,
                        required: true
                    },
                    timestamp: schemaFields_1.default.timestamp,
                    fee: schemaFields_1.default.fee
                }
            });
            exports.preSponsorship = function (data) {
                return exports.sponsorshipSchema.parse(data);
            };
            exports.postSponsorship = remap_1.createRemapper({
                transactionType: null,
                type: constants.SPONSORSHIP_TX,
                version: constants.SPONSORSHIP_TX_VERSION
            });
            exports.sendSponsorshipTx = request_1.wrapTxRequest(waves_signature_generator_1.TX_TYPE_MAP.sponsorship, exports.preSponsorship, exports.postSponsorship, function (postParams) {
                return fetch(constants.BROADCAST_PATH, postParams);
            }, true);

        }, {
            "../../config": 251,
            "../../constants": 252,
            "../../utils/remap": 257,
            "../../utils/request": 258,
            "../schemaFields": 250,
            "@waves/waves-signature-generator": 1,
            "ts-api-validator": 215
        }],
        249: [function (require, module, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var request_1 = require("../../utils/request");
            var fetch = request_1.createFetchWrapper(0 /* NODE */, 0 /* V1 */, request_1.processJSON);
            exports.default = {
                time: function () {
                    return fetch('/utils/time').then(function (t) {
                        return t.system;
                    });
                },
                script: {
                    compile: function (code) {
                        return fetch('/utils/script/compile', {
                            method: 'POST',
                            body: code
                        }).then(function (response) {
                            return response.script;
                        });
                    }
                }
            };

        }, {"../../utils/request": 258}],
        250: [function (require, module, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var ts_api_validator_1 = require("ts-api-validator");
            var remap_1 = require("../utils/remap");
            var constants = require("../constants");
            exports.default = {
                publicKey: {
                    type: ts_api_validator_1.StringPart,
                    required: true
                },
                assetId: {
                    type: ts_api_validator_1.StringPart,
                    required: true
                },
                fee: {
                    type: ts_api_validator_1.NumberPart,
                    required: false,
                    defaultValue: constants.MINIMUM_FEE
                },
                issueFee: {
                    type: ts_api_validator_1.NumberPart,
                    required: false,
                    defaultValue: constants.MINIMUM_ISSUE_FEE
                },
                matcherFee: {
                    type: ts_api_validator_1.NumberPart,
                    required: false,
                    defaultValue: constants.MINIMUM_MATCHER_FEE
                },
                recipient: {
                    type: ts_api_validator_1.StringPart,
                    required: true,
                    parseValue: remap_1.removeRecipientPrefix
                },
                reissuable: {
                    type: ts_api_validator_1.BooleanPart,
                    required: false,
                    defaultValue: false
                },
                timestamp: {
                    type: ts_api_validator_1.NumberPart,
                    required: true,
                    parseValue: remap_1.getTimestamp
                }
            };

        }, {"../constants": 252, "../utils/remap": 257, "ts-api-validator": 215}],
        251: [function (require, module, exports) {
            "use strict";
            var __assign = (this && this.__assign) || Object.assign || function (t) {
                for (var s, i = 1, n = arguments.length; i < n; i++) {
                    s = arguments[i];
                    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
                }
                return t;
            };
            Object.defineProperty(exports, "__esModule", {value: true});
            var waves_signature_generator_1 = require("@waves/waves-signature-generator");
            var constants_1 = require("./constants");
            var request_1 = require("./utils/request");
            var config = Object.create(null);

            function checkRequiredFields(conf) {
                if (!conf.networkByte)
                    throw new Error('Missing network byte');
                if (!conf.nodeAddress)
                    throw new Error('Missing node address');
                if (!conf.matcherAddress)
                    throw new Error('Missing matcher address');
            }

            exports.default = {
                getNetworkByte: function () {
                    return config.networkByte;
                },
                getNodeAddress: function () {
                    return config.nodeAddress;
                },
                getMatcherAddress: function () {
                    return config.matcherAddress;
                },
                getMinimumSeedLength: function () {
                    return config.minimumSeedLength;
                },
                getRequestParams: function () {
                    return {
                        offset: config.requestOffset,
                        limit: config.requestLimit
                    };
                },
                getAssetFactory: function () {
                    return config.assetFactory;
                },
                getLogLevel: function () {
                    return config.logLevel;
                },
                getTimeDiff: function () {
                    return config.timeDiff;
                },
                get: function () {
                    return __assign({}, config);
                },
                set: function (newConfig) {
                    waves_signature_generator_1.config.set(newConfig);
                    // Extend incoming objects only when `config` is empty
                    if (Object.keys(config).length === 0) {
                        newConfig = __assign({}, constants_1.DEFAULT_BASIC_CONFIG, newConfig);
                    }
                    Object.keys(newConfig).forEach(function (key) {
                        switch (key) {
                            case 'nodeAddress':
                            case 'matcherAddress':
                                config[key] = request_1.normalizeHost(newConfig[key]);
                                break;
                            default:
                                config[key] = newConfig[key];
                                break;
                        }
                    });
                    checkRequiredFields(config);
                },
                clear: function () {
                    Object.keys(config).forEach(function (key) {
                        delete config[key];
                    });
                }
            };

        }, {"./constants": 252, "./utils/request": 258, "@waves/waves-signature-generator": 1}],
        252: [function (require, module, exports) {
            "use strict";
            var __assign = (this && this.__assign) || Object.assign || function (t) {
                for (var s, i = 1, n = arguments.length; i < n; i++) {
                    s = arguments[i];
                    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
                }
                return t;
            };
            Object.defineProperty(exports, "__esModule", {value: true});
            exports.WAVES = 'WAVES';
            exports.MAINNET_BYTE = 'W'.charCodeAt(0);
            exports.TESTNET_BYTE = 'T'.charCodeAt(0);
            exports.INITIAL_NONCE = 0;
            exports.ADDRESS_BYTE = 1;
            exports.ALIAS_BYTE = 2;
            exports.ISSUE_TX = 3 /* ISSUE */;
            exports.TRANSFER_TX = 4 /* TRANSFER */;
            exports.REISSUE_TX = 5 /* REISSUE */;
            exports.BURN_TX = 6 /* BURN */;
            exports.EXCHANGE_TX = 7 /* EXCHANGE */;
            exports.LEASE_TX = 8 /* LEASE */;
            exports.CANCEL_LEASING_TX = 9 /* CANCEL_LEASING */;
            exports.CREATE_ALIAS_TX = 10 /* CREATE_ALIAS */;
            exports.MASS_TRANSFER_TX = 11 /* MASS_TRANSFER */;
            exports.DATA_TX = 12 /* DATA */;
            exports.SET_SCRIPT_TX = 13 /* SET_SCRIPT */;
            exports.SPONSORSHIP_TX = 14 /* SPONSORSHIP */;
            exports.ISSUE_TX_VERSION = 2 /* ISSUE */;
            exports.TRANSFER_TX_VERSION = 2 /* TRANSFER */;
            exports.REISSUE_TX_VERSION = 2 /* REISSUE */;
            exports.BURN_TX_VERSION = 2 /* BURN */;
            exports.EXCHANGE_TX_VERSION = 2 /* EXCHANGE */;
            exports.LEASE_TX_VERSION = 2 /* LEASE */;
            exports.CANCEL_LEASING_TX_VERSION = 2 /* CANCEL_LEASING */;
            exports.CREATE_ALIAS_TX_VERSION = 2 /* CREATE_ALIAS */;
            exports.MASS_TRANSFER_TX_VERSION = 1 /* MASS_TRANSFER */;
            exports.DATA_TX_VERSION = 1 /* DATA */;
            exports.SET_SCRIPT_TX_VERSION = 1 /* SET_SCRIPT */;
            exports.SPONSORSHIP_TX_VERSION = 1 /* SPONSORSHIP */;
            exports.ISSUE_TX_NAME = "issue" /* ISSUE */;
            exports.TRANSFER_TX_NAME = "transfer" /* TRANSFER */;
            exports.REISSUE_TX_NAME = "reissue" /* REISSUE */;
            exports.BURN_TX_NAME = "burn" /* BURN */;
            exports.EXCHANGE_TX_NAME = "exchange" /* EXCHANGE */;
            exports.LEASE_TX_NAME = "lease" /* LEASE */;
            exports.CANCEL_LEASING_TX_NAME = "cancelLeasing" /* CANCEL_LEASING */;
            exports.CREATE_ALIAS_TX_NAME = "createAlias" /* CREATE_ALIAS */;
            exports.MASS_TRANSFER_TX_NAME = "massTransfer" /* MASS_TRANSFER */;
            exports.DATA_TX_NAME = "data" /* DATA */;
            exports.SET_SCRIPT_TX_NAME = "setScript" /* SET_SCRIPT */;
            exports.SPONSORSHIP_TX_NAME = "sponsorship" /* SPONSORSHIP */;
            exports.PRIVATE_KEY_LENGTH = 32;
            exports.PUBLIC_KEY_LENGTH = 32;
            exports.MINIMUM_FEE = 100000;
            exports.MINIMUM_ISSUE_FEE = 100000000;
            exports.MINIMUM_MATCHER_FEE = 300000;
            exports.MINIMUM_DATA_FEE_PER_KB = 100000;
            exports.TRANSFER_ATTACHMENT_BYTE_LIMIT = 140;
            exports.DEFAULT_MIN_SEED_LENGTH = 25;
            exports.DEFAULT_ORDER_EXPIRATION_DAYS = 20;
            exports.DEFAULT_BASIC_CONFIG = {
                minimumSeedLength: exports.DEFAULT_MIN_SEED_LENGTH,
                requestOffset: 0,
                requestLimit: 100,
                logLevel: 'warning',
                timeDiff: 0
            };
            exports.DEFAULT_MAINNET_CONFIG = __assign({}, exports.DEFAULT_BASIC_CONFIG, {
                networkByte: exports.MAINNET_BYTE,
                nodeAddress: 'https://nodes.wavesplatform.com',
                matcherAddress: 'https://matcher.wavesplatform.com/matcher'
            });
            exports.DEFAULT_TESTNET_CONFIG = __assign({}, exports.DEFAULT_BASIC_CONFIG, {
                networkByte: exports.TESTNET_BYTE,
                nodeAddress: 'https://testnet1.wavesnodes.com',
                matcherAddress: 'https://testnet1.wavesnodes.com/matcher'
            });
            exports.WAVES_V1_ISSUE_TX = {
                assetId: exports.WAVES,
                decimals: 8,
                description: '',
                fee: 0,
                height: 0,
                id: exports.WAVES,
                name: 'Waves',
                quantity: 100000000 * Math.pow(10, 8),
                reissuable: false,
                sender: exports.WAVES,
                senderPublicKey: '',
                signature: '',
                timestamp: 1460419200000,
                type: exports.ISSUE_TX
            };
            exports.BROADCAST_PATH = '/transactions/broadcast';

        }, {}],
        253: [function (require, module, exports) {
            "use strict";
            var __extends = (this && this.__extends) || (function () {
                var extendStatics = Object.setPrototypeOf ||
                    ({__proto__: []} instanceof Array && function (d, b) {
                        d.__proto__ = b;
                    }) ||
                    function (d, b) {
                        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
                    };
                return function (d, b) {
                    extendStatics(d, b);

                    function __() {
                        this.constructor = d;
                    }

                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                };
            })();
            Object.defineProperty(exports, "__esModule", {value: true});

            function paddedMessage(message) {
                return "\n" + message + "\n";
            }

            function resolveData(data) {
                if (data instanceof Error) {
                    return paddedMessage(data.toString());
                }
                else if (data) {
                    try {
                        return paddedMessage(JSON.stringify(data, null, 2));
                    }
                    catch (e) {
                        return paddedMessage('Not possible to retrieve error data');
                    }
                }
                else {
                    return paddedMessage('No additional data provided');
                }
            }

            var WavesError = /** @class */ (function (_super) {
                __extends(WavesError, _super);

                function WavesError(message, data) {
                    var _this = _super.call(this, message + ":\n" + resolveData(data)) || this;
                    _this.name = 'WavesError';
                    _this.data = data;
                    if (Error.captureStackTrace) {
                        Error.captureStackTrace(_this, WavesError);
                    }
                    return _this;
                }

                return WavesError;
            }(Error));
            exports.default = WavesError;

        }, {}],
        254: [function (require, module, exports) {
            "use strict";
            var __extends = (this && this.__extends) || (function () {
                var extendStatics = Object.setPrototypeOf ||
                    ({__proto__: []} instanceof Array && function (d, b) {
                        d.__proto__ = b;
                    }) ||
                    function (d, b) {
                        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
                    };
                return function (d, b) {
                    extendStatics(d, b);

                    function __() {
                        this.constructor = d;
                    }

                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                };
            })();
            Object.defineProperty(exports, "__esModule", {value: true});
            var WavesError_1 = require("./WavesError");
            var FAILED_TO_FETCH = 'Failed to fetch';

            function normalizeErrorData(data) {
                if (!data.error && data.message && data.message.indexOf(FAILED_TO_FETCH) !== -1) {
                    return {
                        error: -1,
                        message: 'failed to fetch'
                    };
                }
                else {
                    return data;
                }
            }

            var WavesRequestError = /** @class */ (function (_super) {
                __extends(WavesRequestError, _super);

                function WavesRequestError(url, data) {
                    var _this = _super.call(this, "Server request to '" + url + "' has failed", normalizeErrorData(data)) || this;
                    _this.name = 'WavesRequestError';
                    return _this;
                }

                return WavesRequestError;
            }(WavesError_1.default));
            exports.default = WavesRequestError;

        }, {"./WavesError": 253}],
        255: [function (require, module, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var fetchSubstitute = (function () {
                if (typeof window !== 'undefined') {
                    return window.fetch.bind(window);
                }
                else if (typeof exports === 'object' && typeof module !== 'undefined') {
                    return require('node-fetch');
                }
                else if (typeof self !== 'undefined') {
                    return self.fetch.bind(self);
                }
                else {
                    throw new Error('Your environment is not defined');
                }
            })();
            exports.default = fetchSubstitute;

        }, {"node-fetch": undefined}],
        256: [function (require, module, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            var waves_signature_generator_1 = require("@waves/waves-signature-generator");
            var constants_1 = require("./constants");
            var transactions_1 = require("./utils/transactions"); // TODO : fix this issue with interface
            exports.default = {
                getAddressFromPublicKey: function (publicKey) {
                    var publicKeyBytes = waves_signature_generator_1.libs.base58.decode(publicKey);
                    return waves_signature_generator_1.utils.crypto.buildRawAddress(publicKeyBytes);
                },
                calculateTimeDiff: function (nodeTime, userTime) {
                    return nodeTime - userTime;
                },
                base58: {
                    encode: waves_signature_generator_1.libs.base58.encode,
                    decode: waves_signature_generator_1.libs.base58.decode
                },
                getMinimumDataTxFee: function (data) {
                    var emptyDataTx = new waves_signature_generator_1.TX_TYPE_MAP.data({
                        senderPublicKey: '11111111111111111111111111111111',
                        timestamp: 0,
                        fee: '',
                        data: data
                    });
                    return emptyDataTx.getBytes().then(function (bytes) {
                        return Math.ceil(bytes.length / 1024) * constants_1.MINIMUM_DATA_FEE_PER_KB;
                    });
                },
                createTransaction: transactions_1.createTransaction
            };

        }, {"./constants": 252, "./utils/transactions": 259, "@waves/waves-signature-generator": 1}],
        257: [function (require, module, exports) {
            "use strict";
            var __assign = (this && this.__assign) || Object.assign || function (t) {
                for (var s, i = 1, n = arguments.length; i < n; i++) {
                    s = arguments[i];
                    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
                }
                return t;
            };
            Object.defineProperty(exports, "__esModule", {value: true});
            var waves_signature_generator_1 = require("@waves/waves-signature-generator");
            var constants_1 = require("../constants");
            var config_1 = require("../config");

            function normalizeAssetId(original) {
                if (!original || original === constants_1.WAVES) {
                    return '';
                }
                else {
                    return original;
                }
            }

            exports.normalizeAssetId = normalizeAssetId;

            function removeRecipientPrefix(original) {
                if (original.slice(0, 8) === 'address:') {
                    return original.slice(8);
                }
                else {
                    return original;
                }
            }

            exports.removeRecipientPrefix = removeRecipientPrefix;

            function removeAliasPrefix(original) {
                if (original.slice(0, 6) === 'alias:') {
                    return original.slice(8); // Mind the network byte characters
                }
                else {
                    return original;
                }
            }

            exports.removeAliasPrefix = removeAliasPrefix;
// Adjusts user time to UTC
// Should be used for creating transactions and requests only
            function getTimestamp(timestamp) {
                return (timestamp || Date.now()) + config_1.default.getTimeDiff();
            }

            exports.getTimestamp = getTimestamp;

            function precisionCheck(precision) {
                return (precision >= 0 && precision <= 8);
            }

            exports.precisionCheck = precisionCheck;

            function castFromBytesToBase58(bytes, sliceIndex) {
                bytes = Uint8Array.from(Array.prototype.slice.call(bytes, sliceIndex));
                return waves_signature_generator_1.libs.base58.encode(bytes);
            }

            function castFromRawToPrefixed(raw) {
                if (raw.length > 30) {
                    return "address:" + raw;
                }
                else {
                    var networkCharacter = String.fromCharCode(config_1.default.getNetworkByte());
                    return "alias:" + networkCharacter + ":" + raw;
                }
            }

            function createRemapper(rules) {
                return function (data) {
                    return Object.keys(__assign({}, data, rules)).reduce(function (result, key) {
                        var rule = rules[key];
                        if (typeof rule === 'function') {
                            // Process with a function
                            result[key] = rule(data[key]);
                        }
                        else if (typeof rule === 'string') {
                            // Rename a field with the rule name
                            result[rule] = data[key];
                        }
                        else if (rule && typeof rule === 'object') {
                            // Transform according to the rule
                            if (rule.from === 'bytes' && rule.to === 'base58') {
                                result[key] = castFromBytesToBase58(data[key], rule.slice || 0);
                            }
                            else if (rule.from === 'raw' && rule.to === 'prefixed') {
                                result[rule.path || key] = castFromRawToPrefixed(data[key]);
                            }
                        }
                        else if (rule !== null) {
                            // Leave the data as is (or add some default value from the rule)
                            result[key] = data[key] || rule;
                        }
                        return result;
                    }, Object.create(null));
                };
            }

            exports.createRemapper = createRemapper;

        }, {"../config": 251, "../constants": 252, "@waves/waves-signature-generator": 1}],
        258: [function (require, module, exports) {
            "use strict";
            var __assign = (this && this.__assign) || Object.assign || function (t) {
                for (var s, i = 1, n = arguments.length; i < n; i++) {
                    s = arguments[i];
                    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
                }
                return t;
            };
            Object.defineProperty(exports, "__esModule", {value: true});
            var create = require("parse-json-bignumber");
            var WavesRequestError_1 = require("../errors/WavesRequestError");
            var fetch_1 = require("../libs/fetch");
            var config_1 = require("../config");
            var SAFE_JSON_PARSE = create();
            exports.POST_TEMPLATE = {
                method: 'POST',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json;charset=UTF-8'
                }
            };
            var key = function (product, version) {
                return product + "/" + version;
            };
            var hostResolvers = (_a = {},
                _a[key(0 /* NODE */, 0 /* V1 */)] = function () {
                    return config_1.default.getNodeAddress();
                },
                _a[key(1 /* MATCHER */, 0 /* V1 */)] = function () {
                    return config_1.default.getMatcherAddress();
                },
                _a);

            function normalizeHost(host) {
                return host.replace(/\/+$/, '');
            }

            exports.normalizeHost = normalizeHost;

            function normalizePath(path) {
                return ("/" + path).replace(/\/+/g, '/').replace(/\/$/, '');
            }

            exports.normalizePath = normalizePath;

            function processJSON(res) {
                if (res.ok) {
                    return res.text().then(SAFE_JSON_PARSE);
                }
                else {
                    return res.json().then(Promise.reject.bind(Promise));
                }
            }

            exports.processJSON = processJSON;

            function handleError(url, data) {
                throw new WavesRequestError_1.default(url, data);
            }

            function createFetchWrapper(product, version, pipe) {
                var resolveHost = hostResolvers[key(product, version)];
                return function (path, options) {
                    var url = resolveHost() + normalizePath(path);
                    var request = fetch_1.default(url, options);
                    if (pipe) {
                        return request.then(pipe).catch(function (data) {
                            return handleError(url, data);
                        });
                    }
                    else {
                        return request.catch(function (data) {
                            return handleError(url, data);
                        });
                    }
                };
            }

            exports.createFetchWrapper = createFetchWrapper;

            function wrapTxRequest(SignatureGenerator, preRemapAsync, postRemap, callback, withProofs) {
                if (withProofs === void 0) {
                    withProofs = false;
                }
                return function (data, keyPair) {
                    return preRemapAsync(__assign({}, data, {senderPublicKey: keyPair.publicKey})).then(function (validatedData) {
                        var transaction = new SignatureGenerator(validatedData);
                        return transaction.getSignature(keyPair.privateKey)
                            .then(function (signature) {
                                return postRemap(__assign({}, validatedData, (withProofs ? {proofs: [signature]} : {signature: signature})));
                            })
                            .then(function (tx) {
                                return callback(__assign({}, exports.POST_TEMPLATE, {body: JSON.stringify(tx)}));
                            });
                    });
                };
            }

            exports.wrapTxRequest = wrapTxRequest;
            var _a;

        }, {"../config": 251, "../errors/WavesRequestError": 254, "../libs/fetch": 255, "parse-json-bignumber": 154}],
        259: [function (require, module, exports) {
            "use strict";
            var __assign = (this && this.__assign) || Object.assign || function (t) {
                for (var s, i = 1, n = arguments.length; i < n; i++) {
                    s = arguments[i];
                    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
                }
                return t;
            };
            Object.defineProperty(exports, "__esModule", {value: true});
            var waves_signature_generator_1 = require("@waves/waves-signature-generator");
            var txHelpers = require("../api/node/transactions.x");
// TODO : refactor this module and ugly dependency injections through names (like preIssue, postReissue, etc)
            var capitalize = function (name) {
                return name.slice(0, 1).toUpperCase() + name.slice(1);
            };
            var TransactionWrapper = /** @class */ (function () {
                function TransactionWrapper(signatureGenerator, validatedData, postRemap, proofs) {
                    this.signatureGenerator = signatureGenerator;
                    this.validatedData = validatedData;
                    this.postRemap = postRemap;
                    this.proofs = proofs;
                    this._privateKeys = [];
                }

                TransactionWrapper.prototype.addProof = function (privateKey) {
                    this._privateKeys.push(privateKey);
                    return this;
                };
                TransactionWrapper.prototype.getJSON = function () {
                    var _this = this;
                    return Promise.all(this._privateKeys.map(function (privateKey) {
                        return _this.signatureGenerator.getSignature(privateKey);
                    })).then(function (newProofs) {
                        return _this.postRemap(__assign({}, _this.validatedData, {proofs: [].concat(_this.proofs, newProofs)}));
                    });
                };
                return TransactionWrapper;
            }());
            exports.createTransaction = function (type, data) {
                var name = capitalize(type);
                var preRemap = txHelpers['pre' + name];
                var postRemap = txHelpers['post' + name];
                if (!preRemap || !postRemap || !waves_signature_generator_1.TX_TYPE_MAP[type]) {
                    throw new Error("Unknown transaction type: " + type);
                }
                var proofs = data.proofs || [];
                return preRemap(data).then(function (validatedData) {
                    var signatureGenerator = new waves_signature_generator_1.TX_TYPE_MAP[type](validatedData);
                    return new TransactionWrapper(signatureGenerator, validatedData, postRemap, proofs);
                });
            };

        }, {"../api/node/transactions.x": 248, "@waves/waves-signature-generator": 1}]
    }, {}, [236])(236)
});